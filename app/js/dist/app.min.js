"use strict";var _slicedToArray=function(){return function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return function(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i.return&&_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var app=angular.module("app",["ui.router","routesModule","LocalStorageModule","uiGmapgoogle-maps","ngProgress","ui-notification","ngMap","ui.select","ui.select2","ngSanitize","color.picker","ui.bootstrap","datatables","ngTagsInput","ngFileUpload","infinite-scroll","ui.tree","angularMoment","btorfs.multiselect","htmlToPdfSave","dndLists","angular.chips","ui.bootstrap.contextMenu","cloudinary","FileSaver","moment-picker"]);function config(NotificationProvider,uiGmapGoogleMapApiProvider,treeConfig,cloudinaryProvider){uiGmapGoogleMapApiProvider.configure({key:"AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",v:"3.exp",libraries:"places,weather,geometry,visualization"}),NotificationProvider.setOptions({delay:3e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"top"}),treeConfig.defaultCollapsed=!0,cloudinaryProvider.set("cloud_name","dktnhmsjx").set("upload_preset","cloudes_frontend")}function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("preLogin",{url:"/",templateUrl:"/partials/preLogin.html",controller:"preLoginCtrl as vm"}),$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"/partials/dashboard.html",controller:"dashboardCtrl as vm"}),$stateProvider.state("createProject",{url:"/create_project",templateUrl:"/partials/createProject.html",controller:"createProjectCtrl as vm"}),$stateProvider.state("visualPlanner",{url:"/visual_planner",templateUrl:"/partials/visualPlanner.html",controller:"visualPlannerCtrl as vm"}),$stateProvider.state("projects",{url:"/projects",templateUrl:"/partials/projects.html",controller:"projectCtrl as vm"}),$stateProvider.state("materials",{url:"/materials",templateUrl:"/partials/materials.html",controller:"materialCtrl as vm"}),$stateProvider.state("materialView",{url:"/material/:id",templateUrl:"/partials/materialView.html",controller:"materialViewCtrl as vm"}),$stateProvider.state("comboMaterialView",{url:"/combo_material/:id",templateUrl:"/partials/comboMaterialView.html",controller:"comboMaterialViewCtrl as vm"}),$stateProvider.state("equipments",{url:"/equipments",templateUrl:"/partials/equipments.html",controller:"equipmentCtrl as vm"}),$stateProvider.state("equipmentView",{url:"/equipmentView/:id",templateUrl:"/partials/equipmentView.html",controller:"equipmentViewCtrl as vm"}),$stateProvider.state("fileManager",{url:"/file_manager",templateUrl:"/partials/fileManager.html",controller:"fileManagerCtrl as vm"}),$stateProvider.state("fileManagerOld",{url:"/file_manager_old",templateUrl:"/partials/fileManager-old.html",controller:"fileManagerCtrl as vm"}),$stateProvider.state("payroll",{url:"/payroll",templateUrl:"/partials/payroll.html",controller:"payrollCtrl as vm"}),$stateProvider.state("calculation",{url:"/calculation",templateUrl:"/partials/calculation.html",controller:"calculationCtrl as vm"}),$stateProvider.state("report",{url:"/report",templateUrl:"/partials/reports.html",controller:"reportsCtrl as vm"}),$stateProvider.state("issues",{url:"/issues",templateUrl:"/partials/issues.html",controller:"issuesCtrl as vm"}),$stateProvider.state("issuesDetail",{url:"/issues_details/:id",templateUrl:"/partials/issues_details.html",controller:"issueDetailCtrl as vm"}),$stateProvider.state("reportsDetail",{url:"/reports_details/:id",templateUrl:"/partials/reportsdetails.html",controller:"reportDetailCtrl as vm"}),$stateProvider.state("billingArchive",{url:"/billing_archive",templateUrl:"/partials/billingArchive.html",controller:"billingArchiveCtrl as vm"}),$stateProvider.state("reportsListing",{url:"/reports_listing",templateUrl:"/partials/reportsListing.html",controller:"reportsListingCtrl as vm"}),$stateProvider.state("3dDashboard",{url:"/3d_dashboard",templateUrl:"/partials/3d-dashboard.html",controller:"_3dDashboardCtrl as vm"}),$stateProvider.state("setPassword",{url:"/set_password",templateUrl:"/partials/set_password.html",controller:"setPasswordCtrl as vm"}),$stateProvider.state("setting",{url:"/setting",templateUrl:"/partials/setting.html",controller:"settingCtrl as vm"}),$stateProvider.state("employees",{url:"/employees",templateUrl:"/partials/employee.html",controller:"employeesCtrl as vm"}),$stateProvider.state("3dviewer",{url:"/3dviewer",templateUrl:"/partials/3d-viewer.html",controller:"_3dviewerCtrl as vm"}),$stateProvider.state("clients",{url:"/clients",templateUrl:"/partials/clients.html",controller:"clientsCtrl as vm"}),$stateProvider.state("supplier",{url:"/supplier",templateUrl:"/partials/supplier.html",controller:"supplierCtrl as vm"}),$stateProvider.state("supplierDetail",{url:"/supplier_details/:id",templateUrl:"/partials/supplierdetails.html",controller:"supplierDetailCtrl as vm"}),$stateProvider.state("subcontractor",{url:"/subcontractor",templateUrl:"/partials/subcontractor.html",controller:"subcontractorCtrl as vm"}),$stateProvider.state("subcontractorDetail",{url:"/subcontractor_details/:id",templateUrl:"/partials/subcontractordetails.html",controller:"subcontractorDetailCtrl as vm"}),$stateProvider.state("meetingroom",{url:"/meetingroom",templateUrl:"/partials/meetingRoom.html",controller:"meetingRoomCtrl as vm"}),$stateProvider.state("calender",{url:"/calender",templateUrl:"/partials/calender.html",controller:"calenderCtrl as vm"}),$stateProvider.state("todo",{url:"/todo",templateUrl:"/partials/todo.html",controller:"todoCtrl as vm"}),$stateProvider.state("todoView",{url:"/todoView/:id",templateUrl:"/partials/todoView.html",controller:"todoViewCtrl as vm"}),$stateProvider.state("clientsDetail",{url:"/clients_detail/:id",templateUrl:"partials/clientsdetail.html",controller:"clientsDetailCtrl as vm"}),$stateProvider.state("systemtags",{url:"/systemtags",templateUrl:"partials/systemtags.html",controller:"systemTagsCtrl as vm"}),$stateProvider.state("economic",{url:"/economic",templateUrl:"/partials/economic.html",controller:"economicCtrl as vm"}),$stateProvider.state("addItem",{url:"/addItem",templateUrl:"/partials/addItem.html",controller:"addItemCtrl as vm"}),$stateProvider.state("createVariationsOrder",{url:"/createVariationsOrder",templateUrl:"/partials/createVariationsOrder.html",controller:"createVariationsOrderCtrl as vm"}),$stateProvider.state("invoice",{url:"/invoice",templateUrl:"/partials/invoice.html",controller:"invoiceCtrl as vm"}),$stateProvider.state("supplierDetails",{url:"/supplierDetails",templateUrl:"/partials/supplierDetails3.html",controller:"supplierDetailsCtrl as vm"}),$stateProvider.state("workingHours",{url:"/workingHours",templateUrl:"/partials/supplierDetails3.html",controller:"workingHoursCtrl as vm"}),$stateProvider.state("economicPayroll",{url:"/economicPayroll",templateUrl:"/partials/supplierDetails2.html",controller:"economicPayrollCtrl as vm"})}app.config(config),angular.module("routesModule",[]).config(routeConfig),function(){angular.module("app").factory("apiFactory",function($http,$state,$location,localStorageService,globals,Upload,Notification,$q){var _ref,url="https://api.staging.cloudes.eu",headers=function(method,token){return{"Content-Type":"GET"===method?void 0:"application/json","x-access-token":token?localStorageService.get("access-token"):void 0,platform:JSON.stringify({source:"web"})}},progress=globals.progress,logout=(globals.userStore,globals.logout);return _defineProperty(_ref={login:function(payload){var promise=this.progressify($http({url:url+"/authenticate",method:"POST",headers:headers("POST"),data:payload}));return promise},forgotPassword:function(payload){var promise=this.progressify($http({url:url+"/forgetPassword",method:"POST",headers:headers("POST"),data:payload}));return promise},registration:function(payload){var promise=this.progressify($http({url:url+"/dashboardRegistration",method:"POST",headers:headers("POST"),data:payload}));return promise},subscribe:function(payload){var promise=this.progressify($http({url:url+"/subscribe",method:"POST",headers:headers("POST"),data:payload}));return promise},getCompanyById:function(companyId){var promise=this.progressify($http({url:url+"/api/getCompanyById/"+companyId,method:"GET",headers:headers("GET",!0)}));return promise},listAllUsers:function(){var promise=this.progressify($http({url:url+"/api/getadminusers",method:"GET",headers:headers("GET",!0)}));return promise},listAllProjects:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllProjects"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllClients:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllClients"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllRoofers:function(){var promise=this.progressify($http({url:url+"/api/listAllRoofers",method:"GET",headers:headers("GET",!0)}));return promise},createProject:function(payload){var promise=this.progressify($http({url:url+"/api/createProject",method:"POST",headers:headers("POST",!0),data:payload}));return promise},createIssue:function(issueobj){console.log("in create issue api",issueobj);var promise=this.progressify(Upload.upload({url:url+"/api/createIssue",method:"POST",data:issueobj,headers:headers("POST",!0)}));return promise},createIssueS3Upload:function(issueobj){var promise=this.progressify(Upload.upload({url:url+"/api/createIssueForS3",method:"POST",data:issueobj,headers:headers("POST",!0)}));return promise},getIssueById:function(issueID){var promise=this.progressify($http({url:url+"/api/getIssueById/"+issueID,method:"GET",headers:headers("GET",!0)}));return promise},getClientById:function(clientID){var promise=this.progressify($http({url:url+"/api/getClientById/"+clientID,method:"GET",headers:headers("GET",!0)}));return promise},updateIssue:function(issueobj,id){var promise=this.progressify(Upload.upload({url:url+"/api/updateIssue/"+id,method:"PUT",data:issueobj,headers:headers("PUT",!0)}));return promise},getProjectRoofPlans:function(projectId){var promise=this.progressify($http({url:url+"/api/getProjectRoofPlans/"+projectId,method:"GET",headers:headers("GET",!0)}));return promise},saveRoofPlan:function(roofPlanId,payload){var promise=this.progressify($http({url:url+"/api/saveRoofPlan/"+roofPlanId,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},createMaterials:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createMaterial",data:payload,headers:headers("POST",!0)}));return promise},createEquipment:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createEquipment",data:payload,headers:headers("POST",!0)}));return promise},listAllMaterials:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllMaterials"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllComboMaterials:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listComboMaterials"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllEquipments:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllEquipments"+query,method:"GET",headers:headers("GET",!0)}));return promise},updateMaterialById:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateMaterialById/"+id,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},updateEquipmentById:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateEquipmentById/"+id,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},getMaterialById:function(materialID){var promise=this.progressify($http({url:url+"/api/getMaterialById/"+materialID,method:"GET",headers:headers("GET",!0)}));return promise},getComboMaterialById:function(comboId){var promise=this.progressify($http({url:url+"/api/getComboMaterialById/"+comboId,method:"GET",headers:headers("GET",!0)}));return promise},getEquipmentById:function(id){var promise=this.progressify($http({url:url+"/api/getEquipmentById/"+id,method:"GET",headers:headers("GET",!0)}));return promise},createComboMaterial:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createComboMaterial",method:"POST",headers:headers("POST",!0),data:payload}));return promise},updateComboMaterialList:function(id,payload){var promise=this.progressify($http({url:url+"/api/updateComboMaterialList/"+id,method:"PUT",headers:headers("POST",!0),data:payload}));return promise},updateComboMaterial:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateComboMaterial/"+id,method:"PUT",headers:headers("POST",!0),data:payload}));return promise},showConversionRate:function(payload){var promise=this.progressify($http({url:url+"/api/showConversionRate",method:"POST",headers:headers("POST",!0),data:payload}));return promise}},"getMaterialById",function(id){var promise=this.progressify($http({url:url+"/api/getMaterialById/"+id,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"progressify",function(promise){return new Promise(function(resolve,reject){progress.start(),promise.then(function(resp){progress.complete(),resolve(resp)}).catch(function(err){progress.complete(),401===err.status&&logout(),reject(err)})})}),_defineProperty(_ref,"listAllIssues",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllIssues"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getIssuesList",function(){var promise=this.progressify($http({url:url+"/api/allIssues",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"isTokenValid",function(payload){var promise=this.progressify($http({url:url+"/isTokenValid",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"setPassword",function(payload){var promise=this.progressify($http({url:url+"/resetPasswordAdmin",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"updateRoleBasedAccess",function(payload){var promise=this.progressify($http({url:url+"/api/updateRoleBasedAccess",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"addHierarchy",function(payload){var promise=this.progressify($http({url:url+"/api/addHierarchy",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"getHierarchyChildren",function(hierarchyId){var promise=this.progressify($http({url:url+"/api/getHierarchyChildren/"+hierarchyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getHierarchy",function(projectId){var promise=this.progressify($http({url:url+"/api/getHierarchy/"+projectId+"?depth=2",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"viewProjectAssets",function(projectId){var promise=this.progressify($http({url:url+"/api/viewProjectAssets/"+projectId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"addFileToHierarchy",function(payload){var promise=this.progressify($http({url:url+"/api/addFileToHierarchy",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"viewHierarchy",function(hierarchyId){var promise=this.progressify($http({url:url+"/api/viewHierarchy/"+hierarchyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"cloneAssets",function(payload){var promise=this.progressify($http({url:url+"/api/cloneAssets",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"uploadFileInFileManager",function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/uploadFileInFileManager",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"dragMoveNodes",function(payload){var promise=this.progressify($http({url:url+"/api/dragMoveNodes",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"moveAssets",function(payload){var promise=this.progressify($http({url:url+"/api/moveAssets",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"deleteAssets",function(payload){var promise=this.progressify($http({url:url+"/api/deleteAssets",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"get3DPage",function(){var token=localStorageService.get("access-token"),Data3D={"x-access-token":token,projectId:"5b697c030a7e97056835a94a"},promise=this.progressify($http({url:"https://cloudes-3d.com",method:"POST",data:Data3D}));return promise}),_defineProperty(_ref,"createClient",function(client){console.log("client in api factory",client);var promise=this.progressify($http({url:url+"/api/createClient",method:"POST",headers:headers("POST",!0),data:client}));return promise}),_defineProperty(_ref,"saveHierarchyTree",function(projectId,name){var promise=this.progressify($http({url:url+"/api/saveHierarchyTree/"+projectId,method:"PUT",headers:headers("POST",!0),data:name}));return promise}),_defineProperty(_ref,"getSystemTag",function(){var promise=this.progressify($http({url:url+"/api/getComboSystemTag",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"bookMarkProject",function(id,added){var promise=this.progressify($http({url:url+"/api/bookMarkProject",method:"PUT",data:{projectId:id,added:added},headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getBookmarks",function(){var promise=this.progressify($http({url:url+"/api/getBookmarks",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getHierarchyTemplate",function(){var promise=this.progressify($http({url:url+"/api/getHierarchyTemplate",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"loadHierarchyTree",function(payload){var promise=this.progressify($http({url:url+"/api/loadHierarchyTree",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"newFileUpload",function(payload){var promise=this.progressify($http({url:url+"/api/newFileUpload",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"showProjectFiles",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/showProjectFiles"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"changeProjectTemplate",function(payload){var promise=this.progressify($http({url:url+"/api/changeProjectTemplate",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"showProjectFiles",function(id,limit){var promise=this.progressify($http({url:url+"/api/showProjectFiles/"+id+"?limit="+limit,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getProjectById",function(id){var promise=this.progressify($http({url:url+"/api/getProjectById/"+id,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"checkAssetDuplicate",function(payload){var promise=this.progressify($http({url:url+"/api/checkAssetDuplicate",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"createNewSupplier",function(supplier){var promise=this.progressify(Upload.upload({url:url+"/api/addsupplier",method:"POST",data:supplier,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getAllSuppliers",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listallsuppliers"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getAllSubcontractors",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listallsubcontractor"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"addProjectRoofPlan",function(payload,projectId){var promise=this.progressify($http({url:url+"/api/addProjectRoofPlan",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"generateRoofPlans",function(payload){var promise=this.progressify($http({url:url+"/api/generateRoofPlans",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"addRoofPlansFromAsset",function(payload){var promise=this.progressify($http({url:url+"/api/addRoofPlansFromAsset",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"getSupplierById",function(supplierID){var promise=this.progressify($http({url:url+"/api/getsupplier/"+supplierID,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"createNewSubcontractor",function(subcontractor){var promise=this.progressify(Upload.upload({url:url+"/api/addsubcontractor",method:"POST",data:subcontractor,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getSubcontractorById",function(supplierID){var promise=this.progressify($http({url:url+"/api/getsubcontractor/"+supplierID,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"issueImage",function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/issueImage",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"newIssues3FileUpload",function(payload){console.log("IN S3 ISSUE FUNCTION");var promise=this.progressify($http({url:url+"/api/newIssues3FileUpload",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"postCommentForIssue",function(id,comment){console.log("Comment: ",comment);var promise=this.progressify($http({url:url+"/api/addcomment/"+id,method:"PUT",data:comment,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"saveLocalIssueAsset",function(files){var promise=this.progressify(Upload.upload({url:url+"/api/localFileImages",method:"POST",headers:headers("POST",!0),data:files}));return promise}),_defineProperty(_ref,"postMarkImg",function(dt){console.log("data: ",dt);var promise=this.progressify(Upload.upload({url:url+"/api/postmarkings",method:"POST",headers:headers("POST",!0),data:dt}));return promise}),_defineProperty(_ref,"reOpenIssueStatusUpdate",function(id){var promise=this.progressify($http({url:url+"/api/reopenStatus/"+id,method:"PUT",data:{completionStatus:"OPEN"},headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"getAllAtOnce",function(){var deferred=$q.defer(),infoPromise=$http({url:url+"/api/getadminusers",method:"GET",headers:headers("GET",!0)}),detailsPromise=$http({url:url+"/api/listAllRoofers",method:"GET",headers:headers("GET",!0)});$q.all([infoPromise,detailsPromise]).then(function(data){return deferred.resolve({fruitInfo:data[0],fruitDetails:data[1]}),deferred.promise})}),_defineProperty(_ref,"saveIssueAsComplete",function(id,object){console.log(object);var promise=this.progressify(Upload.upload({url:url+"/api/markissueascomplete/"+id,method:"PUT",data:object,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"addStaffMember",function(staff,id){var promise=this.progressify($http({url:url+"/api/addstaffmember/"+id,method:"PUT",data:staff,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"saveSystemTag",function(object){var promise=this.progressify($http({url:url+"/api/createTag",method:"POST",data:object,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getAllSystemTags",function(){var promise=this.progressify($http({url:url+"/api/getTagsList",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"deleteSystemTag",function(id){var promise=this.progressify($http({url:url+"/api/deletetag/"+id,method:"DELETE",headers:headers("DELETE",!0)}));return promise}),_defineProperty(_ref,"updateSubcontractor",function(subcontractor){var promise=this.progressify(Upload.upload({url:url+"/api/updatesubcontractor/"+subcontractor._id,method:"PUT",data:subcontractor,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"updateSupplier",function(supplier){console.log(supplier);var promise=this.progressify(Upload.upload({url:url+"/api/updatesupplier/"+supplier._id,method:"PUT",data:supplier,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"createTodoList",function(input){console.log(input);var promise=this.progressify($http({url:url+"/api/createTodo",method:"POST",data:input,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"listAllTodoList",function(id){var apiURL=id?"/api/getTodoList?todoId="+id:"/api/getTodoList",promise=this.progressify($http({url:url+apiURL,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"updateTodoList",function(id,object){var promise=this.progressify($http({url:url+"/api/updateTodoList/"+id,method:"PUT",data:object,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"getAllMembersInCurrentCompany",function(companyId){var promise=this.progressify($http({url:url+"/api/getCurrentCompanyMembers/"+companyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"createEvent",function(input){console.log(input);var promise=this.progressify(Upload.upload({url:url+"/api/createEvent",method:"POST",data:input,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"updateMyEvent",function(input,eventId){console.log(input);var promise=this.progressify($http({url:url+"/api/updateEvent/"+eventId,method:"PUT",data:input,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"getAllEvents",function(id){var apiURL=id?"/api/getAllEvents?eventId="+id:"/api/getAllEvents",promise=this.progressify($http({url:url+apiURL,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getAccessMeetingRoomToken",function(){var promise=$http({url:url+"/api/getAccessMeetingRoomToken",method:"GET",headers:headers("GET",!0)});return promise}),_defineProperty(_ref,"inviteUsersToMeeting",function(payload){var promise=this.progressify($http({url:url+"/api/inviteUsersToMeeting",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"newMeetingFileMessage",function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/newMeetingFileMessage",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getMeetingTodo",function(payload){var promise=$http({url:url+"/api/getMeetingTodo",method:"POST",data:payload,headers:headers("POST",!0)});return promise}),_defineProperty(_ref,"changeCompanyCurrency",function(payload){var promise=this.progressify($http({url:url+"/api/changeCompanyCurrency",method:"PUT",data:payload,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"getTwilioAccessToken",function(){var promise=this.progressify($http({url:url+"/api/getTwilioAccessToken",method:"GET",headers:headers("GET",!0)}));return promise}),_ref})}(),function(){angular.module("app").factory("authFactory",function($http,$location,localStorageService){return{checkUser:function(){var token=localStorageService.get("access-token");return!(!token||""==token)},checkPrivilege:function(type,subType){var _localStorageService$=localStorageService.get("userData"),privilege=_localStorageService$.privilege,_localStorageService$2=localStorageService.get("companyData"),privileges=_localStorageService$2.privileges;return privilege<=privileges[type][subType]}}})}(),function(){angular.module("app").factory("fileManagerFactory",function(apiFactory,Notification){return{clipBoard:(items={type:0,data:[],source:null},{copy:function(item){items.source=null,items.type=0,items.data=[item]},cut:function(item,source){items.source=source,items.type=1,items.data=[item]},paste:function(destId){return new Promise(function(resolve,reject){if(items.data.length<1)return Notification.warning("Clipboard is empty"),void resolve(!1);var apiType=0===items.type?"cloneAssets":"moveAssets",payload={assetId:items.data.map(function(x){return x._id}),sourceId:0===items.type?void 0:items.source,destId:0===items.type?void 0:destId,hierarchyId:0===items.type?destId:void 0};apiFactory[apiType](payload).then(function(resp){Notification.success(resp.data.message),items={type:0,data:[],source:null},resolve(!0)}).catch(function(e){console.log(e),reject(!1)})})}}),navigationStack:function(){var stack=[],head=stack.length-1;return{push:function(item){stack.splice(head+1,stack.length,item),head=stack.length-1},forward:function(){if(stack.length&&head!==stack.length-1)return stack[++head]?(stack[head].toggle(),stack[head]):void 0},backward:function(){if(stack.length&&!(head<0))return stack[head]?(stack[head].toggle(),stack[--head]):void 0}}},breadCrumb:function(){var breadCrumbs=[];return{set:function(val){breadCrumbs.push(val)},get:function(){return breadCrumbs}}},splitDestination:function(filesArray){return filesArray.reduce(function(acc,x){return x.size<5e7&&("application/pdf"===x.type||/image*/.test(x.type))?acc.cloudinary.push(x):acc.s3.push(x),acc},{s3:[],cloudinary:[]})},resolveDestType:function(file){return file.size<5e7&&("application/pdf"===file.type||/image*/.test(file.type))?2:1},checkUploadCompletion:function(files){var bool=!0;return files.s3.forEach(function(x){x.completed||x.aborted||!bool||(bool=!1)}),files.cloudinary.forEach(function(x){x.completed||x.aborted||!bool||(bool=!1)}),bool},checkDuplicateFiles:function(files,destId){return new Promise(function(resolve,reject){apiFactory.checkAssetDuplicate({assetNames:files.map(function(x){return x.name}),destId:destId}).then(function(resp){var duplicateFiles=files.map(function(x){return x.action="rename",x.assetName=x.name,x}).reduce(function(acc,x){return-1===resp.data.duplicates.indexOf(x.name)?acc.uploadFiles.push(x):acc.duplicates.push(x),acc},{duplicates:[],uploadFiles:[]});resolve(duplicateFiles)}).catch(function(e){reject(e)})})},checkNameChange:function(files){return files.filter(function(x){return"rename"===x.action}).reduce(function(acc,x){return acc=acc||x.assetName===x.name},!1)},generateVersion:function(fileName){return fileName+" (v"+Date.now()+")"},generateThumbnail:function(file){var reader=new FileReader;reader.onload=function(){pdfjsLib.getDocument({url:reader.result}).then(function(doc){doc.getPage(1).then(function(page){console.log("page!!!",page);var viewport=page.getViewport(1),canvas=document.createElement("canvas"),context=canvas.getContext("2d");canvas.height=viewport.height,canvas.width=viewport.width;var task=page.render({canvasContext:context,viewport:viewport});task.promise.then(function(){var dataURL=canvas.toDataURL("image/png"),link=document.createElement("a");link.download="roofplan_image_"+Date.now(),link.href=dataURL,document.body.appendChild(link),link.click(),document.body.removeChild(link)})})})},reader.readAsDataURL(file)},splitFileDest:function(filesArray){return filesArray.reduce(function(acc,x){return x.file.size<5e7&&("application/pdf"===x.file.type||/image*/.test(x.file.type))?acc.cloudinary.push(x):acc.s3.push(x),acc},{s3:[],cloudinary:[]})}};var items})}(),function(){angular.module("app").factory("globals",function($http,$state,$location,ngProgressFactory,Notification,localStorageService){var throttler=(enabled=!0,function(fn){enabled&&(enabled=!1,setTimeout(function(){enabled=!0}),fn())});var enabled;return{progress:(progressbar=ngProgressFactory.createInstance(),progressbar),logout:function(){localStorageService.remove("access-token"),localStorageService.remove("userData"),localStorageService.remove("companyData"),localStorageService.set("currentProject",null),localStorageService.remove("inventoryState"),$state.go("preLogin"),throttler(function(){return Notification.error("Please login")})},userStore:(userData=localStorageService.get("userData")||{},{set:function(data){return data.privilege=["admin","manager","sub_contractor","team_leader","worker"].indexOf(data.designation),localStorageService.set("userData",data),userData=data},get:function(){return userData},reset:function(){localStorageService.remove("userData"),userData={}}}),companyStore:(companyData=localStorageService.get("companyData")||null,{set:function(data){return localStorageService.set("companyData",data),companyData=data},get:function(){return companyData},refetch:function(id){$http({method:"GET",headers:{"x-access-token":localStorageService.get("access-token"),platform:JSON.stringify({source:"web"})},url:"https://api.staging.cloudes.eu/api/getCompanyById/"+id}).then(function(resp){localStorageService.set("companyData",resp.data)}).catch(function(e){console.log(e)})},reset:function(){localStorageService.remove("companyData"),companyData={}}}),projectStore:function(){localStorageService.get("currentProject");return{set:function(data){return localStorageService.set("currentProject",data),data},get:function(){return localStorageService.get("currentProject")},reset:function(){localStorageService.remove("currentProject"),null}}}(),inventoryState:function(){var state=localStorageService.get("inventoryState")||{tab:0,searchText:"",page:{material:1,combo:1}};return{setPage:function(type,value){state.page[type]=value,localStorageService.set("inventoryState",state)},setTab:function(val){state.tab=val,localStorageService.set("inventoryState",state)},text:function(_text){state.searchText=_text,localStorageService.set("inventoryState",state)},get:function(){return state}}},mUnits:[{name:"mt",value:"mt"},{name:"sq.mt",value:"sq.mt"},{value:"cu.mt",name:"cu.mt"},{name:"ft",value:"ft"},{name:"sq.ft",value:"sq.ft"},{value:"cu.ft",name:"cu.ft"},{value:"unit",name:"unit"}],getCurrency:function(){return $http.get("/data/currencies.json")},getCountryCode:function(){return $http.get("/data/CountryCode.json")},getIndustry:function(){return $http.get("/data/industry.json")},debounce:function(rate){var timer=void 0;return function(fn,args){clearTimeout(timer),timer=setTimeout(function(){fn.apply(null,args)},rate)}},genericStore:function(){var item=void 0;return{store:function(val){item=val},get:function(){return item}}},extractPagesFromPdf:function(pdfLink,pageCount){return[].concat(_toConsumableArray(Array(pageCount).keys())).reduce(function(acc,_,i){var pageObj={pageNo:i,url:pdfLink.replace("/upload/","/upload/pg_"+(i+1)+"/").replace(/\.pdf$/,".png"),title:"title_"+Date.now(),selected:!1,description:""};return acc.push(pageObj),acc},[])},createPagesFromPdf:function(pdf){return new Promise(function(resolve,reject){pdfjsLib.getDocument(pdf.secure_url).promise.then(function(doc){Promise.all([].concat(_toConsumableArray(Array(doc.numPages).keys())).map(function(_,i){return doc.getPage(i+1)})).then(function(pages){resolve(pages.map(function(x,i){return x.pageNo=i,x.title="title_"+Date.now(),x.selected=!1,x.description="",x}))}).catch(function(e){reject(e)})}).catch(function(e){console.log(e),reject(e)})})},renderPage:function(page,canvas){var viewport=page.getViewport(canvas.width/page.getViewport(1).width),context=canvas.getContext("2d");canvas.height=viewport.height;page.render({canvasContext:context,viewport:viewport})}};var companyData;var userData;var progressbar})}(),function(){angular.module("app").factory("issuecreateFactory",function($http,$state,$location,localStorageService,globals,Upload,Notification,$q,apiFactory,uploadFactory,fileManagerFactory){var _globals,vm=this,s3FileObjets=[];return headers=function(method,token){return{"Content-Type":"GET"===method?void 0:"application/json","x-access-token":token?localStorageService.get("access-token"):void 0,platform:JSON.stringify({source:"web"})}},_globals=globals,progress=_globals.progress,userStore=_globals.userStore,logout=_globals.logout,{getAllAtOnce:function(object,filesarray){if(console.log("OBJECT: ",object),console.log("ARRAY OF FILES: ",filesarray),console.log("ARRAY OF FILES s3: ",filesarray.s3),console.log("ARRAY OF FILES cloudinary: ",filesarray.cloudinary),$q.defer(),filesarray.s3.length&&filesarray.s3.forEach(function(x,i,array){console.log(x,i),uploadFactory.start(function(evaporate){x.file.pause=uploadFactory.pause.bind(evaporate,x),x.file.resume=uploadFactory.resume.bind(evaporate,x),x.file.abort=uploadFactory.abort.bind(evaporate,x);var addConfig={name:x.file.name,file:x.file,progress:function(p,stats){x.file.progress=x.file.progress>Math.round(100*p)?x.file.progress:Math.round(100*p),vm.completedAll=fileManagerFactory.checkUploadCompletion(filesarray)},complete:function(_xhr,awsKey){x.file.completed=!0,console.log("Complete!")}};evaporate.add(addConfig).then(function(awsObjectKey){console.log(x);var payload={type:fileManagerFactory.resolveDestType(x.file),assetData:{assetName:x.file.name,assetdescription:x.comment,bucket:"3dfilesdata",key:"test/"+x.file.name,mimetype:x.file.type,bytes:x.file.size}};$http({url:url+"/api/newIssues3FileUpload",method:"POST",data:payload,headers:headers("POST",!0)}).then(function(resp){console.log("s3 resp: ",resp),s3FileObjets.push(resp),i==filesarray.s3.length-1&&(alert("alerts called"),console.log(i),console.log("array:",x))}).catch(function(e){console.log(e)})},function(reason){x.aborted=!0,vm.completedAll=fileManagerFactory.checkUploadCompletion(filesarray)})})}),filesarray.cloudinary.length){var cloudinaryPayload={files:filesarray.cloudinary};Upload.upload({url:url+"/api/issueImage",method:"POST",data:cloudinaryPayload,headers:headers("POST",!0)}).then(function(resp){console.log("response of cloudinary: ",resp),vm.completedAll=fileManagerFactory.checkUploadCompletion(filesarray)}).catch(function(e){console.log(e)})}},sendData:function(object,files){console.log(object),console.log(files)}}})}(),function(){angular.module("app").factory("uploadFactory",function($http,$location,localStorageService,apiFactory,Upload,cloudinary,Notification){var config={signerUrl:"https://api.staging.cloudes.eu/signv4_auth",aws_key:"AKIAJMO3YJTPKYV5DN5A",bucket:"3dfilesdata/test",awsRegion:"ap-south-1",computeContentMd5:!0,allowS3ExistenceOptimization:!0,cryptoMd5Method:function(data){return AWS.util.crypto.md5(data,"base64")},cryptoHexEncodedHash256:function(data){return AWS.util.crypto.sha256(data,"hex")}};return{init:function(){return Evaporate.create(config)},start:function(handler){var fileUpload=this.init();fileUpload.then(handler).catch(function(e){console.log(e)})},pause:function(file){this.pause("3dfilesdata/test/"+file.name,{force:!0}).then(function(){file.isPaused=!0,console.log("Paused!")}).catch(function(e){console.log(e)})},resume:function(file){this.resume("3dfilesdata/test/"+file.name).then(function(){file.isPaused=!1,console.log("Resumed!")}).catch(function(e){console.log(e)})},abort:function(file){this.cancel("3dfilesdata/test/"+file.name).then(function(){console.log("Canceled!")}).catch(function(e){console.log(e)})}}})}(),function(){angular.module("app").factory("SBchannel",function($http,$location,localStorageService,apiFactory,SBcommon,Notification){var sb=SBcommon.getInstance();return{createChannel:function(channelName,user,project){return new Promise(function(resolve,reject){var params=new sb.GroupChannelParams;params.isPublic=!1,params.isEphemeral=!1,params.isDistinct=!1,params.addUserIds(user),params.operators=user,params.name=channelName,params.customType=project,sb.GroupChannel.createChannel(params,function(groupChannel,error){error?reject(err):resolve(groupChannel)})})},listChannels:function(projectId){return new Promise(function(resolve,reject){var channelListQuery=sb.GroupChannel.createMyGroupChannelListQuery();channelListQuery.includeEmpty=!0,channelListQuery.customTypesFilter=[projectId],channelListQuery.hasNext&&channelListQuery.next(function(channelList,error){error?reject(err):resolve(channelList)})})},inviteUsers:function(channel,users){return new Promise(function(resolve,reject){channel.inviteWithUserIds(users,function(resp,error){error?reject(error):resolve(resp)})})},getChannelMessages:function(channel){return new Promise(function(resolve,reject){var prevMessageListQuery=channel.createPreviousMessageListQuery();prevMessageListQuery.limit=30,prevMessageListQuery.reverse=!1,prevMessageListQuery.load(function(messages,error){error?reject(err):(channel.messages=messages,resolve(channel))})})},getChannelFiles:function(channel){return new Promise(function(resolve,reject){var prevMessageListQuery=channel.createPreviousMessageListQuery();prevMessageListQuery.limit=30,prevMessageListQuery.reverse=!0,prevMessageListQuery.messageTypeFilter=2,prevMessageListQuery.load(function(files,error){error?reject(err):(channel.files=files,resolve(channel))})})},sendMessage:function(channel,message){return new Promise(function(resolve,reject){channel.sendUserMessage(message,"meetingRoomMessage",function(message,error){error?reject(error):resolve(channel)})})},sendFileMessage:function(channel,files){var promiseArray=[],_loop=function(file){var promise=new Promise(function(resolve,reject){channel.sendFileMessage(file.secure_url,file.assetName,file.format,file.bytes,"","",function(fileMessage,error){error&&reject(error),resolve(fileMessage)})});promiseArray.push(promise)},_iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=files[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var file=_step.value;_loop(file)}}catch(err){_didIteratorError=!0,_iteratorError=err}finally{try{!_iteratorNormalCompletion&&_iterator.return&&_iterator.return()}finally{if(_didIteratorError)throw _iteratorError}}return promiseArray}}})}(),function(){angular.module("app").factory("SBcommon",function($http,$location,localStorageService,Notification){var sb=new SendBird({appId:"C83D94E0-F82E-4F22-A7AD-F9922569AAB4"});return{getInstance:function(){return sb},connect:function(id,token){return new Promise(function(resolve,reject){sb.disconnect(function(){sb.connect(id,token,function(user,err){err?reject(err):resolve(user)})})})},disconnect:function(){return new Promise(function(resolve,reject){sb.disconnect(function(){resolve("Disconnected successfully")})})},store:function(){var data={user:null,currentMeeting:null};return{get:function(){var prop=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return prop?data[prop]:data},set:function(prop,val){data[prop]=val},reset:function(){data=Object.keys(data).reduce(function(acc,x){return acc[x]=null,acc},{})}}},error:function(e){Notification.error("Something went wrong"),console.log(e)}}})}(),function(){angular.module("app").factory("SBevents",function($http,$location,$rootScope,localStorageService,SBcommon,Notification){var sb=SBcommon.getInstance();return{init:function(){var newMessageHandler=new sb.ChannelHandler;newMessageHandler.onMessageReceived=function(channel,message){$rootScope.$broadcast("newMeeingRoomMessage",{channel:channel,message:message})},sb.addChannelHandler("messageReceived",newMessageHandler);var newUserJoined=new sb.ChannelHandler;newUserJoined.onUserJoined=function(channel,user){$rootScope.$broadcast("newChannelJoined",{channel:channel,user:user})},sb.addChannelHandler("newChannelJoined",newUserJoined);var typingStatusHandler=new sb.ChannelHandler;typingStatusHandler.onTypingStatusUpdated=function(channel){$rootScope.$broadcast("typingStatus",{channel:channel})},sb.addChannelHandler("typingStatus",typingStatusHandler)}}})}(),function(){angular.module("app").factory("commonVPFactory",function($rootScope){return{createStage:function(divId,initialSize,plannerData){var stage;plannerData&&plannerData.jsonString?((stage=Konva.Node.create(plannerData.jsonString,"stage")).width(initialSize.width),stage.height(initialSize.height)):stage=new Konva.Stage({container:divId,x:1,y:1,width:initialSize.width,height:initialSize.height});var getStageSize=this.getStageSize;return stage.on("windowResized",function(){var dimensions=getStageSize(divId);stage.width(dimensions.width),stage.height(dimensions.height),stage.draw()}),stage},getStageSize:function(divId){var el=document.getElementById(divId);return{height:el.clientHeight,width:el.clientWidth}},shapeId:function(){var defaultCount={shapes:{rectangle:0,square:0,circle:0,ellipse:0,calibrator:0,freeHand:0,polygon:0},markings:{line:0,singleArrow:0,doubleArrow:0,bezier:0,freehand:0,text:0,selection:0},measurement:{rectangle:0,square:0,circle:0,ellipse:0,calibrator:0,polygon:0,freeHand:0}},currentCount=defaultCount;return{load:function(count){currentCount=count},getCount:function(type,shape){return currentCount[type][shape]++,currentCount[type][shape]},get:function(){return currentCount},reset:function(){currentCount=defaultCount}}},drawState:function(){var initialDrawStates={shapes:{rectangle:!1,square:!1,circle:!1,ellipse:!1,calibrator:!1,polygon:!1},markings:{line:!1,singleArrow:!1,doubleArrow:!1,bezier:!1,freehand:!1,text:!1,selection:!1},measurement:{rectangle:!1,square:!1,circle:!1,ellipse:!1,calibrator:!1,polygon:!1,freeHand:!1}},drawStates=angular.copy(initialDrawStates);return{set:function(type){var keys=type.split(".");this.reset(),drawStates[keys[0]][keys[1]]=!0,$rootScope.$broadcast("drawStateChange",drawStates)},check:function(type){var keys=type?type.split("."):"";return type?drawStates[keys[0]][keys[1]]:drawStates},reset:function(){drawStates=angular.copy(initialDrawStates),$rootScope.$broadcast("drawStateChange",drawStates)}}},calibrationState:function(){var state={value:1,unit:"units"};return{set:function(obj){state=obj},get:function(){return state}}},actionStates:function(actions){var stack=actions||[],head=stack.length-1;return{push:function(val){stack.splice(head+1,stack.length,val),head=stack.length-1},show:function(){return stack},peek:function(){return stack[head]},undo:function(){head>-1&&(stack[head].delete(),head-=1)},redo:function(){head<stack.length&&(head=head===stack.length-1?head:head+1,stack[head].restore())}}},actionHandler:function(stage,entity,process,actionType,props){var entity=entity,stage=stage,process=process,props=props,handlers={create:{delete:function(){entity.remove(),stage.batchDraw()},restore:function(){process.add(entity),stage.batchDraw()}},move:{delete:function(){entity.position(props.start),stage.batchDraw()},restore:function(){entity.position(props.end),stage.batchDraw()}},delete:{delete:function(){process.add(entity),stage.batchDraw()},restore:function(){entity.remove(),stage.batchDraw()}},shapeProps:{delete:function(){for(var key in props.start)entity[key](props.start[key]);stage.batchDraw()},restore:function(){for(var key in props.end)entity[key](props.end[key]);stage.batchDraw()}}};return{entity:entity,restore:handlers[actionType].restore,delete:handlers[actionType].delete}},movement:function(){var start;return{add:function(position){if(start)return{start:start,end:position};start=position}}},shapePropertyHistory:function(){var start;return{add:function(props){if(start)return{start:start,end:props};start=props}}},transformers:function(layer){var layer=layer,transformers=[];return{add:function(transformer){transformers.push(transformer)},removeAll:function(){angular.forEach(transformers,function(x){x.remove()}),layer.draw()}}},dragOffset:function(stagePosition,layerOffset,stageScale){return{x:(stagePosition.x-layerOffset.x)/stageScale.x,y:(stagePosition.y-layerOffset.y)/stageScale.y}},selectedShape:function(shape){return{get:function(){return shape},set:function(val){shape=val},reset:function(){shape=void 0}}},selectionStore:function(){var selections=[];return{store:function(shapes){selections=shapes},get:function(){return selections},pull:function(shapeName){selections=selections.filter(function(shape){return shape.name()!==shapeName})},push:function(shape){var shapeNames=selections.map(function(shape){return shape.name()});shapeNames.indexOf(shape.name())>-1||selections.push(shape)},clear:function(){selections=[]}}},associations:function(){var associations={},methods={createAssociation:function(shapeId,entityId,type){var key=shapeId+"-"+entityId+"-"+Date.now();return associations[key]={shapeId:shapeId,entityId:entityId,type:type},key},getAssociations:function(key){return key?associations[key]:associations},getAssociationsForSave:function(){return Object.keys(associations).reduce(function(acc,x){var obj={shapeId:associations[x].shapeId,type:associations[x].type};switch(associations[x].type){case 1:obj.materialId=associations[x].entityId;break;case 2:obj.comboId=associations[x].entityId;break;case 3:obj.equipmentId=associations[x].entityId}return acc.push(obj),acc},[])},removeAssociation:function(key){associations[key]=void 0},reset:function(){associations={}}};return Object.freeze(methods)}}})}(),function(){angular.module("app").factory("eventsVPFactory",function($rootScope){return{windowEvents:function(windowObject){var entities=[];return windowObject.addEventListener("resize",function(ev){angular.forEach(entities,function(v){v.fire("windowResized")})}),{register:function(entity){entities.push(entity)},show:function(){}}},stageEvents:function(stage){var stage=stage,events=[];return{register:function(event,handler){stage&&(events.push(event),stage.on(event,handler))}}},shapeEvents:function(shape){var shape=shape,events=[];return{register:function(event,handler){events.indexOf(event)>-1||(events.push(event),shape.on(event,handler))}}},layerEvents:function(layer){var layer=layer,events=[];return{register:function(event,handler){events.indexOf(event)>-1||(events.push(event),layer.on(event,handler))}}}}})}(),function(){angular.module("app").factory("layersVPFactory",function($rootScope){return{createLayer:function(stage){var layer=new Konva.Layer;return stage.add(layer),layer},initiateProcess:function(stage,baseLayer){var head,processes=[];return{createProcess:function(){var group=new Konva.Group({name:"process-"+Date.now()});processes.push(group),head=processes.length-1,baseLayer.add(group)},getProcesses:function(){return processes},getCurrent:function(){return processes[head]},setCurrent:function(index){head=index},showProcess:function(index){void 0!==index?baseLayer.add(processes[index]):angular.forEach(processes,function(x){baseLayer.add(x)}),baseLayer.draw()},hideProcess:function(index){void 0!==index?processes[index].remove():angular.forEach(processes,function(x){x.remove()}),baseLayer.draw()},loadProcesses:function(processesFromJson){head=(processes=processesFromJson).length-1}}}}})}(),function(){angular.module("app").factory("shapesVPFactory",function($rootScope,eventsVPFactory,commonVPFactory,toolsVPFactory){var createdShape,shapeTools,shapeId=commonVPFactory.shapeId(),polygonOptions={init:!1,points:[],pointSet:!0};return{getShapeTools:function(obj){shapeTools=obj},loadShapeId:function(obj){shapeId.load(obj)},getShapeId:function(){return shapeId.get()},createShape:function(type,position){if(createdShape)return{start:!1,shape:createdShape};var shape,shapeProps=shapeTools.get();switch(type){case 0:shape=new Konva.Line({points:[position.x,position.y,position.x,position.y,position.x,position.y,position.x,position.y,position.x,position.y],stroke:shapeProps.stroke||"black",name:"Rect"+shapeId.getCount("shapes","rectangle"),strokeWidth:shapeProps.strokeWidth||1,fill:shapeProps.fill,draggable:!0,closed:!0});break;case 1:shape=new Konva.Ellipse({x:position.x,y:position.y,radius:{x:1,y:1},stroke:shapeProps.stroke||"black",name:"Ellipse"+shapeId.getCount("shapes","ellipse"),strokeWidth:shapeProps.strokeWidth||1,fill:shapeProps.fill,draggable:!0})}return{start:!0,shape:createdShape=shape}},drawShape:function(position,shapeLock,misc){if(createdShape)switch(createdShape.className){case"Line":this.drawRectangle(position,createdShape,shapeLock,misc);break;case"Ellipse":createdShape.radius({x:Math.abs(position.x-createdShape.x()),y:Math.abs(shapeLock?position.x-createdShape.x():position.y-createdShape.y())})}},drawRectangle:function(position,shape,shapelock,misc){var points=shape.points();switch(points[4]=position.x,points[5]=shapelock?Math.abs(points[1]+(position.x-points[0])):position.y,points[7]=shapelock?Math.abs(points[1]+(position.x-points[0])):position.y,points[2]=position.x,misc){case"grabber":shape.dash([10,10]);break;case"wrapper":shape.stroke("grey"),shape.draggable(!1)}shape.points(points)},destroyShape:function(){createdShape=void 0,polygonOptions={init:!1,points:[],pointSet:!0}},cancelDrawing:function(selection){var selectionPoints=createdShape.points();return document.body.style.cursor="default",createdShape&&createdShape.remove(),createdShape=void 0,polygonOptions={init:!1,points:[],pointSet:!0},selectionPoints},createPolygon:function(position,freeHand,freeHandMarker){if(!polygonOptions.init&&!createdShape){var shapeProps=shapeTools.get();return polygonOptions.points=[position.x,position.y],createdShape=freeHandMarker?new Konva.Line({name:"markerFreeHand"+shapeId.getCount("markings","freehand"),points:polygonOptions.points,fill:shapeProps.fill,stroke:shapeProps.stroke||"black",strokeWidth:shapeProps.strokeWidth||1}):new Konva.Line({name:freeHand?"freeHand"+shapeId.getCount("shapes","freeHand"):"polygon"+shapeId.getCount("shapes","polygon"),points:polygonOptions.points,fill:shapeProps.fill,stroke:shapeProps.stroke||"black",strokeWidth:shapeProps.strokeWidth||1}),polygonOptions.init=!0,{start:!0,polygon:createdShape}}return freeHandMarker?(polygonOptions.pointSet=!0,createdShape.draggable(!0),{start:!1,polygon:createdShape}):this.checkThreshold(position)?(polygonOptions.points.splice(-2),polygonOptions.points.push(polygonOptions.points[0],polygonOptions.points[1]),createdShape.points(polygonOptions.points),polygonOptions.pointSet=!0,createdShape.closed(!0),createdShape.draggable(!0),{start:!1,polygon:createdShape}):(polygonOptions.points.splice(-2),polygonOptions.points.push(position.x,position.y),createdShape.points(polygonOptions.points),void(polygonOptions.pointSet=!0))},drawPolygon:function(position,freeHand){createdShape&&(freeHand?(polygonOptions.points.push(position.x,position.y),createdShape.points(polygonOptions.points)):polygonOptions.pointSet?(polygonOptions.points.push(position.x,position.y),polygonOptions.pointSet=!1,createdShape.points(polygonOptions.points)):(polygonOptions.points[polygonOptions.points.length-2]=position.x,polygonOptions.points[polygonOptions.points.length-1]=position.y,createdShape.points(polygonOptions.points)))},createLine:function(position,type){if(createdShape)return{start:!1,line:createdShape};var line,shapeProps=shapeTools.get();switch(type){case"line":line=new Konva.Line({name:"lineSimple"+shapeId.getCount("markings","line"),points:[position.x,position.y],strokeWidth:shapeProps.strokeWidth||1,stroke:shapeProps.stroke||"black",draggable:!0});break;case"singleArrow":line=new Konva.Arrow({name:"lineArrow"+shapeId.getCount("markings","singleArrow"),points:[position.x,position.y],strokeWidth:1,stroke:shapeProps.stroke||"black",fill:shapeProps.fill||"black",draggable:!0,pointerLength:10,pointerWidth:10});break;case"doubleArrow":line=new Konva.Arrow({name:"lineArrowDouble"+shapeId.getCount("markings","doubleArrow"),points:[position.x,position.y],strokeWidth:shapeProps.strokeWidth||1,stroke:shapeProps.stroke||"black",fill:shapeProps.fill||"black",draggable:!0,pointerLength:10,pointerWidth:10,pointerAtBeginning:!0})}return{start:!0,line:createdShape=line}},drawLine:function(position){if(createdShape){var points=createdShape.points();points[2]=position.x,points[3]=position.y,createdShape.points(points)}},createBezierLine:function(position){if(createdShape){var createdPoints=createdShape.points(),q=[.5*(createdPoints[2]-createdPoints[0])+createdPoints[0],.5*(createdPoints[3]-createdPoints[1])+createdPoints[1]];createdPoints[2],createdPoints[0],createdPoints[0],createdPoints[3],createdPoints[1],createdPoints[1],createdPoints[2],createdPoints[0],createdPoints[0],createdPoints[3],createdPoints[1],createdPoints[1];return createdPoints.push(q[0],q[1]),createdShape.points(createdPoints),createdShape.tension(1.1),{start:!1,line:createdShape}}var shapeProps=shapeTools.get(),bezier=new Konva.Line({name:"bezier"+shapeId.getCount("markings","bezier"),lineJoin:"round",points:[position.x,position.y],strokeWidth:shapeProps.strokeWidth||1,stroke:shapeProps.stroke||"black",draggable:!0});return{start:!0,line:createdShape=bezier}},drawBezierLine:function(position){if(createdShape){var points=createdShape.points();points[2]=position.x,points[3]=position.y,createdShape.points(points)}},createText:function(props){var textShape=new Konva.Text({x:props.position.x,y:props.position.y,name:"text",text:"Placeholder text",width:props.width,fontSize:16,fontFamily:"Calibri",fill:"black"});return textShape},createTextGroup:function(){var textGroup=new Konva.Group({name:"textGroup"+shapeId.getCount("markings","text"),draggable:!0});return textGroup},calibrator:function(stage,layer){var line,points=[],isDone=!1,init=!0;return function(position,set,kill){if(kill)return line.destroy(),void layer.draw();position={x:position.x/stage.scale().x,y:position.y/stage.scale().y},isDone||(init&&set?(points.push(position.x,position.y),line=new Konva.Line({points:points,fill:"grey",stroke:"black",strokeWidth:1,dash:[5,1]}),init=!1,layer.add(line)):init||(set?(points[2]=position.x,points[3]=position.y,line.points(points),isDone=!0,$rootScope.$broadcast("calibrated",line)):(points[2]=position.x,points[3]=position.y,line.points(points)))),layer.draw()}},checkThreshold:function(position){var xUpperThreshold=polygonOptions.points[0]+10,yUpperThreshold=polygonOptions.points[1]+10,xLowerThreshold=polygonOptions.points[0]-10,yLowerThreshold=polygonOptions.points[1]-10;return xUpperThreshold>position.x&&xLowerThreshold<position.x&&yUpperThreshold>position.y&&yLowerThreshold<position.y},extractAllShapes:function(layer){var allShapes=layer.find("Group").reduce(function(acc,x){return/process*/.test(x.name())&&angular.forEach(x.getChildren(),function(child){acc.push(child)}),acc},[]);return allShapes},selectShapes:function(layer,points){var allShapes=this.extractAllShapes(layer),min=(points[0],points[1],points[4],points[5],{x:points[0]>points[4]?points[4]:points[0],y:points[1]>points[5]?points[5]:points[1]}),max={x:points[0]<points[4]?points[4]:points[0],y:points[1]<points[5]?points[5]:points[1]},checkSelection=this.checkSelection,selectedShapes=allShapes.filter(function(x){var shapeName=x.name();if(/Rect*/.test(shapeName)||/polygon*/.test(shapeName)||/freeHand*/.test(shapeName)||/markerFreeHand/.test(shapeName)){for(var points=x.points(),positionOffset=x.position(),vertices=[],i=0;i<points.length-2;i+=2)vertices.push([points[i]+positionOffset.x,points[i+1]+positionOffset.y]);return checkSelection({min:min,max:max},vertices,"rectangle")}if(/line*/.test(shapeName)){for(var points=x.points(),positionOffset=x.position(),vertices=[],i=0;i<points.length;i+=2)vertices.push([points[i]+positionOffset.x,points[i+1]+positionOffset.y]);return checkSelection({min:min,max:max},vertices,"rectangle")}return!!/Ellipse*/.test(shapeName)&&checkSelection({min:min,max:max},x.position(),"ellipse")});return selectedShapes},checkSelection:function(range,prop,type){if("rectangle"===type){for(var i=0;i<prop.length;i++)if(prop[i][0]>=range.min.x&&prop[i][0]<=range.max.x&&prop[i][1]>=range.min.y&&prop[i][1]<=range.max.y)return!0;return!1}if("ellipse"===type)return prop.x>=range.min.x&&prop.x<=range.max.x&&prop.y>=range.min.y&&prop.y<=range.max.y}}})}(),function(){angular.module("app").factory("toolsVPFactory",function($rootScope,eventsVPFactory){return{polygonArea:function(points,scale){for(var result,det=0,chunkedArray=[],chunk=[],i=0;i<points.length;i++)chunk.length<2?chunk.push(points[i]):(chunkedArray.push({x:chunk[0],y:chunk[1]}),(chunk=[]).push(points[i]));var l=chunkedArray.length;chunkedArray[0]!=chunkedArray[chunkedArray.length-1]&&(chunkedArray=chunkedArray.concat(chunkedArray[0]));for(var i=0;i<l;i++)det+=chunkedArray[i].x*chunkedArray[i+1].y-chunkedArray[i].y*chunkedArray[i+1].x;return result=scale?Math.abs(det)/2*scale:Math.abs(det)/2,Number.parseFloat(result).toFixed(2)},rectangleArea:function(height,width,scale){var area=height*width*scale;return area},ellipseArea:function(radii,scale){var area=Math.PI*radii.x*radii.y,result=scale?area*scale:area;return Number.parseFloat(result).toFixed(2)},ellipseTransfomer:function(stage,layer,ellipse){var vertices=[],group=new Konva.Group({name:"transformers"});return{set:function(radius){var ellipsePosition=ellipse.position();vertices.push([ellipsePosition.x-radius.x,ellipsePosition.y],[ellipsePosition.x+radius.x,ellipsePosition.y],[ellipsePosition.x,ellipsePosition.y+radius.y],[ellipsePosition.x,ellipsePosition.y-radius.y]);var inc=0;return angular.forEach(vertices,function(x,$index){var circle=new Konva.Circle({x:x[0],y:x[1],radius:5/layer.scaleX(),name:($index+inc).toString()+","+($index+inc+1).toString(),fill:"white",stroke:"black",strokeWidth:3/layer.scaleX(),dragBoundFunc:function(pos){return{x:$index>1?this.getAbsolutePosition().x:pos.x,y:$index<=1?this.getAbsolutePosition().y:pos.y}},draggable:!0});inc++;var circleEvent=eventsVPFactory.shapeEvents(circle);circleEvent.register("dragmove.transformer",function(){var previousRadius=ellipse.radius(),selectedVertex=circle.name(),isNegative=!1;switch(selectedVertex){case"0,1":isNegative=ellipse.position().x-circle.x()<0,ellipse.radius({x:Math.abs(ellipse.position().x-circle.x()),y:previousRadius.y}),angular.forEach(group.children,function(z){"2,3"===z.name()&&(isNegative?z.x(ellipse.position().x-ellipse.radius().x):z.x(ellipse.position().x+ellipse.radius().x))});break;case"2,3":isNegative=ellipse.position().x-circle.x()<0,ellipse.radius({x:Math.abs(ellipse.position().x-circle.x()),y:previousRadius.y}),angular.forEach(group.children,function(z){"0,1"===z.name()&&(isNegative?z.x(ellipse.position().x-ellipse.radius().x):z.x(ellipse.position().x+ellipse.radius().x))});break;case"4,5":isNegative=ellipse.position().y-circle.y()<0,ellipse.radius({x:previousRadius.x,y:Math.abs(ellipse.position().y-circle.y())}),angular.forEach(group.children,function(z){"6,7"===z.name()&&(isNegative?z.y(ellipse.position().y-ellipse.radius().y):z.y(ellipse.position().y+ellipse.radius().y))});break;case"6,7":isNegative=ellipse.position().y-circle.y()<0,ellipse.radius({x:previousRadius.x,y:Math.abs(ellipse.position().y-circle.y())}),angular.forEach(group.children,function(z){"4,5"===z.name()&&(isNegative?z.y(ellipse.position().y-ellipse.radius().y):z.y(ellipse.position().y+ellipse.radius().y))})}layer.draw(),ellipse.fire("transformEllipse")}),circleEvent.register("scaleOnZoom",function(e){e.target.radius(5/layer.scaleX()),e.target.strokeWidth(3/layer.scaleX()),layer.draw()}),circleEvent.register("mouseenter",function(e){document.body.style.cursor="move"}),circleEvent.register("mouseleave",function(e){document.body.style.cursor="default"}),group.add(circle)}),ellipse.fire("transformEllipse"),!0,layer.add(group),group},getGroup:function(){return group},destroy:function(){group.destroy()}}},customTransformer:function(stage,layer,polygon,isRectangle){var vertices=[],group=new Konva.Group({name:"transformers"}),polygon=polygon;return{set:function(points){for(var i=0;i<points.length-2;i+=2)vertices.push([points[i],points[i+1]]);var inc=0;return angular.forEach(vertices,function(x,$index){var circle=new Konva.Circle({x:x[0],y:x[1],radius:5/layer.scaleX(),name:($index+inc).toString()+","+($index+inc+1).toString(),fill:"white",stroke:"black",strokeWidth:3/layer.scaleX(),draggable:!0});inc++;var circleEvent=eventsVPFactory.shapeEvents(circle);circleEvent.register("dragmove.transformer",function(e){if(isRectangle){var selectedVertex=circle.name();switch(selectedVertex){case"0,1":vertices[0]=[circle.x(),circle.y()],vertices[1][1]=circle.y(),vertices[3][0]=circle.x(),angular.forEach(group.children,function(z){"6,7"===z.name()&&z.x(circle.x()),"2,3"===z.name()&&z.y(circle.y())});break;case"2,3":vertices[1]=[circle.x(),circle.y()],vertices[0][1]=circle.y(),vertices[2][0]=circle.x(),angular.forEach(group.children,function(z){"4,5"===z.name()&&z.x(circle.x()),"0,1"===z.name()&&z.y(circle.y())});break;case"4,5":vertices[2]=[circle.x(),circle.y()],vertices[3][1]=circle.y(),vertices[1][0]=circle.x(),angular.forEach(group.children,function(z){"2,3"===z.name()&&z.x(circle.x()),"6,7"===z.name()&&z.y(circle.y())});break;case"6,7":vertices[3]=[circle.x(),circle.y()],vertices[2][1]=circle.y(),vertices[0][0]=circle.x(),angular.forEach(group.children,function(z){"0,1"===z.name()&&z.x(circle.x()),"4,5"===z.name()&&z.y(circle.y())})}}else{var temp=[];angular.forEach(group.children,function(x){temp.push([x.x(),x.y()])}),vertices=angular.copy(temp)}polygon.fire("transformPolygon")}),circleEvent.register("scaleOnZoom",function(e){e.target.radius(5/layer.scaleX()),e.target.strokeWidth(3/layer.scaleX()),layer.draw()}),circleEvent.register("mouseenter",function(e){document.body.style.cursor="move"}),circleEvent.register("mouseleave",function(e){document.body.style.cursor="default"}),group.add(circle)}),!0,layer.add(group),group},update:function(offset){group.x(offset.x),group.y(offset.y),layer.draw()},getPoints:function(){return vertices.reduce(function(acc,x,i){return acc.push(x[0],x[1]),i===vertices.length-1&&acc.push(vertices[0],vertices[1]),acc},[])},getGroup:function(){return group}}},bezierTransformer:function(stage,layer,bezier){var vertices=[],group=new Konva.Group({name:"transformers"}),bezier=bezier;return{set:function(points){for(var i=0;i<points.length;i+=2)vertices.push([points[i],points[i+1]]);var inc=0;return angular.forEach(vertices,function(x,$index){var circle=new Konva.Circle({x:x[0],y:x[1],radius:5/layer.scaleX(),name:($index+inc).toString()+","+($index+inc+1).toString(),fill:"white",stroke:"black",strokeWidth:3/layer.scaleX(),draggable:!0});inc++;var circleEvent=eventsVPFactory.shapeEvents(circle);circleEvent.register("dragmove.transformer",function(e){var temp=[];angular.forEach(group.children,function(x){temp.push([x.x(),x.y()])}),vertices=angular.copy(temp),bezier.fire("transformBezier")}),circleEvent.register("scaleOnZoom",function(e){e.target.radius(5/layer.scaleX()),e.target.strokeWidth(3/layer.scaleX()),layer.draw()}),circleEvent.register("mouseenter",function(e){document.body.style.cursor="move"}),circleEvent.register("mouseleave",function(e){document.body.style.cursor="default"}),group.add(circle)}),!0,layer.add(group),group},update:function(offset){group.x(offset.x),group.y(offset.y),layer.draw()},getPoints:function(){return vertices.reduce(function(acc,x,i){return acc.push(x[0],x[1]),i===vertices.length-1&&acc.push(vertices[0],vertices[1]),acc},[])},getGroup:function(){return group}}},scaleTransformerBasedOnZoom:function(baseLayer){var transformerGroup=baseLayer.find(".transformers");transformerGroup.length&&angular.forEach(transformerGroup[0].getChildren(),function(child){child.fire("scaleOnZoom")})},metrics:function(){var shapeInfo;return{setShapeInfo:function(info){shapeInfo=info},getShapeInfo:function(){return shapeInfo}}},colorPicker:function(){var props={stroke:"black",opacity:1,fill:"rgba(255, 255, 255, 0)",strokeWidth:1};return{set:function(obj){props=Object.assign(props,obj)},get:function(prop){return prop?props[prop]:props}}}}})}(),function(){angular.module("app").controller("_3dDashboardCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,localStorageService,globals,NgMap){this.loggedIn=!0;var logout=globals.logout;globals.userStore,globals.throttler;if(!authFactory.checkUser())return logout(),void(this.loggedIn=!1);this.logout=function(){logout()}})}(),function(){angular.module("app").controller("_3dviewerCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var logout=globals.logout;authFactory.checkUser()||logout();this.logout=function(){logout()}})}(),function(){angular.module("app").controller("addItemCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment,$location){var logout=globals.logout,userStore=globals.userStore;globals.debounce;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),console.log(this.userData),this.logout=function(){logout()},$scope.activeClass=function(path){return $location.path()===path?"active":""}})}(),function(){angular.module("app").controller("billingArchiveCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()},"/payroll"==$location.path()&&$(".payrollMenu").css("display","block !important");$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("calculationCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();$scope.isEdit=!1,vm.userData=userStore.get(),vm.logout=function(){logout()},$scope.outerIndex=0,$scope.innerIndex=0,$scope.outInn=0,$scope.tableInventory=[],$scope.Inventory=[],$scope.materialList=[],$scope.entityType=1,apiFactory.listAllMaterials().then(function(resp){$scope.materialList=resp.data.list,$scope.selectedMaterial=angular.copy($scope.materialList[0])}).catch(function(e){}),$scope.dcpList=[],apiFactory.listAllComboMaterials().then(function(resp){$scope.dcpList=resp.data.list}).catch(function(e){}),$scope.equipmentList=[],apiFactory.listAllEquipments().then(function(resp){$scope.equipmentList=resp.data.list}).catch(function(e){}),$scope.materialSelection=function(item){$scope.selectedMaterial=item},$scope.assignInventory=function(){$("#loadInventories").modal("hide"),$("#addquantity").modal("show")},$scope.users=[{John:[{salary:"15K",year:"2013"},{salary:"20K",year:"2014"}]},{Ben:[{salary:"17K",year:"2013"},{salary:"20K",year:"2014"},{salary:"25K",year:"2014"}]}],vm.addQuantity=function(quantity){$("#addquantity").modal("hide"),$scope.selectedMaterial.Quantity=quantity,$scope.Inventory[$scope.innerIndex]=$scope.selectedMaterial,$scope.tableInventory[$scope.outerIndex]=$scope.Inventory,$scope.innerIndex=$scope.innerIndex+1,console.log("inventory: ",$scope.Inventory),console.log("tableinventory: ",$scope.tableInventory)},$(".payrollList").DataTable(),$scope.headers=[{name:"No"},{name:"Material Name"},{name:"Add on"},{name:"Add on"},{name:"Unit"},{name:"Quanity"},{name:"Cost"},{name:"Materials cost"},{name:"Total cost"},{name:"Profit"},{name:"%"},{name:"Sales price"},{name:"Labor cost"},{name:"Labor sum"},{name:"Action"}],$scope.items=[{no:"1.1",location:"Safety staircase",adon1:"",adon2:"",unit:"psc",quantity:"4",cost:"6,500.00kr",m_cost:"6,500.00kr",t_cost:"6,500.00kr",profit:"6,500.00kr",perc:"70%",s_price:"6,500.00kr",l_cost:"6,500.00kr",l_sum:"6,500.00kr"},{no:"1.2",location:"Setup and Clearsite",adon1:"",adon2:"",unit:"m2",quantity:"10",cost:"3,500.00kr",m_cost:"3,500.00kr",t_cost:"3,500.00kr",profit:"3,500.00kr",perc:"80%",s_price:"3,500.00kr",l_cost:"3,500.00kr",l_sum:"3,500.00kr"},{no:"1.3",location:"Safety",adon1:"",adon2:"",unit:"pcs",quantity:"400",cost:"0.00kr",m_cost:"0.00kr",t_cost:"0.00kr",profit:"0.00kr",perc:"10%",s_price:"0.00kr",l_cost:"0.00kr",l_sum:"0.00kr"},{no:" ",location:"Total",adon1:"",adon2:"",unit:" ",quantity:" ",cost:"3,500.00kr",m_cost:"3,500.00kr",t_cost:"3,500.00kr",profit:"3,500.00kr",perc:"80%",s_price:"3,500.00kr",l_cost:"3,500.00kr",l_sum:"3,500.00kr"}],$scope.material_dcp=[{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"},{img:"img/dcp-img.png",title:"DCP ABC",date:"Sep 25, 2018 at 4:00 PM",m_cost:"MATERIAL COST",m_price:"200 DKK",w_cost:"WORKER COST",w_price:"200 DKK",red_txt:"DCP - 1234"}],$(document).ready(function(){$("#button_left").hide()}),$scope.leftClick=function(){$(".example-one-header").scrollLeft()<=100&&$("#button_left").hide(),$("#button_right").show(),$(".example-one-header").animate({scrollLeft:"-=100px"},"slow")},$scope.rightClick=function(){$(".example-one-header").scrollLeft()>=200&&$("#button_right").hide(),$("#button_left").show(),$(".example-one-header").animate({scrollLeft:"+=100px"},"slow")},vm.deleteInventory=function(index,array){array.splice(index,1)},vm.editInventory=function(index,item){$scope.isEdit=!0},vm.updateQuantity=function(quantity){$("#updatequantity").modal("hide")},$scope.addProjectPlan=function(){$scope.outerIndex=$scope.outerIndex+1,$scope.innerIndex=0,$scope.Inventory=[],console.log("outinn")}})}(),function(){angular.module("app").controller("calenderCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload){$scope.invitees=[{id:"1",img:"/assets/images/user_pic2.png",name:"Lisa Guerrero",lb:!0,status:!1},{id:"2",img:"/assets/images/user_pic3.png",name:"Peter Gregor",lb:!1,status:!1},{id:"3",img:"/assets/images/user_pic2.png",name:"Lisa Guerrero",lb:!1,status:!1},{id:"4",img:"/assets/images/user_pic3.png",name:"Peter Gregor",lb:!1,status:!1}];var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();vm.logout=function(){logout()},vm.userData=userStore.get(),vm.tabChange=function(val){$(".eventmodal .nav-tabs li .nav-link").removeClass("active"),$(".eventmodal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".eventmodal .tab-content .tab-pane").removeClass("active"),$(".eventmodal .tab-content .tab-pane").removeClass("show"),$(".eventmodal .tab-content .tab-pane").eq(val).addClass("show"),$(".eventmodal .tab-content .tab-pane").eq(val).addClass("active")},vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU&libraries=places",markers:[],styles:[],center:"41,-87",zoom:3};var gObjLocation={coordinates:[],address:""};vm.placeMarker=function(map){console.log(this.getPlace());var placeData=this.getPlace().geometry.location;console.log(placeData),vm.gmap.markers=[[placeData.lat(),placeData.lng()]],vm.gmap.zoom=15,vm.gmap.center=placeData.lat()+","+placeData.lng(),gObjLocation.coordinates=[placeData.lat(),placeData.lng()],gObjLocation.address=this.getPlace().formatted_address,console.log(gObjLocation)},vm.inputImg=[],vm.uploadImg=[],vm.event={listAssets:[]},vm.inputFiles=[],vm.uploadFiles=[],vm.fileUpdated=function(files,event,modal){var fileObj=event.target.files;console.log(vm.fileNames),vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),console.log(vm.fileNames),angular.forEach(files,function(x,index){if(x.description="","image"==modal)if(0==vm.uploadImg.length)vm.uploadImg.push(x);else{var duplicateImg=!1;angular.forEach(vm.uploadImg,function(y){x.name!=y.name||(duplicateImg=!0)}),duplicateImg?Notification.error("File name already exist"):vm.uploadImg.push(x)}else if(0==vm.uploadFiles.length)vm.uploadFiles.push(x);else{var _duplicateImg=!1;angular.forEach(vm.uploadFiles,function(y){x.name!=y.name||(_duplicateImg=!0)}),_duplicateImg?Notification.error("File name already exist"):vm.uploadFiles.push(x)}})},NgMap.getMap().then(function(map){vm.map=map,map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoomControl:!0,zoom:1,center:{lat:0,lng:0}})}),vm.todayDate=moment(),vm.dateFormat="YYYY/MM/DD hh:mm:ss",vm.resetForm=function(res){vm.event={},vm.uploadImg=[],vm.uploadFiles=[],vm.getAllMembersInCurrentCompany()},vm.createNewEvent=function(formData){$("#new_event").modal("hide");var imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles),data=formData;data.date=moment(data.date).format("YYYY/MM/DD hh:mm:ss"),data.location=gObjLocation,data.listAssets=imgAndFiles,console.log(data),apiFactory.createEvent(data).then(function(resp){return Notification.success(resp.data.message),apiFactory.getAllEvents()}).then(listAllEventsData).catch(function(err){console.log(err),Notification.error(err.data.message)})},vm.updateEvent=function(formData){$("#event_details").modal("hide");var imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles),data=formData;data.location=gObjLocation,data.listAssets=imgAndFiles,apiFactory.updateMyEvent(data,formData._id).then(function(resp){return apiFactory.getAllEvents()}).then(listAllEventsData).catch(function(err){console.log(err),Notification.error(err.data.message)})},vm.deleteFile=function(indexVal,type){"image"==type?vm.uploadImg.splice(indexVal,1):vm.uploadFiles.splice(indexVal,1)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal};var gAryCompanyMembers=[];function listAllEventsData(resp){var calendar=$("#calendar"),lAryEventsData=[],_iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_iterator2=resp.data.data[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0){var v=_step2.value;lAryEventsData.push({title:v.name,start:v.date,_id:v._id,allDay:!1})}}catch(err){_didIteratorError2=!0,_iteratorError2=err}finally{try{!_iteratorNormalCompletion2&&_iterator2.return&&_iterator2.return()}finally{if(_didIteratorError2)throw _iteratorError2}}console.log(lAryEventsData,"lAryEventsData");calendar.fullCalendar({header:{left:"Calendar",center:"title,prev,next today",right:"month,agendaWeek,agendaDay,listWeek"},eventClick:function(calEvent,jsEvent,view){var getRes=resp.data.data.filter(function(res){return res._id===calEvent._id});vm.event=getRes[0],vm.event.view=moment(vm.event.date).format("YYYY/MM/DD hh:mm:ss"),vm.event.companyMembers=gAryCompanyMembers,vm.todayDate=vm.event.date,vm.uploadImg=vm.event.listAssets.images,vm.uploadFiles=vm.event.listAssets.docs,vm.event.location=vm.event.location.address,console.log(vm.event),angular.forEach(vm.event.listAssets,function(x,index){console.log(x),x.description=""}),$scope.$apply(),console.log(vm.event),console.log(vm.inputFiles),$("#event_details").modal("show")},defaultDate:new Date,editable:!0,events:lAryEventsData})}apiFactory.getAllEvents().then(listAllEventsData).catch(function(err){console.log(err),Notification.error(err.data.message)}),vm.getAllMembersInCurrentCompany=function(){apiFactory.getAllMembersInCurrentCompany(vm.userData.companyId).then(function(data1){return console.log(data1),gAryCompanyMembers=data1.data.data,vm.event=vm.event?vm.event:{},vm.event.companyMembers=gAryCompanyMembers,data1.data.data}).catch(function(err){console.log(err),Notification.error(err.data.message)})},vm.getAllMembersInCurrentCompany()})}(),function(){angular.module("app").controller("clientsCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,debounce=globals.debounce,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},$scope.$watch("vm.clientData.clientContact.dialCode",function(value){$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3")}),$(".clientsList").DataTable(),$scope.activeJustified=0,vm.currentPage=1,vm.toggleObj={toggleClient:{clientName:!1,phoneNo:!1,email:!1,primaryAdd:!1,created:!0}},vm.searchText="",vm.sortclients=function(type,resource){void 0===vm.toggleObj[resource][type]?vm.toggleObj[resource][type]=!0:vm.toggleObj[resource][type]=!vm.toggleObj[resource][type],apiFactory.listAllClients({page:1,chunk:10,sort:type,search:vm.searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allClients=resp.data.list,vm.clientCount=resp.data.total,$timeout(function(){$("#pagination").pagination({items:vm.clientCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllClients({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.allClients=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.searchText="";var searchDebounce=debounce(250);vm.searchClients=function(text){searchDebounce(function(){apiFactory.listAllClients({page:1,chunk:10,search:text,sort:"created",sortType:!1}).then(function(resp){vm.allClients=resp.data.list,vm.clientCount=resp.data.total,$timeout(function(){$("#pagination").pagination({items:vm.clientCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllClients({page:page,chunk:10,sort:type,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allClients=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},[text])},vm.sortclients("created","toggleClient"),vm.dtOptions={paging:!1,info:!1,ordering:!1,searching:!1},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),globals.getIndustry().then(function(resp){vm.getIndustries=resp.data,vm.loadIndustry=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),globals.getCurrency().then(function(resp){vm.getCurrencies=resp.data,vm.loadCurrency=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.addNewClient=function(valid,clientdata){var client={},industries=[];null==clientdata&&Notification.error("Cannot save empty record"),void 0===clientdata.clientName?Notification.error("Please enter name of client"):client.clientName=clientdata.clientName,void 0===clientdata.clientContact?Notification.error("Please enter phone details"):client.clientContact={dialCode:clientdata.clientContact.dialCode[0].dialCode,phoneNumber:clientdata.clientContact.phoneNumber},null!=clientdata.description&&(client.description=clientdata.description),null!=clientdata.yearFounded&&(client.yearFounded=clientdata.yearFounded),null!=clientdata.clientWebsite&&(client.clientWebsite=clientdata.clientWebsite),null!=clientdata.email&&(client.email=clientdata.email),null!=clientdata.industry&&(clientdata.industry.forEach(function(element){industries.push(element.type)}),client.industry=industries),null!=clientdata.clientContactPerson&&(clientdata.clientContactPerson.dialCode?(console.log("dial code exist"),client.clientContactPerson={firstName:clientdata.clientContactPerson.firstName,middleName:clientdata.clientContactPerson.middleName,lastName:clientdata.clientContactPerson.lastName,email:clientdata.clientContactPerson.email,mobile:{dialCode:clientdata.clientContactPerson.dialCode[0].dialCode,phoneNumber:clientdata.clientContactPerson.phoneNumber}}):client.clientContactPerson={firstName:clientdata.clientContactPerson.firstName,middleName:clientdata.clientContactPerson.middleName,lastName:clientdata.clientContactPerson.lastName,email:clientdata.clientContactPerson.email,mobile:{phoneNumber:clientdata.clientContactPerson.phoneNumber}}),null!=clientdata.annualRevenue&&(clientdata.annualRevenue.currencyCode?client.annualRevenue={value:clientdata.annualRevenue.value,currencyCode:clientdata.annualRevenue.currencyCode[0].cc}:client.annualRevenue={value:clientdata.annualRevenue.value}),null!=clientdata.address2&&(clientdata.address2.countryCode?client.address2={line1:clientdata.address2.line1,line2:clientdata.address2.line2,line3:clientdata.address2.line3,city:clientdata.address2.city,postalCode:clientdata.address2.postalCode,countryCode:clientdata.address2.countryCode[0].code}:client.address2={line1:clientdata.address2.line1,line2:clientdata.address2.line2,line3:clientdata.address2.line3,city:clientdata.address2.city,postalCode:clientdata.address2.postalCode}),null!=clientdata.address1&&(clientdata.address1.countryCode?client.address1={line1:clientdata.address1.line1,line2:clientdata.address1.line2,line3:clientdata.address1.line3,city:clientdata.address1.city,postalCode:clientdata.address1.postalCode,countryCode:clientdata.address1.countryCode[0].code}:client.address1={line1:clientdata.address1.line1,line2:clientdata.address1.line2,line3:clientdata.address1.line3,city:clientdata.address1.city,postalCode:clientdata.address1.postalCode}),apiFactory.createClient(client).then(function(resp){Notification.success("Issue has been saved successfully"),vm.clientData={},$("#addClient").modal("hide"),vm.sortclients("created","toggleClient")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})}})}(),function(){angular.module("app").controller("clientsDetailCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.clientId=$stateParams.id,$scope.getClientDetail=function(){apiFactory.getClientById(vm.clientId).then(function(resp){vm.ClientData=resp.data,console.log("client: ",vm.ClientData)})},$scope.getClientDetail(),vm.saveStaffMember=function(staff){console.log(staff),apiFactory.addStaffMember(staff,vm.clientId).then(function(resp){$("#add_member").modal("hide"),$scope.getClientDetail(),Notification.success("Member added successfully.")}).catch(function(e){Notification.error("could not add staff member.")})}})}(),function(){angular.module("app").controller("comboMaterialViewCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,globals,$location,Upload){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();function getComboMatDetail(){apiFactory.getComboMaterialById(vm.comboId).then(function(resp){vm.comboData=resp.data.data,vm.comboMmatrialName=vm.comboData.name,vm.description=vm.comboData.description,vm.uom=vm.comboData.unit,console.log(vm.comboData),angular.forEach(vm.comboData.comboMaterialList,function(item){vm.materialCost=item.materialId.currentRate.materialCost.value*item.quantity,vm.materialTotal=vm.materialTotal+vm.materialCost,vm.rooferCost=item.materialId.currentRate.rooferCost.value*item.quantity,vm.rooferTotal=vm.rooferTotal+vm.rooferCost}),console.log(vm.comboData),$timeout(imgSlider,1500)}).catch(function(e){console.log(e)})}function imgSlider(){$("#comboCarousel").flexslider({animation:"slide",controlNav:!1,animationLoop:!1,slideshow:!1,itemWidth:75,itemMargin:5,asNavFor:"#comboSlider"}),$("#comboSlider").flexslider({animation:"slide",controlNav:!1,animationLoop:!1,slideshow:!1,sync:"#comboCarousel"})}vm.editFlag=!1,vm.comboId=$stateParams.id,vm.mUnits=globals.mUnits,vm.removedFiles=[],vm.comboMaterialList=[],vm.materialTotal=0,vm.rooferTotal=0,vm.userData=userStore.get(),apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.companyCurrency=angular.copy(vm.companyData.currentCurrency.currencyCode)}).then(function(e){console.log(e)}),getComboMatDetail(),vm.removeImg=function(img,type){"materialDocument"==type?(vm.removedFiles.push(vm.materialImg[img]._id),vm.materialImg.splice(img,1)):(vm.removedFiles.push(vm.materialFiles[img]._id),vm.materialFiles.splice(img,1))},vm.deleteFile=function(indexVal,type,newFile){"image"==type?vm.uploadImg.splice(indexVal,1):vm.uploadFiles.splice(indexVal,1)},vm.editComboMaterialList=function(item){vm.materialList=vm.comboData.comboMaterialList[item],vm.materialQty=vm.materialList.quantity,vm.selectedMaterialCost=vm.materialQty*vm.materialList.materialId.currentRate.materialCost.value,vm.selectedMaterialRooferCost=vm.materialQty*vm.materialList.materialId.currentRate.rooferCost.value,0!=vm.materialList.percentageAdditions.length&&null!=vm.materialList.percentageAdditions.length?vm.percentageAddition=vm.materialList.percentageAdditions:vm.percentageAddition=[],vm.materialIndex=item,$("#editComboMaterial").modal("show"),"new"==item?$("#editComboMaterial .modal-header h5").text("Add Combo Material Details"):$("#editComboMaterial .modal-header h5").text("Update Combo Material Details")},vm.materialCombination=function(material){var data=JSON.parse(material);console.log("material--",data),""!=data&&(vm.comboMaterialList.push({materialId:data._id,name:data.name,quantity:vm.comboList.quantity,materialCost:vm.comboList.materialCost,rooferCost:vm.comboList.rooferCost,percentageAdditions:vm.percentageAddition}),vm.percentageAddition=[],vm.comboList={quantity:1,materialCost:0,rooferCost:0},vm.editComboMaterial.comboMaterial="",$(".select2-choice .select2-chosen").text(""))},vm.addPercentageValue=function(){vm.percentageAddition.push({percentageType:"",value:""})},vm.removePercentageAddition=function(index){vm.percentageAddition.splice(index,1)},vm.fileUpdated=function(files,event,modal){var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){if(x.description="","image"==modal)if(0==vm.uploadImg.length)vm.uploadImg.push(x);else{var duplicateImg=!1;angular.forEach(vm.uploadImg,function(y){x.name!=y.name||(duplicateImg=!0)}),duplicateImg?Notification.error("File name already exist"):vm.uploadImg.push(x)}else if(0==vm.uploadFiles.length)/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x);else{var _duplicateImg2=!1;angular.forEach([].concat(vm.uploadFiles,vm.uploadImg),function(y){x.name!=y.name||(_duplicateImg2=!0)}),_duplicateImg2?Notification.error("File name already exist"):/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x)}})},vm.tabChange=function(val,flag){function nextPrevTab(val){$(".dcp_modal .nav-tabs li .nav-link").removeClass("active"),$(".dcp_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("active")}1==val?vm.editComboMaterial.name?vm.selectedUnit?nextPrevTab(val):Notification.error("Please select material unit"):Notification.error("Please enter material name"):2==val&&0==vm.comboMaterialList.length&&0==vm.editComboMaterial.comboMaterialList.length?Notification.error("Please add Combination list"):nextPrevTab(val)},vm.unitSelect=function(data){vm.selectedUnit=data.name},vm.editCombo=function(val){if(1==val)vm.editFlag=!0,vm.editComboMaterial=angular.copy(vm.comboData),vm.selectedUnit=vm.editComboMaterial.unit,vm.materialImg=vm.editComboMaterial.files.images,vm.materialFiles=vm.editComboMaterial.files.docs,vm.percentageAddition=[],vm.uploadImg=[],vm.uploadFiles=[],$("#todo_modal.dcp_modal").modal("show");else if(2==val){$scope.imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles),$scope.uploadallFiles=[].concat(vm.uploadImg,vm.uploadFiles,vm.materialImg,vm.materialFiles);var description=[];(vm.uploadImg.length>0||vm.uploadFiles.length>0)&&$scope.imgAndFiles.map(function(x,i){description.push({assetDescription:x.description})});var combainedCMList=[].concat(vm.comboMaterialList,vm.editComboMaterial.comboMaterialList);console.log(combainedCMList);var cmList=[];combainedCMList.forEach(function(x){console.log("x====",x),cmList.push({_id:x._id,materialId:x.materialId,quantity:x.quantity,percentageAdditions:x.percentageAdditions})});var data={name:vm.editComboMaterial.name,unit:vm.selectedUnit,comboMaterialList:cmList,files:$scope.imgAndFiles,assetObj:description},comboListData={comboListArray:cmList,deletedComboList:vm.deletedComboList};console.log(data,"===data"),apiFactory.updateComboMaterialList(vm.comboData._id,comboListData).then(function(resp){apiFactory.updateComboMaterial(vm.comboData._id,data).then(function(resp){Notification.success(resp.data.message),$("#todo_modal.dcp_modal").modal("hide"),getComboMatDetail(),vm.fileNames=[],$timeout(imgSlider,1e3)}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})}},vm.updateCombo=function(item,data){vm.comboData.comboMaterialList[item].quantity=vm.materialQty,vm.comboData.comboMaterialList[item].percentageAdditions=data,console.log(vm.comboData.comboMaterialList[item].percentageAdditions),$("#editComboMaterial").modal("hide")},apiFactory.listAllMaterials().then(function(resp){vm.allmaterilaList=resp.data.list,vm.comboList={quantity:1,materialCost:0,rooferCost:0}}).catch(function(e){console.log(e)}),vm.getMaterialInfo=function(material){var materialInfo=JSON.parse(material);material&&(vm.comboList.materialCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.rooferCost.value*100)/100),$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3"))},vm.deletedComboList=[],vm.removeMateril=function(item,flag){"new"==flag?vm.comboMaterialList.splice(item,1):(vm.deletedComboList.push(vm.editComboMaterial.comboMaterialList[item]._id),vm.editComboMaterial.comboMaterialList.splice(item,1))}})}(),function(){angular.module("app").controller("createProjectCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals){var vm=this,logout=globals.logout;globals.userStore,globals.companyStore;authFactory.checkUser()||logout();if(!authFactory.checkPrivilege("project","createProject"))return Notification.warning("Insufficient permissions"),void $state.go("dashboard");vm.clients=[],$scope.$watch("vm.projectData.client",function(value){$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3")}),Promise.all([apiFactory.listAllClients(),apiFactory.getHierarchyTemplate()]).then(function(resp){vm.clients=resp[0].data.list,vm.templateList=resp[1].data.data;vm.templateList.filter(function(item){return"5b8910fbdd6fa81a20bfe745"==item._id});vm.filemanagerTemplate="5b8910fbdd6fa81a20bfe745"}).catch(function(e){console.log(e)}),vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU&libraries=places",markers:[],styles:[],center:"41,-87",zoom:3},vm.projectData={address:{}},$scope.select2Options={allowClear:!0},vm.placeMarker=function(map){var placeData=this.getPlace().geometry.location;vm.gmap.markers=[[placeData.lat(),placeData.lng()]],vm.gmap.zoom=15,vm.gmap.center=placeData.lat()+","+placeData.lng(),vm.projectData.address.loc={coordinates:[placeData.lat(),placeData.lng()]}},vm.addProject=function(formData){formData.client=formData.client._id,apiFactory.createProject(formData).then(function(resp){Notification.success("Project has been created successfully");var payload={projectId:resp.data._id,templateId:resp.data._id&&vm.filemanagerTemplate&&"false"!=vm.filemanagerTemplate?vm.filemanagerTemplate:"5b8910fbdd6fa81a20bfe745"};apiFactory.loadHierarchyTree(payload).then(function(resp){console.log(resp.data.message)}).catch(function(e){console.log(e)}),console.log("projectid",resp.data._id),$state.go("dashboard")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})},vm.updateMarker=function(){var pos=this.getPosition();vm.projectData.address.loc={coordinates:[pos.lat(),pos.lng()]}},NgMap.getMap().then(function(map){vm.map=map,map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoomControl:!0,zoom:1,center:{lat:0,lng:0}})}),vm.logout=function(){logout()},vm.assignTemplate=function(){vm.filemanagerTemplate=vm.selectedTemplate._id,$("#assignTemplateModal").modal("hide")}})}(),function(){angular.module("app").controller("createVariationsOrderCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment,$location){var logout=globals.logout,userStore=globals.userStore;globals.debounce;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),console.log(this.userData),this.logout=function(){logout()},$scope.activeClass=function(path){return $location.path()===path?"active":""}})}(),function(){angular.module("app").controller("dashboardCtrl",function($scope,$timeout,authFactory,$state,$window,$location,apiFactory,Notification,localStorageService,globals,NgMap){var vm=this;vm.loggedIn=!0;var logout=globals.logout,userStore=globals.userStore,companyStore=globals.companyStore,projectStore=globals.projectStore;globals.throttler;if(!authFactory.checkUser())return logout(),void(vm.loggedIn=!1);vm.loader=!1,vm.userData=userStore.get(),vm.clientUrl="https://res.cloudinary.com/dktnhmsjx/image/upload/v1486129234/default/company.png",vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",styles:[{elementType:"geometry",stylers:[{color:"#212121"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{elementType:"labels.text.stroke",stylers:[{color:"#212121"}]},{featureType:"administrative",elementType:"geometry",stylers:[{color:"#757575"}]},{featureType:"administrative.country",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"administrative.land_parcel",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#181818"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"poi.park",elementType:"labels.text.stroke",stylers:[{color:"#1b1b1b"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{color:"#2c2c2c"}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#8a8a8a"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#373737"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#3c3c3c"}]},{featureType:"road.highway.controlled_access",elementType:"geometry",stylers:[{color:"#4e4e4e"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"transit",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#000000"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#3d3d3d"}]}],markers:[]},Promise.all([apiFactory.getCompanyById(vm.userData.companyId),apiFactory.listAllProjects(),apiFactory.listAllClients(),apiFactory.listAllTodoList()]).then(function(data){var projectList,mxLat,mxLng,mnLat,mnLng,markers;companyStore.set(data[0].data),vm.gmap.markers=(projectList=data[1].data.list,mxLat=0,mxLng=0,mnLat=0,mnLng=0,markers=[],projectList.forEach(function(element){if(element.address&&(0!=element.address.loc.coordinates[0]||0!=element.address.loc.coordinates[1])){var mrkr={id:element._id,latitude:element.address.loc.coordinates[1],longitude:element.address.loc.coordinates[0]};mxLat=mxLat>mrkr.latitude?mrkr.latitude:mxLat,mnLat=mnLat<mrkr.latitude?mrkr.latitude:mnLat,mxLng=mxLng>mrkr.longitude?mrkr.longitude:mxLng,mnLng=mnLng<mrkr.longitude?mrkr.longitude:mnLng,markers.push([mrkr.latitude,mrkr.longitude])}}),markers),vm.dashboardData={company:data[0].data,projects:data[1].data.list,clients:data[2].data.list,todoLists:data[3].data.data}}).catch(function(e){console.log(e)}),NgMap.getMap().then(function(map){map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoom:1,center:{lat:0,lng:0}})});var enabled=!0,chunkSize=5;if(vm.projectSearch="",vm.enableLazyLoad=!1,vm.sortParams={field:"created",type:!1},vm.projectName="PROJECT",$scope.getBookmarkedProject=function(){apiFactory.getBookmarks().then(function(resp){vm.bookmarkedProject=resp.data.bookmarks,vm.bookmarkedProjectList=angular.copy(vm.bookmarkedProject),vm.bookmarkedProjectList.push({_id:"others",projectName:"All Project List"})}).catch(function(e){console.log(e)})},$scope.getBookmarkedProject(),vm.loadProjectFiles=function(id){apiFactory.showProjectFiles(id,5).then(function(resp){vm.projectFiles=resp.data.data})},vm.bookmarkFlag=!1,vm.selectedProject=function(project){"others"==project._id?apiFactory.listAllProjects().then(function(resp){vm.projectPickerData=resp.data.list,$("#chooseProject").modal("show")}).catch(function(e){console.log(e)}):(vm.bookmarkFlag=!1,angular.forEach(vm.bookmarkedProject,function(x){if(x._id==project._id)return vm.bookmarkFlag=!0}),vm.projectName=project.projectName,projectStore.set(project),vm.loadProjectFiles(project._id))},vm.chooseProject=function(project){var index=vm.bookmarkedProjectList.findIndex(function(x){return"others"==x._id});vm.bookmarkedProjectList.splice(index,1);var alreadyExist=!0;angular.forEach(vm.bookmarkedProject,function(x){x._id==project._id&&(alreadyExist=!1)}),alreadyExist&&vm.bookmarkedProjectList.push(project),vm.bookmarkedProjectList.push({_id:"others",projectName:"All Project List"}),vm.project=project,vm.projectName=project.projectName,vm.bookmarkFlag=!1,projectStore.set(project),$("#chooseProject").modal("hide")},localStorageService.get("currentProject")){var currentProject=localStorageService.get("currentProject");vm.project=currentProject,vm.projectName=currentProject.projectName,vm.loadProjectFiles(vm.project._id);var alreadyBookmarked=!1;angular.forEach(vm.bookmarkedProject,function(x){if(x._id==currentProject._id)return alreadyBookmarked=!0}),alreadyBookmarked||$timeout(function(){var index=vm.bookmarkedProjectList.findIndex(function(x){return"others"==x._id});vm.bookmarkedProjectList.splice(index,1),vm.bookmarkedProjectList.push(currentProject),vm.bookmarkedProjectList.push({_id:"others",projectName:"All Project List"})},1500)}$("#chooseProject").on("hide.bs.modal",function(){vm.enableLazyLoad=!1}),vm.closeProjectPicker=function(){$("#chooseProject").modal("hide"),vm.project=null,projectStore.set("")},vm.checkBookmark=function(data){var bookmark=!0,alreadyBookmarked=!1;angular.forEach(vm.bookmarkedProject,function(x){if(x._id==data._id)return alreadyBookmarked=!0}),bookmark=!alreadyBookmarked,apiFactory.bookMarkProject(projectStore.get()._id,bookmark).then(function(resp){if(bookmark)Notification.success("Project successfully bookmarked"),vm.bookmarkedProject.push(data),vm.bookmarkFlag=!0;else{Notification.success("Project successfully removed from bookmark list");var index=vm.bookmarkedProject.findIndex(function(x){return x._id==data._id});vm.bookmarkedProject.splice(index,1),vm.bookmarkFlag=!1}}).catch(function(err){console.log(err)})},vm.addMore=function(){enabled&&(enabled=!1,$timeout(function(){enabled=!0},500),chunkSize+=5,apiFactory.listAllProjects({search:vm.projectSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.projectPickerData=resp.data.list}).catch(function(e){console.log(e)}))},vm.filePickerOptions={filter:"pdf"},vm.searchProjects=function(text){apiFactory.listAllProjects({search:vm.projectSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.projectPickerData=resp.data.list}).catch(function(e){console.log(e)})},vm.sort=function(field){vm.sortParams.field===field?vm.sortParams.type=!vm.sortParams.type:(vm.sortParams.field=field,vm.sortParams.type=!0),apiFactory.listAllProjects({search:vm.projectSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.projectPickerData=resp.data.list}).catch(function(e){console.log(e)})},vm.logout=function(){logout()},$scope.redirectTo3D=function(){console.log("rediection called"),apiFactory.get3DPage().then(function(response){console.log("response:",response)})},vm.goToFileManager=function(){console.log("project",projectStore.get()),projectStore.get()?$state.go("fileManager"):(Notification.warning("Please select a project"),$("html, body").animate({scrollTop:$(".project").offset().top},500,function(){$("#selectProject").focus().addClass("blink"),setTimeout(function(){$("#selectProject").removeClass("blink")},1e3)}))},vm.planPickerPlans=[],vm.rootFolders=[],vm.openPlanPicker=function(){projectStore.get()?(apiFactory.getProjectRoofPlans(projectStore.get()._id).then(function(resp){var roofPlans=resp.data.data;localStorageService.set("roofPlanProject",projectStore.get()._id),localStorageService.set("roofPlans",roofPlans),vm.planPickerPlans=roofPlans,$("#chooseRoofModal").modal("show")}).catch(function(e){console.log(e)}),apiFactory.getHierarchy(projectStore.get()._id).then(function(resp){vm.showTree=!0,vm.rootFolders=resp.data.data.hierarchies}).catch(function(e){console.log(e)})):Notification.warning("No project selected")},vm.choosePlan=function(plan){$("#chooseRoofModal").modal("hide"),localStorageService.set("selectedPlan",plan),$state.go("visualPlanner")},vm.allModalClose=function(){$("#chooseFile, #selectFileCanvas, #selectFile, #chooseRoofModal").modal("hide")},vm.fileChoose=function(){vm.pickerFolders=angular.copy(vm.rootFolders),$("#chooseFile").modal("show"),$("#chooseFile").css("display","block"),$("#chooseFile .modal-dialog").css({"-webkit-box-shadow":"0px 0px 47px 6px rgba(0, 0, 0, 0.75)","-moz-box-shadow":"0px 0px 47px 6px rgba(0, 0, 0, 0.75)","box-shadow":"0px 0px 47px 6px rgba(0, 0, 0, 0.75)"}),$(".rootFolder").show(),$(".childFolder").hide(),vm.moveto="move To",$scope.folderName="Root Folder","Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1},$scope.$on("loader",function(e,data){vm.loader=data,vm.loader?$("body").addClass("modal-open"):$("body").removeClass("modal-open")}),$scope.$on("selectedRoofPlanDoc",function(e,data){vm.selectedAssetForPlan=data,vm.roofplanBreadCrumb=data.breadCrumbs.reduce(function(acc,x){return acc+=x.name+" > "},"")+data.assetName,/cloudinary/.test(data.secure_url)?(vm.fileArray=globals.extractPagesFromPdf(data.secure_url,data.pages),vm.loader=!1,$("#chooseRoofModal").css("visibility","hidden"),$("#selectFile").modal("show"),$("#selectFile").css("display","block"),vm.pdfFiles=angular.copy(vm.fileArray),console.log(vm.fileArray)):data.planDocument?($timeout(function(){$scope.$apply()}),vm.pdfPagesData=vm.pdfFiles=data.planImages.map(function(x,i){var obj={pageNo:i,title:"title_"+Date.now(),url:x,selected:!1,description:""};return obj}),vm.loader=!1,$("#chooseRoofModal").css("visibility","hidden"),$("#selectFile").modal("show"),$("#selectFile").css("display","block")):globals.createPagesFromPdf(data).then(function(pages){$timeout(function(){$scope.$apply()}),vm.pdfPagesData=pages,vm.pdfFiles=pages,vm.loader=!1,$("#chooseRoofModal").css("visibility","hidden"),$("#selectFileCanvas").modal("show"),$("#selectFileCanvas").css("display","block")})}),vm.hideSelectFile=function(){$("#chooseRoofModal").css("visibility","visible"),$("#selectFile").css("display","none")},vm.selectedFileList=function(val,type,asset){if("submit"==val)if($("#chooseFile, #selectFile, #selectFileCanvas").css("display","none"),$("#chooseRoofModal").css("visibility","visible"),vm.selectedFiles=[],angular.forEach(vm.pdfFiles,function(x){x.selected&&vm.selectedFiles.push(x)}),1===type){var endpoint=!asset.planDocument&&/cloudinary/.test(asset.secure_url)?"addProjectRoofPlan":"addRoofPlansFromAsset",payload={assetId:asset._id,projectId:projectStore.get()._id,pages:vm.selectedFiles};apiFactory[endpoint](payload).then(function(resp){Notification.success(resp.data.message),apiFactory.getProjectRoofPlans(projectStore.get()._id).then(function(resp){var roofPlans=resp.data.data;localStorageService.set("roofPlanProject",projectStore.get()._id),localStorageService.set("roofPlans",roofPlans),vm.planPickerPlans=roofPlans}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})}else{var _payload={assetId:asset._id,pdfUrl:asset.secure_url,projectId:projectStore.get()._id,pages:vm.selectedFiles.reduce(function(acc,x){var obj={title:x.title,description:x.description,pageNo:x.pageNo};return acc.push(obj),acc},[])};apiFactory.generateRoofPlans(_payload).then(function(resp){Notification.success(resp.data.message),apiFactory.getProjectRoofPlans(projectStore.get()._id).then(function(resp){var roofPlans=resp.data.data;localStorageService.set("roofPlanProject",projectStore.get()._id),localStorageService.set("roofPlans",roofPlans),vm.planPickerPlans=roofPlans}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})}else"close"==val&&($("#chooseFile, #selectFile, #selectFileCanvas").css("display","none"),$("#chooseRoofModal").css("visibility","visible"))},vm.goToMeetingRoom=function(){projectStore.get()?$state.go("meetingroom"):(Notification.warning("Please select a project"),$("html, body").animate({scrollTop:$(".project").offset().top},500,function(){$("#selectProject").focus().addClass("blink"),setTimeout(function(){$("#selectProject").removeClass("blink")},1e3)}))}})}(),function(){angular.module("app").controller("economicCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment,$location){var vm=this,logout=globals.logout,userStore=globals.userStore;globals.debounce;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),console.log(vm.userData),vm.logout=function(){logout()},$scope.activeClass=function(path){return $location.path()===path?"active":""},vm.animateElements=function(){$(".progressbar").each(function(){var elementPos=$(this).offset().top,topOfWindow=$(window).scrollTop(),percent=$(this).find(".circle").attr("data-percent"),animate=(parseInt(percent,10),parseInt(100,10),$(this).data("animate"));elementPos<topOfWindow+$(window).height()-30&&!animate&&($(this).data("animate",!0),$(this).find(".circle").circleProgress({startAngle:-Math.PI/2,value:percent/100,size:180,thickness:8,emptyFill:"rgba(0,0,0, .2)",fill:{color:"#43f6fd"}}).on("circle-animation-progress",function(event,progress,stepValue){$(this).find("div").text((100*stepValue).toFixed(0))}).stop())})},vm.animateElements(),$(window).scroll(vm.animateElements())})}(),function(){angular.module("app").controller("economicPayrollCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment,$location){var logout=globals.logout,userStore=globals.userStore;globals.debounce;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),console.log(this.userData),this.logout=function(){logout()},$scope.activeClass=function(path){return $location.path()===path?"active":""}})}(),function(){angular.module("app").controller("employeesCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var logout=globals.logout;authFactory.checkUser()||logout();this.logout=function(){logout()}})}(),function(){angular.module("app").controller("equipmentCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload,NgMap){$scope.equipment=[{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Car",tag:"NR. 99"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Car",tag:"NR. 99"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Car",tag:"NR. 99"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"}],$scope.img_upload=[{img:"/assets/images/equipment3.png"},{img:"/assets/images/equipment3.png"},{img:"/assets/images/equipment3.png"}],$scope.equipdocuments=[{img:"/assets/images/pdf.png",type:"Document_1.pdf"},{img:"/assets/images/pdf.png",type:"Document_2.pdf"},{img:"/assets/images/pdf.png",type:"Document_3.pdf"}];var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();vm.inputFiles=[],vm.uploadFiles=[],$(".payrollMenu").hide(),vm.userData=userStore.get(),vm.logout=function(){logout()},vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU&libraries=places",markers:[],styles:[],center:"41,-87",zoom:3};var gAryLocation=[];vm.placeMarker=function(map){var placeData=this.getPlace().geometry.location;vm.gmap.markers=[[placeData.lat(),placeData.lng()]],vm.gmap.zoom=15,vm.gmap.center=placeData.lat()+","+placeData.lng(),gAryLocation=[placeData.lat(),placeData.lng()]},NgMap.getMap().then(function(map){vm.map=map,map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoomControl:!0,zoom:1,center:{lat:0,lng:0}})}),$(".materialList").DataTable(),apiFactory.listAllEquipments().then(function(resp){vm.equipment=resp.data.list}).catch(function(e){console.log(e)}),vm.dtOptions={paging:!1,info:!1,ordering:!1},$(".equipmentList").DataTable(),$scope.activeJustified=0,vm.currentPage=1,vm.toggleObj={systemTag:!0,materialCost:!1,rooferCost:!1,createdAt:!1,name:!1},vm.searchText="",vm.sortEquipment=function(type){void 0===vm.toggleObj[type]?vm.toggleObj[type]=!0:vm.toggleObj[type]=!vm.toggleObj[type],apiFactory.listAllEquipments({page:1,chunk:10,sort:type,search:vm.searchText,sortType:vm.toggleObj[type]}).then(function(resp){vm.equipment=resp.data.list,console.log(vm.equipment),vm.equipmentCount=resp.data.total,$timeout(function(){$("#equipmentPagination").pagination({items:vm.equipmentCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllEquipments({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.equipment=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.searchEquipment=function(text){apiFactory.listAllEquipments({page:1,chunk:10,search:text,sort:"createdDate",sortType:!1}).then(function(resp){vm.equipment=resp.data.list,vm.equipmentCount=resp.data.total,$timeout(function(){$("#equipmentPagination").pagination({items:vm.equipmentCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllEquipments({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.equipment=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.sortEquipment("createdAt"),vm.addEquipment={conversionFactor:1},vm.tabSettings={disable:!0},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.addEquipment.currency=angular.copy(vm.companyData.currentCurrency.currencyCode),vm.companyCurrency=angular.copy(vm.companyData.currentCurrency.currencyCode),console.log(vm.addEquipment.currency),$("#currency").val(vm.addEquipment.currency).trigger("change.select2")}).then(function(e){console.log(e)}),vm.Equipment={},vm.showConversionRate=function(from,to){$(".loader").show();var currencyData={from:from,to:to};from&&to&&apiFactory.showConversionRate(currencyData).then(function(resp){vm.Equipment.conversionFactor=resp.data.conversionFactor,$timeout(function(){$(".loader").hide()},500)}).catch(function(e){console.log(e)})},vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data}),vm.tabStyle=function(){void 0!==vm.addMaterial.materialName&&" "!==vm.addMaterial.materialName&&void 0!==vm.addMaterial.materialUnit&&" "!==vm.addMaterial.materialUnit&&void 0!==vm.addMaterial.currency&&""!==vm.addMaterial.currency&&void 0!==vm.addMaterial.conversionFactor&&""!==vm.addMaterial.conversionFactor?($("uib-tab-heading.info i.fa").attr("style","display: inline-block !important; color: #3cbdaa"),$("uib-tab-heading.info .number").hide(),$(".btn-success.next").attr("disabled",!1)):($("uib-tab-heading.info i.fa").attr("style","display: none !important; color: #3cbdaa"),$("uib-tab-heading.info .number").show(),$(".btn-success.next").attr("disabled",!0))},vm.addMaterialNext=function(){null!=vm.addMaterial.materialName&&" "!=vm.addMaterial.materialName?null!=vm.addMaterial.materialUnit&&" "!=vm.addMaterial.materialUnit?null!=vm.addMaterial.currency&&" "!=vm.addMaterial.currency?$scope.activeJustified=1:Notification.error("Please select Currency"):Notification.error("Please select material Unit"):Notification.error("Please enter material name")},vm.changeCost=function(cost,conversionRate){return cost*conversionRate},vm.fileUpdated=function(files,event,model){var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){x.description=""})},vm.addMaterialDetails=function(){var formData={name:vm.addMaterial.materialName,unit:vm.addMaterial.materialUnit,equipmentCosts:{value:vm.changeCost(vm.addMaterial.equipmentCostValue,vm.addMaterial.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},rooferCost:{value:vm.changeCost(vm.addMaterial.rooferCostValue,vm.addMaterial.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},files:vm.inputFiles};apiFactory.createEquipment(formData).then(function(resp){$("#addEquipments").modal("hide"),Notification.success(resp.data.message),vm.sortEquipment("createdAt"),vm.addMaterial={conversionFactor:1}}).catch(function(e){console.log(e)})},vm.uploadImg=[],vm.uploadFiles=[],vm.fileUpdated=function(files,event,modal){console.log(vm.inputImg);var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){if(x.description="","image"==modal)if(0==vm.uploadImg.length)vm.uploadImg.push(x);else{var duplicateImg=!1;angular.forEach(vm.uploadImg,function(y){x.name!=y.name||(duplicateImg=!0)}),duplicateImg?Notification.error("File name already exist"):vm.uploadImg.push(x)}else if(0==vm.uploadFiles.length)/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x);else{var _duplicateImg3=!1;angular.forEach([].concat(vm.uploadFiles,vm.uploadImg),function(y){x.name!=y.name||(_duplicateImg3=!0)}),_duplicateImg3?Notification.error("File name already exist"):/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x)}}),console.log(vm.uploadImg)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"image"==$scope.fileType?(vm.uploadImg[index].description=data,$("#closePopoverImg_"+index).trigger("click")):(vm.uploadFiles[index].description=data,$("#closePopoverFile_"+index).trigger("click"))},vm.deleteFile=function(indexVal,type){"image"==type?vm.uploadImg.splice(indexVal,1):vm.uploadFiles.splice(indexVal,1)},vm.addNewEquipment=function(Equipments){var files=$scope.imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles);console.log("Equipments: ",Equipments);var formData={name:Equipments.name,unit:Equipments.unit,files:files,equipmentCost:{value:vm.changeCost(Equipments.equipmentCost,Equipments.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},workers:Equipments.workers,rooferCost:{value:vm.changeCost(Equipments.rooferCost,Equipments.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},location:gAryLocation};console.log(formData),$("#equipment_modal").modal("hide"),apiFactory.updateEquipmentById(formData).then(function(resp){Notification.success(resp.data.message),vm.sortEquipment("createdAt")}).catch(function(e){console.log(e)})};var gAryCompanyMembers=[];apiFactory.getAllMembersInCurrentCompany(vm.userData.companyId).then(function(data1){console.log(data1),gAryCompanyMembers=data1.data.data,vm.companyMembers=gAryCompanyMembers}).catch(function(err){console.log(err),Notification.error(err.data.message)})})}(),function(){angular.module("app").controller("equipmentViewCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,$stateParams,Upload){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();vm.logout=function(){logout()},vm.userData=userStore.get(),vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data}),vm.addEquipment={conversionFactor:1},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.addEquipment.currency=angular.copy(vm.companyData.currentCurrency.currencyCode),vm.companyCurrency=angular.copy(vm.companyData.currentCurrency.currencyCode),console.log(vm.addEquipment.currency),$("#currency").val(vm.addEquipment.currency).trigger("change.select2")}).then(function(e){console.log(e)});var gAryLocation=[];vm.placeMarker=function(map){console.log(this.getPlace());var placeData=this.getPlace().geometry.location;vm.gmap.markers=[[placeData.lat(),placeData.lng()]],vm.gmap.zoom=15,vm.gmap.center=placeData.lat()+","+placeData.lng(),gAryLocation=[placeData.lat(),placeData.lng()]},vm.showConversionRate=function(from,to){console.log(from,to),$(".loader").show();var currencyData={from:from,to:to};from&&to&&apiFactory.showConversionRate(currencyData).then(function(resp){vm.equipment.conversionFactor=resp.data.conversionFactor,$timeout(function(){$(".loader").hide()},500)}).catch(function(e){console.log(e)})},vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU&libraries=places",markers:[],styles:[],center:"",zoom:8},vm.equipmentId=$stateParams.id,apiFactory.getEquipmentById(vm.equipmentId).then(function(resp){console.log(resp.data),vm.equipment=resp.data,vm.equipment.equipmentCost=resp.data.currentRate.equipmentCost.value,vm.equipment.rooferCost=resp.data.currentRate.rooferCost.value,vm.addEquipment.currency=resp.data.currentRate.equipmentCost.currencyCode,vm.showConversionRate(resp.data.currentRate.equipmentCost.currencyCode,resp.data.currentRate.equipmentCost.currencyCode),vm.gmap.center=resp.data.loc.coordinates,vm.uploadImg=resp.data.files.images,vm.uploadFiles=resp.data.files.docs}).catch(function(e){console.log(e)}),vm.deleteFile=function(indexVal,type){"image"==type?vm.uploadImg.splice(indexVal,1):vm.uploadFiles.splice(indexVal,1)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"image"==$scope.fileType?(vm.uploadImg[index].description=data,0==inventoryState.get().tab?$("#closePopoverImg_"+index).trigger("click"):$("#closePopoverDcpImg_"+index).trigger("click")):(vm.uploadFiles[index].description=data,0==inventoryState.get().tab?$("#closePopoverFile_"+index).trigger("click"):$("#closePopoverDcpFile_"+index).trigger("click"))},vm.updateEquipment=function(Equipments){var files=$scope.imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles);console.log("Equipments: ",Equipments);var formData={name:Equipments.name,unit:Equipments.unit,files:files,equipmentCost:{value:vm.changeCost(Equipments.equipmentCost,Equipments.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},workers:Equipments.workers,rooferCost:{value:vm.changeCost(Equipments.rooferCost,Equipments.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},location:gAryLocation};console.log(formData),$("#equipment_modal").modal("hide"),apiFactory.updateEquipment(Equipments._id,formData).then(function(resp){Notification.success(resp.data.message),vm.sortEquipment("createdAt")}).catch(function(e){console.log(e)})};var gAryCompanyMembers=[];apiFactory.getAllMembersInCurrentCompany(vm.userData.companyId).then(function(data1){console.log(data1),gAryCompanyMembers=data1.data.data,vm.companyMembers=gAryCompanyMembers}).catch(function(err){console.log(err),Notification.error(err.data.message)}),$scope.slider2=[{img:"/assets/images/equipment2.jpg"},{img:"/assets/images/equipment2.jpg"},{img:"/assets/images/equipment2.jpg"}]})}(),function(){angular.module("app").controller("fileManagerCtrl",function($scope,$http,$window,$timeout,authFactory,$state,apiFactory,Notification,globals,fileManagerFactory,uploadFactory){$scope.navtab=[{title:"Sub Folder A",target:"tabpane1"},{title:"Sub Folder B",target:"tabpane2"},{title:"Sub Folder C",target:"tabpane3"},{title:"Sub Folder D",target:"tabpane4"},{title:"Sub Folder E",target:"tabpane5"}];var vm=this,logout=globals.logout,userStore=globals.userStore,projectStore=globals.projectStore,genericStore=globals.genericStore,clipBoard=(globals.breakcrumbStore,fileManagerFactory.clipBoard);if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},apiFactory.listAllProjects().then(function(resp){vm.projectList=resp.data;var selectedProject=projectStore.get();vm.selectedProject=selectedProject._id,vm.getPrimaryFolders(selectedProject)}).catch(function(e){console.log(e)}),vm.rootFolders=[],vm.backupFolders=projectStore.get().backupFolders,vm.windowItems={folderData:"",folders:[],files:[]},vm.resolveAssetIcon=function(assetObj){var assetFormat=assetObj.format.trim(),icon=void 0;return/jp*g/.test(assetFormat)?icon="jpg":/png/.test(assetFormat)?icon="png":/pdf/.test(assetFormat)&&(icon="pdf"),icon},vm.showTree=!1,vm.getPrimaryFolders=function(selectedProject,list){list?projectStore.set(list.filter(function(x){return x._id===selectedProject})[0]):projectStore.set(selectedProject),vm.backupFolders=projectStore.get().backupFolders,Promise.all([apiFactory.getHierarchy(projectStore.get()._id),apiFactory.viewProjectAssets(projectStore.get()._id)]).then(function(resp){vm.showTree=!0,vm.rootFolders=resp[0].data.data.hierarchies,vm.projectFiles=resp[1].data.data,vm.loadFilesToAutoComplete=function($query){return new Promise(function(resolve,reject){resolve(vm.projectFiles)})}}).catch(function(e){console.log(e)})},vm.getFolder=function(id){apiFactory.getHierarchyChildren(id).then(function(resp){console.log(resp.data)}).catch(function(e){console.log(e)})};var fileDestination=genericStore();vm.treeOptions={accept:function(source,dest,destIndex){return!source.file||(fileDestination.store(dest),!1)},dragStop:function(event){var source=event.source;event.dest;if(source.nodeScope.file){var destination=fileDestination.get();if(!destination.$nodeScope)return;var payload={assetId:source.nodeScope.file._id,sourceId:source.nodeScope.$parent.$nodeScope.$modelValue._id,destId:destination.$nodeScope.$modelValue._id};apiFactory.moveAssets(payload).then(function(resp){Notification.success(resp.data.message)}).catch(function(e){console.log(e)}),destination.$nodeScope.$modelValue.files?destination.$nodeScope.$modelValue.files.push(source.nodeScope.file):destination.$nodeScope.$modelValue.files=[source.nodeScope.file],source.nodeScope.$parent.$nodeScope.$modelValue.files=source.nodeScope.$parent.$nodeScope.$modelValue.files.filter(function(x){return x._id!==source.nodeScope.file._id})}},dropped:function(event){var source=event.source,dest=event.dest,payload=void 0;null===dest.nodesScope.$nodeScope&&null===source.nodeScope.$parentNodeScope||(payload=null===dest.nodesScope.$nodeScope&&null!==source.nodeScope.$parentNodeScope?{type:1,hierarchyId:source.nodeScope.$modelValue._id,parentId:source.nodeScope.$parentNodeScope.$modelValue._id,projectId:projectStore.get()._id}:null!==dest.nodesScope.$nodeScope&&null===source.nodeScope.$parentNodeScope?{type:2,hierarchyId:source.nodeScope.$modelValue._id,projectId:projectStore.get()._id,destId:dest.nodesScope.$nodeScope.$modelValue._id}:{type:3,hierarchyId:source.nodeScope.$modelValue._id,parentId:source.nodeScope.$parentNodeScope.$modelValue._id,destId:dest.nodesScope.$nodeScope.$modelValue._id},apiFactory.dragMoveNodes(payload).then(function(resp){Notification.success(resp.data.message)}).catch(function(e){console.log(e)}))}};var rootFolderStore=genericStore();vm.setRootFolder=function(obj){rootFolderStore.store(obj)},vm.addModalActiveTab=0,$("#addModal").on("hide.bs.modal",function(){vm.fileNames=[],vm.addModalActiveTab=0}),vm.addPrimaryFolder=function(name,projectId){var payload={name:name,isParent:!0,projectId:projectId},nodeObj=rootFolderStore.get();$("#addModal").modal("hide"),apiFactory.addHierarchy(payload).then(function(resp){nodeObj.$nodesScope.$modelValue.push(resp.data.data),Notification.success(resp.data.message),console.log("rootfolder",rootFolderStore.get())}).catch(function(e){console.log(e)})},vm.openAddModal=function(source,obj){vm.addModalSource=source,vm.nodeObj=obj,$("#addModal").modal("show")},vm.showLoader=!1,vm.toggleFolder=function(folder,icon,node){folder.$modelValue.backup||($(folder.$treeScope.$element[0]).find(".folder-open").removeClass("folder-open"),$(folder.$element[0]).find(".row").first().addClass("folder-open"),vm.showLoader=!0,apiFactory.viewHierarchy(folder.$modelValue._id).then(function(resp){vm.windowItems={folderData:folder,folders:folder.$modelValue.children,files:resp.data.files},vm.breadCrumbList=resp.data.breadcrumbs,vm.showLoader=!1,folder.$modelValue.files=resp.data.files,navigationStack.push(folder)}).catch(function(e){console.log(e)}),folder.collapsed?folder.toggle():icon&&navigationStack.push(folder))};var navigationStack=fileManagerFactory.navigationStack();vm.navigate=function(forward){var folder=forward?navigationStack.forward():navigationStack.backward();folder&&(vm.showLoader=!0,apiFactory.viewHierarchy(folder.$modelValue._id).then(function(resp){vm.windowItems={folderData:folder,folders:folder.$modelValue.children,files:resp.data.files},vm.showLoader=!1,folder.$modelValue.files=resp.data.files}).catch(function(e){console.log(e)}))},vm.openFolder=function(id){var folderData=vm.windowItems.folderData.childNodes().reduce(function(acc,x){return x.$modelValue._id===id&&(acc=x),acc},null);vm.showLoader=!0,apiFactory.viewHierarchy(id).then(function(resp){navigationStack.push(folderData),vm.windowItems={folderData:folderData,folders:resp.data.folders,files:resp.data.files},vm.breadCrumbList=resp.data.breadcrumbs,vm.showLoader=!1}).catch(function(e){console.log(e)})},vm.addFolder=function(name,folder){$("#addModal").modal("hide");var payload={name:name,isParent:!1,parent:folder};apiFactory.addHierarchy(payload).then(function(resp){folder.children.push(resp.data.data),Notification.success(resp.data.message)}).catch(function(e){console.log(e)})},vm.addFileToHierarchy=function(assets,folder){$("#addModal").modal("hide");var assetId=assets.map(function(x){return x._id}),hierarchyId=folder._id;apiFactory.addFileToHierarchy({assetId:assetId,hierarchyId:hierarchyId}).then(function(resp){console.log(resp),Notification.success(resp.data.message)}).catch(function(e){console.log(e)})},vm.deleteFile=function(id,folderData){$("#fileView").modal("hide"),apiFactory.deleteAssets({assetId:id}).then(function(resp){vm.showLoader=!0,apiFactory.viewHierarchy(folderData.$modelValue._id).then(function(resp){vm.windowItems={folderData:folderData,folders:folderData.$modelValue.children,files:resp.data.files},vm.showLoader=!1,folderData.$modelValue.files=resp.data.files}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})},vm.uploadState=!1,vm.completedAll=!1,vm.fileUpdated=function(files,event){var fileObj=event.target.files;vm.uploadState=!1,vm.completedAll=!1,vm.fileNames=Object.keys(fileObj).map(function(x){var val=fileObj[x];return val.progress=0,val.isPaused=!1,val.completed=!1,val.aborted=!1,val.plan=!1,val})},vm.toggleUploadViewMaximize=function(val){vm.uploadViewMaximize=!val},vm.preUpload=function(files,folder){console.log(files),$("#addModal").modal("hide"),fileManagerFactory.checkDuplicateFiles(files,folder._id).then(function(processed){processed.duplicates.length?(vm.preUploadFiles=processed,console.log(vm.preUploadFiles),$("#versioningModal").modal("show")):(console.log(processed),vm.uploadFile(processed,projectStore.get()._id,folder))}).catch(function(e){console.log(e)})},vm.processDuplicateFileName=function(file){"version"===file.action?file.assetName=fileManagerFactory.generateVersion(file.name):file.assetName=file.name},vm.uploadFile=function(files,projectId,folder){if(fileManagerFactory.checkNameChange(files.duplicates))Notification.warning("File names can't be the same");else if($("#versioningModal").modal("hide"),files=[].concat(_toConsumableArray(files.duplicates),_toConsumableArray(files.uploadFiles)),vm.uploadState=!0,$("#addModal").modal("hide"),vm.uploadViewFiles=fileManagerFactory.splitDestination(files),angular.forEach(vm.uploadViewFiles.s3,function(x){uploadFactory.start(function(evaporate){x.pause=uploadFactory.pause.bind(evaporate,x),x.resume=uploadFactory.resume.bind(evaporate,x),x.abort=uploadFactory.abort.bind(evaporate,x);var addConfig={name:x.name,file:x,progress:function(p,stats){x.progress=x.progress>Math.round(100*p)?x.progress:Math.round(100*p),vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()})},complete:function(_xhr,awsKey){x.completed=!0,$timeout(function(){$scope.$apply()}),console.log("Complete!")}};evaporate.add(addConfig).then(function(awsObjectKey){var payload={type:fileManagerFactory.resolveDestType(x),projectId:projectStore.get()._id,folderId:folder._id,assetData:{assetName:x.assetName,bucket:"3dfilesdata",key:"test/"+x.name,mimetype:x.type,bytes:x.size,planDocument:x.plan}};apiFactory.newFileUpload(payload).then(function(resp){folder&&folder.files.push(resp.data.data)}).catch(function(e){console.log(e)}),Notification.success("File successfully uploaded"),console.log("File successfully uploaded to:",awsObjectKey)},function(reason){x.aborted=!0,vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()}),console.log("File did not upload sucessfully:",reason)})})}),vm.uploadViewFiles.cloudinary.length){var cloudinaryPayload={files:vm.uploadViewFiles.cloudinary,assetNames:vm.uploadViewFiles.cloudinary.map(function(x){return x.assetName}),projectId:projectId,hierarchyId:folder._id};apiFactory.uploadFileInFileManager(cloudinaryPayload).then(function(resp){vm.uploadViewFiles.cloudinary=vm.uploadViewFiles.cloudinary.map(function(x){return x.completed=!0,x}),vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()}),folder&&resp.data.data.forEach(function(x){folder.files.push(x)}),Notification.success(resp.data.message)}).catch(function(e){console.log(e)})}},vm.closeUploadView=function(){vm.uploadState=!1},vm.fileView=function(file){$("#fileView").modal("show"),vm.previewData=file,vm.previewData.customUrl="pdf"===file.format?file.secure_url.replace(/\.pdf/,".png"):file.secure_url},vm.editEnabled=!1,vm.toggleEdit=function(bool){vm.editEnabled=bool},$scope.backBtnView=!1,vm.contextMenuOptions={explorer:[{text:"Paste item(s)",click:function($itemScope,$event,modelValue,text,$li){vm.windowItems.folderData?clipBoard.paste(vm.windowItems.folderData.$modelValue._id).then(function(resp){resp&&apiFactory.viewHierarchy(vm.windowItems.folderData.$modelValue._id).then(function(resp){vm.windowItems={folderData:vm.windowItems.folderData,folders:resp.data.folders,files:resp.data.files}}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)}):Notification.warning("Cannot paste file in root location")}}],file:[{text:"Copy",click:function($itemScope,$event,modelValue,text,$li){clipBoard.copy($itemScope.file)}},{text:"Cut",click:function($itemScope,$event,modelValue,text,$li){clipBoard.cut($itemScope.file,vm.windowItems.folderData.$modelValue._id)}},{text:"Move to",click:function($itemScope){vm.pdfonly=!1,vm.pickerFolders=angular.copy(vm.rootFolders),vm.moveToSourceFile=$itemScope.file,$("#moveTo").modal("show"),$(".rootFolder").show(),$(".childFolder").hide(),vm.moveto="move To",$scope.folderName="Root Folder","Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1}}]},vm.childFolderView=function(val){vm.childFolders=val.children,vm.moveto=val.name,$(".rootFolder").hide(),$(".childFolder").show()},$scope.backBtnView=!1,"Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1;vm.saveHierarchyTree=function(name){if(name){$("#saveTemplateModal").modal("hide");var data={name:name};apiFactory.saveHierarchyTree(projectStore.get()._id,data).then(function(resp){Notification.success(resp.data.message)}).console.log(function(e){console.log(e)})}else Notification.error("Please enter template name")},vm.selectedTemplate="",apiFactory.getHierarchyTemplate().then(function(resp){vm.templateList=resp.data.data}).catch(function(e){console.log(e)}),vm.assignTemplate=function(){var data={projectId:projectStore.get()._id,templateId:vm.selectedTemplate._id};$("#assignTemplateModal").modal("hide"),apiFactory.changeProjectTemplate(data).then(function(resp){Notification.success(resp.data.message),vm.getPrimaryFolders(projectStore.get()),apiFactory.getProjectById(projectStore.get()._id).then(function(resp){projectStore.set(resp.data),vm.backupFolders=projectStore.get().backupFolders}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})},vm.showBackupFiles=!1,vm.showRecentFiles=!1,vm.toggleBookmarks=function(val,key){vm[key]=!val},vm.loadProjectFiles=function(id){apiFactory.showProjectFiles(id,5).then(function(response){vm.projectFiles=response.data.data})},vm.loadProjectFiles(projectStore.get()._id)})}(),function(){angular.module("app").controller("invoiceCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment,$location){var logout=globals.logout,userStore=globals.userStore;globals.debounce;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),console.log(this.userData),this.logout=function(){logout()},$scope.activeClass=function(path){return $location.path()===path?"active":""}})}(),function(){angular.module("app").controller("issueDetailCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService,FileSaver){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.issueId=$stateParams.id,vm.ImageAssets=[],vm.DocumentAssets=[],$scope.currentPage=1,$scope.itemsPerPage=3,vm.getIssueDetail=function(){apiFactory.getIssueById(vm.issueId).then(function(resp){vm.issueData=resp.data,console.log("issuedata: ",vm.issueData),vm.totalItems=vm.issueData.comments.length,$scope.ArrayComments=vm.issueData.comments.reverse(),$scope.ArrayActivities=vm.issueData.issueActivity.reverse(),vm.allComments=$scope.ArrayComments.slice(0,3),vm.allActivities=$scope.ArrayActivities.slice(0,6),$timeout(function(){$("#pagination").pagination({items:vm.totalItems,itemsOnPage:$scope.itemsPerPage,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),function(page){var pagedData=vm.issueData.comments.slice((page-1)*$scope.itemsPerPage,page*$scope.itemsPerPage);vm.allComments=pagedData,$scope.$apply()}(page)}}),$("#paginationActivity").pagination({items:vm.issueData.issueActivity.length,itemsOnPage:7,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),function(page){var pagedData=vm.issueData.issueActivity.slice(7*(page-1),7*page);vm.allActivities=pagedData,$scope.$apply()}(page)}})}),vm.issueData.listAssets.map(function(x){"image/png"==x.mimetype||"image/jpg"==x.mimetype?vm.ImageAssets.push(x):vm.DocumentAssets.push(x)})})},vm.getIssueDetail(),vm.postComment=function(comment){console.log("comment: ",comment);var comment1=comment.replace(/\n\r?/g,"<br />");if(console.log("comment: ",comment1),null==comment)Notification.error("Please add comment.");else{var commentobj={comment:comment};apiFactory.postCommentForIssue(vm.issueId,commentobj).then(function(resp){console.log("esp:",resp),vm.getIssueDetail(),$("#commentarea").val(""),Notification.success("Comment added successfully..")}).catch(function(e){Notification.error("Couldn't update comment")})}},$scope.changeCompletionStatus=function(){alert("completion")},vm.downloadFile=function(docs){console.log("docs",docs);var blob=new Blob([docs],{type:docs.mimetype});console.log("blob",blob),saveAs(blob,docs.origionalname)},$scope.reOpenIssue=function(){apiFactory.reOpenIssueStatusUpdate(vm.issueId).then(function(resp){vm.getIssueDetail(),$("#confirmmodal").modal("hide"),Notification.success("Issue status is now open")}).catch(function(e){Notification.error("could not update Status")})},$scope.markIssueAsComplete=function(comment,imageFiles){console.log(comment),console.log(imageFiles);var editObject={comment:comment,Images:imageFiles};apiFactory.saveIssueAsComplete(vm.issueId,editObject).then(function(resp){vm.getIssueDetail(),$("#completionstatusmodal").modal("hide"),Notification.success("Issue is been marked as completed")}).catch(function(e){Notification.error("Something wrong happened. couldent update changes")})}})}(),function(){angular.module("app").controller("issuesCtrl",function($scope,$rootScope,$timeout,authFactory,$state,$q,apiFactory,Notification,globals,fileManagerFactory,Upload,localStorageService,uploadFactory){var vm=this;vm.backImg;var logout=globals.logout,userStore=globals.userStore,debounce=globals.debounce;if(vm.UploadFiles=[],vm.issueData={},$scope.issueModel={},$scope.file,$scope.comment="",$scope.openEdit=!1,$scope.filesToRemove=[],$scope.isSelectedBtn=!1,$scope.updateform=!1,$scope.UndoArray=[],$scope.redoArray=[],vm.planToMark=[],vm.LocalImgs=[],$scope.searchingText=!1,$scope.openFillColor=!1,$scope.colorpick="#0000ff",$scope.colorWell,$scope.fillWell,$scope.fillColor="transparent",$scope.textForm=!1,$scope.canvas=document.getElementById("slideCanvas"),vm.errorImage="assets/images/enduserissue.png",$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.inputImg=[],vm.uploadImg=[],vm.inputFiles=[],vm.uploadFiles=[],$(".issuesList").DataTable(),$scope.activeJustified=0,vm.currentPage=1,vm.toggleObj={toggleIssue:{systemTag:!1,title:!1,description:!1,projectName:!1,created:!0}},vm.searchText="",vm.sortissues=function(type,resource){void 0===vm.toggleObj[resource][type]?vm.toggleObj[resource][type]=!0:vm.toggleObj[resource][type]=!vm.toggleObj[resource][type],apiFactory.listAllIssues({page:1,chunk:10,sort:type,search:vm.searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allIssues=resp.data.list,console.log("all issues",vm.allIssues),vm.issueCount=resp.data.total,$timeout(function(){$scope.searchingText=!1,$("#pagination").pagination({items:vm.issueCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllIssues({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.allIssues=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})};var searchDebounce=debounce(250);function dragStartLine(e){$scope.isLine=!0,$scope.dragging=!0;var x=Math.floor((e.clientX-$scope.rect.left)/($scope.rect.right-$scope.rect.left)*$scope.canvas.width),y=Math.floor((e.clientY-$scope.rect.top)/($scope.rect.bottom-$scope.rect.top)*$scope.canvas.height);$scope.dragStartLocation={X:x,Y:y},$scope.snapshot=$scope.context1.getImageData(0,0,$scope.canvas.width,$scope.canvas.height)}function dragLine(e){var position,x=Math.floor((e.clientX-$scope.rect.left)/($scope.rect.right-$scope.rect.left)*$scope.canvas.width),y=Math.floor((e.clientY-$scope.rect.top)/($scope.rect.bottom-$scope.rect.top)*$scope.canvas.height);!0===$scope.dragging&&($scope.context1.putImageData($scope.snapshot,0,0),position={X:x,Y:y},$scope.context1.beginPath(),$scope.context1.moveTo($scope.dragStartLocation.X,$scope.dragStartLocation.Y),$scope.context1.lineTo(position.X,position.Y),$scope.context1.strokeStyle=$scope.colorpick,$scope.context1.lineWidth=2,$scope.context1.lineCap="round",$scope.context1.stroke())}function dragStopLine(e){var position;$scope.dragging=!1,$scope.context1.putImageData($scope.snapshot,0,0);var x=Math.floor((e.clientX-$scope.rect.left)/($scope.rect.right-$scope.rect.left)*$scope.canvas.width),y=Math.floor((e.clientY-$scope.rect.top)/($scope.rect.bottom-$scope.rect.top)*$scope.canvas.height);position={X:x,Y:y},$scope.context1.beginPath(),$scope.context1.moveTo($scope.dragStartLocation.X,$scope.dragStartLocation.Y),$scope.context1.lineTo(position.X,position.Y),$scope.context1.strokeStyle=$scope.colorpick,$scope.context1.lineWidth=2,$scope.context1.lineCap="round",$scope.context1.stroke();var imageData=$scope.context1.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData),vm.markingsArray.push(imageData),console.log("undoArray: ",$scope.UndoArray)}function dragStart(e){$scope.isCircle=!0,$scope.last_mousex=parseInt((e.clientX-$scope.rect1.left)/($scope.rect1.right-$scope.rect1.left)*$scope.canvas.width),$scope.last_mousey=parseInt((e.clientY-$scope.rect1.top)/($scope.rect1.bottom-$scope.rect1.top)*$scope.canvas.height),$scope.mousedown=!0,$scope.snapshotCircle=$scope.ctx.getImageData(0,0,$scope.canvas.width,$scope.canvas.height)}function drag(e){if($scope.mousex=parseInt((e.clientX-$scope.rect1.left)/($scope.rect1.right-$scope.rect1.left)*$scope.canvas.width),$scope.mousey=parseInt((e.clientY-$scope.rect1.top)/($scope.rect1.bottom-$scope.rect1.top)*$scope.canvas.height),$scope.mousedown){$scope.ctx.save(),$scope.ctx.putImageData($scope.snapshotCircle,0,0),$scope.ctx.beginPath();var scalex=($scope.mousex-$scope.last_mousex)/2*1,scaley=($scope.mousey-$scope.last_mousey)/2*1;$scope.ctx.scale(scalex,scaley),$scope.centerx=$scope.last_mousex/scalex+1,$scope.centery=$scope.last_mousey/scaley+1,$scope.ctx.arc($scope.centerx,$scope.centery,1,0,2*Math.PI),$scope.ctx.restore(),$scope.ctx.strokeStyle=$scope.colorpick,$scope.ctx.fillStyle=$scope.fillColor,$scope.ctx.fill(),$scope.ctx.lineWidth=2,$scope.ctx.stroke()}}function dragStop(e){$scope.mousedown=!1;var imageData=$scope.ctx.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData),vm.markingsArray.push(imageData)}function MarkWrite(e){$scope.isMarker=!0;var mousex=parseInt((e.clientX-$scope.rectmarker.left)/($scope.rectmarker.right-$scope.rectmarker.left)*$scope.canvas.width),mousey=parseInt((e.clientY-$scope.rectmarker.top)/($scope.rectmarker.bottom-$scope.rectmarker.top)*$scope.canvas.height);$scope.markercontext.beginPath(),$scope.markercontext.arc(mousex,mousey,8,0,2*Math.PI),$scope.markercontext.strokeStyle=$scope.colorpick,$scope.markercontext.fillStyle="blue",$scope.markercontext.fill(),$scope.markercontext.stroke();var imageData=$scope.markercontext.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData),vm.markingsArray.push(imageData)}function TextWrite(e){$scope.isText=!0,$scope.cntxt=$scope.canvas.getContext("2d");var coords=$scope.canvas.getBoundingClientRect(),mousex=parseInt((e.clientX-coords.left)/(coords.right-coords.left)*$scope.canvas.width),mousey=parseInt((e.clientY-coords.top)/(coords.bottom-coords.top)*$scope.canvas.height);$scope.cntxt.font="15px Times New Roman",$scope.cntxt.fillStyle=$scope.colorpick,$scope.cntxt.strokeText($scope.placeDataAtPixel,mousex,mousey);var imageData=$scope.cntxt.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData),vm.markingsArray.push(imageData),$scope.placeDataAtPixel=""}vm.searchIssues=function(text){searchDebounce(function(){apiFactory.listAllIssues({page:1,chunk:10,search:text,sort:"created",sortType:!1}).then(function(resp){vm.allIssues=resp.data.list,vm.issueCount=resp.data.total,$timeout(function(){$scope.searchingText=!0,$("#paging").pagination({items:vm.issueCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllIssues({page:page,chunk:10,sort:type,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allIssues=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},[text])},vm.sortissues("created","toggleIssue"),vm.dtOptions={paging:!1,info:!1,ordering:!1,searching:!1},$scope.issueCategory=["Safety","Quality","Issue"],apiFactory.listAllUsers().then(function(resp){vm.allUsers=resp.data.list}),apiFactory.listAllRoofers().then(function(resp){vm.allRoofers=resp.data.list}),apiFactory.listAllProjects().then(function(resp){vm.allProjects=resp.data.list}),apiFactory.getIssuesList().then(function(resp){vm.listOfIssue=resp.data.list}),vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"image"==$scope.fileType?(vm.uploadImg[index].description=data,$("#closePopoverImg_"+index).trigger("click")):(vm.uploadFiles[index].description=data,$("#closePopoverFile_"+index).trigger("click"))},vm.fileAdded=function(files,event,modal){console.log(vm.inputImg);var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){if(x.description="","image"==modal)if(0==vm.uploadImg.length)vm.uploadImg.push(x);else{var duplicateImg=!1;angular.forEach(vm.uploadImg,function(y){x.name!=y.name||(duplicateImg=!0)}),duplicateImg?Notification.error("File name already exist"):vm.uploadImg.push(x)}else if(0==vm.uploadFiles.length)/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x);else{var _duplicateImg4=!1;angular.forEach([].concat(vm.uploadFiles,vm.uploadImg),function(y){x.name!=y.name||(_duplicateImg4=!0)}),_duplicateImg4?Notification.error("File name already exist"):/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x)}}),console.log(vm.uploadImg)},vm.deleteFile=function(indexVal,type){"image"==type?vm.uploadImg.splice(indexVal,1):vm.uploadFiles.splice(indexVal,1)},vm.addIssueDetails=function(){if(vm.issueData.project)if(vm.issueData.category)if(vm.issueData.assignedTo)if(vm.issueData.owner){$scope.imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles),console.log($scope.imgAndFiles);var formData={title:vm.issueData.title,description:vm.issueData.description,projectId:vm.issueData.project,issueCategory:vm.issueData.category,assignedTo:vm.issueData.assignedTo,issueStatus:vm.issueData.issueStatus,ownerId:vm.issueData.owner,dependencyOn:vm.issueData.dependencyOn,deadLine:vm.issueData.deadLine,files:$scope.imgAndFiles,assetObj:$scope.imgAndFiles.map(function(x,i){return{assetDescription:x.description}})};apiFactory.createIssue(formData).then(function(resp){Notification.success(resp.data.message),$("#issue_modal").modal("hide"),$("#issue_marker").modal("show"),vm.inputImg=[],vm.uploadImg=[],vm.inputFiles=[],vm.uploadFiles=[],vm.issueData={},vm.toggleObj.toggleIssue.createdAt=!0,vm.sortMaterials("createdAt")}).catch(function(e){console.log(e)})}else Notification.error("Please Select issue owner");else Notification.error("Please Select assigned user");else Notification.error("Please Select issue Category");else Notification.error("Please Select project")},vm.updateIssueDetails=function(formData){var issueObject={};null==vm.updateIssue?(console.log("update issue is undefined"),issueObject.Title=$scope.issueModel.title,issueObject.description=$scope.issueModel.description,issueObject.deadLine=$scope.issueModel.deadLine,issueObject.issueStatus=$scope.issueModel.issueStatus):(console.log("update isuue is not undfined so in esle case"),null==vm.updateIssue.title?issueObject.Title=$scope.issueModel.title:issueObject.Title=vm.updateIssue.title),vm.updateIssueDetails=function(formData){var issueObject={};null==vm.updateIssue?(console.log("update issue is undefined"),issueObject.Title=$scope.issueModel.title,issueObject.description=$scope.issueModel.description):issueObject.description=vm.updateIssue.description,null==vm.updateIssue.deadLine?issueObject.deadLine=$scope.issueModel.deadLine:issueObject.deadLine=vm.updateIssue.deadLine,null==vm.updateIssue.issueStatus?issueObject.issueStatus=$scope.issueModel.issueStatus:issueObject.issueStatus=vm.updateIssue.issueStatus},$scope.inputFiles.length>0&&(issueObject.files=$scope.inputFiles),$scope.filesToRemove.length>0&&(console.log("files to remove",$scope.filesToRemove),issueObject.removedFiles=$scope.filesToRemove),console.log("ISUUEOBJECT",issueObject),apiFactory.updateIssue(issueObject,$scope.issueModel._id).then(function(resp){Notification.success("Issue has been updated successfully"),$scope.inputFiles=[],$scope.filesToRemove=[],$scope.updateform=!1,$("#issuedetail").modal("hide"),vm.sortissues("created","toggleIssue")}).catch(function(e){console.log(e),$scope.inputFiles=[],$scope.filesToRemove=[],$scope.updateform=!1,Notification.error("Something went wrong")})},$scope.readImg=function(fileImg){var output=document.getElementById("blah");output.src=URL.createObjectURL(fileImg)},$scope.deleteImg=function(index,array){array.splice(index,1)},vm.localFiles=[],$scope.getFilesFromLocal=function(files){console.log("local files: ",files),files?apiFactory.saveLocalIssueAsset(files).then(function(resp){console.log("RESP: ",resp),resp.data.data.forEach(function(onefile){vm.planToMark.push(onefile)}),$("#issue_marker").modal("hide");vm.planToMark.slice(-1);$("#carousellist").carousel("pause").removeData(),$("#carousellist").carousel(vm.planToMark)}).catch(function(e){Notification.error("couldnot load images please select images again.")}):Notification.error("No Files selected.")},$("#issue_marker").on("hidden.bs.modal",function(e){$(this).removeData("bs.modal"),$("#chooseIssueRoofModal").is(":visible")?console.log("Modal is open"):(console.log("Modal is closed"),$(this).modal("show"))}),$scope.getImagesInCarosel=function(){apiFactory.getProjectRoofPlans("58eb9d2ec921d67036787832").then(function(resp){var ProjectPlans=resp.data.data;vm.planPickerPlans=ProjectPlans,console.log("planpicker: ",vm.planPickerPlans),$("#issue_marker").modal("hide"),$("#chooseIssueRoofModal").modal("show")}).catch(function(e){console.log(e)})},vm.choosePlanData=function(plan){vm.planToMark.push(plan.assetObj)},vm.choosePlanData1=function(plan){vm.planToMark.push(plan)},$scope.addToDetails=function(imgarray){$("#chooseIssueRoofModal").modal("hide"),$("#issue_marker").modal("show"),console.log("vm.plan to mrk:",vm.planToMark);imgarray.slice(-1);$("#carousellist").carousel("pause").removeData(),$("#carousellist").carousel(vm.planToMark)},$scope.getDetail=function(issue){$("#issuedetail").modal(),$scope.issueModel=issue,$scope.Title=$scope.issueModel.title,$scope.Description=$scope.issueModel.description,$scope.DeadLineDate=new Date($scope.issueModel.deadLine),document.getElementById("deadline").defaultValue=$scope.DeadLineDate,$scope.day=$scope.DeadLineDate.getDate()-1,$scope.month=$scope.DeadLineDate.getMonth()+1,$scope.year=$scope.DeadLineDate.getFullYear(),$scope.deadLineDate=$scope.month+"/"+$scope.day+"/"+$scope.year,$scope.Status=$scope.issueModel.issueStatus},$scope.addFileToUpdate=function(file,comment){$scope.inputFiles.push({file:file,comment:comment}),console.log($scope.inputFiles),$scope.file="",$scope.comment=""},$scope.updateRequest=function(updateobj){console.log("to update data",updateobj),$scope.updateform=!0,$scope.openEdit=!1},$scope.removeFiles=function(index,array,imageId){array.splice(index,1),console.log("removing files","index",index,"imageId",imageId),$scope.filesToRemove.push(imageId),console.log("removing files",$scope.filesToRemove)},vm.closeUpdteModel=function(){$scope.updateform=!1},$scope.openEditDate=function(){$scope.openEdit=!0},$scope.closeEditDate=function(){$scope.openEdit=!1},$scope.imageTempUrl="../assets/images/rooftestimages/image1.jpg",$scope.rooftestDemo=function(string){console.log("string",string),$scope.imageTempUrl=".."+string},$("#issue_marker").on("shown.bs.modal",function(e){$("#carousellist").flexslider({animation:"slide",controlNav:!1,animationLoop:!1,slideshow:!1,itemWidth:200,itemMargin:3})}),$scope.thisImage="",vm.markingsArray=[],$scope.ratio,$scope.openSliderImage=function(plan,index,count){$scope.thisImage=plan,$scope.context=$scope.canvas.getContext("2d");var base_image=new Image;base_image.crossOrigin="Anonymous",base_image.src=plan.url,console.log("base image");var hRatio=$scope.canvas.width/base_image.width,vRatio=$scope.canvas.height/base_image.height;$scope.ratio=Math.min(hRatio,vRatio),console.log("RATIO: ",$scope.ratio);var centerShift_x=($scope.canvas.width-base_image.width*$scope.ratio)/2,centerShift_y=($scope.canvas.height-base_image.height*$scope.ratio)/2;$scope.context.clearRect(0,0,$scope.canvas.width,$scope.canvas.height),vm.markingsArray=[],$scope.context.drawImage(base_image,0,0,base_image.width,base_image.height,centerShift_x,centerShift_y,base_image.width*$scope.ratio,base_image.height*$scope.ratio),console.log("placed image")},vm.addMarkedImgData=function(){console.log("add mark image function");var dataImage=$scope.canvas.toDataURL("image/png");fetch(dataImage).then(function(res){return res.blob()}).then(function(blob){var file=new File([blob],"detailfile");console.log("file: ",file),vm.UploadFiles.push({image:$scope.thisImage._id,markings:vm.markingsArray,markedImg:file}),console.log("vm.UploadFiles",vm.UploadFiles)});var hRatio=$scope.canvas.width/base_image.width,vRatio=$scope.canvas.height/base_image.height;$scope.ratio=Math.min(hRatio,vRatio),console.log("RATIO: ",$scope.ratio);var centerShift_x=($scope.canvas.width-base_image.width*$scope.ratio)/2,centerShift_y=($scope.canvas.height-base_image.height*$scope.ratio)/2;$scope.context.clearRect(0,0,$scope.canvas.width,$scope.canvas.height),vm.markingsArray=[],$scope.context.drawImage(base_image,0,0,base_image.width,base_image.height,centerShift_x,centerShift_y,base_image.width*$scope.ratio,base_image.height*$scope.ratio),console.log("placed image")},vm.addMarkedImgData=function(){console.log("add mark image function");var dataImage=$scope.canvas.toDataURL("image/png");fetch(dataImage).then(function(res){return res.blob()}).then(function(blob){var file=new File([blob],"detailfile");console.log("file: ",file),vm.UploadFiles.push({image:$scope.thisImage._id,markedImg:file}),console.log("vm.UploadFiles",vm.UploadFiles)})},$scope.isLine=!1,$scope.isCircle=!1,$scope.isMarker=!1,$scope.isText=!1,$scope.drawLineOnCanvas=function(){$scope.openFillColor=!1,$scope.snapshot,$scope.textForm=!1,$scope.dragging=!1,$scope.dragStartLocation,$("#gpsbtn").css("background-color","#D3D3D3"),$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/linewhite.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",$("#txtbtn").css("background-color","#D3D3D3"),$("#circlebtn").css("background-color","#D3D3D3"),$("#linebutton").css("background-color","#009ACD"),$scope.context1=$scope.canvas.getContext("2d"),$scope.rect=$scope.canvas.getBoundingClientRect(),1!=$scope.isCircle&&1!=$scope.isMarker&&1!=$scope.isText||($scope.canvas.removeEventListener("mousedown",dragStart),$scope.canvas.removeEventListener("mousemove",drag),$scope.canvas.removeEventListener("mouseup",dragStop),$scope.canvas.removeEventListener("mousedown",MarkWrite),$scope.canvas.removeEventListener("mousedown",TextWrite)),$scope.canvas.addEventListener("mousedown",dragStartLine),$scope.canvas.addEventListener("mousemove",dragLine),$scope.canvas.addEventListener("mouseup",dragStopLine)},$scope.drawCircleOnCanvas=function(){$scope.openFillColor=!0,$scope.textForm=!1,$("#gpsbtn").css("background-color","#D3D3D3"),$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circlewhite.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",$("#linebutton").css("background-color","#D3D3D3"),$("#txtbtn").css("background-color","#D3D3D3"),$("#circlebtn").css("background-color","#009ACD"),$("#circlebtn").css("color","#ffffff"),$scope.ctx=$scope.canvas.getContext("2d"),$scope.canvasx=$($scope.canvas).offset().left,$scope.canvasy=$($scope.canvas).offset().top,$scope.last_mousey,$scope.mousey,$scope.last_mousex=$scope.last_mousey=0,$scope.mousex=$scope.mousey=0,$scope.mousedown=!1,$scope.rect1=$scope.canvas.getBoundingClientRect(),1!=$scope.isLine&&1!=$scope.isMarker||($scope.canvas.removeEventListener("mousedown",dragStartLine),$scope.canvas.removeEventListener("mousemove",dragLine),$scope.canvas.removeEventListener("mouseup",dragStopLine),$scope.canvas.removeEventListener("mousedown",MarkWrite),$scope.canvas.removeEventListener("mousedown",TextWrite)),$scope.canvas.addEventListener("mousedown",dragStart),$scope.canvas.addEventListener("mousemove",drag),$scope.canvas.addEventListener("mouseup",dragStop)},$scope.drawmarkerOnCanvas=function(){$scope.openFillColor=!0,$scope.textForm=!1,$scope.markercontext=$scope.canvas.getContext("2d"),1!=$scope.isCircle&&1!=$scope.isLine&&1!=$scope.isText||($scope.canvas.removeEventListener("mousedown",dragStart),$scope.canvas.removeEventListener("mousemove",drag),$scope.canvas.removeEventListener("mouseup",dragStop),$scope.canvas.removeEventListener("mousedown",dragStartLine),$scope.canvas.removeEventListener("mousemove",dragLine),$scope.canvas.removeEventListener("mouseup",dragStopLine),$scope.canvas.removeEventListener("mousedown",TextWrite)),$("#gpsbtn").css("background-color","#009ACD"),$scope.btnMarker="../assets/images/gpswhite.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",$("#txtbtn").css("background-color","#D3D3D3"),$("#circlebtn").css("background-color","#D3D3D3"),$("#linebutton").css("background-color","#D3D3D3"),$scope.rectmarker=$scope.canvas.getBoundingClientRect(),$scope.canvas.addEventListener("mousedown",MarkWrite)},$scope.fillTextOnCanvas=function(){$scope.openFillColor=!1,$scope.textForm=!0,$("#gpsbtn").css("background-color","#D3D3D3"),$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/textwhite.png",$("#txtbtn").css("background-color","#009ACD"),$("#circlebtn").css("background-color","#D3D3D3"),$("#linebutton").css("background-color","#D3D3D3"),1!=$scope.isCircle&&1!=$scope.isLine&&1!=$scope.isMarker||($scope.canvas.removeEventListener("mousedown",dragStart),$scope.canvas.removeEventListener("mousemove",drag),$scope.canvas.removeEventListener("mouseup",dragStop),$scope.canvas.removeEventListener("mousedown",dragStartLine),$scope.canvas.removeEventListener("mousemove",dragLine),$scope.canvas.removeEventListener("mouseup",dragStopLine),$scope.canvas.removeEventListener("mousedown",MarkWrite)),$scope.canvas.addEventListener("mousedown",TextWrite)},$scope.UndoDrawing=function(){if($scope.UndoArray.length>0){var undoCtx=$scope.canvas.getContext("2d");undoCtx.clearRect(0,0,$scope.canvas.width,$scope.canvas.height);var imgdata=$scope.UndoArray.pop();$scope.redoArray.push(imgdata),$scope.UndoArray.forEach(function(element){undoCtx.putImageData(element,0,0)})}},$scope.RedoDrawing=function(){var undoCtx=$scope.canvas.getContext("2d");if($scope.redoArray.length>0){var redo=$scope.redoArray.pop();undoCtx.putImageData(redo,0,0)}},vm.saveMarkInfo=function(){var markedfile=JSON.stringify(vm.UploadFiles);apiFactory.postMarkImg(markedfile).then(function(resp){console.log("after post markings"),console.log("newData: ",newData)});var markedfile={data:"datafile",allObj:vm.UploadFiles};apiFactory.postMarkImg(markedfile).then(function(resp){console.log("after post markings"),console.log("newData: ",newData)})},$(document).on("click",".lightbox img",function(e){})})}(),function(){angular.module("app").controller("materialCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment){var vm=this,logout=globals.logout,userStore=globals.userStore,debounce=globals.debounce;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),console.log(vm.userData),vm.logout=function(){logout()},vm.timecheck=function(file){console.log(file)},vm.inputImg=[],vm.uploadImg=[],vm.inputFiles=[],vm.uploadFiles=[],vm.dtOptions={retrieve:!0,paging:!1,info:!1,ordering:!1};var inventoryState=globals.inventoryState();vm.activeTab=inventoryState.get().tab,$(".tab-content .tab-pane").eq(inventoryState.get().tab).addClass("show"),vm.currentPage=1,vm.toggleTab=function(val){inventoryState.setTab(val)},vm.toggleObj={material:{systemTag:!0,materialCost:!1,rooferCost:!1,createdAt:!0,name:!1},combo:{systemTag:!0,materialCost:!1,rooferCost:!1,createdAt:!0,name:!1}},apiFactory.getAllSuppliers().then(function(resp){vm.suppliers=resp.data.list}).catch(function(e){console.log(e)}),vm.searchText=inventoryState.get().searchText,$scope.$watch("vm.searchText",function(text){inventoryState.text(text)},!0),vm.unitSelect=function(data){vm.selectedUnit=data.name},vm.sortDisplay=function(type,resource){if(type&&resource)return"Sorted By: "+type+" - "+(vm.toggleObj[resource][type]?"ASC":"DSC")},vm.sortMaterials=function(type,resource){void 0===vm.toggleObj[resource][type]?vm.toggleObj[resource][type]=!0:vm.toggleObj[resource][type]=!vm.toggleObj[resource][type];var apiName="material"===resource?"listAllMaterials":"listAllComboMaterials";apiFactory[apiName]({page:inventoryState.get().page[resource],chunk:10,sort:type,search:inventoryState.get().searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm[resource]=resp.data.list,vm[resource+"Count"]=resp.data.total,$timeout(function(){$("#"+resource+"Pagination").pagination({items:vm[resource+"Count"],itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:inventoryState.get().page[resource],onPageClick:function(page,event){event.preventDefault(),inventoryState.setPage(resource,page),apiFactory[apiName]({page:page,chunk:10,sort:type,search:inventoryState.get().searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm[resource]=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})};var searchDebounce=debounce(250);vm.searchMaterials=function(text,resource){searchDebounce(function(){var apiName="material"===resource?"listAllMaterials":"listAllComboMaterials";apiFactory[apiName]({page:1,chunk:10,search:text,sort:"createdDate",sortType:!1}).then(function(resp){vm[resource]=resp.data.list,vm[resource+"Count"]=resp.data.total,$timeout(function(){$("#"+resource+"Pagination").pagination({items:vm[resource+"Count"],itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory[apiName]({page:page,chunk:10,sort:type,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.materials=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},[text,resource])},vm.sortMaterials("createdAt","material"),vm.sortMaterials("createdAt","combo");vm.addMaterial={conversionFactor:1,maintenancePeriod:90,maintenanceDate:moment().add(90,"days").format()},vm.changeMaintenancePeriod=function(days){vm.addMaterial.maintenanceDate=moment().add(days,"days").format()},vm.tabSettings={disable:!0},vm.tabChange=function(val,flag){if("combo"==flag){if(0==val)vm.tabChangeFun(val);else if(1==val){if(!vm.addComboMaterialForm.name)return void Notification.error("Please enter combo material name");if(!vm.selectedUnit)return void Notification.error("Please select unit");if(!vm.addComboMaterialForm.description)return void Notification.error("Please enter combo description");vm.tabChangeFun(val)}else if(2==val){if(0==vm.comboMaterialList.length)return void Notification.error("Please add Combination list");vm.TotalMC=0,vm.TotalRC=0,angular.forEach(vm.comboMaterialList,function(value){vm.TotalMC=parseFloat(vm.TotalMC)+parseFloat(value.materialCost),vm.TotalRC=parseFloat(vm.TotalRC)+parseFloat(value.rooferCost)}),vm.TotalMC=parseFloat(Math.round(100*vm.TotalMC)/100),vm.TotalRC=parseFloat(Math.round(100*vm.TotalRC)/100),vm.tabChangeFun(val)}}else if(0==val&&vm.tabChangeFun1(val),1==val){if(!vm.addMaterial.materialName)return void Notification.error("Please enter material name");if(!vm.selectedUnit)return void Notification.error("Please select material unit");vm.tabChangeFun1(val)}},vm.tabChangeFun=function(val){$(".dcp_modal .nav-tabs li .nav-link").removeClass("active"),$(".dcp_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("active")},vm.tabChangeFun1=function(val){$(".material_modal .nav-tabs li .nav-link").removeClass("active"),$(".material_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("active")},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.addMaterial.currency=angular.copy(vm.companyData.currentCurrency.currencyCode),vm.companyCurrency=angular.copy(vm.companyData.currentCurrency.currencyCode),console.log(vm.addMaterial.currency),$("#currency").val(vm.addMaterial.currency).trigger("change.select2")}).then(function(e){console.log(e)}),$scope.$watch("vm.addMaterial.currency",function(value){$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3")}),vm.showConversionRate=function(from,to){$(".loader").show();var currencyData={from:from,to:to};from&&to&&apiFactory.showConversionRate(currencyData).then(function(resp){vm.addMaterial.conversionFactor=resp.data.conversionFactor,$timeout(function(){$(".loader").hide()},500)}).catch(function(e){console.log(e)})},vm.addMaterialNext=function(){console.log(vm.addMaterial.materialUnit),null!=vm.addMaterial.materialName||""!=vm.addMaterial.materialName?vm.addMaterial.materialUnit||""!=vm.addMaterial.materialUnit?null!=vm.addMaterial.currency||""!=vm.addMaterial.currency?$scope.activeJustified=1:Notification.error("Please select Currency"):Notification.error("Please select material Unit"):Notification.error("Please enter material name")},vm.changeCost=function(type,cost){if("both"!=type)return cost/vm.addMaterial.conversionFactor;vm.addMaterial.materialCostValue=vm.addMaterial.materialCostValue*vm.addMaterial.conversionFactor,vm.addMaterial.rooferCostValue=vm.addMaterial.rooferCostValue*vm.addMaterial.conversionFactor},vm.deleteFile=function(indexVal,type){"image"==type?vm.uploadImg.splice(indexVal,1):vm.uploadFiles.splice(indexVal,1)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"image"==$scope.fileType?(vm.uploadImg[index].description=data,0==inventoryState.get().tab?$("#closePopoverImg_"+index).trigger("click"):$("#closePopoverDcpImg_"+index).trigger("click")):(vm.uploadFiles[index].description=data,0==inventoryState.get().tab?$("#closePopoverFile_"+index).trigger("click"):$("#closePopoverDcpFile_"+index).trigger("click"))},vm.clearData=function(val){"dcp"==val?(vm.addComboMaterialForm={},vm.inputImg=[],vm.uploadImg=[],vm.inputFiles=[],vm.uploadFiles=[],vm.selectedUnit=""):(vm.addMaterial={conversionFactor:1,maintenancePeriod:90,currency:angular.copy(vm.companyData.currentCurrency.currencyCode)},console.log(vm.addMaterial),vm.inputImg=[],vm.uploadImg=[],vm.inputFiles=[],vm.uploadFiles=[],vm.selectedUnit="",$("#profile-tab, #dcp1").removeClass("active"),$("#home-tab, #material1").addClass("active"),$("#material1").addClass("show"),vm.changeMaintenancePeriod(vm.addMaterial.maintenancePeriod))},vm.addMaterialDetails=function(){if(vm.selectedUnit)if(vm.addMaterial.materialCostValue)if(vm.addMaterial.rooferCostValue){$scope.imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles),console.log($scope.imgAndFiles);var formData={name:vm.addMaterial.materialName,unit:vm.selectedUnit,materialCost:{value:vm.changeCost("material",vm.addMaterial.materialCostValue),currencyCode:vm.addMaterial.currency},rooferCost:{value:vm.changeCost("roofer",vm.addMaterial.rooferCostValue),currencyCode:vm.addMaterial.currency},maintenancePeriod:vm.addMaterial.maintenancePeriod,suppliers:vm.addMaterial.suppliers,files:$scope.imgAndFiles,assetObj:$scope.imgAndFiles.map(function(x,i){return{assetDescription:x.description}})};console.log(formData),apiFactory.createMaterials(formData).then(function(resp){$scope.tab=1,Notification.success(resp.data.message),$("#todo_modal").modal("hide"),$("#profile-tab, #dcp1").removeClass("active"),$("#home-tab, #material1").addClass("active"),$("#material1").addClass("show"),vm.inputImg=[],vm.uploadImg=[],vm.inputFiles=[],vm.uploadFiles=[],vm.selectedUnit="",vm.toggleObj.material.createdAt=!0,vm.sortMaterials("createdAt","material"),vm.addMaterial={conversionFactor:1}}).catch(function(e){console.log(e)})}else Notification.error("Please Select roofer cost value");else Notification.error("Please Select material cost value");else Notification.error("Please Select Unit")},vm.getMaterialById=function(id){apiFactory.getMaterialById(id).then(function(resp){console.log(resp)}).catch(function(e){console.log(e)})},$("#addMaterial").on("hide.bs.modal",function(){$scope.activeJustified=0,vm.addMaterial={conversionFactor:1}}),vm.comboMaterialList=[],vm.addComboMaterialForm={},vm.percentageAddition=[],vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data,vm.loadCurrencies=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),apiFactory.listAllMaterials().then(function(resp){vm.allmaterilaList=resp.data.list}).catch(function(e){console.log(e)}),vm.comboList={quantity:1,materialCost:0,rooferCost:0},vm.getMaterialInfo=function(material){var materialInfo=JSON.parse(material);material&&(vm.comboList.materialCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.rooferCost.value*100)/100),$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3"))},vm.QtyChange=function(val,data){var material=JSON.parse(data);""==val||0==val?(vm.comboList.quantity=1,val=1,vm.comboList.materialCost=parseFloat(Math.round(val*material.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(val*material.currentRate.rooferCost.value*100)/100)):(vm.comboList.materialCost=parseFloat(Math.round(val*material.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(val*material.currentRate.rooferCost.value*100)/100))},vm.addPercentageValue=function(){vm.percentageAddition.push({percentageType:"",value:""})},vm.removePercentageAddition=function(index){vm.percentageAddition.splice(index,1)},vm.materialCombination=function(material){var data=JSON.parse(material);console.log("material--",data),""!=data&&(vm.comboMaterialList.push({materialId:data._id,name:data.name,quantity:vm.comboList.quantity,materialCost:vm.comboList.materialCost,rooferCost:vm.comboList.rooferCost,percentageAdditions:vm.percentageAddition}),vm.percentageAddition=[],vm.comboList={quantity:1,materialCost:0,rooferCost:0},vm.addComboMaterialForm.comboMaterial="",$(".select2-choice .select2-chosen").text(""))},vm.fileUpdated=function(files,event,modal){console.log(vm.inputImg);var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){if(x.description="","image"==modal)if(0==vm.uploadImg.length)vm.uploadImg.push(x);else{var duplicateImg=!1;angular.forEach(vm.uploadImg,function(y){x.name!=y.name||(duplicateImg=!0)}),duplicateImg?Notification.error("File name already exist"):vm.uploadImg.push(x)}else if(0==vm.uploadFiles.length)/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x);else{var _duplicateImg5=!1;angular.forEach([].concat(vm.uploadFiles,vm.uploadImg),function(y){x.name!=y.name||(_duplicateImg5=!0)}),_duplicateImg5?Notification.error("File name already exist"):/image/.test(x.type)?vm.uploadImg.push(x):vm.uploadFiles.push(x)}}),console.log(vm.uploadImg)},vm.createComboMaterialList=function(){var cmList=[];$scope.imgAndFiles=[].concat(vm.uploadImg,vm.uploadFiles),vm.comboMaterialList.forEach(function(x){cmList.push({materialId:x.materialId,quantity:x.quantity,percentageAdditions:x.percentageAdditions})});var data={name:vm.addComboMaterialForm.name,unit:vm.selectedUnit,comboMaterialList:cmList,files:$scope.imgAndFiles,assetObj:$scope.imgAndFiles.map(function(x,i){return{assetDescription:x.description}})};apiFactory.getSystemTag().then(function(resp){data.systemTag=resp.data.comboTag,apiFactory.createComboMaterial(data).then(function(resp){Notification.success(resp.data.message),$("#todo_modal.dcp_modal").modal("hide")}).catch(function(e){Notification.error(e.data.message)})}).catch(function(e){Notification.error(e.data.message)})},vm.removeMateril=function(item){vm.comboMaterialList.splice(item,1)}})}(),function(){angular.module("app").controller("materialViewCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,globals,$location,Upload){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.inputImg=[],vm.inputFiles=[],vm.clearData=function(){vm.inputImg=[],vm.inputFiles=[],vm.selectedUnit="",$("#profile-tab, #dcp1").removeClass("active"),$("#home-tab, #material1").addClass("active"),$("#material1").addClass("show")},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.currentCurrency=vm.companyData.currentCurrency.currencyCode,console.log(vm.currentCurrency,"---currentCurrency")}).then(function(e){console.log(e)}),vm.materialId=$stateParams.id,vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data,vm.loadCurrencies=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.changeCost=function(type,cost){if("both"!=type)return cost/vm.editMaterial.conversionFactor;vm.materialCostValue=vm.materialCostValue/vm.editMaterial.conversionFactor,vm.rooferCostValue=vm.rooferCostValue/vm.editMaterial.conversionFactor},vm.showConversionRate=function(from,to){$(".loader").show();var currencyData={from:from,to:to};from&&apiFactory.showConversionRate(currencyData).then(function(resp){vm.editMaterial.conversionFactor=resp.data.conversionFactor,$timeout(function(){$(".loader").hide()},500)}).catch(function(e){console.log(e)})},vm.tabChange=function(val){function changeTab(val){$(".material_modal .nav-tabs li .nav-link").removeClass("active"),$(".material_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("active")}0==val?changeTab(val):1==val&&(vm.editMaterial.name?vm.selectedUnit?changeTab(val):Notification.error("Please select material unit"):Notification.error("Please enter material name"))},apiFactory.getAllSuppliers().then(function(resp){vm.suppliers=resp.data.list,console.log(vm.suppliers,"=---suppliers")}).catch(function(e){console.log(e)}),vm.editFlag=!1,vm.removedFiles=[],$scope.getMatDetail=function(){apiFactory.getMaterialById(vm.materialId).then(function(resp){vm.matrialData=resp.data,console.log(vm.matrialData),vm.matrialName=vm.matrialData.name,vm.matrialUnit=vm.matrialData.unit,vm.matrialCost=Number(vm.matrialData.currentRate.materialCost.value).toFixed(2),vm.matrialCurrencyCode=vm.matrialData.currentRate.materialCost.currencyCode,vm.matrialRooferCost=Number(vm.matrialData.currentRate.rooferCost.value).toFixed(2),vm.matrialRooferCurrencyCode=vm.matrialData.currentRate.rooferCost.currencyCode,vm.matrialCreatedBy=vm.matrialData.providerData.updatedBy.name,vm.matrialCreatedAt=vm.matrialData.createdAt,vm.matrialUpdatedAt=vm.matrialData.createdAt,$scope.gray_box=[{img:"/assets/images/Unit-Icon.png",title:"Unit",value:vm.matrialUnit},{img:"/assets/images/Dollar-Icon.png",title:"Material Cost",value:vm.matrialCost,currencyCode:vm.matrialCurrencyCode},{img:"/assets/images/Dollar-Icon.png",title:"Worker Cost",value:vm.matrialRooferCost,currencyCode:vm.matrialRooferCurrencyCode}],$scope.nextMaintanceDateCalc(vm.matrialData.createdAt,vm.matrialData.maintenancePeriod)}).catch(function(e){console.log(e)})},$scope.getMatDetail(),$scope.nextMaintanceDateCalc=function(createdAt,maintenancePeriod){var createdDate=moment(createdAt).format("X"),nextMaintanceDate=moment(createdAt).add(maintenancePeriod,"days").format("X");if(createdDate<nextMaintanceDate)vm.nextMaintenanceDate=moment(createdAt).add(maintenancePeriod,"days").format("MMM DD, YYYY");else{alert();var createdDate1=moment.utc(createdAt).add(maintenancePeriod,"days").format();$scope.nextMaintanceDateCalc(createdDate1,maintenancePeriod)}},vm.removeImg=function(indexVal,type){"materialImg"==type?(vm.removedFiles.push(vm.matrialData.files.images[indexVal]._id),vm.materialImg.splice(indexVal,1)):"image"==type?vm.inputImg.splice(indexVal,1):"materialDocument"==type?(vm.removedFiles.push(vm.matrialData.files.docs[indexVal]._id),vm.materialFiles.splice(indexVal,1)):"document"==type&&vm.inputFiles.splice(indexVal,1)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"materialImg"==$scope.fileType?(vm.materialImg[index].description=data,vm.materialImg[index].assetDescription=data):"image"==$scope.fileType?vm.inputImg[index].description=data:"materialDocument"==$scope.fileType?(vm.materialFiles[index].description=data,vm.materialFiles[index].assetDescription=data):"document"==$scope.fileType&&(vm.inputFiles[index].description=data)},vm.changeMaintenancePeriod=function(days){vm.editMaterial.maintenanceDate=moment(vm.editMaterial.createdAt).add(days,"days").format()},vm.editMaterialFunction=function(val){if(1==val){vm.editFlag=!0,vm.editMaterial=angular.copy(vm.matrialData),vm.changeMaintenancePeriod(vm.matrialData.maintenancePeriod),vm.selectedUnit=vm.editMaterial.unit,vm.materialImg=vm.editMaterial.files.images,vm.materialFiles=vm.editMaterial.files.docs,vm.materialCostValue=vm.editMaterial.currentRate.materialCost.value,vm.rooferCostValue=vm.editMaterial.currentRate.rooferCost.value,vm.editMaterial.conversionFactor=1,vm.showConversionRate(vm.currentCurrency,vm.editMaterial.currency),angular.forEach(vm.materialImg,function(x,index){x.description=""}),angular.forEach(vm.materialFiles,function(x,index){x.description=""});var suppliers=vm.editMaterial.suppliers.map(function(x){return x._id});console.log(vm.editMaterial,"----editMaterial"),$("#currency").val(vm.currentCurrency).trigger("change.select2"),$("#suppliers").val(suppliers).trigger("change.select2"),$("#todo_modal.material_modal").modal("show"),$("#profile-tab, #dcp1").removeClass("active"),$("#home-tab, #material1").addClass("active"),$("#material1").addClass("show")}else if(2==val){console.log(vm.inputImg,vm.inputFiles),$scope.uploadFiles=[].concat(vm.inputImg,vm.inputFiles),$scope.uploadallFiles=[].concat(vm.inputImg,vm.inputFiles,vm.materialImg,vm.materialFiles),console.log($scope.uploadallFiles),vm.editFlag=!1;var description=[];(vm.inputImg.length>0||vm.inputFiles.length>0)&&$scope.uploadallFiles.map(function(x,i){description.push({assetDescription:x.description})});var materialupdatedata={name:vm.editMaterial.name,unit:vm.selectedUnit,removedFiles:vm.removedFiles,suppliers:vm.editMaterial.suppliers,maintenancePeriod:vm.editMaterial.maintenancePeriod,currentRate:{materialCost:{value:vm.changeCost("material",vm.materialCostValue),currencyCode:vm.editMaterial.currency},rooferCost:{value:vm.changeCost("roofer",vm.rooferCostValue),currencyCode:vm.editMaterial.currency}},files:$scope.uploadFiles,assetObj:description};apiFactory.updateMaterialById(vm.materialId,materialupdatedata).then(function(resp){Notification.success(resp.data.message),$("#todo_modal.material_modal").modal("hide"),$scope.getMatDetail(),vm.fileNames=[]}).catch(function(e){console.log(e)})}},vm.fileUpdated=function(files,event){var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){x.description=""})}})}(),function(){angular.module("app").controller("meetingRoomCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload,SBcommon,SBchannel,SBevents){var vm=this,logout=globals.logout,userStore=globals.userStore,projectStore=(globals.companyStore,globals.projectStore);if(!authFactory.checkUser())return void logout();vm.userData=userStore.get();var room=SBcommon,store=room.store();function updateChannelList(list){return vm.channelList=list,$timeout(function(){$scope.$apply()}),list}function updateMessages(channel){return vm.currentChannel=channel,$timeout(function(){$scope.$apply();var chatContainer=document.getElementsByClassName("chat-container")[0];chatContainer.scrollTop=chatContainer.scrollHeight}),channel}function listFiles(channel){vm.sharedFiles=channel.files.reduce(function(acc,x){return/png|jpg|jpeg|gif/.test(x.type)?acc.images.push(x):acc.docs.push(x),acc},{images:[],docs:[]}),$timeout(function(){$scope.$apply()})}function getMeetingTodo($event){if($event)return function(channel){apiFactory.getMeetingTodo({channelUrl:channel.url}).then(function(resp){vm.todoList=resp.data.todoList}).catch(room.error)}}console.log(vm.userData),apiFactory.getAccessMeetingRoomToken().then(function(resp){return resp.data.accessToken}).then(function(token){if(!token)throw new Error("Token unavailable");return room.connect(userStore.get()._id,token)}).then(function(connectedUser){return Notification.success("Connected to meeting room"),store.set("user",connectedUser),SBchannel.listChannels(projectStore.get()._id)}).then(updateChannelList).then(function(channels){if(channels.length>0)return SBchannel.getChannelMessages(channels[0])}).then(updateMessages).then(getMeetingTodo(!0)).catch(room.error),apiFactory.getAllMembersInCurrentCompany(userStore.get().companyId).then(function(resp){vm.companyUsers=resp.data.data}).catch(room.error),vm.newMeeting={},vm.createChannel=function(formData,meetingName){$("#newmeeting_popup").modal("hide"),store.get("user")&&SBchannel.createChannel(meetingName,userStore.get()._id,projectStore.get()._id).then(function(channel){return formData.channelUrl=channel.url,Promise.all([channel,formData.assignedTo,apiFactory.createTodoList(formData),apiFactory.inviteUsersToMeeting({users:formData.assignedTo})])}).then(function(_ref2){var _ref3=_slicedToArray(_ref2,2),channel=_ref3[0],users=_ref3[1];return SBchannel.inviteUsers(channel,users)}).then(function(_){return Notification.success("Meeting room created successfully!"),SBchannel.listChannels(projectStore.get()._id)}).then(updateChannelList).catch(room.error)},vm.viewChannel=function(channel,$event){channel.markAsRead(),SBchannel.getChannelMessages(channel).then(updateMessages).then(getMeetingTodo($event)).catch(room.error)},vm.startTyping=function(channel){channel.startTyping()},vm.sendMessage=function(channel,message){vm.messageBox="",channel.endTyping(),message&&message.trim()&&SBchannel.sendMessage(channel,message).then(function(channel){return SBchannel.getChannelMessages(channel)}).then(updateMessages).catch(room.error)},vm.sendMessageOnEnter=function(e){13===e.which&&vm.sendMessage.call(null,vm.currentChannel,vm.messageBox)},vm.sendFileMessage=function(channel,files){$("#attach_popup").modal("hide"),apiFactory.newMeetingFileMessage({files:files}).then(function(resp){return Promise.all(SBchannel.sendFileMessage(channel,resp.data.data))}).then(function(_){return Notification.success("Files uploaded successfully"),SBchannel.getChannelMessages(channel)}).then(updateMessages).catch(room.error)},vm.resolveTemplateUrl=function(m){return"user"===m.messageType?m._sender.userId===userStore.get()._id?"userMessage":"message":m._sender.userId===userStore.get()._id?"userFileMessage":"fileMessage"},vm.openInvitePopup=function(currentChannel,companyUsers){if($("#members_popup").modal("show"),currentChannel&&companyUsers){var currentChannelMembers=Object.keys(currentChannel.memberMap);vm.invitees=companyUsers.filter(function(x){return!(currentChannelMembers.indexOf(x._id)>-1)}).map(function(x){return x.checked=!1,x})}},vm.inviteUsers=function(channel,users){$("#members_popup").modal("hide"),users=users.filter(function(x){return x.checked}).map(function(x){return x._id}),apiFactory.inviteUsersToMeeting({users:users}).then(function(_){return SBchannel.inviteUsers(channel,users)}).then(function(_){return Notification.success("User(s) invited"),SBchannel.listChannels(projectStore.get()._id)}).then(updateChannelList).catch(room.error)},vm.openFileViewer=function(channel){$("#sharedfiles_popup").modal("show"),SBchannel.getChannelFiles(channel).then(listFiles).catch(room.error)},vm.checkReadStatus=function(channel){return channel.getReadMembers(channel.lastMessage,!0).reduce(function(acc,x){return acc=x.userId===userStore.get()._id||acc},!1)},vm.launchTodoPopup=function(){$("#todo_meeting").modal("show")},vm.createTodoList=function(formData,currentChannel,valid){valid?($("#todo_meeting").modal("hide"),formData.channelUrl=currentChannel.url,apiFactory.createTodoList(formData).then(function(resp){return Notification.success("Todo created successfully"),currentChannel}).then(getMeetingTodo(!0)).catch(room.error)):Notification.error("Please fill all the details")},SBevents.init(),$scope.$on("newMeeingRoomMessage",function(e,data){vm.currentChannel.url===data.channel.url?vm.viewChannel(data.channel):SBchannel.listChannels(projectStore.get()._id).then(updateChannelList).catch(room.error)}),$scope.$on("newChannelJoined",function(e,data){SBchannel.listChannels(projectStore.get()._id).then(updateChannelList).catch(room.error)}),$scope.$on("typingStatus",function(e,data){$timeout(function(){$scope.$apply()})}),vm.logout=function(){logout()};var twilio=Twilio;console.log(twilio);var Video=Twilio.Video,previewTracks=void 0,activeRoom=void 0,identity=void 0;function attachTracks(tracks,container){tracks.forEach(function(track){container.appendChild(track.attach())})}function attachParticipantTracks(participant,container){var tracks=Array.from(participant.tracks.values());attachTracks(tracks,container)}function detachTracks(tracks){tracks.forEach(function(track){track.detach().forEach(function(detachedElement){detachedElement.remove()})})}function detachParticipantTracks(participant){var tracks=Array.from(participant.tracks.values());detachTracks(tracks)}function log(message){var logDiv=document.getElementById("log");logDiv.innerHTML+="<p>&gt;&nbsp;"+message+"</p>",logDiv.scrollTop=logDiv.scrollHeight}function roomJoined(room){window.room=activeRoom=room,log("Joined as '"+identity+"'"),document.getElementById("button-join").style.display="none",document.getElementById("button-leave").style.display="inline";var previewContainer=document.getElementById("local-media");previewContainer.querySelector("video")||attachParticipantTracks(room.localParticipant,previewContainer),room.participants.forEach(function(participant){log("Already in Room: '"+participant.identity+"'");var previewContainer=document.getElementById("remote-media");attachParticipantTracks(participant,previewContainer)}),room.on("participantConnected",function(participant){log("Joining: '"+participant.identity+"'")}),room.on("trackAdded",function(track,participant){log(participant.identity+" added track: "+track.kind);var previewContainer=document.getElementById("remote-media");attachTracks([track],previewContainer)}),room.on("trackRemoved",function(track,participant){log(participant.identity+" removed track: "+track.kind),detachTracks([track])}),room.on("participantDisconnected",function(participant){log("Participant '"+participant.identity+"' left the room"),detachParticipantTracks(participant)}),room.on("disconnected",function(){log("Left"),previewTracks&&(previewTracks.forEach(function(track){track.stop()}),previewTracks=null),detachParticipantTracks(room.localParticipant),room.participants.forEach(detachParticipantTracks),activeRoom=null,document.getElementById("button-join").style.display="inline",document.getElementById("button-leave").style.display="none"})}window.addEventListener("beforeunload",vm.leaveRoomIfJoined),vm.leaveRoomIfJoined=function(){console.log(activeRoom),activeRoom&&activeRoom.disconnect()},vm.startVideoChat=function(){var localTracksPromise=previewTracks?Promise.resolve(previewTracks):Video.createLocalTracks();localTracksPromise.then(function(tracks){window.previewTracks=previewTracks=tracks;var previewContainer=document.getElementById("local-media");previewContainer.querySelector("video")||attachTracks(tracks,previewContainer)},function(error){console.error("Unable to access local media",error),log("Unable to access Camera and Microphone")}).then(function(res){apiFactory.getTwilioAccessToken().then(function(resp){return console.log(resp),resp})}).then(function(data){console.log(data),identity=data;var connectOptions={name:"roomName",logLevel:"debug"};previewTracks&&(connectOptions.tracks=previewTracks),Video.connect(vm.userData.token,connectOptions).then(roomJoined,function(error){log("Could not connect to Twilio: "+error.message)})})}})}(),function(){angular.module("app").controller("payrollCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()};$location.path();$(".payrollMenu").css("display","block !important"),$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("preLoginCtrl",function($scope,$timeout,$state,authFactory,apiFactory,globals,localStorageService,Notification,NgMap){var vm=this,userStore=(globals.progress,globals.logout,globals.userStore);if(vm.loggedIn=!1,authFactory.checkUser())return $state.go("dashboard"),void(vm.loggedIn=!0);vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",styles:[{elementType:"geometry",stylers:[{color:"#212121"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{elementType:"labels.text.stroke",stylers:[{color:"#212121"}]},{featureType:"administrative",elementType:"geometry",stylers:[{color:"#757575"}]},{featureType:"administrative.country",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"administrative.land_parcel",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#181818"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"poi.park",elementType:"labels.text.stroke",stylers:[{color:"#1b1b1b"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{color:"#2c2c2c"}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#8a8a8a"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#373737"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#3c3c3c"}]},{featureType:"road.highway.controlled_access",elementType:"geometry",stylers:[{color:"#4e4e4e"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"transit",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#000000"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#3d3d3d"}]}],markers:[[28.7041,77.1025],[13.0827,80.2707]]},NgMap.getMap().then(function(map){map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoom:2,center:{lat:28.7041,lng:77.1025}})}),vm.regsiterModal=function(){$("#loginModal, #forgotPassModal").modal("hide"),$("#registerModal").modal("show")},vm.loginModal=function(){$("#registerModal, #forgotPassModal").modal("hide"),$("#loginModal").modal("show")},vm.forgotPassModal=function(){$("#loginModal").modal("hide"),$("#forgotPassModal").modal("show")},vm.login=function(isValid,formData){console.log(formData),apiFactory.login(formData).then(function(resp){$("#loginModal").modal("hide"),$("body").removeClass("modal-open"),$(".modal-backdrop").hide(),localStorageService.set("access-token",resp.data.token),userStore.set(resp.data.user),$state.go("dashboard"),Notification.success("Login success")}).catch(function(err){Notification.error(err.data.message)})},vm.forgotPass=function(isValid,formData){if(null==formData)Notification.error("please Valid mail Id");else{var data=formData;apiFactory.forgotPassword(data).then(function(resp){$("#forgotPassModal").modal("hide"),Notification.success(resp.data.message)}).catch(function(err){Notification.error(err.data.message)})}},vm.register=function(isValid,formData){apiFactory.registration(formData).then(function(resp){$("#registerModal").modal("hide"),Notification.success(resp.data.message)}).catch(function(err){$("#registerModal").modal("hide"),Notification.error(err.data.message)})},vm.subscribe=function(email){/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)?apiFactory.subscribe({email:email}).then(function(resp){vm.subscribeEmail="",Notification.success(resp.data.message)}).catch(function(err){Notification.error(err.data.message)}):Notification.error("Invalid email")}})}(),function(){angular.module("app").controller("projectCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),apiFactory.listAllProjects().then(function(resp){console.log(resp.data)}).catch(function(e){console.log(e)}),this.logout=function(){logout()}})}(),function(){angular.module("app").controller("reportDetailCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this;$scope.image1="../assets/images/reportimgs/rep.jpg",$scope.image2="../assets/images/reportimgs/file.jpg";var logout=globals.logout;$scope.reportObj={},$scope.shwCommentSection=!1,$scope.ReportIssue={},$scope.issueToAdd=[],$scope.models={selected:null},authFactory.checkUser()||logout();vm.logout=function(){logout()},$scope.exportToPdf=function(){var img=new Image;img.src="../assets/images/reportimgs/rep.jpg";var img1=new Image;img1.src="../assets/images/reportimgs/file.jpg";var doc=new jsPDF("p");doc.addImage(img,"png",15,20,90,90),doc.addImage(img1,"png",110,20,90,90),doc.autoTable({html:"#statictable",margin:{top:120},pageBreak:"auto",tableWidth:"auto",showHeader:"everyPage"}),doc.setFontSize(25),doc.text(20,150,"Comments"),doc.setFontSize(10),doc.setFont("helvetica"),doc.text(20,160,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"),doc.text(20,170,"incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco"),doc.text(20,180," laboris nisi ut aliquip ex ea commodo consequat."),doc.save("column8.pdf")};var enabled=!0,chunkSize=5;vm.issueSearch="",vm.enableLazyLoad=!1,vm.sortParams={field:"created",type:!1},$scope.openReportPicker=function(){vm.enableLazyLoad=!0,apiFactory.listAllIssues({search:vm.issueSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.issuePickerData=[],$scope.issueToAdd.length>0&&$scope.issueToAdd.forEach(function(element){resp.data.list.forEach(function(resdata,index){element._id==resdata._id?resp.data.list.splice(index,1):console.log("false")})}),$timeout(function(){vm.issuePickerData=resp.data.list,$("#listissuesmodal").modal("hide"),$("#chooseIssueModal").modal("show"),$scope.EditMode=!1})}).catch(function(e){console.log(e)})},$("#chooseIssueModal").on("hide.bs.modal",function(){vm.enableLazyLoad=!1}),vm.closeIssuePicker=function(){$("#chooseIssueModal").modal("hide"),vm.issueSearch=""},$scope.addMore=function(){console.log("calling add more"),enabled&&(enabled=!1,$timeout(function(){enabled=!0},500),chunkSize+=5,apiFactory.listAllIssues({search:vm.issueSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.issuePickerData=[],$scope.issueToAdd.length>0&&$scope.issueToAdd.forEach(function(element){resp.data.list.forEach(function(resdata,index){element._id==resdata._id&&resp.data.list.splice(index,1)})}),$timeout(function(){vm.issuePickerData=resp.data.list})}).catch(function(e){console.log(e)}))},vm.searchIssues=function(text){console.log("serchtext",text),apiFactory.listAllIssues({search:vm.issueSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.issuePickerData=resp.data.list}).catch(function(e){console.log(e)})},$scope.remarkData=[],$scope.addRemark=function(title,value){null==title&&null==value||($scope.remarkData.push({Title:title,Value:value}),$("#remarktitle").val(""),$("#remarkvalue").val(""))},vm.chooseIssues=function(issue,index,array){issue?(array.splice(index,1),$scope.issueToAdd.push(issue),$("#chooseIssueModal").modal("hide"),$("#listissuesmodal").modal("show")):Notification.error("No selection")},vm.addToListIssuePicker=function(){$("#chooseIssueModal").modal("hide"),$("#listissuesmodal").modal("show")},$scope.sendIssueToPdf=function(){$("#listissuesmodal").modal("hide"),$scope.shwCommentSection=!0},$scope.coverPageModal=function(){$("#coverpagemodal").modal("show")},$scope.aboutUsModal=function(){$("#aboutusmodal").modal("show")},$scope.projectMetaModal=function(){$("#projectmetamodal").modal("show")},$scope.reportremarkModal=function(){$("#reportremarkmodal").modal("show")},$scope.listIssueModelClick=function(){$("#listissuesmodal").modal("show")},$scope.setReportObj=function(object){console.log(object),$scope.ReportIssue.title=object.title,$scope.ReportIssue.description=object.description,$scope.ReportIssue.companyName=object.companyName,$scope.ReportIssue.email=object.email,$scope.ReportIssue.website=object.website,$scope.ReportIssue.phone=object.phone,$scope.ReportIssue.projectName=object.projectName,$scope.ReportIssue.serialNo=object.serialNo,$scope.ReportIssue.enterprise=object.enterprise,$scope.issueToAdd.length>0&&($scope.ReportIssue.issueToAdd=$scope.issueToAdd),$scope.remarkData.length>0&&($scope.ReportIssue.remarkData=$scope.remarkData),$scope.ReportIssue.authorName=object.authorName,$scope.ReportIssue.remarkDate=object.remarkDate,$("#coverpagemodal").modal("hide"),$("#aboutusmodal").modal("hide"),$("#projectmetamodal").modal("hide"),$("#reportremarkmodal").modal("hide"),$("#chooseIssueModal").modal("hide")},$scope.EditMode=!1,$scope.EditIssueData=function(){$scope.EditMode=!0},$scope.removeFromIssueList=function(index,array){array.splice(index,1),console.log($scope.issueToAdd)}})}(),function(){angular.module("app").controller("reportsCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout;globals.userStore;authFactory.checkUser()||logout();$scope.currentUser=localStorageService.get("userData"),$scope.reportCategory=["issueReport","safetyReport","qaReport"],apiFactory.listAllUsers().then(function(resp){vm.allAdminUsers=resp.data.list}),apiFactory.listAllProjects().then(function(resp){vm.projectList=resp.data}).catch(function(e){console.log(e)}),vm.logout=function(){logout()}})}(),function(){angular.module("app").controller("reportsListingCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()},"/payroll"==$location.path()&&$(".payrollMenu").css("display","block !important");$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("setPasswordCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var vm=this,token=$location.search().token;if(!token)return;apiFactory.isTokenValid({token:token}).then(function(resp){console.log(resp.data),resp.data.tokenValid?(vm.user=resp.data.user,$(".forgotPassModal").modal("show")):$(".tokenInvalid").modal("show")}).catch(function(e){console.log(e)}),vm.resetPass=function(isValid,data){if($(".forgotPassModal").modal("hide"),vm.resetPass.password===vm.resetPass.c_password){var data={password:vm.resetPass.password,user:vm.user};console.log(data),apiFactory.setPassword(data).then(function(resp){Notification.success(resp.data.message),$state.go("preLogin")}).catch(function(e){console.log(e)})}else Notification.error("Password Mismatch, Please enter same password")},vm.back=function(){$(".tokenInvalid").modal("hide"),$timeout(function(){$state.go("preLogin")})}})}(),function(){angular.module("app").controller("settingCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload){var vm=this,logout=globals.logout,userStore=globals.userStore,companyStore=globals.companyStore;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),companyStore.get()?(vm.companyData=companyStore.get(),vm.privileges=vm.companyData.privileges):apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.privileges=vm.companyData.privileges}).catch(function(e){console.log(e)});vm.submitRoleSettings=function(formData){apiFactory.updateRoleBasedAccess(formData).then(function(resp){Notification.success(resp.data.message),companyStore.refetch(vm.userData.companyId)}).catch(function(e){Notification.error("Something went wrong"),console.log(e)})},vm.goToDashboard=function(){$state.go("dashboard")},vm.logout=function(){logout()}})}(),function(){angular.module("app").controller("subcontractorCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this;vm.selectedMaterials=[],vm.members2=[];var logout=globals.logout;globals.debounce,globals.userStore;authFactory.checkUser()||logout();vm.getSubcontractors=function(type){apiFactory.getAllSubcontractors({page:1,chunk:10,sort:type}).then(function(resp){vm.allSubcontractor=resp.data.list,vm.subcontractorsCount=resp.data.total,console.log("suppliers are:",vm.allSubcontractor),$timeout(function(){$("#pagination").pagination({items:vm.subcontractorsCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.getAllSubcontractors({page:page,chunk:10,sort:type}).then(function(resp){vm.allSubcontractor=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.getSubcontractors("created"),vm.getTags=function(){apiFactory.getAllSystemTags().then(function(resp){vm.AllTags=resp.data.list,console.log(vm.AllTags)}).catch(function(e){})},vm.getTags(),vm.addSubcontractorNext=function(){$("#home").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#home").removeClass("show"),$("#home").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active")):$("#profile-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#contact-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#contact").addClass("show"),$("#contact").addClass("active"))},vm.addSubcontractorPrevious=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active"))},vm.openPopup=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile-tab").removeClass("active"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#contact-tab").removeClass("show"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active"))},$scope.deleteMaterial=function(index,array){array.splice(index,1)},$scope.deleteStaff=function(index,array){array.splice(index,1)},$scope.onChange=function(files){null!=files[0]&&($scope.FILEIMG=URL.createObjectURL(files[0]),$scope.fileExt=files[0].name.split(".").pop())},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),apiFactory.listAllMaterials().then(function(resp){vm.allMaterials=resp.data.list}),vm.addMember=function(name,mail,code,phno){vm.members2.push({name:name,email:mail,contact:{dialCode:code,phoneNumber:phno}})},vm.addnewtagmodel=function(){$("#sub-contractor_modal").modal("hide"),$("#tagadd_modal").modal("show")},$scope.createSubcontractor=function(subcontractor,attribute){subcontractor.attributes=[],subcontractor.staff=[],attribute.length>0&&attribute.forEach(function(element){subcontractor.attributes.push(element._id)}),vm.members2.length>0&&vm.members2.forEach(function(element){subcontractor.staff.push(element)}),console.log("subcontractor",subcontractor),apiFactory.createNewSubcontractor(subcontractor).then(function(resp){Notification.success("Sub-contractor saved successfully"),vm.resetFields(),vm.openPopup(),subcontractor.attributes=[],$("#sub-contractor_modal").modal("hide"),vm.getSubcontractors("created")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})},vm.resetFields=function(){if(vm.subcontractor={},vm.members2.length>0)for(;vm.members2.length>0;)vm.members2.pop();$("#tagselect").val(""),$("#tagselect").trigger("change"),$scope.FILEIMG=void 0,$("#tagselect").val("[]"),$("#membername").val(""),$("#memberemail").val(""),$("#memberdialCode").val(""),$("#memberphoneNumber").val("")},vm.createSystemTag=function(systemTag){console.log(systemTag),null==systemTag?Notification.error("please enter Tag name"):apiFactory.saveSystemTag(systemTag).then(function(resp){$("#tagadd_modal").modal("hide"),$("#sub-contractor_modal").modal("show"),vm.systemTag={},Notification.success("new system tag added."),vm.getTags()}).catch(function(e){Notification.error("something went wrong")})},$scope.contracts=[{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"}]})}(),function(){angular.module("app").controller("subcontractorDetailCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.subcontractorId=$stateParams.id,$scope.getSubcontractorDetail=function(){apiFactory.getSubcontractorById(vm.subcontractorId).then(function(resp){vm.subcontractorData=resp.data,$scope.FILEIMG=vm.subcontractorData.profilePic,$("#editdial").select2("data",{id:vm.editSubcontractor.contact.dialCode}),console.log(vm.subcontractorData)})},$scope.getSubcontractorDetail(),vm.editSubcontractorNext=function(){$("#home").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#home").removeClass("show"),$("#home").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active")):$("#profile-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#contact-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#contact").addClass("show"),$("#contact").addClass("active"))},vm.editSubcontractorPrevious=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active"))},vm.openPopup=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile-tab").removeClass("active"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#contact-tab").removeClass("show"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active"))},vm.getTags=function(){apiFactory.getAllSystemTags().then(function(resp){vm.AllTags=resp.data.list,console.log(vm.AllTags)}).catch(function(e){})},vm.getTags(),globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.addMember=function(name,mail,code,phno){vm.subcontractorData.staff.push({name:name,email:mail,contact:{dialCode:code,phoneNumber:phno}})},$scope.deleteStaff=function(index,array){array.splice(index,1)},$scope.onChange=function(files){null!=files[0]&&($scope.FILEIMG=URL.createObjectURL(files[0]),$scope.fileExt=files[0].name.split(".").pop())},$scope.updateSubcontractor=function(subcontractor,attributes){console.log(subcontractor),console.log(attributes),void 0!==attributes&&attributes.length>0&&(subcontractor.attributes.length>0?attributes.forEach(function(element){subcontractor.attributes.push(element._id)}):(subcontractor.attributes=[],attributes.forEach(function(element){subcontractor.attributes.push(element._id)}))),console.log("after change: ",subcontractor),apiFactory.updateSubcontractor(subcontractor).then(function(resp){Notification.success("update successfull."),$("#update_modal").modal("hide"),$scope.getSubcontractorDetail()}).catch(function(e){Notification.error("Couldn't update subcontractor.")})}})}(),function(){angular.module("app").controller("supplierCtrl",function($scope,$rootScope,$timeout,authFactory,$state,apiFactory,Notification,globals,fileManagerFactory,Upload,localStorageService){var vm=this;vm.selectedMaterials=[],vm.members2=[];var logout=globals.logout;globals.debounce,globals.userStore;$scope.activeJustified=0,authFactory.checkUser()||logout();vm.getSuppliers=function(type){apiFactory.getAllSuppliers({page:1,chunk:10,sort:type}).then(function(resp){vm.allSuppliers=resp.data.list,vm.suppiersCount=resp.data.total,console.log("suppliers are:",vm.allSuppliers),$timeout(function(){$("#pagination").pagination({items:vm.suppiersCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.getAllSuppliers({page:page,chunk:10}).then(function(resp){vm.allSuppliers=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.getSuppliers("created"),$scope.onChange=function(files){null!=files[0]&&($scope.FILEIMG=URL.createObjectURL(files[0]),$scope.fileExt=files[0].name.split(".").pop())},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),apiFactory.listAllMaterials().then(function(resp){vm.allMaterials=resp.data.list}),vm.addMaterial=function(item){vm.selectedMaterials.push(item)},vm.addMember=function(name,mail,code,phno){vm.members2.push({name:name,email:mail,contact:{dialCode:code,phoneNumber:phno}})},vm.addSupplierNext=function(){$("#home").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#home").removeClass("show"),$("#home").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active")):$("#profile-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#contact-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#contact").addClass("show"),$("#contact").addClass("active"))},vm.addSupplierPrevious=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active"))},vm.openPopup=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile-tab").removeClass("active"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#contact-tab").removeClass("show"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active"))},$scope.deleteMaterial=function(index,array){array.splice(index,1)},$scope.deleteStaff=function(index,array){array.splice(index,1)},$scope.createSupplier=function(supplier,materials){supplier.supplies=[],supplier.staff=[],materials.length>0&&materials.forEach(function(element){supplier.supplies.push(element._id)}),vm.members2.length>0&&vm.members2.forEach(function(element){supplier.staff.push(element)}),console.log("supplier",supplier),apiFactory.createNewSupplier(supplier).then(function(resp){Notification.success("Supplier has been saved successfully"),vm.resetFields(),vm.openPopup(),supplier.supplies=[],supplier.staff=[],$("#supplier_modal").modal("hide"),vm.getSuppliers("created")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})},vm.resetFields=function(){if(vm.supplier={},vm.members2.length>0)for(;vm.members2.length>0;)vm.members2.pop();vm.selectedMaterials=[],$("#materialselect").val(""),$("#materialselect").trigger("change"),$scope.FILEIMG=void 0,$("#tagselect").val("[]"),$("#membername").val(""),$("#memberemail").val(""),$("#memberdialCode").val(""),$("#memberphoneNumber").val("")},$scope.contracts=[{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"}]})}(),function(){angular.module("app").controller("supplierDetailsCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService,$location){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),$scope.activeClass=function(path){return $location.path()===path?"active":""},vm.logout=function(){logout()},vm.supplierId=$stateParams.id,$scope.getSupplierDetail=function(){apiFactory.getSupplierById(vm.supplierId).then(function(resp){vm.supplierData=resp.data,$scope.FILEIMG=vm.supplierData.profilePic,console.log(vm.supplierData)})},$scope.getSupplierDetail(),vm.addSupplierNext=function(){$("#home").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#home").removeClass("show"),$("#home").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active")):$("#profile-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#contact-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#contact").addClass("show"),$("#contact").addClass("active"))},vm.addSupplierPrevious=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active"))},vm.openPopup=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile-tab").removeClass("active"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#home-tab").addClass("active"),$("#contact-tab").removeClass("show"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active"))},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.addMember=function(name,mail,code,phno){vm.supplierData.staff&&vm.supplierData.staff.length>0?vm.supplierData.staff.push({name:name,email:mail,contact:{dialCode:code,phoneNumber:phno}}):(vm.supplierData.staff=[],vm.supplierData.staff.push({name:name,email:mail,contact:{dialCode:code,phoneNumber:phno}}))},$scope.deleteStaff=function(index,array){array.splice(index,1)},apiFactory.listAllMaterials().then(function(resp){vm.allMaterials=resp.data.list}),$scope.onChange=function(files,id){null!=files[0]&&($scope.FILEIMG=URL.createObjectURL(files[0]),$scope.fileExt=files[0].name.split(".").pop())},$scope.updateSupplier=function(supplier,materials){console.log(supplier),void 0!==materials&&materials.length>0&&(supplier.supplies.length>0?materials.forEach(function(element){supplier.supplies.push(element._id)}):(vm.supplierData.supplies=[],materials.forEach(function(element){supplier.supplies.push(element._id)}))),apiFactory.updateSupplier(supplier).then(function(resp){Notification.success("update successfull."),$("#updatesupplier_modal").modal("hide"),$scope.getSupplierDetail()}).catch(function(e){Notification.error("Couldn't update supplier.")})}})}(),function(){angular.module("app").controller("systemTagsCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,userStore=globals.userStore,companyStore=globals.companyStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.ID,vm.logout=function(){logout()},vm.getTags=function(){apiFactory.getAllSystemTags().then(function(resp){vm.AllTags=resp.data.list}).catch(function(e){})},vm.getTags(),vm.createTag=function(systemTag){console.log(systemTag),null==systemTag?Notification.error("please enter Tag name"):apiFactory.saveSystemTag(systemTag).then(function(resp){$("#tags_modal").modal("hide"),vm.systemTag={},Notification.success("new system tag added."),vm.getTags()}).catch(function(e){Notification.error("something went wrong")})},vm.deleteTag=function(id){vm.ID=id,$("#tagdelete_modal").modal("show")},vm.deleteSystemTag=function(){apiFactory.deleteSystemTag(vm.ID).then(function(resp){$("#tagdelete_modal").modal("hide"),Notification.success("system tag deleted successfully."),vm.getTags()}).catch(function(e){Notification.error("Something went wrong")})},globals.getCurrency().then(function(resp){vm.currencies=resp.data,vm.loadCurrencies=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.chosenCompanyCurrency=companyStore.get().currentCurrency.currencyCode,vm.changeCompanyCurrency=function(currency){apiFactory.showConversionRate({from:companyStore.get().currentCurrency.currencyCode,to:currency}).then(function(resp){return resp.data.conversionFactor}).then(function(conversionFactor){return Notification.success("Company currency has been updated successfully"),apiFactory.changeCompanyCurrency({conversionFactor:conversionFactor,currencyCode:currency})}).then(function(resp){var updatedData=Object.assign(companyStore.get(),{currentCurrency:{currencyCode:currency}});companyStore.set(updatedData)}).catch(function(e){console.log(e)})}})}(),function(){angular.module("app").controller("todoCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload,moment){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();function listTodos(resp){$scope.todo_list=resp.data.data}vm.logout=function(){logout()},vm.userData=userStore.get(),vm.dummy=[{name:"select 1."},{name:"select 2."},{name:"select 3."},{name:"select 4."},{name:"select 5."}],vm.todayDate=moment(),vm.dateFormat="YYYY/MM/DD hh:mm:ss",vm.createTodoList=function(formData,valid){if(valid){$("#todo_modal").modal("hide");var data=formData;data.date=moment(data.date).format("YYYY/MM/DD hh:mm:ss"),apiFactory.createTodoList(data).then(function(resp){return apiFactory.listAllTodoList()}).then(listTodos).catch(function(err){Notification.error(err.data.message)})}else Notification.error("Please fill all the details")},vm.todayDate=new Date,vm.resetForm=function(res){vm.todoData={}},apiFactory.getAllMembersInCurrentCompany(userStore.get().companyId).then(function(resp){vm.companyUsers=resp.data.data,console.log(vm.companyUsers)}).catch(function(err){Notification.error(err.data.message)}),apiFactory.listAllTodoList().then(listTodos).catch(function(err){Notification.error(err.data.message)})})}(),function(){angular.module("app").controller("todoViewCtrl",function($scope,$timeout,authFactory,$state,apiFactory,$stateParams,Notification,globals,Upload){$scope.todo_list=[{img:"/assets/images/To-Do-Icon.png",subtitle:"1.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Hour",classname:"red-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"2.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Day",classname:"yellow-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"3.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Week",classname:"green-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"4.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 2 Weeks",classname:"gray-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"5.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 3 Weeks",classname:"gray-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"6.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 4 Weeks",classname:"gray-color"}];var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.logout=function(){logout()},this.userData=userStore.get();var todoListId=$stateParams.id;apiFactory.listAllTodoList(todoListId).then(function(resp){$scope.todo=resp.data.data}).catch(function(err){Notification.error(err.data.message)}),this.updateTodo=function(formData){var data=formData;console.log(data),apiFactory.updateTodoList(todoListId,data).then(function(resp){$scope.todo=resp.data.data,Notification.success("Updated successfully")}).catch(function(err){Notification.error(err.data.message)})}})}(),function(){angular.module("app").controller("visualPlannerCtrl",function($scope,$timeout,$state,$location,globals,authFactory,apiFactory,Notification,commonVPFactory,toolsVPFactory,shapesVPFactory,localStorageService,eventsVPFactory,layersVPFactory){var logout=globals.logout;globals.userStore;if(!authFactory.checkUser())return void logout();if($(".drag_element").mousedown(function(){!function(elmnt,e){var pos1=0,pos2=0,pos3=0,pos4=0;function dragMouseDown(e){(e=e||window.event).preventDefault(),pos3=e.clientX,pos4=e.clientY,document.onmouseup=closeDragElement,document.onmousemove=elementDrag}function elementDrag(e){(e=e||window.event).preventDefault(),pos1=pos3-e.clientX,pos2=pos4-e.clientY,pos3=e.clientX,pos4=e.clientY,elmnt.style.top=elmnt.offsetTop-pos2+"px",elmnt.style.left=elmnt.offsetLeft-pos1+"px"}function closeDragElement(){document.onmouseup=null,document.onmousemove=null}document.getElementById(elmnt.id+"header")?document.getElementById(elmnt.id+"header").onmousedown=dragMouseDown:elmnt.onmousedown=dragMouseDown}(document.getElementById($(this).closest("div").attr("id")))}),!authFactory.checkUser())return;var vm=this;function loadPlanner(roofPlan){var loadFromJson=!!roofPlan.plannerData&&!!roofPlan.plannerData.initialized,selectedShape=commonVPFactory.selectedShape(),colorPicker=toolsVPFactory.colorPicker();shapesVPFactory.getShapeTools(colorPicker),vm.shapeProps={colorType:"strokeColor",strokeColor:"rgba(0 ,0 , 0 , 1)",fillColor:"rgba(255, 255, 255, 0.57)",strokeWidth:1},vm.cpOptions={swatch:!0,inputClass:"h-30",format:"rgb",case:"lower",alpha:!0},vm.cpEvents={onChange:function(api,color,$event){var obj={};obj.stroke=vm.shapeProps.strokeColor,obj.fill=vm.shapeProps.fillColor,colorPicker.set(obj)}},vm.changeStrokeWidth=function(){colorPicker.set({strokeWidth:vm.shapeProps.strokeWidth})};var stage=commonVPFactory.createStage("stage",{height:window.innerHeight,width:window.innerWidth},roofPlan.plannerData),stageEvents=eventsVPFactory.stageEvents(stage);stageEvents.register("mousemove",function(){vm.pointerPosition={x:stage.getPointerPosition().x,y:stage.getPointerPosition().y},$scope.$apply()});var drawState=commonVPFactory.drawState();$scope.$on("drawStateChange",function(e,drawStates){vm.currentDrawState=drawStates});var baseLayer=loadFromJson?stage.getChildren()[0]:layersVPFactory.createLayer(stage),processStore=layersVPFactory.initiateProcess(stage,baseLayer),selectionStore=commonVPFactory.selectionStore(),transformerStore=commonVPFactory.transformers(baseLayer),calibrator=shapesVPFactory.calibrator(stage,baseLayer),calibrationState=commonVPFactory.calibrationState(),metrics=toolsVPFactory.metrics();if(vm.showPanel=!1,vm.zoomLevel=100,vm.shapeInfo,loadFromJson){if(roofPlan.plannerData&&roofPlan.plannerData.calibration){calibrationState.set(roofPlan.plannerData.calibration);var loadedProcesses=stage.getChildren()[0].getChildren().filter(function(x){return!!/process*/.test(x.name())});loadedProcesses.length>0?processStore.loadProcesses(loadedProcesses):processStore.createProcess()}roofPlan.plannerData&&roofPlan.plannerData.countData&&shapesVPFactory.loadShapeId(roofPlan.plannerData.countData)}else processStore.createProcess();vm.calibrationData=calibrationState.get(),vm.formatCalibration=function(val){return val.toFixed(3)},vm.processes=processStore.getProcesses(),vm.associations=commonVPFactory.associations();var imageObj=new Image;imageObj.crossOrigin="Anonymous",roofPlan.plannerData&&roofPlan.plannerData.jsonString?(imageObj.src=roofPlan.assetObj.url,imageObj.onload=function(){var imageContainer=baseLayer.get("#bgImage")[0];imageContainer.image(imageObj),vm.imageProps={x:Math.round(imageContainer.width()),y:Math.round(imageContainer.height())},stage.draw()}):(imageObj.src=roofPlan.assetObj.url,imageObj.onload=function(){var imageHeight=Math.round(stage.height()-75),aspectRatio=imageObj.height/imageHeight,imageWidth=Math.round(imageObj.width/aspectRatio);vm.imageProps={x:imageWidth,y:imageHeight};var bgImage=new Konva.Image({image:imageObj,name:"bgImage",id:"bgImage",height:imageHeight,shadowOffsetX:1,shadowOffsetY:1,shadowOpacity:.5,x:stage.width()/2-imageWidth/2,y:20,width:imageWidth});bgImage.on("click",function(e){transformerStore.removeAll()}),baseLayer.add(bgImage),baseLayer.draw(),baseLayer.moveToBottom()});var actionStates=commonVPFactory.actionStates(),windowEvent=eventsVPFactory.windowEvents(window);windowEvent.register(stage),vm.historyPos={x:void 0,y:void 0},window.addEventListener("wheel",function(e){"visualPlanner"===$state.$current.name&&!/modal-open/.test(document.getElementsByTagName("body")[0].className)&&e.preventDefault();Math.round(stage.height()/2),Math.round(stage.width()/2);if(e.ctrlKey){var oldScale=baseLayer.scaleX(),mousePointTo={x:stage.getPointerPosition().x/oldScale-baseLayer.x()/oldScale,y:stage.getPointerPosition().y/oldScale-baseLayer.y()/oldScale},newScale=e.deltaY<0?1.15*oldScale:oldScale/1.15;baseLayer.scale({x:newScale,y:newScale});var newPos={x:-(mousePointTo.x-stage.getPointerPosition().x/newScale)*newScale,y:-(mousePointTo.y-stage.getPointerPosition().y/newScale)*newScale},imageProps={y:Math.round(baseLayer.find("#bgImage")[0].height()*newScale),x:Math.round(baseLayer.find("#bgImage")[0].width()*newScale)};vm.imageProps=imageProps,vm.zoomLevel=Math.round(100*baseLayer.scale().x),toolsVPFactory.scaleTransformerBasedOnZoom(baseLayer),$scope.$apply(),baseLayer.position(newPos),stage.batchDraw()}}),window.addEventListener("contextmenu",function(e){"CANVAS"===e.target.tagName&&(e.preventDefault(),shapesVPFactory.cancelDrawing(),baseLayer.draw(),drawState.reset())}),vm.zoomButton=function(type){var centerY=Math.round(stage.height()/2),centerX=Math.round(stage.width()/2),oldScale=baseLayer.scaleX(),mousePointTo={x:centerX/oldScale-baseLayer.x()/oldScale,y:centerY/oldScale-baseLayer.y()/oldScale},newScale=type>0?1.15*oldScale:oldScale/1.15;baseLayer.scale({x:newScale,y:newScale});var newPos={x:-(mousePointTo.x-centerX/newScale)*newScale,y:-(mousePointTo.y-centerY/newScale)*newScale},imageProps={y:Math.round(baseLayer.find("#bgImage")[0].height()*newScale),x:Math.round(baseLayer.find("#bgImage")[0].width()*newScale)};vm.imageProps=imageProps,toolsVPFactory.scaleTransformerBasedOnZoom(baseLayer),vm.zoomLevel=Math.round(100*baseLayer.scale().x),baseLayer.position(newPos),stage.batchDraw()},vm.zoomSlider=function(percentage){var centerY=Math.round(stage.height()/2),centerX=Math.round(stage.width()/2),oldScale=baseLayer.scaleX(),mousePointTo={x:centerX/oldScale-baseLayer.x()/oldScale,y:centerY/oldScale-baseLayer.y()/oldScale},newScale=percentage/100;baseLayer.scale({x:newScale,y:newScale});var newPos={x:-(mousePointTo.x-centerX/newScale)*newScale,y:-(mousePointTo.y-centerY/newScale)*newScale},imageProps={y:Math.round(baseLayer.find("#bgImage")[0].height()*newScale),x:Math.round(baseLayer.find("#bgImage")[0].width()*newScale)};vm.imageProps=imageProps,toolsVPFactory.scaleTransformerBasedOnZoom(baseLayer),vm.zoomLevel=Math.round(100*baseLayer.scale().x),baseLayer.position(newPos),stage.batchDraw()},vm.resetZoom=function(){vm.zoomLevel=100,baseLayer.position({x:0,y:0}),baseLayer.scale({x:1,y:1}),stage.batchDraw()};var baseLayerEvent=eventsVPFactory.layerEvents(baseLayer);function rectangleEventWrapper(shapeObject,shapeType,process){var rectangleEvent=eventsVPFactory.shapeEvents(shapeObject.shape);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.shape),currentProcess.moveToTop()}var customTransformer=toolsVPFactory.customTransformer(stage,baseLayer,shapeObject.shape,!0);customTransformer.set(shapeObject.shape.points()),transformerStore.add(customTransformer.getGroup()),rectangleEvent.register("dragmove."+shapeType,function(e){customTransformer.update({x:shapeObject.shape.x(),y:shapeObject.shape.y()})}),rectangleEvent.register("transformPolygon",function(){var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.shape.points(),scale),unit:calibrationState.get().unit}),$scope.$apply(),vm.shapeInfo=metrics.getShapeInfo(),shapeObject.shape.points(customTransformer.getPoints())}),rectangleEvent.register("click."+shapeType,function(){shapeObject.shape.moveToTop(),selectedShape.set(shapeObject.shape),baseLayer.draw(),customTransformer.update({x:shapeObject.shape.x(),y:shapeObject.shape.y()}),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.shape.points(),scale),unit:calibrationState.get().unit}),$timeout(function(){$scope.$apply()}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.add(customTransformer.getGroup()),baseLayer.draw()});var movement=commonVPFactory.movement();rectangleEvent.register("dragstart."+shapeType,function(e){movement.add(e.target.getPosition())}),rectangleEvent.register("dragend."+shapeType,function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))})}function ellipseEventWrapper(shapeObject,shapeType,process){var ellipseEvent=eventsVPFactory.shapeEvents(shapeObject.shape);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.shape),currentProcess.moveToTop()}var ellipseTransfomer=toolsVPFactory.ellipseTransfomer(stage,baseLayer,shapeObject.shape);ellipseTransfomer.set(shapeObject.shape.radius()),transformerStore.add(ellipseTransfomer.getGroup()),ellipseEvent.register("dragmove.ellipse",function(e){ellipseTransfomer.destroy(),(ellipseTransfomer=toolsVPFactory.ellipseTransfomer(stage,baseLayer,shapeObject.shape)).set(shapeObject.shape.radius()),transformerStore.add(ellipseTransfomer.getGroup())}),ellipseEvent.register("click.ellipse",function(e){shapeObject.shape.moveToTop(),baseLayer.draw(),transformerStore.removeAll(),selectedShape.set(shapeObject.shape),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.ellipseArea(shapeObject.shape.radius(),scale),unit:calibrationState.get().unit}),ellipseTransfomer.destroy(),(ellipseTransfomer=toolsVPFactory.ellipseTransfomer(stage,baseLayer,shapeObject.shape)).set(shapeObject.shape.radius()),transformerStore.add(ellipseTransfomer.getGroup()),baseLayer.draw(),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,$timeout(function(){$scope.$apply()})}),ellipseEvent.register("transformEllipse",function(e){var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.ellipseArea(shapeObject.shape.radius(),scale),unit:calibrationState.get().unit}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0});var movement=commonVPFactory.movement();ellipseEvent.register("dragstart.ellipse",function(e){movement.add(e.target.getPosition())}),ellipseEvent.register("dragend.ellipse",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))})}function polygonEventWrapper(shapeObject,process){var polygonEvent=eventsVPFactory.shapeEvents(shapeObject.polygon);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.polygon),currentProcess.moveToTop()}var customTransformer=toolsVPFactory.customTransformer(stage,baseLayer,shapeObject.polygon,!1);customTransformer.set(shapeObject.polygon.points()),transformerStore.add(customTransformer.getGroup()),polygonEvent.register("dragmove.polygon",function(e){customTransformer.update({x:shapeObject.polygon.x(),y:shapeObject.polygon.y()})}),polygonEvent.register("click.polygon",function(e){customTransformer.update({x:shapeObject.polygon.x(),y:shapeObject.polygon.y()})});var movement=commonVPFactory.movement();polygonEvent.register("dragstart.polygon",function(e){movement.add(e.target.getPosition())}),polygonEvent.register("dragend.polygon",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),polygonEvent.register("transformPolygon",function(){var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.polygon.points(),scale),unit:calibrationState.get().unit}),$timeout(function(){$scope.$apply()}),vm.shapeInfo=metrics.getShapeInfo(),shapeObject.polygon.points(customTransformer.getPoints())}),polygonEvent.register("click",function(){shapeObject.polygon.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.polygon),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.polygon.points(),scale),unit:calibrationState.get().unit}),$scope.$apply(),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.add(customTransformer.getGroup()),baseLayer.draw()})}function freeHandEventWrapper(shapeObject,process){var freeHandEvent=eventsVPFactory.shapeEvents(shapeObject.polygon);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.polygon),currentProcess.moveToTop()}var movement=commonVPFactory.movement();freeHandEvent.register("dragstart.polygon",function(e){movement.add(e.target.getPosition())}),freeHandEvent.register("dragend.polygon",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),freeHandEvent.register("click",function(){shapeObject.polygon.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.polygon),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.polygon.points(),scale),unit:calibrationState.get().unit}),$timeout(function(){$scope.$apply()}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.draw()})}function lineEventWrapper(shapeObject,process){var lineEvent=eventsVPFactory.shapeEvents(shapeObject.line);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.line),currentProcess.moveToTop()}var movement=commonVPFactory.movement();lineEvent.register("dragstart.line",function(e){movement.add(e.target.getPosition())}),lineEvent.register("dragend.line",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),lineEvent.register("click",function(){shapeObject.line.moveToTop(),selectedShape.set(shapeObject.line),vm.openInfoWidget(),transformerStore.removeAll(),baseLayer.draw()})}function freeHandMarkerWrapper(shapeObject,process){var freeHandEvent=eventsVPFactory.shapeEvents(shapeObject.polygon);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.polygon),currentProcess.moveToTop()}var movement=commonVPFactory.movement();freeHandEvent.register("dragstart.freeHandMarker",function(e){movement.add(e.target.getPosition())}),freeHandEvent.register("dragend.freeHandMarker",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),freeHandEvent.register("click.freeHandMarker",function(){shapeObject.polygon.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.polygon),vm.openInfoWidget(),transformerStore.removeAll(),baseLayer.draw()})}function textEventWrapper(group,process){var textEvent=eventsVPFactory.shapeEvents(group);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(group),currentProcess.moveToTop()}var customTransformer=toolsVPFactory.customTransformer(stage,baseLayer,group,!0),wrapper=group.getChildren()[0],text=group.getChildren()[1];customTransformer.set(wrapper.points()),transformerStore.add(customTransformer.getGroup()),textEvent.register("dragmove.textGroup",function(e){customTransformer.update({x:group.x(),y:group.y()})}),textEvent.register("transformPolygon",function(){wrapper.points(customTransformer.getPoints());var updatedPoints=wrapper.points();text.width(Math.abs(updatedPoints[0]-updatedPoints[2])-10),text.position({x:updatedPoints[0]+5,y:updatedPoints[1]+5}),baseLayer.draw()}),textEvent.register("click.textGroup",function(){group.moveToTop(),selectedShape.set(text),baseLayer.draw(),customTransformer.update({x:group.x(),y:group.y()}),$timeout(function(){$scope.$apply()}),transformerStore.removeAll(),baseLayer.add(customTransformer.getGroup()),wrapper.stroke("grey"),baseLayer.draw(),vm.openTextInfoWidget()});var movement=commonVPFactory.movement();textEvent.register("dragstart.textGroup",function(e){movement.add(e.target.getPosition())}),textEvent.register("dragend.textGroup",function(e){actionStates.push(commonVPFactory.actionHandler(stage,group,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))})}baseLayerEvent.register("click",function(e){"Image"===e.target.className&&(transformerStore.removeAll(),vm.closeInfoWidget(),vm.closeTextInfoWidget(),selectedShape.reset())}),loadFromJson&&(angular.forEach(baseLayer.getChildren(),function(x){/process*/.test(x.name())&&angular.forEach(x.getChildren(),function(child){if("Ellipse"===child.className)ellipseEventWrapper({shape:child},"ellipse",!0);else if("Line"===child.className||"Arrow"===child.className){var shapeName=child.name();/Rect*/.test(shapeName)?rectangleEventWrapper({shape:child},"rectangle",!0):/polygon*/.test(shapeName)?polygonEventWrapper({polygon:child},!0):/line*/.test(shapeName)?lineEventWrapper({line:child},!0):/freeHand*/.test(shapeName)?freeHandEventWrapper({polygon:child},!0):/markerFreeHand*/.test(shapeName)&&freeHandMarkerWrapper({polygon:child},!0)}else/textGroup*/.test(child.name())&&textEventWrapper(child,!0)})}),transformerStore.removeAll()),vm.rectangle=function(square){var shapeType=square?"square":"rectangle";drawState.set("shapes."+shapeType),document.body.style.cursor="crosshair",console.log(vm.currentDrawState.shapes.square),baseLayerEvent.register("click."+shapeType,function(){if(drawState.check("shapes."+shapeType)){var shapeObject=shapesVPFactory.createShape(0,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject.start?(baseLayer.add(shapeObject.shape),actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"create")),baseLayer.draw()):(rectangleEventWrapper(shapeObject,shapeType),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())}}),baseLayerEvent.register("mousemove."+shapeType,function(){drawState.check("shapes."+shapeType)&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),square),baseLayer.draw())})},vm.ellipse=function(circle){var shapeType=circle?"circle":"ellipse";drawState.set("shapes."+shapeType),document.body.style.cursor="crosshair",baseLayerEvent.register("click."+shapeType,function(){if(drawState.check("shapes."+shapeType)){var shapeObject=shapesVPFactory.createShape(1,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject.start?(baseLayer.add(shapeObject.shape),actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"create")),baseLayer.draw()):(document.body.style.cursor="default",ellipseEventWrapper(shapeObject,shapeType),drawState.reset(),shapesVPFactory.destroyShape())}}),baseLayerEvent.register("mousemove."+shapeType,function(){drawState.check("shapes."+shapeType)&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),circle),baseLayer.draw())})},vm.polygon=function(){drawState.set("shapes.polygon"),document.body.style.cursor="crosshair",baseLayerEvent.register("click.polygon",function(){if(drawState.check("shapes.polygon")){var shapeObject=shapesVPFactory.createPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.polygon)):(polygonEventWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.polygon",function(){drawState.check("shapes.polygon")&&(shapesVPFactory.drawPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale())),baseLayer.draw())})},vm.freeHand=function(){drawState.set("measurement.freeHand"),document.body.style.cursor="crosshair",baseLayerEvent.register("mousedown.freehand",function(){if(drawState.check("measurement.freeHand")){var shapeObject=shapesVPFactory.createPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0);shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.polygon)):(freeHandEventWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.freehand",function(){drawState.check("measurement.freeHand")&&(shapesVPFactory.drawPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0),baseLayer.draw())})},vm.simpleLine=function(type){drawState.set("markings."+type),document.body.style.cursor="crosshair",baseLayerEvent.register("click."+type,function(){if(drawState.check("markings."+type)){var shapeObject=shapesVPFactory.createLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),type);shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.line),baseLayer.draw()):(lineEventWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove."+type,function(){drawState.check("markings."+type)&&(shapesVPFactory.drawLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale())),baseLayer.draw())})},vm.bezierLine=function(){drawState.set("markings.bezier"),document.body.style.cursor="crosshair",baseLayerEvent.register("click.bezier",function(){if(drawState.check("markings.bezier")){var shapeObject=shapesVPFactory.createBezierLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.line),baseLayer.draw()):(!function(shapeObject,process){var bezierEvent=eventsVPFactory.shapeEvents(shapeObject.line);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.line),currentProcess.moveToTop()}var bezierTransformer=toolsVPFactory.bezierTransformer(stage,baseLayer,shapeObject.line);bezierTransformer.set(shapeObject.line.points()),transformerStore.add(bezierTransformer.getGroup()),bezierEvent.register("dragmove.polygon",function(e){bezierTransformer.update({x:shapeObject.line.x(),y:shapeObject.line.y()})}),bezierEvent.register("click.polygon",function(e){bezierTransformer.update({x:shapeObject.line.x(),y:shapeObject.line.y()})});var movement=commonVPFactory.movement();bezierEvent.register("dragstart.polygon",function(e){movement.add(e.target.getPosition())}),bezierEvent.register("dragend.polygon",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),bezierEvent.register("transformBezier",function(){shapeObject.line.points(bezierTransformer.getPoints())}),bezierEvent.register("click",function(){shapeObject.line.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.line),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.line.points(),scale),unit:calibrationState.get().unit}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.add(bezierTransformer.getGroup()),baseLayer.draw()})}(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.bezier",function(){drawState.check("markings.bezier")&&(shapesVPFactory.drawBezierLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale())),baseLayer.draw())})},vm.freehandMarker=function(){drawState.set("shapes.freeHand"),document.body.style.cursor="crosshair",baseLayerEvent.register("mousedown.freehand",function(){if(drawState.check("shapes.freeHand")){var shapeObject=shapesVPFactory.createPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0,!0);shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.polygon)):(freeHandMarkerWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.freehand",function(){drawState.check("shapes.freeHand")&&(shapesVPFactory.drawPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0),baseLayer.draw())})},vm.textWidget=function(){drawState.set("shapes.text"),document.body.style.cursor="crosshair",baseLayerEvent.register("click.textWrapper",function(){if(drawState.check("shapes.text")){var shapeObject=shapesVPFactory.createShape(0,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));if(shapeObject.start)baseLayer.add(shapeObject.shape),actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"create"));else{var textGroup=shapesVPFactory.createTextGroup();textGroup.add(shapeObject.shape);var points=shapeObject.shape.points(),textProps={position:{x:points[0]+10,y:points[1]+10},width:Math.abs(points[0]-points[2])-10},textObj=shapesVPFactory.createText(textProps);textGroup.add(textObj),textEventWrapper(textGroup),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape(),baseLayer.draw()}}}),baseLayerEvent.register("mousemove.textWrapper",function(){drawState.check("shapes.text")&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!1,"wrapper"),baseLayer.draw())})},vm.manualSelection=function(shapeObj){transformerStore.removeAll(),selectedShape.reset();selectedShape.set(shapeObj);shapeObj.fire("click")},vm.dragSelection=function(){drawState.set("markings.selection"),document.body.style.cursor="crosshair",baseLayerEvent.register("mousedown.selection",function(){if(drawState.check("markings.selection")){vm.selectAllShapes(!1);var shapeObject=shapesVPFactory.createShape(0,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));baseLayer.add(shapeObject.shape),baseLayer.draw()}}),baseLayerEvent.register("mouseup.selection",function(){if(drawState.check("markings.selection")){document.body.style.cursor="default",drawState.reset();var selectionPoints=shapesVPFactory.cancelDrawing(),selectedShapes=shapesVPFactory.selectShapes(baseLayer,selectionPoints),selectedShapeNames=selectedShapes.map(function(x){return x.name()});selectionStore.store(selectedShapes),angular.forEach(vm.processes,function(process){angular.forEach(process.getChildren(),function(child){selectedShapeNames.indexOf(child.name())>-1&&(child.selected=!0)})}),baseLayer.draw()}}),baseLayerEvent.register("mousemove.selection",function(){drawState.check("markings.selection")&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!1,"grabber"),baseLayer.draw())})},vm.selectAllShapes=function(toggleValue){var allShapes=shapesVPFactory.extractAllShapes(baseLayer);toggleValue?selectionStore.store(allShapes):selectionStore.clear(),angular.forEach(allShapes,function(x){x.selected=!!toggleValue})},vm.toggleShapeVisibility=function(shape){transformerStore.removeAll(),shape.visible(!shape.visible()),baseLayer.draw()},vm.calibrator=function(){drawState.set("measurement.calibrator"),calibrator=shapesVPFactory.calibrator(stage,baseLayer),baseLayerEvent.register("click.calibrator",function(){drawState.check("measurement.calibrator")&&calibrator(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0)}),baseLayerEvent.register("mousemove.calibrator",function(){drawState.check("measurement.calibrator")&&calibrator(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!1)})},$scope.$on("calibrated",function(e,calibratedLine){$("#calibrateModal").modal("show");var points=calibratedLine.points(),distance=Math.sqrt(Math.pow(points[0]-points[2],2)+Math.pow(points[1]-points[3],2));vm.calibrationDistance=distance,vm.saveCalibration=function(){var scale,value=vm.calibrationScale.value;scale=parseInt(value)/distance,calibrationState.set({value:scale,unit:vm.calibrationScale.unit}),vm.calibrationData=calibrationState.get(),vm.showPanel=!0,vm.shapeInfo=metrics.getShapeInfo(),calibratedLine.destroy(),baseLayer.draw(),$("#calibrateModal").modal("hide")},$("#calibrateModal").on("hide.bs.modal",function(e){calibratedLine.destroy(),baseLayer.draw()})}),vm.deleteShape=function(shapeObj){var shape=shapeObj||selectedShape.get();shape&&(transformerStore.removeAll(),actionStates.push(commonVPFactory.actionHandler(stage,shape,shape.getParent(),"delete")),shape.remove(),baseLayer.draw(),vm.closeInfoWidget(),vm.closeTextInfoWidget(),selectedShape.reset())},vm.openInfoWidget=function(){var shape=selectedShape.get();vm.infoWidgetProps={name:shape.name(),colorType:"stroke",stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()},vm.shapeInfoWidget=!0},vm.colorTypes=[{type:"Stroke",value:"stroke"},{type:"Fill",value:"fill"}],vm.textColorTypes=[{type:"Background",value:"stroke"},{type:"Font",value:"fill"}],vm.fontStyles=[{type:"Normal",value:"normal"},{type:"Bold",value:"bold"},{type:"Italic",value:"italic"}],vm.webSafeFonts=["Arial","Calibri","Helvetica","Times New Roman","Times","Courier New","Courier","Verdana","Georgia","Palatino","Garamond","Bookman","Comic Sans MS","Trebuchet MS","Arial Black","Impact"],vm.openTextInfoWidget=function(){var shape=selectedShape.get();vm.textInfoWidgetProps={colorType:"stroke",text:shape.text(),fontSize:shape.fontSize(),fontStyle:shape.fontStyle(),fontFamily:shape.fontFamily(),stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()},vm.textInfoWidget=!0,$scope.$apply()},vm.changeTextInfo=function(prop,value){var shape=selectedShape.get();shape[prop](value),baseLayer.draw()},vm.infoWidgetStroke=function(val){var shape=selectedShape.get();shape.strokeWidth(val),baseLayer.draw()};var shapePropHistory=commonVPFactory.shapePropertyHistory();vm.infoWidgetEvents={onChange:function(api,color,$event){var shape=selectedShape.get();"fill"===vm.infoWidgetProps.colorType?shape.fill(color):"stroke"===vm.infoWidgetProps.colorType&&shape.stroke(color),baseLayer.draw()},onOpen:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};shapePropHistory.add(props)},onClose:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};actionStates.push(commonVPFactory.actionHandler(stage,shape,processStore.getCurrent(),"shapeProps",shapePropHistory.add(props))),shapePropHistory=commonVPFactory.shapePropertyHistory()}},vm.textInfoWidgetEvents={onChange:function(api,color,$event){var shape=selectedShape.get();if("fill"===vm.textInfoWidgetProps.colorType)shape.fill(color);else if("stroke"===vm.textInfoWidgetProps.colorType){var wrapper=shape.getParent().find("Line");wrapper.fill(color)}baseLayer.draw()},onOpen:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};shapePropHistory.add(props)},onClose:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};actionStates.push(commonVPFactory.actionHandler(stage,shape,processStore.getCurrent(),"shapeProps",shapePropHistory.add(props))),shapePropHistory=commonVPFactory.shapePropertyHistory()}},vm.closeInfoWidget=function(){vm.shapeInfoWidget=!1},vm.closeTextInfoWidget=function(){var text=selectedShape.get();if(text&&"text"===text.name()){var group=text.getParent(),wrapper=group.find("Line")[0];wrapper.stroke(null),baseLayer.draw(),transformerStore.removeAll()}vm.textInfoWidget=!1},vm.currentPanState=!0,vm.panImage=function(){vm.currentPanState=baseLayer.draggable(),vm.currentPanState?document.body.style.cursor="default":document.body.style.cursor="move",baseLayer.draggable(!vm.currentPanState),baseLayer.draw()},vm.undoOrRedo=function(type){transformerStore.removeAll(),1===type?actionStates.redo():actionStates.undo()},vm.downloadImage=function(){var dataURL=stage.toDataURL(),link=document.createElement("a");link.download="roofplan_image_"+Date.now(),link.href=dataURL,document.body.appendChild(link),link.click(),document.body.removeChild(link)},vm.downloadFile=function(){var json=stage.toJSON(),file=new Blob([json],{type:"application/json"}),link=document.createElement("a");link.href=URL.createObjectURL(file),link.download="roofplan_json_"+Date.now(),document.body.appendChild(link),link.click(),document.body.removeChild(link)},vm.saveRoofPlan=function(){transformerStore.removeAll();var json=stage.toJSON();apiFactory.saveRoofPlan(roofPlan._id,{jsonString:json,calibration:calibrationState.get(),countData:shapesVPFactory.getShapeId(),associations:vm.associations.getAssociationsForSave()}).then(function(resp){Notification.success(resp.data.message),apiFactory.getProjectRoofPlans(localStorageService.get("roofPlanProject")).then(function(resp){localStorageService.set("roofPlans",resp.data.data)}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})},vm.hideProcess=function(index){transformerStore.removeAll(),processStore.hideProcess(index)},vm.showProcess=function(index){processStore.showProcess(index)},vm.addProcess=function(){processStore.createProcess(),vm.processes=processStore.getProcesses()},vm.selectLayer=function(i){vm.selectedIndex=i,processStore.setCurrent(i)},vm.selectLayer(0),vm.selectOrUnselect=function(shape){shape.selected?selectionStore.push(shape):selectionStore.pull(shape.name())},vm.layerIconName=function(shapeName){return/Rect*/.test(shapeName)?"square":/Ellipse*/.test(shapeName)?"circle":/polygon*/.test(shapeName)?"polygon":/line*/.test(shapeName)?"line":/textGroup*/.test(shapeName)?"text":/freeHand*/.test(shapeName)?"pencil":void 0},vm.hideSelection=function(){var selectedShapes=selectionStore.get();console.log(selectedShapes),transformerStore.removeAll(),angular.forEach(selectedShapes,function(shape){shape.visible(!1)}),baseLayer.draw()},vm.deleteSelection=function(){var selectedShapes=selectionStore.get();transformerStore.removeAll(),angular.forEach(selectedShapes,function(shape){actionStates.push(commonVPFactory.actionHandler(stage,shape,shape.getParent(),"delete")),shape.remove()}),baseLayer.draw()},vm.loadMaterial=function(shapeProp){$("#loadMaterial").modal("show")},vm.createAssociation=function(shapeId,entityId,type){vm.associations.createAssociation(shapeId,entityId,type),$("#loadMaterial").modal("hide")},$scope.$on("selectedMaterial",function(e,data){console.log("selectedMaterial----",data)})}vm.hideInitModal=!1,vm.roofPlans=localStorageService.get("roofPlans"),vm.selectPlan=function(plan){vm.selectedPlan=plan._id,loadPlanner(plan),vm.hideInitModal=!0},vm.selectPlan(localStorageService.get("selectedPlan")),vm.closeVisualPlanner=function(){document.body.style.cursor="default",$("#chooseRoofModal").modal("hide"),$state.go("dashboard")}})}(),function(){angular.module("app").controller("workingHoursCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment,$location){var logout=globals.logout,userStore=globals.userStore;globals.debounce;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),console.log(this.userData),this.logout=function(){logout()},$scope.activeClass=function(path){return $location.path()===path?"active":""}})}(),function(){angular.module("app").directive("canvasPdf",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"A",scope:{current:"="},link:function($scope,elem,attrs){globals.renderPage($scope.current,elem[0]),$timeout(function(){$scope.$apply()})}}})}(),function(){angular.module("app").directive("chatMessage",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"E",scope:{m:"=",type:"@"},template:'<ng-include src="type"></ng-include>',link:function($scope,elem,attrs){globals.projectStore;$scope.showPreview=function(format){return/png|jpeg|gif|jpg/.test(format)}}}})}(),function(){angular.module("app").directive("filePicker",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"E",templateUrl:"/partials/filePicker.html",scope:{folders:"=",options:"=",source:"=",sourcefile:"=",sourcedir:"="},link:function($scope,elem,attrs){var folderPaths=[],projectStore=globals.projectStore;$scope.files=[],$scope.folderName="Root Folder",$scope.currentFolder="",$scope.selectedFolder=null,$scope.backBtnView=!1,$scope.viewFolder=function(folder){var name=folder.name;folderPaths.push(folder),$scope.selectedFolder,apiFactory.viewHierarchy(folder._id).then(function(resp){$scope.selectedFolder=folder,$scope.currentFolder=folder.name,$scope.folders=resp.data.folders,$scope.files=resp.data.files,$scope.breadCrumbs=resp.data.breadcrumbs,$scope.folderName=name,"Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1}).catch(function(e){console.log(e)})},$scope.selectFile=function(file,breadCrumbs){file.breadCrumbs=breadCrumbs,$rootScope.$broadcast("loader",!0),$rootScope.$broadcast("selectedRoofPlanDoc",file)},$scope.back=function(){folderPaths.pop();var previous=folderPaths[folderPaths.length-1],apiName=previous?"viewHierarchy":"getHierarchy",param=previous?previous._id:projectStore.get()._id;apiFactory[apiName](param).then(function(resp){$scope.selectedFolder=previous||null,$scope.currentFolder=previous?previous.name:null,$scope.folders=previous?resp.data.folders:resp.data.data.hierarchies,$scope.files=previous?resp.data.files:[],$scope.folderName=previous?previous.name:"Root Folder","Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1}).catch(function(e){console.log(e)})},$scope.moveTo=function(folder,source){if(folder){var payload={assetId:$scope.sourcefile._id,sourceId:source.$modelValue._id,destId:folder._id};apiFactory.moveAssets(payload).then(function(resp){$scope.sourcedir&&($scope.sourcedir=$scope.sourcedir.filter(function(x){return x._id!==$scope.sourcefile._id})),Notification.success("File Moved Successfully"),$("#moveTo").modal("hide")}).catch(function(e){console.log(e)})}}}}})}(),angular.module("app").directive("autoComplete",function($timeout){return function(scope,iElement,iAttrs){iElement.autocomplete({source:scope[iAttrs.uiItems],select:function(){$timeout(function(){iElement.trigger("input")},0)}})}}),angular.module("app").directive("errSrc",function(){return{link:function(scope,element,attrs){element.bind("error",function(){attrs.src!=attrs.errSrc&&attrs.$set("src",attrs.errSrc)})}}}),function(){angular.module("app").directive("materialPicker",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"E",templateUrl:"/partials/materialPicker.html",scope:{materialType:"=",selectedMaterial:"=",currentShape:"=",associations:"="},link:function($scope,elem,attrs){$scope.materialList=[],$scope.entityType=1,apiFactory.listAllMaterials().then(function(resp){$scope.materialList=resp.data.list,$scope.selectedMaterial=angular.copy($scope.materialList[0])}).catch(function(e){}),$scope.dcpList=[],apiFactory.listAllComboMaterials().then(function(resp){$scope.dcpList=resp.data.list}).catch(function(e){}),$scope.equipmentList=[],apiFactory.listAllEquipments().then(function(resp){$scope.equipmentList=resp.data.list}).catch(function(e){}),$scope.selectedMaterialInfo=function(material){$rootScope.$broadcast("selectedMaterial",material),console.log(material),$scope.materialImages=material},$scope.materialSelection=function(item){$scope.selectedMaterial=item},$scope.resetSelectedMaterial=function(val){$scope.selectedMaterial&&(console.log($scope.currentShape),0==val?($scope.selectedMaterial=angular.copy($scope.materialList[0]),$scope.entityType=val+1):1==val?($scope.selectedMaterial=angular.copy($scope.dcpList[0]),$scope.entityType=val+1):($scope.selectedMaterial=angular.copy($scope.equipmentList[0]),$scope.entityType=val+1))},$scope.assignMaterial=function(shapeId,entityId,type){$("#loadMaterial").modal("hide"),$scope.associations.createAssociation(shapeId,entityId,type)}}}})}(),function(){angular.module("app").filter("convertCurrency",function(){return function(input,conversionRate){return input?input*conversionRate:0}}),angular.module("app").filter("roundNum",function(){return function(input,place){return input?Number(input).toFixed(place):0}}),angular.module("app").filter("fetchThumbnail",function(){return function(input){if(input)return/cloudinary/.test(input.secure_url)?input.secure_url.replace(/\.pdf/,".png"):input.thumbnail}}),angular.module("app").filter("parseTypingMembers",function(){return function(input){if(input&&input.length)return input.length>1?input.length+" people are typing..":input[0].nickname+" is typing.."}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJyb3V0ZXMubW9kdWxlLmpzIiwiYXBpLmZhY3RvcnkuanMiLCJhdXRoLmZhY3RvcnkuanMiLCJmaWxlTWFuYWdlci5mYWN0b3J5LmpzIiwiZ2xvYmFscy5mYWN0b3J5LmpzIiwiaXNzdWVjcmVhdGlvbi5mYWN0b3J5LmpzIiwiczN3cmFwcGVyLmZhY3RvcnkuanMiLCJtZWV0aW5nUm9vbS9TQmNoYW5uZWwuZmFjdG9yeS5qcyIsIm1lZXRpbmdSb29tL1NCY29tbW9uLmZhY3RvcnkuanMiLCJtZWV0aW5nUm9vbS9TQmV2ZW50cy5mYWN0b3J5LmpzIiwidmlzdWFsX3BsYW5uZXIvY29tbW9uLmZhY3RvcnkuanMiLCJ2aXN1YWxfcGxhbm5lci9ldmVudHMuZmFjdG9yeS5qcyIsInZpc3VhbF9wbGFubmVyL2xheWVycy5mYWN0b3J5LmpzIiwidmlzdWFsX3BsYW5uZXIvc2hhcGVzLmZhY3RvcnkuanMiLCJ2aXN1YWxfcGxhbm5lci90b29scy5mYWN0b3J5LmpzIiwiM2QtZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMiLCIzZHZpZXdlci5jb250cm9sbGVyLmpzIiwiYWRkSXRlbS5jb250cm9sbGVyLmpzIiwiYmlsbGluZ0FyY2hpdmUuY29udHJvbGxlci5qcyIsImNhbGN1bGF0aW9uLmNvbnRyb2xsZXIuanMiLCJjYWxlbmRlci5jb250cm9sbGVyLmpzIiwiY2xpZW50cy5jb250cm9sbGVyLmpzIiwiY2xpZW50c0RldGFpbC5jb250cm9sbGVyLmpzIiwiY29tYm9NYXRlcmlhbFZpZXcuY29udHJvbGxlci5qcyIsImNyZWF0ZVByb2plY3QuY29udHJvbGxlci5qcyIsImNyZWF0ZVZhcmlhdGlvbnNPcmRlci5jb250cm9sbGVyLmpzIiwiZGFzaGJvYXJkLmNvbnRyb2xsZXIuanMiLCJlY29ub21pYy5jb250cm9sbGVyLmpzIiwiZWNvbm9taWNQYXlyb2xsLmNvbnRyb2xsZXIuanMiLCJlbXBsb3llZXMuY29udHJvbGxlci5qcyIsImVxdWlwbWVudC5jb250cm9sbGVyLmpzIiwiZXF1aXBtZW50Vmlldy5jb250cm9sbGVyLmpzIiwiZmlsZU1hbmFnZXIuY29udHJvbGxlci5qcyIsImludm9pY2UuY29udHJvbGxlci5qcyIsImlzc3VlRGV0YWlscy5jb250cm9sbGVyLmpzIiwiaXNzdWVzLmNvbnRyb2xsZXIuanMiLCJtYXRlcmlhbHMuY29udHJvbGxlci5qcyIsIm1hdGVyaWFsVmlldy5jb250cm9sbGVyLmpzIiwibWVldGluZ1Jvb20uY29udHJvbGxlci5qcyIsInBheXJvbGwuY29udHJvbGxlci5qcyIsInByZUxvZ2luLmNvbnRyb2xsZXIuanMiLCJwcm9qZWN0LmNvbnRyb2xsZXIuanMiLCJyZXBvcnREZXRhaWxzLmNvbnRyb2xsZXIuanMiLCJyZXBvcnRzLmNvbnRyb2xsZXIuanMiLCJyZXBvcnRzTGlzdGluZy5jb250cm9sbGVyLmpzIiwic2V0UGFzc3dvcmQuY29udHJvbGxlci5qcyIsInNldHRpbmcuY29udHJvbGxlci5qcyIsInN1YmNvbnRyYWN0b3IuY29udHJvbGxlci5qcyIsInN1YmNvbnRyYWN0b3JEZXRhaWwuY29udHJvbGxlci5qcyIsInN1cHBsaWVyLmNvbnRyb2xsZXIuanMiLCJzdXBwbGllckRldGFpbC5jb250cm9sbGVyLmpzIiwic3lzdGVtVGFncy5jb250cm9sbGVyLmpzIiwidG9kby5jb250cm9sbGVyLmpzIiwidG9kb1ZpZXcuY29udHJvbGxlci5qcyIsInZpc3VhbF9wbGFubmVyLmNvbnRyb2xsZXIuanMiLCJ3b3JraW5nSG91cnMuY29udHJvbGxlci5qcyIsImNhbnZhc1BkZi5kaXJlY3RpdmUuanMiLCJjaGF0TWVzc2FnZS5kaXJlY3RpdmUuanMiLCJmaWxlUGlja2VyLmRpcmVjdGl2ZS5qcyIsImluZGV4LmRpcmVjdGl2ZS5qcyIsIm1hdGVyaWFsUGlja2VyLmRpcmVjdGl2ZS5qcyIsImluZGV4LmZpbHRlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiTm90aWZpY2F0aW9uUHJvdmlkZXIiLCJ1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlciIsInRyZWVDb25maWciLCJjbG91ZGluYXJ5UHJvdmlkZXIiLCJjb25maWd1cmUiLCJrZXkiLCJ2IiwibGlicmFyaWVzIiwic2V0T3B0aW9ucyIsImRlbGF5Iiwic3RhcnRUb3AiLCJzdGFydFJpZ2h0IiwidmVydGljYWxTcGFjaW5nIiwiaG9yaXpvbnRhbFNwYWNpbmciLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJkZWZhdWx0Q29sbGFwc2VkIiwic2V0Iiwicm91dGVDb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiZmFjdG9yeSIsIiRodHRwIiwiJHN0YXRlIiwiJGxvY2F0aW9uIiwibG9jYWxTdG9yYWdlU2VydmljZSIsImdsb2JhbHMiLCJVcGxvYWQiLCJOb3RpZmljYXRpb24iLCIkcSIsIl9yZWYiLCJoZWFkZXJzIiwibWV0aG9kIiwidG9rZW4iLCJDb250ZW50LVR5cGUiLCJ1bmRlZmluZWQiLCJ4LWFjY2Vzcy10b2tlbiIsImdldCIsInBsYXRmb3JtIiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZSIsInByb2dyZXNzIiwibG9nb3V0IiwidXNlclN0b3JlIiwiX2RlZmluZVByb3BlcnR5IiwibG9naW4iLCJwYXlsb2FkIiwicHJvbWlzZSIsInRoaXMiLCJwcm9ncmVzc2lmeSIsImRhdGEiLCJmb3Jnb3RQYXNzd29yZCIsInJlZ2lzdHJhdGlvbiIsInN1YnNjcmliZSIsImdldENvbXBhbnlCeUlkIiwiY29tcGFueUlkIiwibGlzdEFsbFVzZXJzIiwibGlzdEFsbFByb2plY3RzIiwicXVlcnlPYmoiLCJxdWVyeSIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJhY2MiLCJzdHIiLCJzbGljZSIsImxpc3RBbGxDbGllbnRzIiwibGlzdEFsbFJvb2ZlcnMiLCJjcmVhdGVQcm9qZWN0IiwiY3JlYXRlSXNzdWUiLCJpc3N1ZW9iaiIsImNvbnNvbGUiLCJsb2ciLCJ1cGxvYWQiLCJjcmVhdGVJc3N1ZVMzVXBsb2FkIiwiZ2V0SXNzdWVCeUlkIiwiaXNzdWVJRCIsImdldENsaWVudEJ5SWQiLCJjbGllbnRJRCIsInVwZGF0ZUlzc3VlIiwiaWQiLCJnZXRQcm9qZWN0Um9vZlBsYW5zIiwicHJvamVjdElkIiwic2F2ZVJvb2ZQbGFuIiwicm9vZlBsYW5JZCIsImNyZWF0ZU1hdGVyaWFscyIsImNyZWF0ZUVxdWlwbWVudCIsImxpc3RBbGxNYXRlcmlhbHMiLCJsaXN0QWxsQ29tYm9NYXRlcmlhbHMiLCJsaXN0QWxsRXF1aXBtZW50cyIsInVwZGF0ZU1hdGVyaWFsQnlJZCIsInVwZGF0ZUVxdWlwbWVudEJ5SWQiLCJnZXRNYXRlcmlhbEJ5SWQiLCJtYXRlcmlhbElEIiwiZ2V0Q29tYm9NYXRlcmlhbEJ5SWQiLCJjb21ib0lkIiwiZ2V0RXF1aXBtZW50QnlJZCIsImNyZWF0ZUNvbWJvTWF0ZXJpYWwiLCJ1cGRhdGVDb21ib01hdGVyaWFsTGlzdCIsInVwZGF0ZUNvbWJvTWF0ZXJpYWwiLCJzaG93Q29udmVyc2lvblJhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInN0YXJ0IiwidGhlbiIsInJlc3AiLCJjb21wbGV0ZSIsImNhdGNoIiwiZXJyIiwic3RhdHVzIiwiaGllcmFyY2h5SWQiLCJEYXRhM0QiLCJjbGllbnQiLCJuYW1lIiwiYWRkZWQiLCJsaW1pdCIsInN1cHBsaWVyIiwic3VwcGxpZXJJRCIsInN1YmNvbnRyYWN0b3IiLCJjb21tZW50IiwiZmlsZXMiLCJkdCIsImNvbXBsZXRpb25TdGF0dXMiLCJkZWZlcnJlZCIsImRlZmVyIiwiaW5mb1Byb21pc2UiLCJkZXRhaWxzUHJvbWlzZSIsImFsbCIsImZydWl0SW5mbyIsImZydWl0RGV0YWlscyIsIm9iamVjdCIsInN0YWZmIiwiX2lkIiwiaW5wdXQiLCJhcGlVUkwiLCJldmVudElkIiwiY2hlY2tVc2VyIiwiY2hlY2tQcml2aWxlZ2UiLCJ0eXBlIiwic3ViVHlwZSIsIl9sb2NhbFN0b3JhZ2VTZXJ2aWNlJCIsInByaXZpbGVnZSIsIl9sb2NhbFN0b3JhZ2VTZXJ2aWNlJDIiLCJwcml2aWxlZ2VzIiwiYXBpRmFjdG9yeSIsImNsaXBCb2FyZCIsIml0ZW1zIiwiY29weSIsIml0ZW0iLCJjdXQiLCJwYXN0ZSIsImRlc3RJZCIsImxlbmd0aCIsIndhcm5pbmciLCJhcGlUeXBlIiwiYXNzZXRJZCIsIm1hcCIsIngiLCJzb3VyY2VJZCIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiZSIsIm5hdmlnYXRpb25TdGFjayIsInN0YWNrIiwiaGVhZCIsInB1c2giLCJzcGxpY2UiLCJmb3J3YXJkIiwidG9nZ2xlIiwiYmFja3dhcmQiLCJicmVhZENydW1iIiwiYnJlYWRDcnVtYnMiLCJ2YWwiLCJzcGxpdERlc3RpbmF0aW9uIiwiZmlsZXNBcnJheSIsInNpemUiLCJ0ZXN0IiwiY2xvdWRpbmFyeSIsInMzIiwicmVzb2x2ZURlc3RUeXBlIiwiZmlsZSIsImNoZWNrVXBsb2FkQ29tcGxldGlvbiIsImJvb2wiLCJmb3JFYWNoIiwiY29tcGxldGVkIiwiYWJvcnRlZCIsImNoZWNrRHVwbGljYXRlRmlsZXMiLCJjaGVja0Fzc2V0RHVwbGljYXRlIiwiYXNzZXROYW1lcyIsImR1cGxpY2F0ZUZpbGVzIiwiYWN0aW9uIiwiYXNzZXROYW1lIiwiZHVwbGljYXRlcyIsImluZGV4T2YiLCJ1cGxvYWRGaWxlcyIsImNoZWNrTmFtZUNoYW5nZSIsImZpbHRlciIsImdlbmVyYXRlVmVyc2lvbiIsImZpbGVOYW1lIiwiRGF0ZSIsIm5vdyIsImdlbmVyYXRlVGh1bWJuYWlsIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInBkZmpzTGliIiwiZ2V0RG9jdW1lbnQiLCJyZXN1bHQiLCJkb2MiLCJnZXRQYWdlIiwicGFnZSIsInZpZXdwb3J0IiwiZ2V0Vmlld3BvcnQiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsImhlaWdodCIsIndpZHRoIiwidGFzayIsInJlbmRlciIsImNhbnZhc0NvbnRleHQiLCJkYXRhVVJMIiwidG9EYXRhVVJMIiwibGluayIsImRvd25sb2FkIiwiaHJlZiIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJyZWFkQXNEYXRhVVJMIiwic3BsaXRGaWxlRGVzdCIsIm5nUHJvZ3Jlc3NGYWN0b3J5IiwidGhyb3R0bGVyIiwiZW5hYmxlZCIsImZuIiwic2V0VGltZW91dCIsInByb2dyZXNzYmFyIiwiY3JlYXRlSW5zdGFuY2UiLCJyZW1vdmUiLCJnbyIsImVycm9yIiwidXNlckRhdGEiLCJkZXNpZ25hdGlvbiIsInJlc2V0IiwiY29tcGFueVN0b3JlIiwiY29tcGFueURhdGEiLCJyZWZldGNoIiwicHJvamVjdFN0b3JlIiwiaW52ZW50b3J5U3RhdGUiLCJ0YWIiLCJzZWFyY2hUZXh0IiwibWF0ZXJpYWwiLCJjb21ibyIsInNldFBhZ2UiLCJ2YWx1ZSIsInNldFRhYiIsInRleHQiLCJfdGV4dCIsIm1Vbml0cyIsImdldEN1cnJlbmN5IiwiZ2V0Q291bnRyeUNvZGUiLCJnZXRJbmR1c3RyeSIsImRlYm91bmNlIiwicmF0ZSIsInRpbWVyIiwiYXJncyIsImNsZWFyVGltZW91dCIsImFwcGx5IiwiZ2VuZXJpY1N0b3JlIiwic3RvcmUiLCJleHRyYWN0UGFnZXNGcm9tUGRmIiwicGRmTGluayIsInBhZ2VDb3VudCIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheSIsIkFycmF5IiwiXyIsImkiLCJwYWdlT2JqIiwicGFnZU5vIiwicmVwbGFjZSIsInRpdGxlIiwic2VsZWN0ZWQiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZVBhZ2VzRnJvbVBkZiIsInBkZiIsInNlY3VyZV91cmwiLCJudW1QYWdlcyIsInBhZ2VzIiwicmVuZGVyUGFnZSIsInVwbG9hZEZhY3RvcnkiLCJmaWxlTWFuYWdlckZhY3RvcnkiLCJfZ2xvYmFscyIsInZtIiwiczNGaWxlT2JqZXRzIiwiZ2V0QWxsQXRPbmNlIiwiZmlsZXNhcnJheSIsImFycmF5IiwiZXZhcG9yYXRlIiwicGF1c2UiLCJiaW5kIiwicmVzdW1lIiwiYWJvcnQiLCJhZGRDb25maWciLCJwIiwic3RhdHMiLCJNYXRoIiwicm91bmQiLCJjb21wbGV0ZWRBbGwiLCJfeGhyIiwiYXdzS2V5IiwiYWRkIiwiYXdzT2JqZWN0S2V5IiwiYXNzZXREYXRhIiwiYXNzZXRkZXNjcmlwdGlvbiIsImJ1Y2tldCIsIm1pbWV0eXBlIiwiYnl0ZXMiLCJhbGVydCIsInJlYXNvbiIsImNsb3VkaW5hcnlQYXlsb2FkIiwic2VuZERhdGEiLCJzaWduZXJVcmwiLCJhd3Nfa2V5IiwiYXdzUmVnaW9uIiwiY29tcHV0ZUNvbnRlbnRNZDUiLCJhbGxvd1MzRXhpc3RlbmNlT3B0aW1pemF0aW9uIiwiY3J5cHRvTWQ1TWV0aG9kIiwiQVdTIiwidXRpbCIsImNyeXB0byIsIm1kNSIsImNyeXB0b0hleEVuY29kZWRIYXNoMjU2Iiwic2hhMjU2IiwiaW5pdCIsIkV2YXBvcmF0ZSIsImNyZWF0ZSIsImhhbmRsZXIiLCJmaWxlVXBsb2FkIiwiZm9yY2UiLCJpc1BhdXNlZCIsImNhbmNlbCIsIlNCY29tbW9uIiwic2IiLCJnZXRJbnN0YW5jZSIsImNyZWF0ZUNoYW5uZWwiLCJjaGFubmVsTmFtZSIsInVzZXIiLCJwcm9qZWN0IiwicGFyYW1zIiwiR3JvdXBDaGFubmVsUGFyYW1zIiwiaXNQdWJsaWMiLCJpc0VwaGVtZXJhbCIsImlzRGlzdGluY3QiLCJhZGRVc2VySWRzIiwib3BlcmF0b3JzIiwiY3VzdG9tVHlwZSIsIkdyb3VwQ2hhbm5lbCIsImdyb3VwQ2hhbm5lbCIsImxpc3RDaGFubmVscyIsImNoYW5uZWxMaXN0UXVlcnkiLCJjcmVhdGVNeUdyb3VwQ2hhbm5lbExpc3RRdWVyeSIsImluY2x1ZGVFbXB0eSIsImN1c3RvbVR5cGVzRmlsdGVyIiwiaGFzTmV4dCIsIm5leHQiLCJjaGFubmVsTGlzdCIsImludml0ZVVzZXJzIiwiY2hhbm5lbCIsInVzZXJzIiwiaW52aXRlV2l0aFVzZXJJZHMiLCJnZXRDaGFubmVsTWVzc2FnZXMiLCJwcmV2TWVzc2FnZUxpc3RRdWVyeSIsImNyZWF0ZVByZXZpb3VzTWVzc2FnZUxpc3RRdWVyeSIsInJldmVyc2UiLCJsb2FkIiwibWVzc2FnZXMiLCJnZXRDaGFubmVsRmlsZXMiLCJtZXNzYWdlVHlwZUZpbHRlciIsInNlbmRNZXNzYWdlIiwic2VuZFVzZXJNZXNzYWdlIiwic2VuZEZpbGVNZXNzYWdlIiwicHJvbWlzZUFycmF5IiwiX2xvb3AiLCJmb3JtYXQiLCJmaWxlTWVzc2FnZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsImRvbmUiLCJyZXR1cm4iLCJTZW5kQmlyZCIsImFwcElkIiwiY29ubmVjdCIsImRpc2Nvbm5lY3QiLCJjdXJyZW50TWVldGluZyIsInByb3AiLCJhcmd1bWVudHMiLCIkcm9vdFNjb3BlIiwibmV3TWVzc2FnZUhhbmRsZXIiLCJDaGFubmVsSGFuZGxlciIsIm9uTWVzc2FnZVJlY2VpdmVkIiwiJGJyb2FkY2FzdCIsImFkZENoYW5uZWxIYW5kbGVyIiwibmV3VXNlckpvaW5lZCIsIm9uVXNlckpvaW5lZCIsInR5cGluZ1N0YXR1c0hhbmRsZXIiLCJvblR5cGluZ1N0YXR1c1VwZGF0ZWQiLCJjcmVhdGVTdGFnZSIsImRpdklkIiwiaW5pdGlhbFNpemUiLCJwbGFubmVyRGF0YSIsInN0YWdlIiwianNvblN0cmluZyIsIktvbnZhIiwiTm9kZSIsIlN0YWdlIiwiY29udGFpbmVyIiwieSIsImdldFN0YWdlU2l6ZSIsIm9uIiwiZGltZW5zaW9ucyIsImRyYXciLCJlbCIsImdldEVsZW1lbnRCeUlkIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJzaGFwZUlkIiwiZGVmYXVsdENvdW50Iiwic2hhcGVzIiwicmVjdGFuZ2xlIiwic3F1YXJlIiwiY2lyY2xlIiwiZWxsaXBzZSIsImNhbGlicmF0b3IiLCJmcmVlSGFuZCIsInBvbHlnb24iLCJtYXJraW5ncyIsImxpbmUiLCJzaW5nbGVBcnJvdyIsImRvdWJsZUFycm93IiwiYmV6aWVyIiwiZnJlZWhhbmQiLCJzZWxlY3Rpb24iLCJtZWFzdXJlbWVudCIsImN1cnJlbnRDb3VudCIsImNvdW50IiwiZ2V0Q291bnQiLCJzaGFwZSIsImRyYXdTdGF0ZSIsImluaXRpYWxEcmF3U3RhdGVzIiwiZHJhd1N0YXRlcyIsInNwbGl0IiwiY2hlY2siLCJjYWxpYnJhdGlvblN0YXRlIiwidW5pdCIsIm9iaiIsImFjdGlvblN0YXRlcyIsImFjdGlvbnMiLCJzaG93IiwicGVlayIsInVuZG8iLCJkZWxldGUiLCJyZWRvIiwicmVzdG9yZSIsImFjdGlvbkhhbmRsZXIiLCJlbnRpdHkiLCJwcm9jZXNzIiwiYWN0aW9uVHlwZSIsInByb3BzIiwiaGFuZGxlcnMiLCJiYXRjaERyYXciLCJtb3ZlIiwicG9zaXRpb24iLCJlbmQiLCJzaGFwZVByb3BzIiwibW92ZW1lbnQiLCJzaGFwZVByb3BlcnR5SGlzdG9yeSIsInRyYW5zZm9ybWVycyIsImxheWVyIiwidHJhbnNmb3JtZXIiLCJyZW1vdmVBbGwiLCJkcmFnT2Zmc2V0Iiwic3RhZ2VQb3NpdGlvbiIsImxheWVyT2Zmc2V0Iiwic3RhZ2VTY2FsZSIsInNlbGVjdGVkU2hhcGUiLCJzZWxlY3Rpb25TdG9yZSIsInNlbGVjdGlvbnMiLCJwdWxsIiwic2hhcGVOYW1lIiwic2hhcGVOYW1lcyIsImNsZWFyIiwiYXNzb2NpYXRpb25zIiwibWV0aG9kcyIsImNyZWF0ZUFzc29jaWF0aW9uIiwiZW50aXR5SWQiLCJnZXRBc3NvY2lhdGlvbnMiLCJnZXRBc3NvY2lhdGlvbnNGb3JTYXZlIiwibWF0ZXJpYWxJZCIsImVxdWlwbWVudElkIiwicmVtb3ZlQXNzb2NpYXRpb24iLCJmcmVlemUiLCJ3aW5kb3dFdmVudHMiLCJ3aW5kb3dPYmplY3QiLCJlbnRpdGllcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldiIsImZpcmUiLCJyZWdpc3RlciIsInN0YWdlRXZlbnRzIiwiZXZlbnRzIiwiZXZlbnQiLCJzaGFwZUV2ZW50cyIsImxheWVyRXZlbnRzIiwiY3JlYXRlTGF5ZXIiLCJMYXllciIsImluaXRpYXRlUHJvY2VzcyIsImJhc2VMYXllciIsInByb2Nlc3NlcyIsImNyZWF0ZVByb2Nlc3MiLCJncm91cCIsIkdyb3VwIiwiZ2V0UHJvY2Vzc2VzIiwiZ2V0Q3VycmVudCIsInNldEN1cnJlbnQiLCJpbmRleCIsInNob3dQcm9jZXNzIiwiaGlkZVByb2Nlc3MiLCJsb2FkUHJvY2Vzc2VzIiwicHJvY2Vzc2VzRnJvbUpzb24iLCJldmVudHNWUEZhY3RvcnkiLCJjb21tb25WUEZhY3RvcnkiLCJ0b29sc1ZQRmFjdG9yeSIsImNyZWF0ZWRTaGFwZSIsInNoYXBlVG9vbHMiLCJwb2x5Z29uT3B0aW9ucyIsInBvaW50cyIsInBvaW50U2V0IiwiZ2V0U2hhcGVUb29scyIsImxvYWRTaGFwZUlkIiwiZ2V0U2hhcGVJZCIsImNyZWF0ZVNoYXBlIiwiTGluZSIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwiZmlsbCIsImRyYWdnYWJsZSIsImNsb3NlZCIsIkVsbGlwc2UiLCJyYWRpdXMiLCJkcmF3U2hhcGUiLCJzaGFwZUxvY2siLCJtaXNjIiwiY2xhc3NOYW1lIiwiZHJhd1JlY3RhbmdsZSIsImFicyIsInNoYXBlbG9jayIsImRhc2giLCJkZXN0cm95U2hhcGUiLCJjYW5jZWxEcmF3aW5nIiwic2VsZWN0aW9uUG9pbnRzIiwic3R5bGUiLCJjdXJzb3IiLCJjcmVhdGVQb2x5Z29uIiwiZnJlZUhhbmRNYXJrZXIiLCJjaGVja1RocmVzaG9sZCIsImRyYXdQb2x5Z29uIiwiY3JlYXRlTGluZSIsIkFycm93IiwicG9pbnRlckxlbmd0aCIsInBvaW50ZXJXaWR0aCIsInBvaW50ZXJBdEJlZ2lubmluZyIsImRyYXdMaW5lIiwiY3JlYXRlQmV6aWVyTGluZSIsImNyZWF0ZWRQb2ludHMiLCJxIiwidGVuc2lvbiIsImxpbmVKb2luIiwiZHJhd0JlemllckxpbmUiLCJjcmVhdGVUZXh0IiwidGV4dFNoYXBlIiwiVGV4dCIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImNyZWF0ZVRleHRHcm91cCIsInRleHRHcm91cCIsImlzRG9uZSIsImtpbGwiLCJkZXN0cm95Iiwic2NhbGUiLCJ4VXBwZXJUaHJlc2hvbGQiLCJ5VXBwZXJUaHJlc2hvbGQiLCJ4TG93ZXJUaHJlc2hvbGQiLCJ5TG93ZXJUaHJlc2hvbGQiLCJleHRyYWN0QWxsU2hhcGVzIiwiYWxsU2hhcGVzIiwiZmluZCIsImdldENoaWxkcmVuIiwiY2hpbGQiLCJzZWxlY3RTaGFwZXMiLCJtaW4iLCJtYXgiLCJjaGVja1NlbGVjdGlvbiIsInNlbGVjdGVkU2hhcGVzIiwicG9zaXRpb25PZmZzZXQiLCJ2ZXJ0aWNlcyIsInJhbmdlIiwicG9seWdvbkFyZWEiLCJkZXQiLCJjaHVua2VkQXJyYXkiLCJjaHVuayIsImwiLCJOdW1iZXIiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInJlY3RhbmdsZUFyZWEiLCJhcmVhIiwiZWxsaXBzZUFyZWEiLCJyYWRpaSIsIlBJIiwiZWxsaXBzZVRyYW5zZm9tZXIiLCJlbGxpcHNlUG9zaXRpb24iLCJpbmMiLCIkaW5kZXgiLCJDaXJjbGUiLCJzY2FsZVgiLCJ0b1N0cmluZyIsImRyYWdCb3VuZEZ1bmMiLCJwb3MiLCJnZXRBYnNvbHV0ZVBvc2l0aW9uIiwiY2lyY2xlRXZlbnQiLCJwcmV2aW91c1JhZGl1cyIsInNlbGVjdGVkVmVydGV4IiwiaXNOZWdhdGl2ZSIsImNoaWxkcmVuIiwieiIsInRhcmdldCIsImdldEdyb3VwIiwiY3VzdG9tVHJhbnNmb3JtZXIiLCJpc1JlY3RhbmdsZSIsInRlbXAiLCJ1cGRhdGUiLCJvZmZzZXQiLCJnZXRQb2ludHMiLCJiZXppZXJUcmFuc2Zvcm1lciIsInNjYWxlVHJhbnNmb3JtZXJCYXNlZE9uWm9vbSIsInRyYW5zZm9ybWVyR3JvdXAiLCJtZXRyaWNzIiwic2hhcGVJbmZvIiwic2V0U2hhcGVJbmZvIiwiaW5mbyIsImdldFNoYXBlSW5mbyIsImNvbG9yUGlja2VyIiwib3BhY2l0eSIsImFzc2lnbiIsIiRzY29wZSIsIiR0aW1lb3V0IiwiYXV0aEZhY3RvcnkiLCJOZ01hcCIsImxvZ2dlZEluIiwibW9tZW50IiwiYWN0aXZlQ2xhc3MiLCJwYXRoIiwiJCIsImNzcyIsIkRhdGFUYWJsZSIsImlzRWRpdCIsIm91dGVySW5kZXgiLCJpbm5lckluZGV4Iiwib3V0SW5uIiwidGFibGVJbnZlbnRvcnkiLCJJbnZlbnRvcnkiLCJtYXRlcmlhbExpc3QiLCJlbnRpdHlUeXBlIiwibGlzdCIsInNlbGVjdGVkTWF0ZXJpYWwiLCJkY3BMaXN0IiwiZXF1aXBtZW50TGlzdCIsIm1hdGVyaWFsU2VsZWN0aW9uIiwiYXNzaWduSW52ZW50b3J5IiwibW9kYWwiLCJKb2huIiwic2FsYXJ5IiwieWVhciIsIkJlbiIsImFkZFF1YW50aXR5IiwicXVhbnRpdHkiLCJRdWFudGl0eSIsIm5vIiwibG9jYXRpb24iLCJhZG9uMSIsImFkb24yIiwiY29zdCIsIm1fY29zdCIsInRfY29zdCIsInByb2ZpdCIsInBlcmMiLCJzX3ByaWNlIiwibF9jb3N0IiwibF9zdW0iLCJtYXRlcmlhbF9kY3AiLCJpbWciLCJkYXRlIiwibV9wcmljZSIsIndfY29zdCIsIndfcHJpY2UiLCJyZWRfdHh0IiwicmVhZHkiLCJoaWRlIiwibGVmdENsaWNrIiwic2Nyb2xsTGVmdCIsImFuaW1hdGUiLCJyaWdodENsaWNrIiwiZGVsZXRlSW52ZW50b3J5IiwiZWRpdEludmVudG9yeSIsInVwZGF0ZVF1YW50aXR5IiwiYWRkUHJvamVjdFBsYW4iLCJpbnZpdGVlcyIsImxiIiwidGFiQ2hhbmdlIiwicmVtb3ZlQ2xhc3MiLCJlcSIsImFkZENsYXNzIiwiZ21hcCIsIm1hcmtlcnMiLCJzdHlsZXMiLCJjZW50ZXIiLCJ6b29tIiwiZ09iakxvY2F0aW9uIiwiY29vcmRpbmF0ZXMiLCJhZGRyZXNzIiwicGxhY2VNYXJrZXIiLCJnZXRQbGFjZSIsInBsYWNlRGF0YSIsImdlb21ldHJ5IiwibGF0IiwibG5nIiwiZm9ybWF0dGVkX2FkZHJlc3MiLCJpbnB1dEltZyIsInVwbG9hZEltZyIsImxpc3RBc3NldHMiLCJpbnB1dEZpbGVzIiwiZmlsZVVwZGF0ZWQiLCJmaWxlT2JqIiwiZmlsZU5hbWVzIiwiZHVwbGljYXRlSW1nIiwiZ2V0TWFwIiwiZGlzYWJsZURlZmF1bHRVSSIsInpvb21Db250cm9sIiwidG9kYXlEYXRlIiwiZGF0ZUZvcm1hdCIsInJlc2V0Rm9ybSIsInJlcyIsImdldEFsbE1lbWJlcnNJbkN1cnJlbnRDb21wYW55IiwiY3JlYXRlTmV3RXZlbnQiLCJmb3JtRGF0YSIsImltZ0FuZEZpbGVzIiwiY3JlYXRlRXZlbnQiLCJnZXRBbGxFdmVudHMiLCJsaXN0QWxsRXZlbnRzRGF0YSIsInVwZGF0ZUV2ZW50IiwidXBkYXRlTXlFdmVudCIsImRlbGV0ZUZpbGUiLCJpbmRleFZhbCIsImRlc2NyaXB0aW9uUG9wb3ZlciIsImZpbGVUeXBlIiwiZmlsZUluZGV4IiwiZ0FyeUNvbXBhbnlNZW1iZXJzIiwiY2FsZW5kYXIiLCJsQXJ5RXZlbnRzRGF0YSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsImFsbERheSIsImZ1bGxDYWxlbmRhciIsImhlYWRlciIsImxlZnQiLCJyaWdodCIsImV2ZW50Q2xpY2siLCJjYWxFdmVudCIsImpzRXZlbnQiLCJ2aWV3IiwiZ2V0UmVzIiwiY29tcGFueU1lbWJlcnMiLCJpbWFnZXMiLCJkb2NzIiwiJGFwcGx5IiwiZGVmYXVsdERhdGUiLCJlZGl0YWJsZSIsImRhdGExIiwiJHdhdGNoIiwiYWN0aXZlSnVzdGlmaWVkIiwiY3VycmVudFBhZ2UiLCJ0b2dnbGVPYmoiLCJ0b2dnbGVDbGllbnQiLCJjbGllbnROYW1lIiwicGhvbmVObyIsImVtYWlsIiwicHJpbWFyeUFkZCIsImNyZWF0ZWQiLCJzb3J0Y2xpZW50cyIsInJlc291cmNlIiwic29ydCIsInNlYXJjaCIsInNvcnRUeXBlIiwiYWxsQ2xpZW50cyIsImNsaWVudENvdW50IiwidG90YWwiLCJwYWdpbmF0aW9uIiwiaXRlbXNPblBhZ2UiLCJjc3NTdHlsZSIsImhyZWZUZXh0UHJlZml4Iiwib3JkZXJpbmciLCJvblBhZ2VDbGljayIsInByZXZlbnREZWZhdWx0Iiwic2VhcmNoRGVib3VuY2UiLCJzZWFyY2hDbGllbnRzIiwiZHRPcHRpb25zIiwicGFnaW5nIiwic2VhcmNoaW5nIiwibG9hZENvdW50cnlDb2RlIiwiJHF1ZXJ5IiwiZ2V0SW5kdXN0cmllcyIsImxvYWRJbmR1c3RyeSIsImdldEN1cnJlbmNpZXMiLCJsb2FkQ3VycmVuY3kiLCJhZGROZXdDbGllbnQiLCJ2YWxpZCIsImNsaWVudGRhdGEiLCJpbmR1c3RyaWVzIiwiY2xpZW50Q29udGFjdCIsImRpYWxDb2RlIiwicGhvbmVOdW1iZXIiLCJ5ZWFyRm91bmRlZCIsImNsaWVudFdlYnNpdGUiLCJpbmR1c3RyeSIsImVsZW1lbnQiLCJjbGllbnRDb250YWN0UGVyc29uIiwiZmlyc3ROYW1lIiwibWlkZGxlTmFtZSIsImxhc3ROYW1lIiwibW9iaWxlIiwiYW5udWFsUmV2ZW51ZSIsImN1cnJlbmN5Q29kZSIsImNjIiwiYWRkcmVzczIiLCJjb3VudHJ5Q29kZSIsImxpbmUxIiwibGluZTIiLCJsaW5lMyIsImNpdHkiLCJwb3N0YWxDb2RlIiwiY29kZSIsImFkZHJlc3MxIiwiY3JlYXRlQ2xpZW50IiwiY2xpZW50RGF0YSIsIiRzdGF0ZVBhcmFtcyIsImNsaWVudElkIiwiZ2V0Q2xpZW50RGV0YWlsIiwiQ2xpZW50RGF0YSIsInNhdmVTdGFmZk1lbWJlciIsImFkZFN0YWZmTWVtYmVyIiwiZ2V0Q29tYm9NYXREZXRhaWwiLCJjb21ib0RhdGEiLCJjb21ib01tYXRyaWFsTmFtZSIsInVvbSIsImNvbWJvTWF0ZXJpYWxMaXN0IiwibWF0ZXJpYWxDb3N0IiwiY3VycmVudFJhdGUiLCJtYXRlcmlhbFRvdGFsIiwicm9vZmVyQ29zdCIsInJvb2ZlclRvdGFsIiwiaW1nU2xpZGVyIiwiZmxleHNsaWRlciIsImFuaW1hdGlvbiIsImNvbnRyb2xOYXYiLCJhbmltYXRpb25Mb29wIiwic2xpZGVzaG93IiwiaXRlbVdpZHRoIiwiaXRlbU1hcmdpbiIsImFzTmF2Rm9yIiwic3luYyIsImVkaXRGbGFnIiwicmVtb3ZlZEZpbGVzIiwiY29tcGFueUN1cnJlbmN5IiwiY3VycmVudEN1cnJlbmN5IiwicmVtb3ZlSW1nIiwibWF0ZXJpYWxJbWciLCJtYXRlcmlhbEZpbGVzIiwibmV3RmlsZSIsImVkaXRDb21ib01hdGVyaWFsTGlzdCIsIm1hdGVyaWFsUXR5Iiwic2VsZWN0ZWRNYXRlcmlhbENvc3QiLCJzZWxlY3RlZE1hdGVyaWFsUm9vZmVyQ29zdCIsInBlcmNlbnRhZ2VBZGRpdGlvbnMiLCJwZXJjZW50YWdlQWRkaXRpb24iLCJtYXRlcmlhbEluZGV4IiwibWF0ZXJpYWxDb21iaW5hdGlvbiIsInBhcnNlIiwiY29tYm9MaXN0IiwiZWRpdENvbWJvTWF0ZXJpYWwiLCJjb21ib01hdGVyaWFsIiwiYWRkUGVyY2VudGFnZVZhbHVlIiwicGVyY2VudGFnZVR5cGUiLCJyZW1vdmVQZXJjZW50YWdlQWRkaXRpb24iLCJmbGFnIiwibmV4dFByZXZUYWIiLCJzZWxlY3RlZFVuaXQiLCJ1bml0U2VsZWN0IiwiZWRpdENvbWJvIiwidXBsb2FkYWxsRmlsZXMiLCJhc3NldERlc2NyaXB0aW9uIiwiY29tYmFpbmVkQ01MaXN0IiwiY21MaXN0IiwiYXNzZXRPYmoiLCJjb21ib0xpc3REYXRhIiwiY29tYm9MaXN0QXJyYXkiLCJkZWxldGVkQ29tYm9MaXN0IiwidXBkYXRlQ29tYm8iLCJhbGxtYXRlcmlsYUxpc3QiLCJnZXRNYXRlcmlhbEluZm8iLCJtYXRlcmlhbEluZm8iLCJyZW1vdmVNYXRlcmlsIiwiY2xpZW50cyIsImdldEhpZXJhcmNoeVRlbXBsYXRlIiwidGVtcGxhdGVMaXN0IiwiZmlsZW1hbmFnZXJUZW1wbGF0ZSIsInByb2plY3REYXRhIiwic2VsZWN0Mk9wdGlvbnMiLCJhbGxvd0NsZWFyIiwibG9jIiwiYWRkUHJvamVjdCIsInRlbXBsYXRlSWQiLCJsb2FkSGllcmFyY2h5VHJlZSIsInVwZGF0ZU1hcmtlciIsImdldFBvc2l0aW9uIiwiYXNzaWduVGVtcGxhdGUiLCJzZWxlY3RlZFRlbXBsYXRlIiwiJHdpbmRvdyIsImxvYWRlciIsImNsaWVudFVybCIsImVsZW1lbnRUeXBlIiwic3R5bGVycyIsImNvbG9yIiwidmlzaWJpbGl0eSIsImZlYXR1cmVUeXBlIiwibGlzdEFsbFRvZG9MaXN0IiwicHJvamVjdExpc3QiLCJteExhdCIsIm14TG5nIiwibW5MYXQiLCJtbkxuZyIsIm1ya3IiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsImRhc2hib2FyZERhdGEiLCJjb21wYW55IiwicHJvamVjdHMiLCJ0b2RvTGlzdHMiLCJjaHVua1NpemUiLCJwcm9qZWN0U2VhcmNoIiwiZW5hYmxlTGF6eUxvYWQiLCJzb3J0UGFyYW1zIiwiZmllbGQiLCJwcm9qZWN0TmFtZSIsImdldEJvb2ttYXJrZWRQcm9qZWN0IiwiZ2V0Qm9va21hcmtzIiwiYm9va21hcmtlZFByb2plY3QiLCJib29rbWFya3MiLCJib29rbWFya2VkUHJvamVjdExpc3QiLCJsb2FkUHJvamVjdEZpbGVzIiwic2hvd1Byb2plY3RGaWxlcyIsInByb2plY3RGaWxlcyIsImJvb2ttYXJrRmxhZyIsInNlbGVjdGVkUHJvamVjdCIsInByb2plY3RQaWNrZXJEYXRhIiwiY2hvb3NlUHJvamVjdCIsImZpbmRJbmRleCIsImFscmVhZHlFeGlzdCIsImN1cnJlbnRQcm9qZWN0IiwiYWxyZWFkeUJvb2ttYXJrZWQiLCJjbG9zZVByb2plY3RQaWNrZXIiLCJjaGVja0Jvb2ttYXJrIiwiYm9va21hcmsiLCJib29rTWFya1Byb2plY3QiLCJhZGRNb3JlIiwiZmlsZVBpY2tlck9wdGlvbnMiLCJzZWFyY2hQcm9qZWN0cyIsInJlZGlyZWN0VG8zRCIsImdldDNEUGFnZSIsInJlc3BvbnNlIiwiZ29Ub0ZpbGVNYW5hZ2VyIiwic2Nyb2xsVG9wIiwidG9wIiwiZm9jdXMiLCJwbGFuUGlja2VyUGxhbnMiLCJyb290Rm9sZGVycyIsIm9wZW5QbGFuUGlja2VyIiwicm9vZlBsYW5zIiwiZ2V0SGllcmFyY2h5Iiwic2hvd1RyZWUiLCJoaWVyYXJjaGllcyIsImNob29zZVBsYW4iLCJwbGFuIiwiYWxsTW9kYWxDbG9zZSIsImZpbGVDaG9vc2UiLCJwaWNrZXJGb2xkZXJzIiwiLXdlYmtpdC1ib3gtc2hhZG93IiwiLW1vei1ib3gtc2hhZG93IiwiYm94LXNoYWRvdyIsIm1vdmV0byIsImZvbGRlck5hbWUiLCJiYWNrQnRuVmlldyIsIiRvbiIsInNlbGVjdGVkQXNzZXRGb3JQbGFuIiwicm9vZnBsYW5CcmVhZENydW1iIiwiZmlsZUFycmF5IiwicGRmRmlsZXMiLCJwbGFuRG9jdW1lbnQiLCJwZGZQYWdlc0RhdGEiLCJwbGFuSW1hZ2VzIiwiaGlkZVNlbGVjdEZpbGUiLCJzZWxlY3RlZEZpbGVMaXN0IiwiYXNzZXQiLCJzZWxlY3RlZEZpbGVzIiwiZW5kcG9pbnQiLCJwZGZVcmwiLCJnZW5lcmF0ZVJvb2ZQbGFucyIsImdvVG9NZWV0aW5nUm9vbSIsImFuaW1hdGVFbGVtZW50cyIsImVhY2giLCJlbGVtZW50UG9zIiwidG9wT2ZXaW5kb3ciLCJ3aW5kb3ciLCJwZXJjZW50IiwiYXR0ciIsInBhcnNlSW50IiwiY2lyY2xlUHJvZ3Jlc3MiLCJzdGFydEFuZ2xlIiwidGhpY2tuZXNzIiwiZW1wdHlGaWxsIiwic3RlcFZhbHVlIiwic3RvcCIsInNjcm9sbCIsImVxdWlwbWVudCIsInN1YnRpdGxlIiwid29yayIsInRhZyIsImltZ191cGxvYWQiLCJlcXVpcGRvY3VtZW50cyIsImdBcnlMb2NhdGlvbiIsInN5c3RlbVRhZyIsImNyZWF0ZWRBdCIsInNvcnRFcXVpcG1lbnQiLCJlcXVpcG1lbnRDb3VudCIsInNlYXJjaEVxdWlwbWVudCIsImFkZEVxdWlwbWVudCIsImNvbnZlcnNpb25GYWN0b3IiLCJ0YWJTZXR0aW5ncyIsImRpc2FibGUiLCJjdXJyZW5jeSIsInRyaWdnZXIiLCJFcXVpcG1lbnQiLCJmcm9tIiwidG8iLCJjdXJyZW5jeURhdGEiLCJjdXJyZW5jaWVzIiwidGFiU3R5bGUiLCJhZGRNYXRlcmlhbCIsIm1hdGVyaWFsTmFtZSIsIm1hdGVyaWFsVW5pdCIsImFkZE1hdGVyaWFsTmV4dCIsImNoYW5nZUNvc3QiLCJjb252ZXJzaW9uUmF0ZSIsIm1vZGVsIiwiYWRkTWF0ZXJpYWxEZXRhaWxzIiwiZXF1aXBtZW50Q29zdHMiLCJlcXVpcG1lbnRDb3N0VmFsdWUiLCJyb29mZXJDb3N0VmFsdWUiLCJhZGREZXNjcmlwdGlvbiIsImFkZE5ld0VxdWlwbWVudCIsIkVxdWlwbWVudHMiLCJlcXVpcG1lbnRDb3N0Iiwid29ya2VycyIsInVwZGF0ZUVxdWlwbWVudCIsInNsaWRlcjIiLCJuYXZ0YWIiLCJicmVha2NydW1iU3RvcmUiLCJnZXRQcmltYXJ5Rm9sZGVycyIsImJhY2t1cEZvbGRlcnMiLCJ3aW5kb3dJdGVtcyIsImZvbGRlckRhdGEiLCJmb2xkZXJzIiwicmVzb2x2ZUFzc2V0SWNvbiIsImFzc2V0Rm9ybWF0IiwidHJpbSIsImljb24iLCJ2aWV3UHJvamVjdEFzc2V0cyIsImxvYWRGaWxlc1RvQXV0b0NvbXBsZXRlIiwiZ2V0Rm9sZGVyIiwiZ2V0SGllcmFyY2h5Q2hpbGRyZW4iLCJmaWxlRGVzdGluYXRpb24iLCJ0cmVlT3B0aW9ucyIsImFjY2VwdCIsImRlc3QiLCJkZXN0SW5kZXgiLCJkcmFnU3RvcCIsIm5vZGVTY29wZSIsImRlc3RpbmF0aW9uIiwiJG5vZGVTY29wZSIsIiRwYXJlbnQiLCIkbW9kZWxWYWx1ZSIsIm1vdmVBc3NldHMiLCJkcm9wcGVkIiwibm9kZXNTY29wZSIsIiRwYXJlbnROb2RlU2NvcGUiLCJwYXJlbnRJZCIsImRyYWdNb3ZlTm9kZXMiLCJyb290Rm9sZGVyU3RvcmUiLCJzZXRSb290Rm9sZGVyIiwiYWRkTW9kYWxBY3RpdmVUYWIiLCJhZGRQcmltYXJ5Rm9sZGVyIiwiaXNQYXJlbnQiLCJub2RlT2JqIiwiYWRkSGllcmFyY2h5IiwiJG5vZGVzU2NvcGUiLCJvcGVuQWRkTW9kYWwiLCJhZGRNb2RhbFNvdXJjZSIsInNob3dMb2FkZXIiLCJ0b2dnbGVGb2xkZXIiLCJmb2xkZXIiLCJub2RlIiwiYmFja3VwIiwiJHRyZWVTY29wZSIsIiRlbGVtZW50IiwiZmlyc3QiLCJ2aWV3SGllcmFyY2h5IiwiYnJlYWRDcnVtYkxpc3QiLCJicmVhZGNydW1icyIsImNvbGxhcHNlZCIsIm5hdmlnYXRlIiwib3BlbkZvbGRlciIsImNoaWxkTm9kZXMiLCJhZGRGb2xkZXIiLCJwYXJlbnQiLCJhZGRGaWxlVG9IaWVyYXJjaHkiLCJhc3NldHMiLCJkZWxldGVBc3NldHMiLCJ1cGxvYWRTdGF0ZSIsInRvZ2dsZVVwbG9hZFZpZXdNYXhpbWl6ZSIsInVwbG9hZFZpZXdNYXhpbWl6ZSIsInByZVVwbG9hZCIsInByb2Nlc3NlZCIsInByZVVwbG9hZEZpbGVzIiwidXBsb2FkRmlsZSIsInByb2Nlc3NEdXBsaWNhdGVGaWxlTmFtZSIsInVwbG9hZFZpZXdGaWxlcyIsImZvbGRlcklkIiwibmV3RmlsZVVwbG9hZCIsInVwbG9hZEZpbGVJbkZpbGVNYW5hZ2VyIiwiY2xvc2VVcGxvYWRWaWV3IiwiZmlsZVZpZXciLCJwcmV2aWV3RGF0YSIsImN1c3RvbVVybCIsImVkaXRFbmFibGVkIiwidG9nZ2xlRWRpdCIsImNvbnRleHRNZW51T3B0aW9ucyIsImV4cGxvcmVyIiwiJGl0ZW1TY29wZSIsIiRldmVudCIsIm1vZGVsVmFsdWUiLCIkbGkiLCJwZGZvbmx5IiwibW92ZVRvU291cmNlRmlsZSIsImNoaWxkRm9sZGVyVmlldyIsImNoaWxkRm9sZGVycyIsInNhdmVIaWVyYXJjaHlUcmVlIiwiY2hhbmdlUHJvamVjdFRlbXBsYXRlIiwiZ2V0UHJvamVjdEJ5SWQiLCJzaG93QmFja3VwRmlsZXMiLCJzaG93UmVjZW50RmlsZXMiLCJ0b2dnbGVCb29rbWFya3MiLCJGaWxlU2F2ZXIiLCJpc3N1ZUlkIiwiSW1hZ2VBc3NldHMiLCJEb2N1bWVudEFzc2V0cyIsIml0ZW1zUGVyUGFnZSIsImdldElzc3VlRGV0YWlsIiwiaXNzdWVEYXRhIiwidG90YWxJdGVtcyIsImNvbW1lbnRzIiwiQXJyYXlDb21tZW50cyIsIkFycmF5QWN0aXZpdGllcyIsImlzc3VlQWN0aXZpdHkiLCJhbGxDb21tZW50cyIsImFsbEFjdGl2aXRpZXMiLCJwYWdlZERhdGEiLCJzZXRQYWdpbmdEYXRhIiwic2V0QWN0aXZpdHlQYWdpbmdEYXRhIiwicG9zdENvbW1lbnQiLCJjb21tZW50MSIsImNvbW1lbnRvYmoiLCJwb3N0Q29tbWVudEZvcklzc3VlIiwiY2hhbmdlQ29tcGxldGlvblN0YXR1cyIsImRvd25sb2FkRmlsZSIsImJsb2IiLCJCbG9iIiwic2F2ZUFzIiwib3JpZ2lvbmFsbmFtZSIsInJlT3Blbklzc3VlIiwicmVPcGVuSXNzdWVTdGF0dXNVcGRhdGUiLCJtYXJrSXNzdWVBc0NvbXBsZXRlIiwiaW1hZ2VGaWxlcyIsImVkaXRPYmplY3QiLCJJbWFnZXMiLCJzYXZlSXNzdWVBc0NvbXBsZXRlIiwiYmFja0ltZyIsIlVwbG9hZEZpbGVzIiwiaXNzdWVNb2RlbCIsIm9wZW5FZGl0IiwiZmlsZXNUb1JlbW92ZSIsImlzU2VsZWN0ZWRCdG4iLCJ1cGRhdGVmb3JtIiwiVW5kb0FycmF5IiwicmVkb0FycmF5IiwicGxhblRvTWFyayIsIkxvY2FsSW1ncyIsInNlYXJjaGluZ1RleHQiLCJvcGVuRmlsbENvbG9yIiwiY29sb3JwaWNrIiwiY29sb3JXZWxsIiwiZmlsbFdlbGwiLCJmaWxsQ29sb3IiLCJ0ZXh0Rm9ybSIsImVycm9ySW1hZ2UiLCJidG5NYXJrZXIiLCJidG5DaXJjbGUiLCJidG5MaW5lIiwiYnRuVGV4dCIsInRvZ2dsZUlzc3VlIiwic29ydGlzc3VlcyIsImxpc3RBbGxJc3N1ZXMiLCJhbGxJc3N1ZXMiLCJpc3N1ZUNvdW50IiwiZHJhZ1N0YXJ0TGluZSIsImlzTGluZSIsImRyYWdnaW5nIiwiZmxvb3IiLCJjbGllbnRYIiwicmVjdCIsImNsaWVudFkiLCJib3R0b20iLCJkcmFnU3RhcnRMb2NhdGlvbiIsIlgiLCJZIiwic25hcHNob3QiLCJjb250ZXh0MSIsImdldEltYWdlRGF0YSIsImRyYWdMaW5lIiwicHV0SW1hZ2VEYXRhIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJsaW5lQ2FwIiwiZHJhZ1N0b3BMaW5lIiwiaW1hZ2VEYXRhIiwibWFya2luZ3NBcnJheSIsImRyYWdTdGFydCIsImlzQ2lyY2xlIiwibGFzdF9tb3VzZXgiLCJyZWN0MSIsImxhc3RfbW91c2V5IiwibW91c2Vkb3duIiwic25hcHNob3RDaXJjbGUiLCJjdHgiLCJkcmFnIiwibW91c2V4IiwibW91c2V5Iiwic2F2ZSIsInNjYWxleCIsInNjYWxleSIsImNlbnRlcngiLCJjZW50ZXJ5IiwiYXJjIiwiZmlsbFN0eWxlIiwiTWFya1dyaXRlIiwiaXNNYXJrZXIiLCJyZWN0bWFya2VyIiwibWFya2VyY29udGV4dCIsIlRleHRXcml0ZSIsImlzVGV4dCIsImNudHh0IiwiY29vcmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZm9udCIsInN0cm9rZVRleHQiLCJwbGFjZURhdGFBdFBpeGVsIiwic2VhcmNoSXNzdWVzIiwiaXNzdWVDYXRlZ29yeSIsImFsbFVzZXJzIiwiYWxsUm9vZmVycyIsImFsbFByb2plY3RzIiwiZ2V0SXNzdWVzTGlzdCIsImxpc3RPZklzc3VlIiwiZmlsZUFkZGVkIiwiYWRkSXNzdWVEZXRhaWxzIiwiY2F0ZWdvcnkiLCJhc3NpZ25lZFRvIiwib3duZXIiLCJpc3N1ZVN0YXR1cyIsIm93bmVySWQiLCJkZXBlbmRlbmN5T24iLCJkZWFkTGluZSIsInNvcnRNYXRlcmlhbHMiLCJ1cGRhdGVJc3N1ZURldGFpbHMiLCJpc3N1ZU9iamVjdCIsIlRpdGxlIiwicmVhZEltZyIsImZpbGVJbWciLCJvdXRwdXQiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJkZWxldGVJbWciLCJsb2NhbEZpbGVzIiwiZ2V0RmlsZXNGcm9tTG9jYWwiLCJzYXZlTG9jYWxJc3N1ZUFzc2V0Iiwib25lZmlsZSIsImNhcm91c2VsIiwicmVtb3ZlRGF0YSIsImlzIiwiZ2V0SW1hZ2VzSW5DYXJvc2VsIiwiUHJvamVjdFBsYW5zIiwiY2hvb3NlUGxhbkRhdGEiLCJjaG9vc2VQbGFuRGF0YTEiLCJhZGRUb0RldGFpbHMiLCJpbWdhcnJheSIsImdldERldGFpbCIsImlzc3VlIiwiRGVzY3JpcHRpb24iLCJEZWFkTGluZURhdGUiLCJkZWZhdWx0VmFsdWUiLCJkYXkiLCJnZXREYXRlIiwibW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiZGVhZExpbmVEYXRlIiwiU3RhdHVzIiwiYWRkRmlsZVRvVXBkYXRlIiwidXBkYXRlUmVxdWVzdCIsInVwZGF0ZW9iaiIsInJlbW92ZUZpbGVzIiwiaW1hZ2VJZCIsImNsb3NlVXBkdGVNb2RlbCIsIm9wZW5FZGl0RGF0ZSIsImNsb3NlRWRpdERhdGUiLCJpbWFnZVRlbXBVcmwiLCJyb29mdGVzdERlbW8iLCJzdHJpbmciLCJ0aGlzSW1hZ2UiLCJyYXRpbyIsIm9wZW5TbGlkZXJJbWFnZSIsImJhc2VfaW1hZ2UiLCJJbWFnZSIsImNyb3NzT3JpZ2luIiwiaFJhdGlvIiwidlJhdGlvIiwiY2VudGVyU2hpZnRfeCIsImNlbnRlclNoaWZ0X3kiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJhZGRNYXJrZWRJbWdEYXRhIiwiZGF0YUltYWdlIiwiZmV0Y2giLCJGaWxlIiwiaW1hZ2UiLCJtYXJrZWRJbWciLCJkcmF3TGluZU9uQ2FudmFzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRyYXdDaXJjbGVPbkNhbnZhcyIsImNhbnZhc3giLCJjYW52YXN5IiwiZHJhd21hcmtlck9uQ2FudmFzIiwiZmlsbFRleHRPbkNhbnZhcyIsIlVuZG9EcmF3aW5nIiwidW5kb0N0eCIsImltZ2RhdGEiLCJwb3AiLCJSZWRvRHJhd2luZyIsInNhdmVNYXJrSW5mbyIsIm1hcmtlZGZpbGUiLCJwb3N0TWFya0ltZyIsIm5ld0RhdGEiLCJhbGxPYmoiLCJ0aW1lY2hlY2siLCJyZXRyaWV2ZSIsImFjdGl2ZVRhYiIsInRvZ2dsZVRhYiIsImdldEFsbFN1cHBsaWVycyIsInN1cHBsaWVycyIsInNvcnREaXNwbGF5IiwiYXBpTmFtZSIsInNlYXJjaE1hdGVyaWFscyIsIm1hdGVyaWFscyIsIm1haW50ZW5hbmNlUGVyaW9kIiwibWFpbnRlbmFuY2VEYXRlIiwiY2hhbmdlTWFpbnRlbmFuY2VQZXJpb2QiLCJkYXlzIiwidGFiQ2hhbmdlRnVuIiwiYWRkQ29tYm9NYXRlcmlhbEZvcm0iLCJUb3RhbE1DIiwiVG90YWxSQyIsInRhYkNoYW5nZUZ1bjEiLCJtYXRlcmlhbENvc3RWYWx1ZSIsImNsZWFyRGF0YSIsImxvYWRDdXJyZW5jaWVzIiwiUXR5Q2hhbmdlIiwiY3JlYXRlQ29tYm9NYXRlcmlhbExpc3QiLCJnZXRTeXN0ZW1UYWciLCJjb21ib1RhZyIsImVkaXRNYXRlcmlhbCIsImNoYW5nZVRhYiIsImdldE1hdERldGFpbCIsIm1hdHJpYWxEYXRhIiwibWF0cmlhbE5hbWUiLCJtYXRyaWFsVW5pdCIsIm1hdHJpYWxDb3N0IiwibWF0cmlhbEN1cnJlbmN5Q29kZSIsIm1hdHJpYWxSb29mZXJDb3N0IiwibWF0cmlhbFJvb2ZlckN1cnJlbmN5Q29kZSIsIm1hdHJpYWxDcmVhdGVkQnkiLCJwcm92aWRlckRhdGEiLCJ1cGRhdGVkQnkiLCJtYXRyaWFsQ3JlYXRlZEF0IiwibWF0cmlhbFVwZGF0ZWRBdCIsImdyYXlfYm94IiwibmV4dE1haW50YW5jZURhdGVDYWxjIiwiY3JlYXRlZERhdGUiLCJuZXh0TWFpbnRhbmNlRGF0ZSIsIm5leHRNYWludGVuYW5jZURhdGUiLCJjcmVhdGVkRGF0ZTEiLCJ1dGMiLCJlZGl0TWF0ZXJpYWxGdW5jdGlvbiIsIm1hdGVyaWFsdXBkYXRlZGF0YSIsIlNCY2hhbm5lbCIsIlNCZXZlbnRzIiwicm9vbSIsInVwZGF0ZUNoYW5uZWxMaXN0IiwidXBkYXRlTWVzc2FnZXMiLCJjdXJyZW50Q2hhbm5lbCIsImNoYXRDb250YWluZXIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic2Nyb2xsSGVpZ2h0IiwibGlzdEZpbGVzIiwic2hhcmVkRmlsZXMiLCJnZXRNZWV0aW5nVG9kbyIsImNoYW5uZWxVcmwiLCJ0b2RvTGlzdCIsImdldEFjY2Vzc01lZXRpbmdSb29tVG9rZW4iLCJhY2Nlc3NUb2tlbiIsIkVycm9yIiwiY29ubmVjdGVkVXNlciIsImNoYW5uZWxzIiwiY29tcGFueVVzZXJzIiwibmV3TWVldGluZyIsIm1lZXRpbmdOYW1lIiwiY3JlYXRlVG9kb0xpc3QiLCJpbnZpdGVVc2Vyc1RvTWVldGluZyIsIl9yZWYyIiwiX3JlZjMiLCJfc2xpY2VkVG9BcnJheSIsInZpZXdDaGFubmVsIiwibWFya0FzUmVhZCIsInN0YXJ0VHlwaW5nIiwibWVzc2FnZUJveCIsImVuZFR5cGluZyIsInNlbmRNZXNzYWdlT25FbnRlciIsIndoaWNoIiwiY2FsbCIsIm5ld01lZXRpbmdGaWxlTWVzc2FnZSIsInJlc29sdmVUZW1wbGF0ZVVybCIsIm0iLCJtZXNzYWdlVHlwZSIsIl9zZW5kZXIiLCJ1c2VySWQiLCJvcGVuSW52aXRlUG9wdXAiLCJjdXJyZW50Q2hhbm5lbE1lbWJlcnMiLCJtZW1iZXJNYXAiLCJjaGVja2VkIiwib3BlbkZpbGVWaWV3ZXIiLCJjaGVja1JlYWRTdGF0dXMiLCJnZXRSZWFkTWVtYmVycyIsImxhc3RNZXNzYWdlIiwibGF1bmNoVG9kb1BvcHVwIiwidHdpbGlvIiwiVHdpbGlvIiwiVmlkZW8iLCJwcmV2aWV3VHJhY2tzIiwiYWN0aXZlUm9vbSIsImlkZW50aXR5IiwiYXR0YWNoVHJhY2tzIiwidHJhY2tzIiwidHJhY2siLCJhdHRhY2giLCJhdHRhY2hQYXJ0aWNpcGFudFRyYWNrcyIsInBhcnRpY2lwYW50IiwidmFsdWVzIiwiZGV0YWNoVHJhY2tzIiwiZGV0YWNoIiwiZGV0YWNoZWRFbGVtZW50IiwiZGV0YWNoUGFydGljaXBhbnRUcmFja3MiLCJsb2dEaXYiLCJpbm5lckhUTUwiLCJyb29tSm9pbmVkIiwiZGlzcGxheSIsInByZXZpZXdDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwibG9jYWxQYXJ0aWNpcGFudCIsInBhcnRpY2lwYW50cyIsImtpbmQiLCJsZWF2ZVJvb21JZkpvaW5lZCIsInN0YXJ0VmlkZW9DaGF0IiwibG9jYWxUcmFja3NQcm9taXNlIiwiY3JlYXRlTG9jYWxUcmFja3MiLCJnZXRUd2lsaW9BY2Nlc3NUb2tlbiIsImNvbm5lY3RPcHRpb25zIiwibG9nTGV2ZWwiLCJyZWdzaXRlck1vZGFsIiwibG9naW5Nb2RhbCIsImZvcmdvdFBhc3NNb2RhbCIsImlzVmFsaWQiLCJmb3Jnb3RQYXNzIiwic3Vic2NyaWJlRW1haWwiLCJpbWFnZTEiLCJpbWFnZTIiLCJyZXBvcnRPYmoiLCJzaHdDb21tZW50U2VjdGlvbiIsIlJlcG9ydElzc3VlIiwiaXNzdWVUb0FkZCIsIm1vZGVscyIsImV4cG9ydFRvUGRmIiwiaW1nMSIsImpzUERGIiwiYWRkSW1hZ2UiLCJhdXRvVGFibGUiLCJodG1sIiwibWFyZ2luIiwicGFnZUJyZWFrIiwidGFibGVXaWR0aCIsInNob3dIZWFkZXIiLCJzZXRGb250U2l6ZSIsInNldEZvbnQiLCJpc3N1ZVNlYXJjaCIsIm9wZW5SZXBvcnRQaWNrZXIiLCJpc3N1ZVBpY2tlckRhdGEiLCJyZXNkYXRhIiwiRWRpdE1vZGUiLCJjbG9zZUlzc3VlUGlja2VyIiwicmVtYXJrRGF0YSIsImFkZFJlbWFyayIsIlZhbHVlIiwiY2hvb3NlSXNzdWVzIiwiYWRkVG9MaXN0SXNzdWVQaWNrZXIiLCJzZW5kSXNzdWVUb1BkZiIsImNvdmVyUGFnZU1vZGFsIiwiYWJvdXRVc01vZGFsIiwicHJvamVjdE1ldGFNb2RhbCIsInJlcG9ydHJlbWFya01vZGFsIiwibGlzdElzc3VlTW9kZWxDbGljayIsInNldFJlcG9ydE9iaiIsImNvbXBhbnlOYW1lIiwid2Vic2l0ZSIsInBob25lIiwic2VyaWFsTm8iLCJlbnRlcnByaXNlIiwiYXV0aG9yTmFtZSIsInJlbWFya0RhdGUiLCJFZGl0SXNzdWVEYXRhIiwicmVtb3ZlRnJvbUlzc3VlTGlzdCIsImN1cnJlbnRVc2VyIiwicmVwb3J0Q2F0ZWdvcnkiLCJhbGxBZG1pblVzZXJzIiwiaXNUb2tlblZhbGlkIiwidG9rZW5WYWxpZCIsInJlc2V0UGFzcyIsInBhc3N3b3JkIiwiY19wYXNzd29yZCIsInNldFBhc3N3b3JkIiwiYmFjayIsInN1Ym1pdFJvbGVTZXR0aW5ncyIsInVwZGF0ZVJvbGVCYXNlZEFjY2VzcyIsImdvVG9EYXNoYm9hcmQiLCJzZWxlY3RlZE1hdGVyaWFscyIsIm1lbWJlcnMyIiwiZ2V0U3ViY29udHJhY3RvcnMiLCJnZXRBbGxTdWJjb250cmFjdG9ycyIsImFsbFN1YmNvbnRyYWN0b3IiLCJzdWJjb250cmFjdG9yc0NvdW50IiwiZ2V0VGFncyIsImdldEFsbFN5c3RlbVRhZ3MiLCJBbGxUYWdzIiwiYWRkU3ViY29udHJhY3Rvck5leHQiLCJoYXNDbGFzcyIsImFkZFN1YmNvbnRyYWN0b3JQcmV2aW91cyIsIm9wZW5Qb3B1cCIsImRlbGV0ZU1hdGVyaWFsIiwiZGVsZXRlU3RhZmYiLCJvbkNoYW5nZSIsIkZJTEVJTUciLCJmaWxlRXh0IiwiYWxsTWF0ZXJpYWxzIiwiYWRkTWVtYmVyIiwibWFpbCIsInBobm8iLCJjb250YWN0IiwiYWRkbmV3dGFnbW9kZWwiLCJjcmVhdGVTdWJjb250cmFjdG9yIiwiYXR0cmlidXRlIiwiYXR0cmlidXRlcyIsImNyZWF0ZU5ld1N1YmNvbnRyYWN0b3IiLCJyZXNldEZpZWxkcyIsImNyZWF0ZVN5c3RlbVRhZyIsInNhdmVTeXN0ZW1UYWciLCJjb250cmFjdHMiLCJ0aW1lIiwic3ViY29udHJhY3RvcklkIiwiZ2V0U3ViY29udHJhY3RvckRldGFpbCIsImdldFN1YmNvbnRyYWN0b3JCeUlkIiwic3ViY29udHJhY3RvckRhdGEiLCJwcm9maWxlUGljIiwic2VsZWN0MiIsImVkaXRTdWJjb250cmFjdG9yIiwiZWRpdFN1YmNvbnRyYWN0b3JOZXh0IiwiZWRpdFN1YmNvbnRyYWN0b3JQcmV2aW91cyIsInVwZGF0ZVN1YmNvbnRyYWN0b3IiLCJnZXRTdXBwbGllcnMiLCJhbGxTdXBwbGllcnMiLCJzdXBwaWVyc0NvdW50IiwiYWRkU3VwcGxpZXJOZXh0IiwiYWRkU3VwcGxpZXJQcmV2aW91cyIsImNyZWF0ZVN1cHBsaWVyIiwic3VwcGxpZXMiLCJjcmVhdGVOZXdTdXBwbGllciIsInN1cHBsaWVySWQiLCJnZXRTdXBwbGllckRldGFpbCIsImdldFN1cHBsaWVyQnlJZCIsInN1cHBsaWVyRGF0YSIsInVwZGF0ZVN1cHBsaWVyIiwiSUQiLCJjcmVhdGVUYWciLCJkZWxldGVUYWciLCJkZWxldGVTeXN0ZW1UYWciLCJjaG9zZW5Db21wYW55Q3VycmVuY3kiLCJjaGFuZ2VDb21wYW55Q3VycmVuY3kiLCJ1cGRhdGVkRGF0YSIsImxpc3RUb2RvcyIsInRvZG9fbGlzdCIsImR1bW15IiwidG9kb0RhdGEiLCJjbGFzc25hbWUiLCJ0b2RvTGlzdElkIiwidG9kbyIsInVwZGF0ZVRvZG8iLCJ1cGRhdGVUb2RvTGlzdCIsInNoYXBlc1ZQRmFjdG9yeSIsImxheWVyc1ZQRmFjdG9yeSIsImVsbW50IiwicG9zMSIsInBvczIiLCJwb3MzIiwicG9zNCIsImRyYWdNb3VzZURvd24iLCJvbm1vdXNldXAiLCJjbG9zZURyYWdFbGVtZW50Iiwib25tb3VzZW1vdmUiLCJlbGVtZW50RHJhZyIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJvbm1vdXNlZG93biIsImRyYWdFbGVtZW50IiwiY2xvc2VzdCIsImxvYWRQbGFubmVyIiwicm9vZlBsYW4iLCJsb2FkRnJvbUpzb24iLCJpbml0aWFsaXplZCIsImNvbG9yVHlwZSIsInN0cm9rZUNvbG9yIiwiY3BPcHRpb25zIiwic3dhdGNoIiwiaW5wdXRDbGFzcyIsImNhc2UiLCJhbHBoYSIsImNwRXZlbnRzIiwiYXBpIiwiY2hhbmdlU3Ryb2tlV2lkdGgiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJwb2ludGVyUG9zaXRpb24iLCJnZXRQb2ludGVyUG9zaXRpb24iLCJjdXJyZW50RHJhd1N0YXRlIiwicHJvY2Vzc1N0b3JlIiwidHJhbnNmb3JtZXJTdG9yZSIsInNob3dQYW5lbCIsInpvb21MZXZlbCIsImNhbGlicmF0aW9uIiwibG9hZGVkUHJvY2Vzc2VzIiwiY291bnREYXRhIiwiY2FsaWJyYXRpb25EYXRhIiwiZm9ybWF0Q2FsaWJyYXRpb24iLCJpbWFnZU9iaiIsImltYWdlQ29udGFpbmVyIiwiaW1hZ2VQcm9wcyIsImltYWdlSGVpZ2h0IiwiYXNwZWN0UmF0aW8iLCJpbWFnZVdpZHRoIiwiYmdJbWFnZSIsInNoYWRvd09mZnNldFgiLCJzaGFkb3dPZmZzZXRZIiwic2hhZG93T3BhY2l0eSIsIm1vdmVUb0JvdHRvbSIsIndpbmRvd0V2ZW50IiwiaGlzdG9yeVBvcyIsIiRjdXJyZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjdHJsS2V5Iiwib2xkU2NhbGUiLCJtb3VzZVBvaW50VG8iLCJuZXdTY2FsZSIsImRlbHRhWSIsIm5ld1BvcyIsInRhZ05hbWUiLCJ6b29tQnV0dG9uIiwiY2VudGVyWSIsImNlbnRlclgiLCJ6b29tU2xpZGVyIiwicGVyY2VudGFnZSIsInJlc2V0Wm9vbSIsImJhc2VMYXllckV2ZW50IiwicmVjdGFuZ2xlRXZlbnRXcmFwcGVyIiwic2hhcGVPYmplY3QiLCJzaGFwZVR5cGUiLCJyZWN0YW5nbGVFdmVudCIsImN1cnJlbnRQcm9jZXNzIiwibW92ZVRvVG9wIiwib3BlbkluZm9XaWRnZXQiLCJlbGxpcHNlRXZlbnRXcmFwcGVyIiwiZWxsaXBzZUV2ZW50IiwicG9seWdvbkV2ZW50V3JhcHBlciIsInBvbHlnb25FdmVudCIsImZyZWVIYW5kRXZlbnRXcmFwcGVyIiwiZnJlZUhhbmRFdmVudCIsImxpbmVFdmVudFdyYXBwZXIiLCJsaW5lRXZlbnQiLCJmcmVlSGFuZE1hcmtlcldyYXBwZXIiLCJ0ZXh0RXZlbnRXcmFwcGVyIiwidGV4dEV2ZW50Iiwid3JhcHBlciIsInVwZGF0ZWRQb2ludHMiLCJvcGVuVGV4dEluZm9XaWRnZXQiLCJjbG9zZUluZm9XaWRnZXQiLCJjbG9zZVRleHRJbmZvV2lkZ2V0Iiwic2ltcGxlTGluZSIsImJlemllckxpbmUiLCJiZXppZXJFdmVudCIsImJlemllckV2ZW50V3JhcHBlciIsImZyZWVoYW5kTWFya2VyIiwidGV4dFdpZGdldCIsInRleHRQcm9wcyIsInRleHRPYmoiLCJtYW51YWxTZWxlY3Rpb24iLCJzaGFwZU9iaiIsImRyYWdTZWxlY3Rpb24iLCJzZWxlY3RBbGxTaGFwZXMiLCJzZWxlY3RlZFNoYXBlTmFtZXMiLCJ0b2dnbGVWYWx1ZSIsInRvZ2dsZVNoYXBlVmlzaWJpbGl0eSIsInZpc2libGUiLCJjYWxpYnJhdGVkTGluZSIsImRpc3RhbmNlIiwic3FydCIsInBvdyIsImNhbGlicmF0aW9uRGlzdGFuY2UiLCJzYXZlQ2FsaWJyYXRpb24iLCJjYWxpYnJhdGlvblNjYWxlIiwiZGVsZXRlU2hhcGUiLCJnZXRQYXJlbnQiLCJpbmZvV2lkZ2V0UHJvcHMiLCJzaGFwZUluZm9XaWRnZXQiLCJjb2xvclR5cGVzIiwidGV4dENvbG9yVHlwZXMiLCJmb250U3R5bGVzIiwid2ViU2FmZUZvbnRzIiwidGV4dEluZm9XaWRnZXRQcm9wcyIsImZvbnRTdHlsZSIsInRleHRJbmZvV2lkZ2V0IiwiY2hhbmdlVGV4dEluZm8iLCJpbmZvV2lkZ2V0U3Ryb2tlIiwic2hhcGVQcm9wSGlzdG9yeSIsImluZm9XaWRnZXRFdmVudHMiLCJvbk9wZW4iLCJvbkNsb3NlIiwidGV4dEluZm9XaWRnZXRFdmVudHMiLCJjdXJyZW50UGFuU3RhdGUiLCJwYW5JbWFnZSIsInVuZG9PclJlZG8iLCJkb3dubG9hZEltYWdlIiwianNvbiIsInRvSlNPTiIsImFkZFByb2Nlc3MiLCJzZWxlY3RMYXllciIsInNlbGVjdGVkSW5kZXgiLCJzZWxlY3RPclVuc2VsZWN0IiwibGF5ZXJJY29uTmFtZSIsImhpZGVTZWxlY3Rpb24iLCJkZWxldGVTZWxlY3Rpb24iLCJsb2FkTWF0ZXJpYWwiLCJzaGFwZVByb3AiLCJoaWRlSW5pdE1vZGFsIiwic2VsZWN0UGxhbiIsInNlbGVjdGVkUGxhbiIsImNsb3NlVmlzdWFsUGxhbm5lciIsImRpcmVjdGl2ZSIsInJlc3RyaWN0Iiwic2NvcGUiLCJjdXJyZW50IiwiZWxlbSIsImF0dHJzIiwidGVtcGxhdGUiLCJzaG93UHJldmlldyIsIm9wdGlvbnMiLCJzb3VyY2VmaWxlIiwic291cmNlZGlyIiwiZm9sZGVyUGF0aHMiLCJjdXJyZW50Rm9sZGVyIiwic2VsZWN0ZWRGb2xkZXIiLCJ2aWV3Rm9sZGVyIiwic2VsZWN0RmlsZSIsInByZXZpb3VzIiwicGFyYW0iLCJpRWxlbWVudCIsImlBdHRycyIsImF1dG9jb21wbGV0ZSIsInVpSXRlbXMiLCJzZWxlY3QiLCJlcnJTcmMiLCIkc2V0IiwibWF0ZXJpYWxUeXBlIiwiY3VycmVudFNoYXBlIiwic2VsZWN0ZWRNYXRlcmlhbEluZm8iLCJtYXRlcmlhbEltYWdlcyIsInJlc2V0U2VsZWN0ZWRNYXRlcmlhbCIsImFzc2lnbk1hdGVyaWFsIiwicGxhY2UiLCJ0aHVtYm5haWwiLCJuaWNrbmFtZSJdLCJtYXBwaW5ncyI6Imt6QkFBQSxJQUFBQSxJQUFBQyxRQUFBQyxPQUFBLE1BQUEsQ0FDQSxZQUNBLGVBQ0EscUJBQ0Esb0JBQ0EsYUFDQSxrQkFDQSxRQUNBLFlBQ0EsYUFDQSxhQUNBLGVBQ0EsZUFDQSxhQUNBLGNBQ0EsZUFDQSxrQkFDQSxVQUNBLGdCQUNBLHFCQUNBLGdCQUNBLFdBQ0EsZ0JBQ0EsMkJBQ0EsYUFDQSxZQUNBLGtCQUlBLFNBQUFDLE9BQ0FDLHFCQUNBQywyQkFDQUMsV0FDQUMsb0JBSUFGLDJCQUFBRyxVQUFBLENBQ0FDLElBQUEsMENBQ0FDLEVBQUEsUUFDQUMsVUFBQSwwQ0FLQVAscUJBQUFRLFdBQUEsQ0FDQUMsTUFBQSxJQUNBQyxTQUFBLEdBQ0FDLFdBQUEsR0FDQUMsZ0JBQUEsR0FDQUMsa0JBQUEsR0FDQUMsVUFBQSxRQUNBQyxVQUFBLFFBSUFiLFdBQUFjLGtCQUFBLEVBR0FiLG1CQUNBYyxJQUFBLGFBQUEsYUFDQUEsSUFBQSxnQkFBQSxvQkM1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LFNBQUE3VyxNQUNBcWhCLEVBQUEsaUJBQUFpQixNQUFBLFFBQ0F6QixPQUFBbkssYUFBQUUsa0JBQUFwRSxRQUFBcUUsU0FBQTdXLFdBeEdBLEdDQUEsV0FFQXBKLFFBQUFDLE9BQUEsT0FBQTZNLE9BQUEsa0JBRUEsV0FDQSxPQUFBLFNBQUEvRCxNQUFBczdCLGdCQUNBLE9BQUF0N0IsTUFHQUEsTUFBQXM3QixlQUZBLEtBU0Fya0MsUUFBQUMsT0FBQSxPQUFBNk0sT0FBQSxXQUVBLFdBQ0EsT0FBQSxTQUFBL0QsTUFBQW9zRCxPQUNBLE9BQUFwc0QsTUFHQXVlLE9BQUF2ZSxPQUFBeWUsUUFBQTJ0QyxPQUZBLEtBU0FuMUQsUUFBQUMsT0FBQSxPQUFBNk0sT0FBQSxpQkFFQSxXQUNBLE9BQUEsU0FBQS9ELE9BQ0EsR0FBQUEsTUFDQSxNQUFBLGFBQUEyQyxLQUFBM0MsTUFBQTRKLFlBQ0E1SixNQUFBNEosV0FBQU4sUUFBQSxRQUFBLFFBQ0F0SixNQUFBcXNELGFBTUFwMUQsUUFBQUMsT0FBQSxPQUFBNk0sT0FBQSxxQkFFQSxXQUNBLE9BQUEsU0FBQS9ELE9BQ0EsR0FBQUEsT0FBQUEsTUFBQW1CLE9BR0EsT0FBQW5CLE1BQUFtQixPQUFBLEVBQ0FuQixNQUFBbUIsT0FBQSx1QkFFQW5CLE1BQUEsR0FBQXNzRCxTQUFBLGtCQXJEQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXBwID0gYW5ndWxhci5tb2R1bGUoXCJhcHBcIiwgW1xyXG4gIFwidWkucm91dGVyXCIsXHJcbiAgXCJyb3V0ZXNNb2R1bGVcIixcclxuICBcIkxvY2FsU3RvcmFnZU1vZHVsZVwiLFxyXG4gIFwidWlHbWFwZ29vZ2xlLW1hcHNcIixcclxuICBcIm5nUHJvZ3Jlc3NcIixcclxuICBcInVpLW5vdGlmaWNhdGlvblwiLFxyXG4gIFwibmdNYXBcIixcclxuICBcInVpLnNlbGVjdFwiLFxyXG4gIFwidWkuc2VsZWN0MlwiLFxyXG4gIFwibmdTYW5pdGl6ZVwiLFxyXG4gIFwiY29sb3IucGlja2VyXCIsXHJcbiAgXCJ1aS5ib290c3RyYXBcIixcclxuICBcImRhdGF0YWJsZXNcIixcclxuICBcIm5nVGFnc0lucHV0XCIsXHJcbiAgXCJuZ0ZpbGVVcGxvYWRcIixcclxuICBcImluZmluaXRlLXNjcm9sbFwiLFxyXG4gIFwidWkudHJlZVwiLFxyXG4gIFwiYW5ndWxhck1vbWVudFwiLFxyXG4gIFwiYnRvcmZzLm11bHRpc2VsZWN0XCIsXHJcbiAgXCJodG1sVG9QZGZTYXZlXCIsXHJcbiAgXCJkbmRMaXN0c1wiLFxyXG4gIFwiYW5ndWxhci5jaGlwc1wiLFxyXG4gIFwidWkuYm9vdHN0cmFwLmNvbnRleHRNZW51XCIsXHJcbiAgXCJjbG91ZGluYXJ5XCIsXHJcbiAgXCJGaWxlU2F2ZXJcIixcclxuICAnbW9tZW50LXBpY2tlcidcclxuXSk7XHJcbmFwcC5jb25maWcoY29uZmlnKTtcclxuXHJcbmZ1bmN0aW9uIGNvbmZpZyhcclxuICBOb3RpZmljYXRpb25Qcm92aWRlcixcclxuICB1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlcixcclxuICB0cmVlQ29uZmlnLFxyXG4gIGNsb3VkaW5hcnlQcm92aWRlclxyXG4pIHtcclxuICAvKiBHb29nbGUgbWFwIGNvbmZpZyAqL1xyXG5cclxuICB1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlci5jb25maWd1cmUoe1xyXG4gICAga2V5OiBcIkFJemFTeUEzTUlBLW1LV3FfNjBxMUswek9IZ3VyYXhULTFRUHhOVVwiLFxyXG4gICAgdjogXCIzLmV4cFwiLFxyXG4gICAgbGlicmFyaWVzOiBcInBsYWNlcyx3ZWF0aGVyLGdlb21ldHJ5LHZpc3VhbGl6YXRpb25cIlxyXG4gIH0pO1xyXG5cclxuICAvKiBOb3RpZmljYXRpb24gY29uZmlnICovXHJcblxyXG4gIE5vdGlmaWNhdGlvblByb3ZpZGVyLnNldE9wdGlvbnMoe1xyXG4gICAgZGVsYXk6IDMwMDAsXHJcbiAgICBzdGFydFRvcDogMjAsXHJcbiAgICBzdGFydFJpZ2h0OiAxMCxcclxuICAgIHZlcnRpY2FsU3BhY2luZzogMjAsXHJcbiAgICBob3Jpem9udGFsU3BhY2luZzogMjAsXHJcbiAgICBwb3NpdGlvblg6IFwicmlnaHRcIixcclxuICAgIHBvc2l0aW9uWTogXCJ0b3BcIlxyXG4gIH0pO1xyXG5cclxuICAvKiBUcmVlIGNvbmZpZ3VyYXRpb24gKi9cclxuICB0cmVlQ29uZmlnLmRlZmF1bHRDb2xsYXBzZWQgPSB0cnVlO1xyXG5cclxuICAvKiBDbG91ZGluYXJ5IGNvbmZpZyAqL1xyXG4gIGNsb3VkaW5hcnlQcm92aWRlclxyXG4gICAgLnNldChcImNsb3VkX25hbWVcIiwgXCJka3RuaG1zanhcIilcclxuICAgIC5zZXQoXCJ1cGxvYWRfcHJlc2V0XCIsIFwiY2xvdWRlc19mcm9udGVuZFwiKTtcclxufVxyXG4iLCJhbmd1bGFyLm1vZHVsZShcInJvdXRlc01vZHVsZVwiLCBbXSkuY29uZmlnKHJvdXRlQ29uZmlnKTtcclxuXHJcbmZ1bmN0aW9uIHJvdXRlQ29uZmlnKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJwcmVMb2dpblwiLCB7XHJcbiAgICB1cmw6IFwiL1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL3ByZUxvZ2luLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwicHJlTG9naW5DdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJkYXNoYm9hcmRcIiwge1xyXG4gICAgdXJsOiBcIi9kYXNoYm9hcmRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9kYXNoYm9hcmQuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJkYXNoYm9hcmRDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgLyogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJkYXNoYm9hcmRfb2xkXCIsIHtcclxuICAgIHVybDogXCIvZGFzaGJvYXJkX29sZFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL2Rhc2hib2FyZF9vbGQuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJkYXNoYm9hcmRDdHJsIGFzIHZtXCJcclxuICB9KTsgKi9cclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJjcmVhdGVQcm9qZWN0XCIsIHtcclxuICAgIHVybDogXCIvY3JlYXRlX3Byb2plY3RcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9jcmVhdGVQcm9qZWN0Lmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiY3JlYXRlUHJvamVjdEN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInZpc3VhbFBsYW5uZXJcIiwge1xyXG4gICAgdXJsOiBcIi92aXN1YWxfcGxhbm5lclwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL3Zpc3VhbFBsYW5uZXIuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJ2aXN1YWxQbGFubmVyQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwicHJvamVjdHNcIiwge1xyXG4gICAgdXJsOiBcIi9wcm9qZWN0c1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL3Byb2plY3RzLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwicHJvamVjdEN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcIm1hdGVyaWFsc1wiLCB7XHJcbiAgICB1cmw6IFwiL21hdGVyaWFsc1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL21hdGVyaWFscy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcIm1hdGVyaWFsQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwibWF0ZXJpYWxWaWV3XCIsIHtcclxuICAgIHVybDogXCIvbWF0ZXJpYWwvOmlkXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvbWF0ZXJpYWxWaWV3Lmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwibWF0ZXJpYWxWaWV3Q3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiY29tYm9NYXRlcmlhbFZpZXdcIiwge1xyXG4gICAgdXJsOiBcIi9jb21ib19tYXRlcmlhbC86aWRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9jb21ib01hdGVyaWFsVmlldy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImNvbWJvTWF0ZXJpYWxWaWV3Q3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZXF1aXBtZW50c1wiLCB7XHJcbiAgICB1cmw6IFwiL2VxdWlwbWVudHNcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9lcXVpcG1lbnRzLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiZXF1aXBtZW50Q3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZXF1aXBtZW50Vmlld1wiLCB7XHJcbiAgICB1cmw6IFwiL2VxdWlwbWVudFZpZXcvOmlkXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvZXF1aXBtZW50Vmlldy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImVxdWlwbWVudFZpZXdDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJmaWxlTWFuYWdlclwiLCB7XHJcbiAgICB1cmw6IFwiL2ZpbGVfbWFuYWdlclwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL2ZpbGVNYW5hZ2VyLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiZmlsZU1hbmFnZXJDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJmaWxlTWFuYWdlck9sZFwiLCB7XHJcbiAgICB1cmw6IFwiL2ZpbGVfbWFuYWdlcl9vbGRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9maWxlTWFuYWdlci1vbGQuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJmaWxlTWFuYWdlckN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInBheXJvbGxcIiwge1xyXG4gICAgdXJsOiBcIi9wYXlyb2xsXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvcGF5cm9sbC5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcInBheXJvbGxDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJjYWxjdWxhdGlvblwiLCB7XHJcbiAgICB1cmw6IFwiL2NhbGN1bGF0aW9uXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvY2FsY3VsYXRpb24uaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJjYWxjdWxhdGlvbkN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInJlcG9ydFwiLCB7XHJcbiAgICB1cmw6IFwiL3JlcG9ydFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL3JlcG9ydHMuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJyZXBvcnRzQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaXNzdWVzXCIsIHtcclxuICAgIHVybDogXCIvaXNzdWVzXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvaXNzdWVzLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiaXNzdWVzQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJpc3N1ZXNEZXRhaWxcIiwge1xyXG4gICAgdXJsOiBcIi9pc3N1ZXNfZGV0YWlscy86aWRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9pc3N1ZXNfZGV0YWlscy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImlzc3VlRGV0YWlsQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwicmVwb3J0c0RldGFpbFwiLCB7XHJcbiAgICB1cmw6IFwiL3JlcG9ydHNfZGV0YWlscy86aWRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9yZXBvcnRzZGV0YWlscy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcInJlcG9ydERldGFpbEN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImJpbGxpbmdBcmNoaXZlXCIsIHtcclxuICAgIHVybDogXCIvYmlsbGluZ19hcmNoaXZlXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvYmlsbGluZ0FyY2hpdmUuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJiaWxsaW5nQXJjaGl2ZUN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInJlcG9ydHNMaXN0aW5nXCIsIHtcclxuICAgIHVybDogXCIvcmVwb3J0c19saXN0aW5nXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvcmVwb3J0c0xpc3RpbmcuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJyZXBvcnRzTGlzdGluZ0N0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcIjNkRGFzaGJvYXJkXCIsIHtcclxuICAgIHVybDogXCIvM2RfZGFzaGJvYXJkXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvM2QtZGFzaGJvYXJkLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiXzNkRGFzaGJvYXJkQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic2V0UGFzc3dvcmRcIiwge1xyXG4gICAgdXJsOiBcIi9zZXRfcGFzc3dvcmRcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9zZXRfcGFzc3dvcmQuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJzZXRQYXNzd29yZEN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic2V0dGluZ1wiLCB7XHJcbiAgICB1cmw6IFwiL3NldHRpbmdcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9zZXR0aW5nLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwic2V0dGluZ0N0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImVtcGxveWVlc1wiLCB7XHJcbiAgICB1cmw6IFwiL2VtcGxveWVlc1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL2VtcGxveWVlLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiZW1wbG95ZWVzQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiM2R2aWV3ZXJcIiwge1xyXG4gICAgdXJsOiBcIi8zZHZpZXdlclwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzLzNkLXZpZXdlci5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcIl8zZHZpZXdlckN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImNsaWVudHNcIiwge1xyXG4gICAgdXJsOiBcIi9jbGllbnRzXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvY2xpZW50cy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImNsaWVudHNDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJzdXBwbGllclwiLCB7XHJcbiAgICB1cmw6IFwiL3N1cHBsaWVyXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvc3VwcGxpZXIuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJzdXBwbGllckN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic3VwcGxpZXJEZXRhaWxcIiwge1xyXG4gICAgdXJsOiBcIi9zdXBwbGllcl9kZXRhaWxzLzppZFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL3N1cHBsaWVyZGV0YWlscy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcInN1cHBsaWVyRGV0YWlsQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic3ViY29udHJhY3RvclwiLCB7XHJcbiAgICB1cmw6IFwiL3N1YmNvbnRyYWN0b3JcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9zdWJjb250cmFjdG9yLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwic3ViY29udHJhY3RvckN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInN1YmNvbnRyYWN0b3JEZXRhaWxcIiwge1xyXG4gICAgdXJsOiBcIi9zdWJjb250cmFjdG9yX2RldGFpbHMvOmlkXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvc3ViY29udHJhY3RvcmRldGFpbHMuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJzdWJjb250cmFjdG9yRGV0YWlsQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwibWVldGluZ3Jvb21cIiwge1xyXG4gICAgdXJsOiBcIi9tZWV0aW5ncm9vbVwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL21lZXRpbmdSb29tLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwibWVldGluZ1Jvb21DdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJjYWxlbmRlclwiLCB7XHJcbiAgICB1cmw6IFwiL2NhbGVuZGVyXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvY2FsZW5kZXIuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJjYWxlbmRlckN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG4gIFxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwidG9kb1wiLCB7XHJcbiAgICB1cmw6IFwiL3RvZG9cIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy90b2RvLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwidG9kb0N0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInRvZG9WaWV3XCIsIHtcclxuICAgIHVybDogXCIvdG9kb1ZpZXcvOmlkXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvdG9kb1ZpZXcuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJ0b2RvVmlld0N0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImNsaWVudHNEZXRhaWxcIix7XHJcbiAgICB1cmw6IFwiL2NsaWVudHNfZGV0YWlsLzppZFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwicGFydGlhbHMvY2xpZW50c2RldGFpbC5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOlwiY2xpZW50c0RldGFpbEN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG4gIFxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic3lzdGVtdGFnc1wiLHtcclxuICAgIHVybDogXCIvc3lzdGVtdGFnc1wiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwicGFydGlhbHMvc3lzdGVtdGFncy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOlwic3lzdGVtVGFnc0N0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImVjb25vbWljXCIsIHtcclxuICAgIHVybDogXCIvZWNvbm9taWNcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9lY29ub21pYy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImVjb25vbWljQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiYWRkSXRlbVwiLCB7XHJcbiAgICB1cmw6IFwiL2FkZEl0ZW1cIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9hZGRJdGVtLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwiYWRkSXRlbUN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImNyZWF0ZVZhcmlhdGlvbnNPcmRlclwiLCB7XHJcbiAgICB1cmw6IFwiL2NyZWF0ZVZhcmlhdGlvbnNPcmRlclwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL2NyZWF0ZVZhcmlhdGlvbnNPcmRlci5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImNyZWF0ZVZhcmlhdGlvbnNPcmRlckN0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImludm9pY2VcIiwge1xyXG4gICAgdXJsOiBcIi9pbnZvaWNlXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvaW52b2ljZS5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcImludm9pY2VDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuXHJcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJzdXBwbGllckRldGFpbHNcIiwge1xyXG4gICAgdXJsOiBcIi9zdXBwbGllckRldGFpbHNcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9zdXBwbGllckRldGFpbHMzLmh0bWxcIixcclxuICAgIGNvbnRyb2xsZXI6IFwic3VwcGxpZXJEZXRhaWxzQ3RybCBhcyB2bVwiXHJcbiAgfSk7XHJcblxyXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwid29ya2luZ0hvdXJzXCIsIHtcclxuICAgIHVybDogXCIvd29ya2luZ0hvdXJzXCIsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvc3VwcGxpZXJEZXRhaWxzMy5odG1sXCIsXHJcbiAgICBjb250cm9sbGVyOiBcIndvcmtpbmdIb3Vyc0N0cmwgYXMgdm1cIlxyXG4gIH0pO1xyXG5cclxuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImVjb25vbWljUGF5cm9sbFwiLCB7XHJcbiAgICB1cmw6IFwiL2Vjb25vbWljUGF5cm9sbFwiLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiL3BhcnRpYWxzL3N1cHBsaWVyRGV0YWlsczIuaHRtbFwiLFxyXG4gICAgY29udHJvbGxlcjogXCJlY29ub21pY1BheXJvbGxDdHJsIGFzIHZtXCJcclxuICB9KTtcclxuICBcclxufVxyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJhcGlGYWN0b3J5XCIsIGFwaUZhY3RvcnkpO1xyXG5cclxuICBmdW5jdGlvbiBhcGlGYWN0b3J5KFxyXG4gICAgJGh0dHAsXHJcbiAgICAkc3RhdGUsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIFVwbG9hZCxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgICRxXHJcbiAgKSB7XHJcbiAgICAvL2NvbnN0IHVybCA9IFwiaHR0cDovLzE5Mi4xNjguMTAuMTg4OjEzMzdcIixcclxuICAgIGNvbnN0IHVybCA9IFwiaHR0cHM6Ly9hcGkuc3RhZ2luZy5jbG91ZGVzLmV1XCIsXHJcbiAgICAgLy8gY29uc3QgdXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjQyMDBcIixcclxuICAgICAgLy9jb25zdCB1cmwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6MTMzN1wiLFxyXG4gICAgICBoZWFkZXJzID0gKG1ldGhvZCwgdG9rZW4pID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogbWV0aG9kID09PSBcIkdFVFwiID8gdW5kZWZpbmVkIDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICBcIngtYWNjZXNzLXRva2VuXCI6IHRva2VuXHJcbiAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJhY2Nlc3MtdG9rZW5cIilcclxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICBwbGF0Zm9ybTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICBzb3VyY2U6IFwid2ViXCJcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgaGVhZGVyczNEID0gKG1ldGhvZCwgdG9rZW4pID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogbWV0aG9kID09PSBcIkdFVFwiID8gdW5kZWZpbmVkIDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICBcIngtYWNjZXNzLXRva2VuXCI6IHRva2VuXHJcbiAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJhY2Nlc3MtdG9rZW5cIilcclxuICAgICAgICAgICAgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICBrZXk6IFwiZmF2eUAxMjNcIlxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICAgIHsgcHJvZ3Jlc3MsIHVzZXJTdG9yZSwgbG9nb3V0IH0gPSBnbG9iYWxzO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxvZ2luOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXV0aGVudGljYXRlXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcmdvdFBhc3N3b3JkOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvZm9yZ2V0UGFzc3dvcmRcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlZ2lzdHJhdGlvbjogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2Rhc2hib2FyZFJlZ2lzdHJhdGlvblwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvc3Vic2NyaWJlXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXRDb21wYW55QnlJZDogZnVuY3Rpb24oY29tcGFueUlkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvZ2V0Q29tcGFueUJ5SWQvJHtjb21wYW55SWR9YCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBsaXN0QWxsVXNlcnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9nZXRhZG1pbnVzZXJzXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gbGlzdEFsbENvdW50cnlDb2RlID0gZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgIC8vICAgJHJvb3RTY29wZS5hcGlXYWl0ID0gdHJ1ZTtcclxuICAgICAgLy8gICAkaHR0cFxyXG4gICAgICAvLyAgICAgLmdldChcImFwcC9kYXRhL2NvbW1vbi1hcGkvQ291bnRyeUNvZGUuanNvblwiLCB2bS5nZXRDb25maWcoKSkudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgIC8vICAgICAgICRyb290U2NvcGUuYXBpV2FpdCA9IGZhbHNlO1xyXG4gICAgICAvLyAgICAgICBjYihyZXMuZGF0YSk7XHJcbiAgICAgIC8vICAgICB9LFxyXG4gICAgICAvLyAgICAgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAvLyAgICAgICAkcm9vdFNjb3BlLmFwaVdhaXQgPSBmYWxzZTtcclxuICAgICAgLy8gICAgICAgaWYgKGVyci5zdGF0dXMpIHtcclxuICAgICAgLy8gICAgICAgICB2bS5zaG93QWxlcnQodGhpcywgZXJyKTtcclxuICAgICAgLy8gICAgICAgfVxyXG4gICAgICAvLyAgICAgICBlbHNlIHtcclxuICAgICAgLy8gICAgICAgICBjYihlcnIuZGF0YSk7XHJcbiAgICAgIC8vICAgICAgIH1cclxuICAgICAgLy8gICAgIH0pXHJcbiAgICAgIC8vfSxcclxuXHJcbiAgICAgIGxpc3RBbGxQcm9qZWN0czogZnVuY3Rpb24ocXVlcnlPYmopIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSAhcXVlcnlPYmogLy8gYnVpbGRpbmcgcXVlcnkgc3RyaW5nXHJcbiAgICAgICAgICA/IFwiXCJcclxuICAgICAgICAgIDogT2JqZWN0LmtleXMocXVlcnlPYmopLnJlZHVjZSgoYWNjLCB2KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHN0ciA9IGAke3Z9PSR7cXVlcnlPYmpbdl19JmA7XHJcbiAgICAgICAgICAgICAgYWNjICs9IHN0cjtcclxuICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCBcIj9cIik7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5zbGljZSgwLCAtMSk7IC8vIHJlbW92ZSB0cmFpbGluZyAmXHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2xpc3RBbGxQcm9qZWN0c1wiICsgcXVlcnksXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbGlzdEFsbENsaWVudHM6IGZ1bmN0aW9uKHF1ZXJ5T2JqKSB7XHJcbiAgICAgICAgLy8gY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgLy8gICAkaHR0cCh7XHJcbiAgICAgICAgLy8gICAgIHVybDogdXJsICsgXCJcIixcclxuICAgICAgICAvLyAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgIC8vICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgLy8gICB9KVxyXG4gICAgICAgIC8vICk7XHJcbiAgICAgICAgLy8gcmV0dXJuIHByb21pc2U7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gIXF1ZXJ5T2JqIC8vIGJ1aWxkaW5nIHF1ZXJ5IHN0cmluZ1xyXG4gICAgICAgICAgPyBcIlwiXHJcbiAgICAgICAgICA6IE9iamVjdC5rZXlzKHF1ZXJ5T2JqKS5yZWR1Y2UoKGFjYywgdikgPT4ge1xyXG4gICAgICAgICAgICAgIGxldCBzdHIgPSBgJHt2fT0ke3F1ZXJ5T2JqW3ZdfSZgO1xyXG4gICAgICAgICAgICAgIGFjYyArPSBzdHI7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgXCI/XCIpO1xyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuc2xpY2UoMCwgLTEpOyAvLyByZW1vdmUgdHJhaWxpbmcgJlxyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9saXN0QWxsQ2xpZW50c1wiICsgcXVlcnksXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbGlzdEFsbFJvb2ZlcnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9saXN0QWxsUm9vZmVyc1wiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNyZWF0ZVByb2plY3Q6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvY3JlYXRlUHJvamVjdFwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgY3JlYXRlSXNzdWU6IGZ1bmN0aW9uKGlzc3Vlb2JqKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJpbiBjcmVhdGUgaXNzdWUgYXBpXCIsIGlzc3Vlb2JqKTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgIFVwbG9hZC51cGxvYWQoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9jcmVhdGVJc3N1ZVwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBpc3N1ZW9iaixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgY3JlYXRlSXNzdWVTM1VwbG9hZDogZnVuY3Rpb24oaXNzdWVvYmopIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgIFVwbG9hZC51cGxvYWQoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9jcmVhdGVJc3N1ZUZvclMzXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IGlzc3Vlb2JqLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0SXNzdWVCeUlkOiBmdW5jdGlvbihpc3N1ZUlEKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvZ2V0SXNzdWVCeUlkLyR7aXNzdWVJRH1gLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0Q2xpZW50QnlJZDogZnVuY3Rpb24oY2xpZW50SUQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiBgJHt1cmx9L2FwaS9nZXRDbGllbnRCeUlkLyR7Y2xpZW50SUR9YCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB1cGRhdGVJc3N1ZTogZnVuY3Rpb24oaXNzdWVvYmosIGlkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvdXBkYXRlSXNzdWUvXCIgKyBpZCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBpc3N1ZW9iaixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBVVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0UHJvamVjdFJvb2ZQbGFuczogZnVuY3Rpb24ocHJvamVjdElkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldFByb2plY3RSb29mUGxhbnMvXCIgKyBwcm9qZWN0SWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgc2F2ZVJvb2ZQbGFuOiBmdW5jdGlvbihyb29mUGxhbklkLCBwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL3NhdmVSb29mUGxhbi9cIiArIHJvb2ZQbGFuSWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBVVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgY3JlYXRlTWF0ZXJpYWxzOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvY3JlYXRlTWF0ZXJpYWxcIixcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNyZWF0ZUVxdWlwbWVudDogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2NyZWF0ZUVxdWlwbWVudFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbGlzdEFsbE1hdGVyaWFsczogZnVuY3Rpb24ocXVlcnlPYmopIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSAhcXVlcnlPYmogLy8gYnVpbGRpbmcgcXVlcnkgc3RyaW5nXHJcbiAgICAgICAgICA/IFwiXCJcclxuICAgICAgICAgIDogT2JqZWN0LmtleXMocXVlcnlPYmopLnJlZHVjZSgoYWNjLCB2KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHN0ciA9IGAke3Z9PSR7cXVlcnlPYmpbdl19JmA7XHJcbiAgICAgICAgICAgICAgYWNjICs9IHN0cjtcclxuICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCBcIj9cIik7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5zbGljZSgwLCAtMSk7IC8vIHJlbW92ZSB0cmFpbGluZyAmXHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2xpc3RBbGxNYXRlcmlhbHNcIiArIHF1ZXJ5LFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGxpc3RBbGxDb21ib01hdGVyaWFsczogZnVuY3Rpb24ocXVlcnlPYmopIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSAhcXVlcnlPYmogLy8gYnVpbGRpbmcgcXVlcnkgc3RyaW5nXHJcbiAgICAgICAgICA/IFwiXCJcclxuICAgICAgICAgIDogT2JqZWN0LmtleXMocXVlcnlPYmopLnJlZHVjZSgoYWNjLCB2KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHN0ciA9IGAke3Z9PSR7cXVlcnlPYmpbdl19JmA7XHJcbiAgICAgICAgICAgICAgYWNjICs9IHN0cjtcclxuICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCBcIj9cIik7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5zbGljZSgwLCAtMSk7IC8vIHJlbW92ZSB0cmFpbGluZyAmXHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2xpc3RDb21ib01hdGVyaWFsc1wiICsgcXVlcnksXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbGlzdEFsbEVxdWlwbWVudHM6IGZ1bmN0aW9uKHF1ZXJ5T2JqKSB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gIXF1ZXJ5T2JqIC8vIGJ1aWxkaW5nIHF1ZXJ5IHN0cmluZ1xyXG4gICAgICAgICAgPyBcIlwiXHJcbiAgICAgICAgICA6IE9iamVjdC5rZXlzKHF1ZXJ5T2JqKS5yZWR1Y2UoKGFjYywgdikgPT4ge1xyXG4gICAgICAgICAgICAgIGxldCBzdHIgPSBgJHt2fT0ke3F1ZXJ5T2JqW3ZdfSZgO1xyXG4gICAgICAgICAgICAgIGFjYyArPSBzdHI7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgXCI/XCIpO1xyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuc2xpY2UoMCwgLTEpOyAvLyByZW1vdmUgdHJhaWxpbmcgJlxyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9saXN0QWxsRXF1aXBtZW50c1wiICsgcXVlcnksXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgdXBkYXRlTWF0ZXJpYWxCeUlkOiBmdW5jdGlvbihpZCwgcGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL3VwZGF0ZU1hdGVyaWFsQnlJZC9cIiArIGlkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHVwZGF0ZUVxdWlwbWVudEJ5SWQ6IGZ1bmN0aW9uKGlkLCBwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvdXBkYXRlRXF1aXBtZW50QnlJZC9cIiArIGlkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldE1hdGVyaWFsQnlJZDogZnVuY3Rpb24obWF0ZXJpYWxJRCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IGAke3VybH0vYXBpL2dldE1hdGVyaWFsQnlJZC8ke21hdGVyaWFsSUR9YCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXRDb21ib01hdGVyaWFsQnlJZDogZnVuY3Rpb24oY29tYm9JZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IGAke3VybH0vYXBpL2dldENvbWJvTWF0ZXJpYWxCeUlkLyR7Y29tYm9JZH1gLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldEVxdWlwbWVudEJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvZ2V0RXF1aXBtZW50QnlJZC8ke2lkfWAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBjcmVhdGVDb21ib01hdGVyaWFsOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiBgJHt1cmx9L2FwaS9jcmVhdGVDb21ib01hdGVyaWFsYCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgdXBkYXRlQ29tYm9NYXRlcmlhbExpc3Q6IGZ1bmN0aW9uKGlkLCBwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvdXBkYXRlQ29tYm9NYXRlcmlhbExpc3QvJHtpZH1gLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB1cGRhdGVDb21ib01hdGVyaWFsOiBmdW5jdGlvbihpZCwgcGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvdXBkYXRlQ29tYm9NYXRlcmlhbC8ke2lkfWAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgc2hvd0NvbnZlcnNpb25SYXRlOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL3Nob3dDb252ZXJzaW9uUmF0ZVwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gZ2V0Q3VycmVuY3lCYXNlZE9uQ2FsY3VsYXRpb25EYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgLy8gICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgLy8gICAgICRodHRwKHtcclxuICAgICAgLy8gICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvZ2V0Q3VycmVuY3lCYXNlZE9uQ2FsY3VsYXRpb25EYXRlXCIsXHJcbiAgICAgIC8vICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIC8vICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAvLyAgICAgICBkYXRhOiB7XHJcbiAgICAgIC8vICAgICAgICAgZGF0ZTogbmV3IERhdGUoKVxyXG4gICAgICAvLyAgICAgICB9XHJcbiAgICAgIC8vICAgICB9KVxyXG4gICAgICAvLyAgICk7XHJcbiAgICAgIC8vICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIC8vIH0sXHJcbiAgICAgIGdldE1hdGVyaWFsQnlJZDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvZ2V0TWF0ZXJpYWxCeUlkL1wiICsgaWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICAvKiBEZWNvcmF0ZSBhamF4IGNhbGxzIHdpdGggcHJvZ3Jlc3MgYmFyICovXHJcbiAgICAgIHByb2dyZXNzaWZ5OiBwcm9taXNlID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgcHJvZ3Jlc3Muc3RhcnQoKTtcclxuICAgICAgICAgIHByb21pc2VcclxuICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgcHJvZ3Jlc3MuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICByZXNvbHZlKHJlc3ApO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICBwcm9ncmVzcy5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBsaXN0QWxsSXNzdWVzOiBmdW5jdGlvbihxdWVyeU9iaikge1xyXG4gICAgICAgIGxldCBxdWVyeSA9ICFxdWVyeU9iaiAvLyBidWlsZGluZyBxdWVyeSBzdHJpbmdcclxuICAgICAgICAgID8gXCJcIlxyXG4gICAgICAgICAgOiBPYmplY3Qua2V5cyhxdWVyeU9iaikucmVkdWNlKChhY2MsIHYpID0+IHtcclxuICAgICAgICAgICAgICBsZXQgc3RyID0gYCR7dn09JHtxdWVyeU9ialt2XX0mYDtcclxuICAgICAgICAgICAgICBhY2MgKz0gc3RyO1xyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIFwiP1wiKTtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnNsaWNlKDAsIC0xKTsgLy8gcmVtb3ZlIHRyYWlsaW5nICZcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvbGlzdEFsbElzc3Vlc1wiICsgcXVlcnksXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0SXNzdWVzTGlzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2FsbElzc3Vlc1wiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgaXNUb2tlblZhbGlkOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvaXNUb2tlblZhbGlkXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzZXRQYXNzd29yZDogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL3Jlc2V0UGFzc3dvcmRBZG1pblwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHVwZGF0ZVJvbGVCYXNlZEFjY2VzczogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS91cGRhdGVSb2xlQmFzZWRBY2Nlc3NcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUFVUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKiBGaWxlIE1hbmFnZXIgQVBJcyAqL1xyXG4gICAgICBhZGRIaWVyYXJjaHk6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvYWRkSGllcmFyY2h5XCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdldEhpZXJhcmNoeUNoaWxkcmVuOiBmdW5jdGlvbihoaWVyYXJjaHlJZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9nZXRIaWVyYXJjaHlDaGlsZHJlbi9cIiArIGhpZXJhcmNoeUlkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0SGllcmFyY2h5OiBmdW5jdGlvbihwcm9qZWN0SWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvZ2V0SGllcmFyY2h5L1wiICsgcHJvamVjdElkICsgXCI/ZGVwdGg9MlwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgdmlld1Byb2plY3RBc3NldHM6IGZ1bmN0aW9uKHByb2plY3RJZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS92aWV3UHJvamVjdEFzc2V0cy9cIiArIHByb2plY3RJZCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBhZGRGaWxlVG9IaWVyYXJjaHk6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvYWRkRmlsZVRvSGllcmFyY2h5XCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBVVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgdmlld0hpZXJhcmNoeTogZnVuY3Rpb24oaGllcmFyY2h5SWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvdmlld0hpZXJhcmNoeS9cIiArIGhpZXJhcmNoeUlkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNsb25lQXNzZXRzOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2Nsb25lQXNzZXRzXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBVVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICB1cGxvYWRGaWxlSW5GaWxlTWFuYWdlcjogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL3VwbG9hZEZpbGVJbkZpbGVNYW5hZ2VyXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBkcmFnTW92ZU5vZGVzOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2RyYWdNb3ZlTm9kZXNcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbW92ZUFzc2V0czogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9tb3ZlQXNzZXRzXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGRlbGV0ZUFzc2V0czogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9kZWxldGVBc3NldHNcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICAvLzNELXNpdGUgcmVkaXJlY3Rpb24gYXBpIGNhbGxcclxuXHJcbiAgICAgIGdldDNEUGFnZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IHRva2VuID0gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJhY2Nlc3MtdG9rZW5cIik7XHJcblxyXG4gICAgICAgIHZhciBEYXRhM0QgPSB7XHJcbiAgICAgICAgICBcIngtYWNjZXNzLXRva2VuXCI6IHRva2VuLFxyXG4gICAgICAgICAgcHJvamVjdElkOiBcIjViNjk3YzAzMGE3ZTk3MDU2ODM1YTk0YVwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vY2xvdWRlcy0zZC5jb21cIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogRGF0YTNEXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvL2NyZWF0ZSBuZXcgY2xpZW50XHJcbiAgICAgIGNyZWF0ZUNsaWVudDogZnVuY3Rpb24oY2xpZW50KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjbGllbnQgaW4gYXBpIGZhY3RvcnlcIiwgY2xpZW50KTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvY3JlYXRlQ2xpZW50XCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBjbGllbnRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHNhdmVIaWVyYXJjaHlUcmVlOiBmdW5jdGlvbihwcm9qZWN0SWQsIG5hbWUpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvc2F2ZUhpZXJhcmNoeVRyZWUvXCIgKyBwcm9qZWN0SWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IG5hbWVcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldFN5c3RlbVRhZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldENvbWJvU3lzdGVtVGFnXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBib29rTWFya1Byb2plY3Q6IGZ1bmN0aW9uKGlkLCBhZGRlZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9ib29rTWFya1Byb2plY3RcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgcHJvamVjdElkOiBpZCxcclxuICAgICAgICAgICAgICBhZGRlZDogYWRkZWRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0Qm9va21hcmtzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvZ2V0Qm9va21hcmtzXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRIaWVyYXJjaHlUZW1wbGF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldEhpZXJhcmNoeVRlbXBsYXRlXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbG9hZEhpZXJhcmNoeVRyZWU6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvbG9hZEhpZXJhcmNoeVRyZWVcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgbmV3RmlsZVVwbG9hZDogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9uZXdGaWxlVXBsb2FkXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzaG93UHJvamVjdEZpbGVzOiBmdW5jdGlvbihxdWVyeU9iaikge1xyXG4gICAgICAgIGxldCBxdWVyeSA9ICFxdWVyeU9iaiAvLyBidWlsZGluZyBxdWVyeSBzdHJpbmdcclxuICAgICAgICAgID8gXCJcIlxyXG4gICAgICAgICAgOiBPYmplY3Qua2V5cyhxdWVyeU9iaikucmVkdWNlKChhY2MsIHYpID0+IHtcclxuICAgICAgICAgICAgICBsZXQgc3RyID0gYCR7dn09JHtxdWVyeU9ialt2XX0mYDtcclxuICAgICAgICAgICAgICBhY2MgKz0gc3RyO1xyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIFwiP1wiKTtcclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnNsaWNlKDAsIC0xKTsgLy8gcmVtb3ZlIHRyYWlsaW5nICZcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvc2hvd1Byb2plY3RGaWxlc1wiICsgcXVlcnksXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBjaGFuZ2VQcm9qZWN0VGVtcGxhdGU6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvY2hhbmdlUHJvamVjdFRlbXBsYXRlXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNob3dQcm9qZWN0RmlsZXM6IGZ1bmN0aW9uKGlkLCBsaW1pdCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9zaG93UHJvamVjdEZpbGVzL1wiICsgaWQgKyBcIj9saW1pdD1cIiArIGxpbWl0LFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0UHJvamVjdEJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldFByb2plY3RCeUlkL1wiICsgaWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBjaGVja0Fzc2V0RHVwbGljYXRlOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2NoZWNrQXNzZXREdXBsaWNhdGVcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSksXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgY3JlYXRlTmV3U3VwcGxpZXI6IGZ1bmN0aW9uKHN1cHBsaWVyKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvYWRkc3VwcGxpZXJcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogc3VwcGxpZXIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXRBbGxTdXBwbGllcnM6IGZ1bmN0aW9uKHF1ZXJ5T2JqKSB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5ID0gIXF1ZXJ5T2JqIC8vIGJ1aWxkaW5nIHF1ZXJ5IHN0cmluZ1xyXG4gICAgICAgICAgPyBcIlwiXHJcbiAgICAgICAgICA6IE9iamVjdC5rZXlzKHF1ZXJ5T2JqKS5yZWR1Y2UoKGFjYywgdikgPT4ge1xyXG4gICAgICAgICAgICAgIGxldCBzdHIgPSBgJHt2fT0ke3F1ZXJ5T2JqW3ZdfSZgO1xyXG4gICAgICAgICAgICAgIGFjYyArPSBzdHI7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgXCI/XCIpO1xyXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuc2xpY2UoMCwgLTEpOyAvLyByZW1vdmUgdHJhaWxpbmcgJlxyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9saXN0YWxsc3VwcGxpZXJzXCIgKyBxdWVyeSxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXRBbGxTdWJjb250cmFjdG9yczogZnVuY3Rpb24ocXVlcnlPYmopIHtcclxuICAgICAgICBsZXQgcXVlcnkgPSAhcXVlcnlPYmogLy8gYnVpbGRpbmcgcXVlcnkgc3RyaW5nXHJcbiAgICAgICAgICA/IFwiXCJcclxuICAgICAgICAgIDogT2JqZWN0LmtleXMocXVlcnlPYmopLnJlZHVjZSgoYWNjLCB2KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHN0ciA9IGAke3Z9PSR7cXVlcnlPYmpbdl19JmA7XHJcbiAgICAgICAgICAgICAgYWNjICs9IHN0cjtcclxuICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCBcIj9cIik7XHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS5zbGljZSgwLCAtMSk7IC8vIHJlbW92ZSB0cmFpbGluZyAmXHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2xpc3RhbGxzdWJjb250cmFjdG9yXCIgKyBxdWVyeSxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBhZGRQcm9qZWN0Um9vZlBsYW46IGZ1bmN0aW9uKHBheWxvYWQsIHByb2plY3RJZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9hZGRQcm9qZWN0Um9vZlBsYW5cIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZW5lcmF0ZVJvb2ZQbGFuczogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9nZW5lcmF0ZVJvb2ZQbGFuc1wiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYWRkUm9vZlBsYW5zRnJvbUFzc2V0OiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2FkZFJvb2ZQbGFuc0Zyb21Bc3NldFwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0U3VwcGxpZXJCeUlkOiBmdW5jdGlvbihzdXBwbGllcklEKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvZ2V0c3VwcGxpZXIvJHtzdXBwbGllcklEfWAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgY3JlYXRlTmV3U3ViY29udHJhY3RvcjogZnVuY3Rpb24oc3ViY29udHJhY3Rvcikge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2FkZHN1YmNvbnRyYWN0b3JcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogc3ViY29udHJhY3RvcixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldFN1YmNvbnRyYWN0b3JCeUlkOiBmdW5jdGlvbihzdXBwbGllcklEKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9hcGkvZ2V0c3ViY29udHJhY3Rvci8ke3N1cHBsaWVySUR9YCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBpc3N1ZUltYWdlOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvaXNzdWVJbWFnZVwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbmV3SXNzdWVzM0ZpbGVVcGxvYWQ6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIklOIFMzIElTU1VFIEZVTkNUSU9OXCIpO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9uZXdJc3N1ZXMzRmlsZVVwbG9hZFwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcG9zdENvbW1lbnRGb3JJc3N1ZTogZnVuY3Rpb24oaWQsIGNvbW1lbnQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkNvbW1lbnQ6IFwiLCBjb21tZW50KTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvYWRkY29tbWVudC9cIiArIGlkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IGNvbW1lbnQsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHNhdmVMb2NhbElzc3VlQXNzZXQ6IGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvbG9jYWxGaWxlSW1hZ2VzXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpLFxyXG4gICAgICAgICAgICBkYXRhOiBmaWxlc1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcG9zdE1hcmtJbWc6IGZ1bmN0aW9uKGR0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJkYXRhOiBcIiwgZHQpO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL3Bvc3RtYXJraW5nc1wiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKSxcclxuICAgICAgICAgICAgZGF0YTogZHRcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHJlT3Blbklzc3VlU3RhdHVzVXBkYXRlOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgIHZhciBJc3N1ZXN0YXR1c09iaiA9IHsgY29tcGxldGlvblN0YXR1czogXCJPUEVOXCIgfTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvcmVvcGVuU3RhdHVzL1wiICsgaWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgZGF0YTogSXNzdWVzdGF0dXNPYmosXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldEFsbEF0T25jZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gbWFrZSBvdXIgb3duIHByb21pc2VcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xyXG5cclxuICAgICAgICAvLyB3ZSdsbCBhc3VtZSB0aGF0IHlvdSBjYW4gcHV0IHRoZSBmcnVpdCBhcyBwYXJ0IG9mIHRoZSBwYXRoXHJcbiAgICAgICAgdmFyIGluZm9Qcm9taXNlID0gJGh0dHAoe1xyXG4gICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvZ2V0YWRtaW51c2Vyc1wiLFxyXG4gICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBkZXRhaWxzUHJvbWlzZSA9ICRodHRwKHtcclxuICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2xpc3RBbGxSb29mZXJzXCIsXHJcbiAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gJGh0dHAuZ2V0KHVybCArIFwiL2FwaS9saXN0QWxsUm9vZmVyc1wiKTtcclxuXHJcbiAgICAgICAgJHEuYWxsKFtpbmZvUHJvbWlzZSwgZGV0YWlsc1Byb21pc2VdKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoe1xyXG4gICAgICAgICAgICBmcnVpdEluZm86IGRhdGFbMF0sXHJcbiAgICAgICAgICAgIGZydWl0RGV0YWlsczogZGF0YVsxXVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzYXZlSXNzdWVBc0NvbXBsZXRlOiBmdW5jdGlvbihpZCwgb2JqZWN0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2cob2JqZWN0KTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgIFVwbG9hZC51cGxvYWQoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9tYXJraXNzdWVhc2NvbXBsZXRlL1wiICsgaWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgZGF0YTogb2JqZWN0LFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUFVUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBhZGRTdGFmZk1lbWJlcjogZnVuY3Rpb24oc3RhZmYsIGlkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2FkZHN0YWZmbWVtYmVyL1wiICsgaWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgZGF0YTogc3RhZmYsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHNhdmVTeXN0ZW1UYWc6IGZ1bmN0aW9uKG9iamVjdCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9jcmVhdGVUYWdcIixcclxuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgZGF0YTogb2JqZWN0LFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0QWxsU3lzdGVtVGFnczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldFRhZ3NMaXN0XCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZGVsZXRlU3lzdGVtVGFnOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9kZWxldGV0YWcvXCIgKyBpZCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiREVMRVRFXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB1cGRhdGVTdWJjb250cmFjdG9yOiBmdW5jdGlvbihzdWJjb250cmFjdG9yKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvdXBkYXRlc3ViY29udHJhY3Rvci9cIiArIHN1YmNvbnRyYWN0b3IuX2lkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHN1YmNvbnRyYWN0b3IsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgdXBkYXRlU3VwcGxpZXI6IGZ1bmN0aW9uKHN1cHBsaWVyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coc3VwcGxpZXIpO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL3VwZGF0ZXN1cHBsaWVyL1wiICsgc3VwcGxpZXIuX2lkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHN1cHBsaWVyLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUFVUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIC8vQ3JlYXRlIE5ldyBUb2RvXHJcbiAgICAgIGNyZWF0ZVRvZG9MaXN0OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGlucHV0KTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvY3JlYXRlVG9kb1wiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBpbnB1dCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgLy9saXMgYWxsIHRvZG9cclxuICAgICAgbGlzdEFsbFRvZG9MaXN0OiBmdW5jdGlvbihpZCkge1xyXG4gICAgICAgIGxldCBhcGlVUkwgPSAhIWlkXHJcbiAgICAgICAgICA/IFwiL2FwaS9nZXRUb2RvTGlzdD90b2RvSWQ9XCIgKyBpZFxyXG4gICAgICAgICAgOiBcIi9hcGkvZ2V0VG9kb0xpc3RcIjtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBhcGlVUkwsXHJcblxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuICAgICAgLy91cGRhdGUgdG9kb1xyXG4gICAgICB1cGRhdGVUb2RvTGlzdDogZnVuY3Rpb24oaWQsIG9iamVjdCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS91cGRhdGVUb2RvTGlzdC9cIiArIGlkLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IG9iamVjdCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBVVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRBbGxNZW1iZXJzSW5DdXJyZW50Q29tcGFueTogZnVuY3Rpb24oY29tcGFueUlkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldEN1cnJlbnRDb21wYW55TWVtYmVycy9cIiArIGNvbXBhbnlJZCxcclxuICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGlucHV0KTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgIFVwbG9hZC51cGxvYWQoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9jcmVhdGVFdmVudFwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBpbnB1dCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBPU1RcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHVwZGF0ZU15RXZlbnQ6IGZ1bmN0aW9uKGlucHV0LCBldmVudElkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coaW5wdXQpO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS91cGRhdGVFdmVudC9cIiArIGV2ZW50SWQsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgZGF0YTogaW5wdXQsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQVVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vbGlzdCBhbGwgZXZlbnRzXHJcbiAgICAgIGdldEFsbEV2ZW50czogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICBsZXQgYXBpVVJMID0gISFpZFxyXG4gICAgICAgICAgPyBcIi9hcGkvZ2V0QWxsRXZlbnRzP2V2ZW50SWQ9XCIgKyBpZFxyXG4gICAgICAgICAgOiBcIi9hcGkvZ2V0QWxsRXZlbnRzXCI7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgYXBpVVJMLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJHRVRcIiwgdHJ1ZSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldEFjY2Vzc01lZXRpbmdSb29tVG9rZW46IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSAkaHR0cCh7XHJcbiAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9nZXRBY2Nlc3NNZWV0aW5nUm9vbVRva2VuXCIsXHJcbiAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiR0VUXCIsIHRydWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIC8qIFRPRE86ICovXHJcbiAgICAgIGludml0ZVVzZXJzVG9NZWV0aW5nOiBmdW5jdGlvbihwYXlsb2FkKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2ludml0ZVVzZXJzVG9NZWV0aW5nXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMoXCJQT1NUXCIsIHRydWUpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIG5ld01lZXRpbmdGaWxlTWVzc2FnZTogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLnByb2dyZXNzaWZ5KFxyXG4gICAgICAgICAgVXBsb2FkLnVwbG9hZCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL25ld01lZXRpbmdGaWxlTWVzc2FnZVwiLFxyXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgICBkYXRhOiBwYXlsb2FkLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRNZWV0aW5nVG9kbzogZnVuY3Rpb24ocGF5bG9hZCkge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSAkaHR0cCh7XHJcbiAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9nZXRNZWV0aW5nVG9kb1wiLFxyXG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBjaGFuZ2VDb21wYW55Q3VycmVuY3k6IGZ1bmN0aW9uKHBheWxvYWQpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5wcm9ncmVzc2lmeShcclxuICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgdXJsOiB1cmwgKyBcIi9hcGkvY2hhbmdlQ29tcGFueUN1cnJlbmN5XCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcclxuICAgICAgICAgICAgZGF0YTogcGF5bG9hZCxcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIlBVVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRUd2lsaW9BY2Nlc3NUb2tlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucHJvZ3Jlc3NpZnkoXHJcbiAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgIHVybDogdXJsICsgXCIvYXBpL2dldFR3aWxpb0FjY2Vzc1Rva2VuXCIsXHJcbiAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyhcIkdFVFwiLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5mYWN0b3J5KFwiYXV0aEZhY3RvcnlcIiwgYXV0aEZhY3RvcnkpO1xyXG5cclxuICBmdW5jdGlvbiBhdXRoRmFjdG9yeSgkaHR0cCwgJGxvY2F0aW9uLCBsb2NhbFN0b3JhZ2VTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjaGVja1VzZXI6ICgpID0+IHtcclxuICAgICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KFwiYWNjZXNzLXRva2VuXCIpO1xyXG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbiAhPSBcIlwiKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgY2hlY2tQcml2aWxlZ2U6ICh0eXBlLCBzdWJUeXBlKSA9PiB7XHJcbiAgICAgICAgbGV0IHsgcHJpdmlsZWdlIH0gPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcInVzZXJEYXRhXCIpO1xyXG4gICAgICAgIGxldCB7IHByaXZpbGVnZXMgfSA9IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KFwiY29tcGFueURhdGFcIik7XHJcblxyXG4gICAgICAgIGlmIChwcml2aWxlZ2UgPD0gcHJpdmlsZWdlc1t0eXBlXVtzdWJUeXBlXSkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJmaWxlTWFuYWdlckZhY3RvcnlcIiwgZmlsZU1hbmFnZXJGYWN0b3J5KTtcclxuXHJcbiAgZnVuY3Rpb24gZmlsZU1hbmFnZXJGYWN0b3J5KGFwaUZhY3RvcnksIE5vdGlmaWNhdGlvbikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2xpcEJvYXJkOiAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLyogICovXHJcbiAgICAgICAgbGV0IGl0ZW1zID0ge1xyXG4gICAgICAgICAgdHlwZTogMCxcclxuICAgICAgICAgIGRhdGE6IFtdLFxyXG4gICAgICAgICAgc291cmNlOiBudWxsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgY29weTogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtcy5zb3VyY2UgPSBudWxsO1xyXG4gICAgICAgICAgICBpdGVtcy50eXBlID0gMDtcclxuICAgICAgICAgICAgaXRlbXMuZGF0YSA9IFtpdGVtXTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBjdXQ6IGZ1bmN0aW9uKGl0ZW0sIHNvdXJjZSkge1xyXG4gICAgICAgICAgICBpdGVtcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgICAgIGl0ZW1zLnR5cGUgPSAxO1xyXG4gICAgICAgICAgICBpdGVtcy5kYXRhID0gW2l0ZW1dO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHBhc3RlOiBmdW5jdGlvbihkZXN0SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICBpZiAoaXRlbXMuZGF0YS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24ud2FybmluZyhcIkNsaXBib2FyZCBpcyBlbXB0eVwiKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgY29uc3QgYXBpVHlwZSA9IGl0ZW1zLnR5cGUgPT09IDAgPyBcImNsb25lQXNzZXRzXCIgOiBcIm1vdmVBc3NldHNcIjtcclxuXHJcbiAgICAgICAgICAgICAgLyogQ2hhbmdlIHBheWxvYWQgZGVwZW5kaW5nIHVwb24gY3V0IG9yIGNvcHkgKi9cclxuICAgICAgICAgICAgICBsZXQgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIGFzc2V0SWQ6IGl0ZW1zLmRhdGEubWFwKHggPT4geC5faWQpLFxyXG4gICAgICAgICAgICAgICAgc291cmNlSWQ6IGl0ZW1zLnR5cGUgPT09IDAgPyB1bmRlZmluZWQgOiBpdGVtcy5zb3VyY2UsXHJcbiAgICAgICAgICAgICAgICBkZXN0SWQ6IGl0ZW1zLnR5cGUgPT09IDAgPyB1bmRlZmluZWQgOiBkZXN0SWQsXHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHlJZDogaXRlbXMudHlwZSA9PT0gMCA/IGRlc3RJZCA6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgIGFwaUZhY3RvcnlbYXBpVHlwZV0ocGF5bG9hZClcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgIC8qIENsZWFyIGNsaXBib2FyZCBhZnRlciBwYXN0aW5nICovXHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgcmVqZWN0KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9KSgpLFxyXG5cclxuICAgICAgbmF2aWdhdGlvblN0YWNrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgc3RhY2sgPSBbXSxcclxuICAgICAgICAgIGhlYWQgPSBzdGFjay5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgLy8gVE9ETzogbm8gYWN0aW9uIGhhbmRsZXIgcmVxdWlyZWQgZm9yIG5vd1xyXG4gICAgICAgICAgYXR0YWNoSGFuZGxlciA9IGFjdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBvYmogPSB7fTtcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHB1c2g6IGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBzdGFjay5zcGxpY2UoaGVhZCArIDEsIHN0YWNrLmxlbmd0aCwgaXRlbSk7XHJcbiAgICAgICAgICAgIGhlYWQgPSBzdGFjay5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGZvcndhcmQ6ICgpID0+IHtcclxuICAgICAgICAgICAgbGV0IG9iajtcclxuICAgICAgICAgICAgaWYgKCFzdGFjay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAvKiBJZ25vcmUgZm9yIGVtcHR5IHN0YWNrICovXHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoZWFkID09PSBzdGFjay5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgLyogSWdub3JlIGZvciBlbmQgb2YgdGhlIHN0YWNrICovXHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoZWFkKys7XHJcbiAgICAgICAgICAgIGlmIChzdGFja1toZWFkXSkge1xyXG4gICAgICAgICAgICAgIHN0YWNrW2hlYWRdLnRvZ2dsZSgpO1xyXG4gICAgICAgICAgICAgIG9iaiA9IHN0YWNrW2hlYWRdO1xyXG4gICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBiYWNrd2FyZDogKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgb2JqO1xyXG4gICAgICAgICAgICBpZiAoIXN0YWNrLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgIC8qIElnbm9yZSBmb3IgZW1wdHkgc3RhY2sgKi9cclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChoZWFkIDwgMCkge1xyXG4gICAgICAgICAgICAgIC8qIElnbm9yZSBmb3IgZW5kIG9mIHRoZSBzdGFjayAqL1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhY2tbaGVhZF0pIHtcclxuICAgICAgICAgICAgICBzdGFja1toZWFkXS50b2dnbGUoKTtcclxuICAgICAgICAgICAgICBoZWFkLS07XHJcbiAgICAgICAgICAgICAgb2JqID0gc3RhY2tbaGVhZF07XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBicmVhZENydW1iOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgYnJlYWRDcnVtYnMgPSBbXTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc2V0OiB2YWwgPT4ge1xyXG4gICAgICAgICAgICBicmVhZENydW1icy5wdXNoKHZhbCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBicmVhZENydW1icztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmaWxlT2JqXHJcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9ICB7IHMzOiBbZmlsZXNdLCBjbG91ZGluYXJ5OiBbZmlsZXNdIH1cclxuICAgICAgICovXHJcblxyXG4gICAgICBzcGxpdERlc3RpbmF0aW9uOiBmaWxlc0FycmF5ID0+IHtcclxuICAgICAgICByZXR1cm4gZmlsZXNBcnJheS5yZWR1Y2UoXHJcbiAgICAgICAgICAoYWNjLCB4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICB4LnNpemUgPCA1MDAwMDAwMCAmJlxyXG4gICAgICAgICAgICAgICh4LnR5cGUgPT09IFwiYXBwbGljYXRpb24vcGRmXCIgfHwgL2ltYWdlKi8udGVzdCh4LnR5cGUpKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICBhY2MuY2xvdWRpbmFyeS5wdXNoKHgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8qIElmIGZpbGUgc2l6ZSBpcyBncmVhdGVyIHRoYW4gNTBtYiBhbmQgdGhlIGZpbGUgaXMgYSBwZGYsIGdlbmVyYXRlIGEgdGh1bWJuYWlsICovXHJcbiAgICAgICAgICAgICAgYWNjLnMzLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7IHMzOiBbXSwgY2xvdWRpbmFyeTogW10gfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGZpbGVcclxuICAgICAgICogQHJldHVybnMge051bWJlcn0gIDEgLSBkaXJlY3QgczMsIDIgLSBzMyAtPiBjbG91ZGluYXJ5XHJcbiAgICAgICAqL1xyXG5cclxuICAgICAgcmVzb2x2ZURlc3RUeXBlOiBmaWxlID0+IHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBmaWxlLnNpemUgPCA1MDAwMDAwMCAmJlxyXG4gICAgICAgICAgKGZpbGUudHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9wZGZcIiB8fCAvaW1hZ2UqLy50ZXN0KGZpbGUudHlwZSkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gZmlsZXNcclxuICAgICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgICAqL1xyXG4gICAgICBjaGVja1VwbG9hZENvbXBsZXRpb246IGZpbGVzID0+IHtcclxuICAgICAgICBsZXQgYm9vbCA9IHRydWU7XHJcbiAgICAgICAgZmlsZXMuczMuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICAgIGlmICgheC5jb21wbGV0ZWQgJiYgIXguYWJvcnRlZCAmJiBib29sKSB7XHJcbiAgICAgICAgICAgIGJvb2wgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBmaWxlcy5jbG91ZGluYXJ5LmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICBpZiAoIXguY29tcGxldGVkICYmICF4LmFib3J0ZWQgJiYgYm9vbCkge1xyXG4gICAgICAgICAgICBib29sID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGJvb2w7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gZmlsZXMgLSBBcnJheSBvZiBmaWxlXHJcbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFJlc29sdmluZyB3aWxsIGZldGNoIGFuIG9iamVjdCBvZiBmaWxlcyBjYXRlZ29yaXplZCBpbnRvIHR3byBhcnJheXNcclxuICAgICAgICovXHJcblxyXG4gICAgICBjaGVja0R1cGxpY2F0ZUZpbGVzOiAoZmlsZXMsIGRlc3RJZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgIC5jaGVja0Fzc2V0RHVwbGljYXRlKHtcclxuICAgICAgICAgICAgICBhc3NldE5hbWVzOiBmaWxlcy5tYXAoeCA9PiB4Lm5hbWUpLFxyXG4gICAgICAgICAgICAgIGRlc3RJZFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAvKiBHZXQgZHVwbGljYXRlIGZpbGUgb2JqICovXHJcbiAgICAgICAgICAgICAgbGV0IGR1cGxpY2F0ZUZpbGVzID0gZmlsZXNcclxuICAgICAgICAgICAgICAgIC5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHguYWN0aW9uID0gXCJyZW5hbWVcIjtcclxuICAgICAgICAgICAgICAgICAgeC5hc3NldE5hbWUgPSB4Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoXHJcbiAgICAgICAgICAgICAgICAgIChhY2MsIHgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwLmRhdGEuZHVwbGljYXRlcy5pbmRleE9mKHgubmFtZSkgPT09IC0xXHJcbiAgICAgICAgICAgICAgICAgICAgICA/IGFjYy51cGxvYWRGaWxlcy5wdXNoKHgpXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IGFjYy5kdXBsaWNhdGVzLnB1c2goeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgIHsgZHVwbGljYXRlczogW10sIHVwbG9hZEZpbGVzOiBbXSB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICByZXNvbHZlKGR1cGxpY2F0ZUZpbGVzKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQHBhcmFtIHtPYmplY3RbXX0gZmlsZXMgLSBBcnJheSBvZiBmaWxlXHJcbiAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gICAgICAgKi9cclxuXHJcbiAgICAgIGNoZWNrTmFtZUNoYW5nZTogZmlsZXMgPT4ge1xyXG4gICAgICAgIHJldHVybiBmaWxlcy5maWx0ZXIoeCA9PiB4LmFjdGlvbiA9PT0gXCJyZW5hbWVcIikucmVkdWNlKChhY2MsIHgpID0+IHtcclxuICAgICAgICAgIGFjYyA9IGFjYyB8fCB4LmFzc2V0TmFtZSA9PT0geC5uYW1lO1xyXG4gICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVOYW1lXHJcbiAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgICAqL1xyXG5cclxuICAgICAgZ2VuZXJhdGVWZXJzaW9uOiBmaWxlTmFtZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGAke2ZpbGVOYW1lfSAodiR7RGF0ZS5ub3coKX0pYDtcclxuICAgICAgfSxcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmaWxlXHJcbiAgICAgICAqL1xyXG4gICAgICBnZW5lcmF0ZVRodW1ibmFpbDogZmlsZSA9PiB7XHJcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcGRmanNMaWIuZ2V0RG9jdW1lbnQoeyB1cmw6IHJlYWRlci5yZXN1bHQgfSkudGhlbihkb2MgPT4ge1xyXG4gICAgICAgICAgICBkb2MuZ2V0UGFnZSgxKS50aGVuKHBhZ2UgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGFnZSEhIVwiLCBwYWdlKTtcclxuICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAxO1xyXG4gICAgICAgICAgICAgIHZhciB2aWV3cG9ydCA9IHBhZ2UuZ2V0Vmlld3BvcnQoc2NhbGUpO1xyXG4gICAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHZpZXdwb3J0LndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgdGFzayA9IHBhZ2UucmVuZGVyKHtcclxuICAgICAgICAgICAgICAgIGNhbnZhc0NvbnRleHQ6IGNvbnRleHQsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydDogdmlld3BvcnRcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB0YXNrLnByb21pc2UudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICBsaW5rLmRvd25sb2FkID0gXCJyb29mcGxhbl9pbWFnZV9cIiArIERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSBkYXRhVVJMO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgICAgIGxpbmsuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHNwbGl0RmlsZURlc3Q6IGZpbGVzQXJyYXkgPT4ge1xyXG4gICAgICAgIHJldHVybiBmaWxlc0FycmF5LnJlZHVjZShcclxuICAgICAgICAgIChhY2MsIHgpID0+IHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIHguZmlsZS5zaXplIDwgNTAwMDAwMDAgJiZcclxuICAgICAgICAgICAgICAoeC5maWxlLnR5cGUgPT09IFwiYXBwbGljYXRpb24vcGRmXCIgfHwgL2ltYWdlKi8udGVzdCh4LmZpbGUudHlwZSkpXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIGFjYy5jbG91ZGluYXJ5LnB1c2goeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYWNjLnMzLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7IHMzOiBbXSwgY2xvdWRpbmFyeTogW10gfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJnbG9iYWxzXCIsIGdsb2JhbHMpO1xyXG5cclxuICBmdW5jdGlvbiBnbG9iYWxzKFxyXG4gICAgJGh0dHAsXHJcbiAgICAkc3RhdGUsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBuZ1Byb2dyZXNzRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGxvY2FsU3RvcmFnZVNlcnZpY2VcclxuICApIHtcclxuICAgIC8qIFRvIGF2b2lkIHJlZHVuZGFudCBmdW5jdGlvbiBjYWxscyBvZiB0aGUgc2FtZSB0eXBlIChFZy4gbXVsdGlwbGUgdG9rZW4gZXhwaXJlZCBtZXNzYWdlcykgKi9cclxuICAgIGxldCB0aHJvdHRsZXIgPSAoKCkgPT4ge1xyXG4gICAgICBsZXQgZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgIHJldHVybiBmbiA9PiB7XHJcbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcclxuICAgICAgICAgIGVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBlbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZm4oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHByb2dyZXNzOiAoKCkgPT4ge1xyXG4gICAgICAgIGxldCBwcm9ncmVzc2JhciA9IG5nUHJvZ3Jlc3NGYWN0b3J5LmNyZWF0ZUluc3RhbmNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHByb2dyZXNzYmFyO1xyXG4gICAgICB9KSgpLFxyXG4gICAgICBsb2dvdXQ6ICgpID0+IHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShcImFjY2Vzcy10b2tlblwiKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShcInVzZXJEYXRhXCIpO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UucmVtb3ZlKFwiY29tcGFueURhdGFcIik7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoXCJjdXJyZW50UHJvamVjdFwiLCBudWxsKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShcImludmVudG9yeVN0YXRlXCIpO1xyXG5cclxuICAgICAgICAkc3RhdGUuZ28oXCJwcmVMb2dpblwiKTtcclxuICAgICAgICB0aHJvdHRsZXIoKCkgPT4gTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIGxvZ2luXCIpKTtcclxuICAgICAgfSxcclxuICAgICAgLyogQWNjZXNzIHVzZXIgaW5mbyBnbG9iYWxseSAqL1xyXG4gICAgICB1c2VyU3RvcmU6ICgoKSA9PiB7XHJcbiAgICAgICAgbGV0IHVzZXJEYXRhID0gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJ1c2VyRGF0YVwiKSB8fCB7fTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNldDogZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZXJSb2xlcyA9IFtcclxuICAgICAgICAgICAgICBcImFkbWluXCIsXHJcbiAgICAgICAgICAgICAgXCJtYW5hZ2VyXCIsXHJcbiAgICAgICAgICAgICAgXCJzdWJfY29udHJhY3RvclwiLFxyXG4gICAgICAgICAgICAgIFwidGVhbV9sZWFkZXJcIixcclxuICAgICAgICAgICAgICBcIndvcmtlclwiXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGRhdGEucHJpdmlsZWdlID0gdXNlclJvbGVzLmluZGV4T2YoZGF0YS5kZXNpZ25hdGlvbik7XHJcblxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldChcInVzZXJEYXRhXCIsIGRhdGEpO1xyXG4gICAgICAgICAgICB1c2VyRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyRGF0YTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXQ6ICgpID0+IHVzZXJEYXRhLFxyXG4gICAgICAgICAgcmVzZXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5yZW1vdmUoXCJ1c2VyRGF0YVwiKTtcclxuICAgICAgICAgICAgdXNlckRhdGEgPSB7fTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9KSgpLFxyXG5cclxuICAgICAgY29tcGFueVN0b3JlOiAoKCkgPT4ge1xyXG4gICAgICAgIGxldCBjb21wYW55RGF0YSA9IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KFwiY29tcGFueURhdGFcIikgfHwgbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNldDogZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFwiY29tcGFueURhdGFcIiwgZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbXBhbnlEYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBhbnlEYXRhO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldDogKCkgPT4gY29tcGFueURhdGEsXHJcbiAgICAgICAgICAvKiBDYWxsIHJlZmV0Y2ggd2hlbiBjb21wYW55IGRlcGVuZGFudCBkYXRhIGlzIG1vZGlmaWVkICovXHJcbiAgICAgICAgICByZWZldGNoOiBpZCA9PiB7XHJcbiAgICAgICAgICAgICRodHRwKHtcclxuICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgXCJ4LWFjY2Vzcy10b2tlblwiOiBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcImFjY2Vzcy10b2tlblwiKSxcclxuICAgICAgICAgICAgICAgIHBsYXRmb3JtOiBKU09OLnN0cmluZ2lmeSh7IHNvdXJjZTogXCJ3ZWJcIiB9KVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly9hcGkuc3RhZ2luZy5jbG91ZGVzLmV1L2FwaS9nZXRDb21wYW55QnlJZC8ke2lkfWBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFwiY29tcGFueURhdGFcIiwgcmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHJlc2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UucmVtb3ZlKFwiY29tcGFueURhdGFcIik7XHJcbiAgICAgICAgICAgIGNvbXBhbnlEYXRhID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkoKSxcclxuXHJcbiAgICAgIHByb2plY3RTdG9yZTogKCgpID0+IHtcclxuICAgICAgICBsZXQgY3VycmVudFByb2plY3QgPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcImN1cnJlbnRQcm9qZWN0XCIpIHx8IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNldDogZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFwiY3VycmVudFByb2plY3RcIiwgZGF0YSk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQcm9qZWN0ID0gZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9qZWN0O1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldDogKCkgPT4gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJjdXJyZW50UHJvamVjdFwiKSxcclxuICAgICAgICAgIHJlc2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UucmVtb3ZlKFwiY3VycmVudFByb2plY3RcIik7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQcm9qZWN0ID0gbnVsbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9KSgpLFxyXG5cclxuICAgICAgaW52ZW50b3J5U3RhdGU6ICgpID0+IHtcclxuICAgICAgICBsZXQgc3RhdGUgPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcImludmVudG9yeVN0YXRlXCIpIHx8IHtcclxuICAgICAgICAgIHRhYjogMCxcclxuICAgICAgICAgIHNlYXJjaFRleHQ6IFwiXCIsXHJcbiAgICAgICAgICBwYWdlOiB7XHJcbiAgICAgICAgICAgIG1hdGVyaWFsOiAxLFxyXG4gICAgICAgICAgICBjb21ibzogMVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzZXRQYWdlOiAodHlwZSwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgc3RhdGUucGFnZVt0eXBlXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldChcImludmVudG9yeVN0YXRlXCIsIHN0YXRlKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzZXRUYWI6IHZhbCA9PiB7XHJcbiAgICAgICAgICAgIHN0YXRlLnRhYiA9IHZhbDtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoXCJpbnZlbnRvcnlTdGF0ZVwiLCBzdGF0ZSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdGV4dDogdGV4dCA9PiB7XHJcbiAgICAgICAgICAgIHN0YXRlLnNlYXJjaFRleHQgPSB0ZXh0O1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldChcImludmVudG9yeVN0YXRlXCIsIHN0YXRlKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBtVW5pdHM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcIm10XCIsXHJcbiAgICAgICAgICB2YWx1ZTogXCJtdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcInNxLm10XCIsXHJcbiAgICAgICAgICB2YWx1ZTogXCJzcS5tdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB2YWx1ZTogXCJjdS5tdFwiLFxyXG4gICAgICAgICAgbmFtZTogXCJjdS5tdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcImZ0XCIsXHJcbiAgICAgICAgICB2YWx1ZTogXCJmdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcInNxLmZ0XCIsXHJcbiAgICAgICAgICB2YWx1ZTogXCJzcS5mdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB2YWx1ZTogXCJjdS5mdFwiLFxyXG4gICAgICAgICAgbmFtZTogXCJjdS5mdFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB2YWx1ZTogXCJ1bml0XCIsXHJcbiAgICAgICAgICBuYW1lOiBcInVuaXRcIlxyXG4gICAgICAgIH1cclxuICAgICAgXSxcclxuXHJcbiAgICAgIGdldEN1cnJlbmN5OiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuICRodHRwLmdldChcIi9kYXRhL2N1cnJlbmNpZXMuanNvblwiKTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0Q291bnRyeUNvZGU6ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KFwiL2RhdGEvQ291bnRyeUNvZGUuanNvblwiKTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0SW5kdXN0cnk6ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KFwiL2RhdGEvaW5kdXN0cnkuanNvblwiKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGRlYm91bmNlOiByYXRlID0+IHtcclxuICAgICAgICBsZXQgdGltZXI7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGZuLCBhcmdzKSB7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XHJcbiAgICAgICAgICB9LCByYXRlKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2VuZXJpY1N0b3JlOiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGl0ZW07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0b3JlOiB2YWwgPT4ge1xyXG4gICAgICAgICAgICBpdGVtID0gdmFsO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldDogKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwZGZMaW5rXHJcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3RbXX0gLSBsaW5rcyBvZiBpbmRpdmlkdWFsIHBhZ2VzIGFzIGltYWdlIChjbG91ZGluYXJ5KVxyXG4gICAgICAgKi9cclxuXHJcbiAgICAgIGV4dHJhY3RQYWdlc0Zyb21QZGY6IChwZGZMaW5rLCBwYWdlQ291bnQpID0+IHtcclxuICAgICAgICByZXR1cm4gWy4uLkFycmF5KHBhZ2VDb3VudCkua2V5cygpXS5yZWR1Y2UoKGFjYywgXywgaSkgPT4ge1xyXG4gICAgICAgICAgbGV0IHBhZ2VPYmogPSB7XHJcbiAgICAgICAgICAgIHBhZ2VObzogaSxcclxuICAgICAgICAgICAgdXJsOiBwZGZMaW5rXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoXCIvdXBsb2FkL1wiLCBgL3VwbG9hZC9wZ18ke2kgKyAxfS9gKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC5wZGYkLywgXCIucG5nXCIpLFxyXG4gICAgICAgICAgICB0aXRsZTogYHRpdGxlXyR7RGF0ZS5ub3coKX1gLFxyXG4gICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgYWNjLnB1c2gocGFnZU9iaik7XHJcbiAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gcGRmIC0gRmlsZSBvYmplY3RcclxuICAgICAgICogQHJldHVybnMge1Byb21pc2V9XHJcbiAgICAgICAqL1xyXG5cclxuICAgICAgY3JlYXRlUGFnZXNGcm9tUGRmOiBwZGYgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICBwZGZqc0xpYlxyXG4gICAgICAgICAgICAuZ2V0RG9jdW1lbnQocGRmLnNlY3VyZV91cmwpXHJcbiAgICAgICAgICAgIC5wcm9taXNlLnRoZW4oZG9jID0+IHtcclxuICAgICAgICAgICAgICBQcm9taXNlLmFsbChcclxuICAgICAgICAgICAgICAgIFsuLi5BcnJheShkb2MubnVtUGFnZXMpLmtleXMoKV0ubWFwKChfLCBpKSA9PlxyXG4gICAgICAgICAgICAgICAgICBkb2MuZ2V0UGFnZShpICsgMSlcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAudGhlbihwYWdlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoXHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZXMubWFwKCh4LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAoeC5wYWdlTm8gPSBpKSwgKHgudGl0bGUgPSBgdGl0bGVfJHtEYXRlLm5vdygpfWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgeC5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgeC5kZXNjcmlwdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcmVuZGVyUGFnZTogKHBhZ2UsIGNhbnZhcykgPT4ge1xyXG4gICAgICAgIHZhciB2aWV3cG9ydCA9IHBhZ2UuZ2V0Vmlld3BvcnQoXHJcbiAgICAgICAgICBjYW52YXMud2lkdGggLyBwYWdlLmdldFZpZXdwb3J0KDEpLndpZHRoXHJcbiAgICAgICAgKTtcclxuICAgICAgICB2YXIgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcclxuXHJcbiAgICAgICAgdmFyIHRhc2sgPSBwYWdlLnJlbmRlcih7XHJcbiAgICAgICAgICBjYW52YXNDb250ZXh0OiBjb250ZXh0LFxyXG4gICAgICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcImlzc3VlY3JlYXRlRmFjdG9yeVwiLCBpc3N1ZWNyZWF0ZUZhY3RvcnkpO1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gaXNzdWVjcmVhdGVGYWN0b3J5KFxyXG4gICAgICAkaHR0cCxcclxuICAgICAgJHN0YXRlLFxyXG4gICAgICAkbG9jYXRpb24sXHJcbiAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgIGdsb2JhbHMsXHJcbiAgICAgIFVwbG9hZCxcclxuICAgICAgTm90aWZpY2F0aW9uLFxyXG4gICAgICAkcSxcclxuICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgdXBsb2FkRmFjdG9yeSxcclxuICAgICAgZmlsZU1hbmFnZXJGYWN0b3J5XHJcbiAgICApIHtcclxuICAgICAgICBsZXQgdm09dGhpcztcclxuICAgICAgICBsZXQgczNGaWxlT2JqZXRzPVtdO1xyXG4gICAgICAgIC8vY29uc3QgdXJsID0gXCJodHRwczovL2FwaS5zdGFnaW5nLmNsb3VkZXMuZXVcIixcclxuICAgICAgIFxyXG4gICAgICAgIGhlYWRlcnMgPSAobWV0aG9kLCB0b2tlbikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogbWV0aG9kID09PSBcIkdFVFwiID8gdW5kZWZpbmVkIDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIFwieC1hY2Nlc3MtdG9rZW5cIjogdG9rZW5cclxuICAgICAgICAgICAgICA/IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KFwiYWNjZXNzLXRva2VuXCIpXHJcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHBsYXRmb3JtOiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgc291cmNlOiBcIndlYlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBwcm9ncmVzcywgdXNlclN0b3JlLCBsb2dvdXQgfSA9IGdsb2JhbHM7XHJcblxyXG4gICAgICAgcmV0dXJue1xyXG4gICAgICAgICAgICBnZXRBbGxBdE9uY2UgOiBmdW5jdGlvbihvYmplY3QsZmlsZXNhcnJheSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk9CSkVDVDogXCIsb2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQVJSQVkgT0YgRklMRVM6IFwiLCBmaWxlc2FycmF5KTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQVJSQVkgT0YgRklMRVMgczM6IFwiLCBmaWxlc2FycmF5LnMzKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQVJSQVkgT0YgRklMRVMgY2xvdWRpbmFyeTogXCIsIGZpbGVzYXJyYXkuY2xvdWRpbmFyeSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBtYWtlIG91ciBvd24gcHJvbWlzZVxyXG4gICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgIGlmKGZpbGVzYXJyYXkuczMubGVuZ3RoKXtcclxuICAgICAgICAgICAgICAgIGxldCBhcnJheT1maWxlc2FycmF5LnMzO1xyXG4gICAgICAgICAgICAgICB2YXIgUzM9ICBhcnJheS5mb3JFYWNoKCAoeCxpLGFycmF5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4LGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJTMyBGSUxFIEZPUkVBQ0ggTUV0aG9kIGFzIGFycmF5IGlzIG5vdCBudWxsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIEF0dGFjaCBldmVudHMgYW5kIHByb3BzIHRvIGZpbGVPYmogc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHZpZXcgKi9cclxuICAgICAgICAgICAgICAgICAgICBsZXQgdXBsb2FkSGFuZGxlciA9IGV2YXBvcmF0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvKiB1cGxvYWQgdG8gczMgaWYgdmFsdWUgaXMgbGVzcyB0aGFuIDMgKi9cclxuICAgICAgICAgICAgICAgICAgICAgIHguZmlsZS5wYXVzZSA9IHVwbG9hZEZhY3RvcnkucGF1c2UuYmluZChldmFwb3JhdGUsIHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgeC5maWxlLnJlc3VtZSA9IHVwbG9hZEZhY3RvcnkucmVzdW1lLmJpbmQoZXZhcG9yYXRlLCB4KTtcclxuICAgICAgICAgICAgICAgICAgICAgIHguZmlsZS5hYm9ydCA9IHVwbG9hZEZhY3RvcnkuYWJvcnQuYmluZChldmFwb3JhdGUsIHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgbGV0IGFkZENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogeC5maWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IHguZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IChwLCBzdGF0cykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2cocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogQVdTIHByb2dyZXNzIHBlcmNlbnRhZ2UgZmFsbHMgYmFjayBzb21ldGltZXMgZHVlIHRvIG1pc3NpbmcgZnJhZ21lbnRhdGlvbi4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlIHByb2dyZXNzIHZhbHVlIG9ubHkgd2hlbiBpdCdzIGhpZ2hlciB0aGFuIHRoZSBwcmV2aW91cyB2YWx1ZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHguZmlsZS5wcm9ncmVzcyA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmZpbGUucHJvZ3Jlc3MgPiBNYXRoLnJvdW5kKHAgKiAxMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8geC5maWxlLnByb2dyZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5yb3VuZChwICogMTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGVjayBjb21wbGV0aW9uICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uY29tcGxldGVkQWxsID0gZmlsZU1hbmFnZXJGYWN0b3J5LmNoZWNrVXBsb2FkQ29tcGxldGlvbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlZnJlc2ggdmlldyB3aXRoIHNjb3BlID4gYXBwbHkgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoX3hociwgYXdzS2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeC5maWxlLmNvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVmcmVzaCB2aWV3IHdpdGggc2NvcGUgPiBhcHBseSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbXBsZXRlIVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICBldmFwb3JhdGUuYWRkKGFkZENvbmZpZykudGhlbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYXdzT2JqZWN0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU3VjY2VzcyBibG9jayAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZmlsZU1hbmFnZXJGYWN0b3J5LnJlc29sdmVEZXN0VHlwZSh4LmZpbGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldERhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXROYW1lOiB4LmZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRkZXNjcmlwdGlvbjp4LmNvbW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldDogXCIzZGZpbGVzZGF0YVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGB0ZXN0LyR7eC5maWxlLm5hbWV9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltZXR5cGU6IHguZmlsZS50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlczogeC5maWxlLnNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5uZXdJc3N1ZXMzRmlsZVVwbG9hZChwYXlsb2FkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9uZXdJc3N1ZXMzRmlsZVVwbG9hZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBheWxvYWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiczMgcmVzcDogXCIscmVzcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMzRmlsZU9iamV0cy5wdXNoKHJlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGk9PWZpbGVzYXJyYXkuczMubGVuZ3RoLTEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJhbGVydHMgY2FsbGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFycmF5OlwiLCB4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAvLyAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiRmlsZSBzdWNjZXNzZnVsbHkgdXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkZpbGUgc3VjY2Vzc2Z1bGx5IHVwbG9hZGVkIHRvOlwiLCBhd3NPYmplY3RLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBGYWlsdXJlIGJsb2NrICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeC5hYm9ydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBDaGVjayBjb21wbGV0aW9uICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uY29tcGxldGVkQWxsID0gZmlsZU1hbmFnZXJGYWN0b3J5LmNoZWNrVXBsb2FkQ29tcGxldGlvbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlZnJlc2ggdmlldyB3aXRoIHNjb3BlID4gYXBwbHkgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkZpbGUgZGlkIG5vdCB1cGxvYWQgc3VjZXNzZnVsbHk6XCIsIHJlYXNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkRmFjdG9yeS5zdGFydCh1cGxvYWRIYW5kbGVyKTtcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgLy9jbG91ZGluYXJ5IHVwbG9hZCBmdW5jdGlvbiAgXHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIGlmIChmaWxlc2FycmF5LmNsb3VkaW5hcnkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIHZhciBjbG91ZGluYXJ5UGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogZmlsZXNhcnJheS5jbG91ZGluYXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgLmlzc3VlSW1hZ2UoJHNjb3BlLmNsb3VkaW5hcnlQYXlsb2FkKVxyXG4gICAgICAgICAgICAgICAgdmFyIGNsb3VkID0gIFVwbG9hZC51cGxvYWQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCArIFwiL2FwaS9pc3N1ZUltYWdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNsb3VkaW5hcnlQYXlsb2FkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKFwiUE9TVFwiLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlc3BvbnNlIG9mIGNsb3VkaW5hcnk6IFwiLCByZXNwKTtcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIENoZWNrIGNvbXBsZXRpb24gKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uY29tcGxldGVkQWxsID0gZmlsZU1hbmFnZXJGYWN0b3J5LmNoZWNrVXBsb2FkQ29tcGxldGlvbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlc2FycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gJHEuYWxsKFtTMywgY2xvdWRdKS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBkZWZlcnJlZC5yZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgczNkYXRhOiBkYXRhWzBdLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBjbG91ZGRhdGE6IGRhdGFbMV1cclxuICAgICAgICAgICAgICAgIC8vICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgICAgICBzZW5kRGF0YTpmdW5jdGlvbihvYmplY3QsZmlsZXMpe1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKG9iamVjdClcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgLy8gc2VuZEFsbDpmdW5jdGlvbihvYmplY3QsIGZpbGVzYXJyYXkpe1xyXG4gICAgICAgICAgICAvLyAgIGlmKGZpbGVzYXJyYXkpXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG5cclxufSkoKTsiLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJ1cGxvYWRGYWN0b3J5XCIsIHVwbG9hZEZhY3RvcnkpO1xyXG5cclxuICBmdW5jdGlvbiB1cGxvYWRGYWN0b3J5KFxyXG4gICAgJGh0dHAsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIFVwbG9hZCxcclxuICAgIGNsb3VkaW5hcnksXHJcbiAgICBOb3RpZmljYXRpb25cclxuICApIHtcclxuICAgIC8qIEFXUyBDT05GSUcgKi9cclxuICAgIGNvbnN0IGJ1Y2tldE5hbWUgPSBcIjNkZmlsZXNkYXRhXCI7XHJcbiAgICBjb25zdCBidWNrZXRSZWdpb24gPSBcImFwLXNvdXRoLTFcIjtcclxuICAgIGxldCBjb25maWcgPSB7XHJcbiAgICAgIHNpZ25lclVybDogYGh0dHBzOi8vYXBpLnN0YWdpbmcuY2xvdWRlcy5ldS9zaWdudjRfYXV0aGAsXHJcbiAgICAgIGF3c19rZXk6IFwiQUtJQUpNTzNZSlRQS1lWNURONUFcIixcclxuICAgICAgYnVja2V0OiBcIjNkZmlsZXNkYXRhL3Rlc3RcIixcclxuICAgICAgYXdzUmVnaW9uOiBidWNrZXRSZWdpb24sXHJcbiAgICAgIGNvbXB1dGVDb250ZW50TWQ1OiB0cnVlLFxyXG4gICAgICBhbGxvd1MzRXhpc3RlbmNlT3B0aW1pemF0aW9uOiB0cnVlLFxyXG4gICAgICBjcnlwdG9NZDVNZXRob2Q6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gQVdTLnV0aWwuY3J5cHRvLm1kNShkYXRhLCBcImJhc2U2NFwiKTtcclxuICAgICAgfSxcclxuICAgICAgY3J5cHRvSGV4RW5jb2RlZEhhc2gyNTY6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gQVdTLnV0aWwuY3J5cHRvLnNoYTI1NihkYXRhLCBcImhleFwiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbml0OiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIEV2YXBvcmF0ZS5jcmVhdGUoY29uZmlnKTtcclxuICAgICAgfSxcclxuICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcclxuICAgICAgICBsZXQgZmlsZVVwbG9hZCA9IHRoaXMuaW5pdCgpO1xyXG5cclxuICAgICAgICBmaWxlVXBsb2FkLnRoZW4oaGFuZGxlcikuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgcGF1c2U6IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICB0aGlzLnBhdXNlKGAzZGZpbGVzZGF0YS90ZXN0LyR7ZmlsZS5uYW1lfWAsIHsgZm9yY2U6IHRydWUgfSlcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmaWxlLmlzUGF1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJQYXVzZWQhXCIpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgcmVzdW1lOiBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgICAgdGhpcy5yZXN1bWUoYDNkZmlsZXNkYXRhL3Rlc3QvJHtmaWxlLm5hbWV9YClcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBmaWxlLmlzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVzdW1lZCFcIik7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICBhYm9ydDogZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgIHRoaXMuY2FuY2VsKGAzZGZpbGVzZGF0YS90ZXN0LyR7ZmlsZS5uYW1lfWApXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy9maWxlLmFib3J0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbmNlbGVkIVwiKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gdXBsb2FkOiBmaWxlID0+IHtcclxuICAgICAgLy8gICBjb25zb2xlLmxvZyhcImZpbGUhIVwiLCBmaWxlKTtcclxuICAgICAgLy8gICAvKiBDaGVjayBmaWxlIHNpemUgKi9cclxuICAgICAgLy8gICBpZiAoZmlsZS5zaXplID4gMTAwMDAwMDApIHtcclxuICAgICAgLy8gICAgIC8qIHMzIGZvciBmaWxlcyBsYXJnZXIgdGhhbiAxMG1iICovXHJcbiAgICAgIC8vICAgICBjb25zdCBwYXJhbXMgPSB7IEtleTogZmlsZS5uYW1lLCBDb250ZW50VHlwZTogZmlsZS50eXBlLCBCb2R5OiBmaWxlIH07XHJcbiAgICAgIC8vICAgICBzMy5wdXRPYmplY3QocGFyYW1zKVxyXG4gICAgICAvLyAgICAgICAub24oXCJodHRwVXBsb2FkUHJvZ3Jlc3NcIiwgcHJvZ3Jlc3MgPT4ge1xyXG4gICAgICAvLyAgICAgICAgIC8qIFRPRE86IEdyYWJiaW5nIHByb2dyZXNzIGV2ZW50ICovXHJcbiAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCJwcm9ncmVzXCIsIHByb2dyZXNzKTtcclxuICAgICAgLy8gICAgICAgfSlcclxuICAgICAgLy8gICAgICAgLnNlbmQoKGVyciwgZGF0YSkgPT4ge1xyXG4gICAgICAvLyAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgLy8gICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIC8vICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgLy8gICAgICAgICAgIGNvbnNvbGUubG9nKFwiZG9uZVwiLCBkYXRhKTtcclxuICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgIC8vICAgICAgIH0pO1xyXG4gICAgICAvLyAgIH0gZWxzZSB7XHJcbiAgICAgIC8vICAgICAvKiBTZW5kIHRvIGNsb3VkaW5hcnkgKi9cclxuICAgICAgLy8gICAgIFVwbG9hZC51cGxvYWQoe1xyXG4gICAgICAvLyAgICAgICB1cmw6XHJcbiAgICAgIC8vICAgICAgICAgXCJodHRwczovL2FwaS5jbG91ZGluYXJ5LmNvbS92MV8xL1wiICtcclxuICAgICAgLy8gICAgICAgICBjbG91ZGluYXJ5LmNvbmZpZygpLmNsb3VkX25hbWUgK1xyXG4gICAgICAvLyAgICAgICAgIFwiL3VwbG9hZFwiLFxyXG4gICAgICAvLyAgICAgICBkYXRhOiB7XHJcbiAgICAgIC8vICAgICAgICAgdXBsb2FkX3ByZXNldDogY2xvdWRpbmFyeS5jb25maWcoKS51cGxvYWRfcHJlc2V0LFxyXG4gICAgICAvLyAgICAgICAgIHRhZ3M6IGZpbGUubmFtZSxcclxuICAgICAgLy8gICAgICAgICBjb250ZXh0OiBcInBob3RvPVwiICsgRGF0ZS5ub3coKSxcclxuICAgICAgLy8gICAgICAgICBmaWxlOiBmaWxlXHJcbiAgICAgIC8vICAgICAgIH1cclxuICAgICAgLy8gICAgIH0pXHJcbiAgICAgIC8vICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwicmVzcCEhXCIsIHJlc3ApO1xyXG4gICAgICAvLyAgICAgICB9KVxyXG4gICAgICAvLyAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCJlcnJcIiwgZSk7XHJcbiAgICAgIC8vICAgICAgIH0pO1xyXG4gICAgICAvLyAgIH1cclxuICAgICAgLy8gfVxyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcIlNCY2hhbm5lbFwiLCBTQmNoYW5uZWwpO1xyXG5cclxuICBmdW5jdGlvbiBTQmNoYW5uZWwoXHJcbiAgICAkaHR0cCxcclxuICAgICRsb2NhdGlvbixcclxuICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgU0Jjb21tb24sXHJcbiAgICBOb3RpZmljYXRpb25cclxuICApIHtcclxuICAgIGxldCBzYiA9IFNCY29tbW9uLmdldEluc3RhbmNlKCk7XHJcbiAgICBjb25zdCBtZXRob2RzID0ge1xyXG4gICAgICBjcmVhdGVDaGFubmVsOiAoY2hhbm5lbE5hbWUsIHVzZXIsIHByb2plY3QpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBzYi5Hcm91cENoYW5uZWxQYXJhbXMoKTtcclxuICAgICAgICAgIHBhcmFtcy5pc1B1YmxpYyA9IGZhbHNlO1xyXG4gICAgICAgICAgcGFyYW1zLmlzRXBoZW1lcmFsID0gZmFsc2U7XHJcbiAgICAgICAgICBwYXJhbXMuaXNEaXN0aW5jdCA9IGZhbHNlO1xyXG4gICAgICAgICAgcGFyYW1zLmFkZFVzZXJJZHModXNlcik7XHJcbiAgICAgICAgICBwYXJhbXMub3BlcmF0b3JzID0gdXNlcjtcclxuICAgICAgICAgIHBhcmFtcy5uYW1lID0gY2hhbm5lbE5hbWU7XHJcbiAgICAgICAgICBwYXJhbXMuY3VzdG9tVHlwZSA9IHByb2plY3Q7XHJcbiAgICAgICAgICAvL1RPRE86IEFkZCB0aGVzZSBkYXRhIGxhdGVyXHJcbiAgICAgICAgICAvLyBwYXJhbXMuY292ZXJJbWFnZSA9IEZJTEU7XHJcbiAgICAgICAgICAvLyBwYXJhbXMuY292ZXJVcmwgPSBDT1ZFUl9VUkw7XHJcbiAgICAgICAgICAvLyBwYXJhbXMuZGF0YSA9IERBVEE7XHJcbiAgICAgICAgICBzYi5Hcm91cENoYW5uZWwuY3JlYXRlQ2hhbm5lbChwYXJhbXMsIChncm91cENoYW5uZWwsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXNvbHZlKGdyb3VwQ2hhbm5lbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgICBsaXN0Q2hhbm5lbHM6IHByb2plY3RJZCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIGxldCBjaGFubmVsTGlzdFF1ZXJ5ID0gc2IuR3JvdXBDaGFubmVsLmNyZWF0ZU15R3JvdXBDaGFubmVsTGlzdFF1ZXJ5KCk7XHJcbiAgICAgICAgICBjaGFubmVsTGlzdFF1ZXJ5LmluY2x1ZGVFbXB0eSA9IHRydWU7XHJcbiAgICAgICAgICBjaGFubmVsTGlzdFF1ZXJ5LmN1c3RvbVR5cGVzRmlsdGVyID0gW3Byb2plY3RJZF07XHJcbiAgICAgICAgICBpZiAoY2hhbm5lbExpc3RRdWVyeS5oYXNOZXh0KSB7XHJcbiAgICAgICAgICAgIGNoYW5uZWxMaXN0UXVlcnkubmV4dCgoY2hhbm5lbExpc3QsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjaGFubmVsTGlzdCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgaW52aXRlVXNlcnM6IChjaGFubmVsLCB1c2VycykgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICBjaGFubmVsLmludml0ZVdpdGhVc2VySWRzKHVzZXJzLCAocmVzcCwgZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdldENoYW5uZWxNZXNzYWdlczogY2hhbm5lbCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIGxldCBwcmV2TWVzc2FnZUxpc3RRdWVyeSA9IGNoYW5uZWwuY3JlYXRlUHJldmlvdXNNZXNzYWdlTGlzdFF1ZXJ5KCk7XHJcbiAgICAgICAgICBwcmV2TWVzc2FnZUxpc3RRdWVyeS5saW1pdCA9IDMwO1xyXG4gICAgICAgICAgcHJldk1lc3NhZ2VMaXN0UXVlcnkucmV2ZXJzZSA9IGZhbHNlO1xyXG4gICAgICAgICAgcHJldk1lc3NhZ2VMaXN0UXVlcnkubG9hZCgobWVzc2FnZXMsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjaGFubmVsLm1lc3NhZ2VzID0gbWVzc2FnZXM7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShjaGFubmVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXRDaGFubmVsRmlsZXM6IGNoYW5uZWwgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICBsZXQgcHJldk1lc3NhZ2VMaXN0UXVlcnkgPSBjaGFubmVsLmNyZWF0ZVByZXZpb3VzTWVzc2FnZUxpc3RRdWVyeSgpO1xyXG4gICAgICAgICAgcHJldk1lc3NhZ2VMaXN0UXVlcnkubGltaXQgPSAzMDtcclxuICAgICAgICAgIHByZXZNZXNzYWdlTGlzdFF1ZXJ5LnJldmVyc2UgPSB0cnVlO1xyXG4gICAgICAgICAgcHJldk1lc3NhZ2VMaXN0UXVlcnkubWVzc2FnZVR5cGVGaWx0ZXIgPSAyO1xyXG4gICAgICAgICAgcHJldk1lc3NhZ2VMaXN0UXVlcnkubG9hZCgoZmlsZXMsIGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjaGFubmVsLmZpbGVzID0gZmlsZXM7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShjaGFubmVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzZW5kTWVzc2FnZTogKGNoYW5uZWwsIG1lc3NhZ2UpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgY2hhbm5lbC5zZW5kVXNlck1lc3NhZ2UoXHJcbiAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgIFwibWVldGluZ1Jvb21NZXNzYWdlXCIsXHJcbiAgICAgICAgICAgIChtZXNzYWdlLCBlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjaGFubmVsKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzZW5kRmlsZU1lc3NhZ2U6IChjaGFubmVsLCBmaWxlcykgPT4ge1xyXG4gICAgICAgIGxldCBwcm9taXNlQXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICAgICAgICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY2hhbm5lbC5zZW5kRmlsZU1lc3NhZ2UoXHJcbiAgICAgICAgICAgICAgZmlsZS5zZWN1cmVfdXJsLFxyXG4gICAgICAgICAgICAgIGZpbGUuYXNzZXROYW1lLFxyXG4gICAgICAgICAgICAgIGZpbGUuZm9ybWF0LFxyXG4gICAgICAgICAgICAgIGZpbGUuYnl0ZXMsXHJcbiAgICAgICAgICAgICAgXCJcIixcclxuICAgICAgICAgICAgICBcIlwiLFxyXG4gICAgICAgICAgICAgIChmaWxlTWVzc2FnZSwgZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmaWxlTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBwcm9taXNlQXJyYXkucHVzaChwcm9taXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2VBcnJheTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBtZXRob2RzO1xyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5mYWN0b3J5KFwiU0Jjb21tb25cIiwgU0Jjb21tb24pO1xyXG5cclxuICBmdW5jdGlvbiBTQmNvbW1vbigkaHR0cCwgJGxvY2F0aW9uLCBsb2NhbFN0b3JhZ2VTZXJ2aWNlLCBOb3RpZmljYXRpb24pIHtcclxuICAgIGNvbnN0IGNyZWRlbnRpYWxzID0ge1xyXG4gICAgICAgIGFwcElkOiBcIkM4M0Q5NEUwLUY4MkUtNEYyMi1BN0FELUY5OTIyNTY5QUFCNFwiLFxyXG4gICAgICAgIHVybDogXCJodHRwczovL2FwaS5zZW5kYmlyZC5jb21cIlxyXG4gICAgICB9LFxyXG4gICAgICAvKiBTZW5kQmlyZCBpbnN0YW5jZSAqL1xyXG4gICAgICBzYiA9IG5ldyBTZW5kQmlyZCh7XHJcbiAgICAgICAgYXBwSWQ6IGNyZWRlbnRpYWxzLmFwcElkXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG1ldGhvZHMgPSB7XHJcbiAgICAgIGdldEluc3RhbmNlOiAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNiO1xyXG4gICAgICB9LFxyXG4gICAgICBjb25uZWN0OiAoaWQsIHRva2VuKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIC8vIERpc2Nvbm5lY3QgYmVmb3JlIGNvbm5lY3RpbmcgdG8gYXZvaWQgY2FjaGVkIGRhdGEgYmVoYXZpb3VyXHJcbiAgICAgICAgICBzYi5kaXNjb25uZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgc2IuY29ubmVjdChcclxuICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICB0b2tlbixcclxuICAgICAgICAgICAgICAodXNlciwgZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1c2VyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgZGlzY29ubmVjdDogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICBzYi5kaXNjb25uZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShcIkRpc2Nvbm5lY3RlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSxcclxuICAgICAgc3RvcmU6ICgpID0+IHtcclxuICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgIHVzZXI6IG51bGwsXHJcbiAgICAgICAgICBjdXJyZW50TWVldGluZzogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGdldDogKHByb3AgPSBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wID8gZGF0YVtwcm9wXSA6IGRhdGE7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc2V0OiAocHJvcCwgdmFsKSA9PiB7XHJcbiAgICAgICAgICAgIGRhdGFbcHJvcF0gPSB2YWw7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcmVzZXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgZGF0YSA9IE9iamVjdC5rZXlzKGRhdGEpLnJlZHVjZSgoYWNjLCB4KSA9PiB7XHJcbiAgICAgICAgICAgICAgYWNjW3hdID0gbnVsbDtcclxuICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgZXJyb3I6IGUgPT4ge1xyXG4gICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIG1ldGhvZHM7XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJTQmV2ZW50c1wiLCBTQmV2ZW50cyk7XHJcblxyXG4gIGZ1bmN0aW9uIFNCZXZlbnRzKFxyXG4gICAgJGh0dHAsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICAkcm9vdFNjb3BlLFxyXG4gICAgbG9jYWxTdG9yYWdlU2VydmljZSxcclxuICAgIFNCY29tbW9uLFxyXG4gICAgTm90aWZpY2F0aW9uXHJcbiAgKSB7XHJcbiAgICBsZXQgc2IgPSBTQmNvbW1vbi5nZXRJbnN0YW5jZSgpO1xyXG4gICAgY29uc3QgbWV0aG9kcyA9IHtcclxuICAgICAgaW5pdDogKCkgPT4ge1xyXG4gICAgICAgIC8qIE5ldyBtZXNzYWdlICovXHJcbiAgICAgICAgbGV0IG5ld01lc3NhZ2VIYW5kbGVyID0gbmV3IHNiLkNoYW5uZWxIYW5kbGVyKCk7XHJcblxyXG4gICAgICAgIG5ld01lc3NhZ2VIYW5kbGVyLm9uTWVzc2FnZVJlY2VpdmVkID0gKGNoYW5uZWwsIG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcIm5ld01lZWluZ1Jvb21NZXNzYWdlXCIsIHtcclxuICAgICAgICAgICAgY2hhbm5lbCxcclxuICAgICAgICAgICAgbWVzc2FnZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2IuYWRkQ2hhbm5lbEhhbmRsZXIoXCJtZXNzYWdlUmVjZWl2ZWRcIiwgbmV3TWVzc2FnZUhhbmRsZXIpO1xyXG5cclxuICAgICAgICAvKiBOZXcgY2hhbm5lbCAqL1xyXG4gICAgICAgIGxldCBuZXdVc2VySm9pbmVkID0gbmV3IHNiLkNoYW5uZWxIYW5kbGVyKCk7XHJcbiAgICAgICAgbmV3VXNlckpvaW5lZC5vblVzZXJKb2luZWQgPSAoY2hhbm5lbCwgdXNlcikgPT4ge1xyXG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwibmV3Q2hhbm5lbEpvaW5lZFwiLCB7XHJcbiAgICAgICAgICAgIGNoYW5uZWwsXHJcbiAgICAgICAgICAgIHVzZXJcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNiLmFkZENoYW5uZWxIYW5kbGVyKFwibmV3Q2hhbm5lbEpvaW5lZFwiLCBuZXdVc2VySm9pbmVkKTtcclxuXHJcbiAgICAgICAgbGV0IHR5cGluZ1N0YXR1c0hhbmRsZXIgPSBuZXcgc2IuQ2hhbm5lbEhhbmRsZXIoKTtcclxuICAgICAgICB0eXBpbmdTdGF0dXNIYW5kbGVyLm9uVHlwaW5nU3RhdHVzVXBkYXRlZCA9IGNoYW5uZWwgPT4ge1xyXG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwidHlwaW5nU3RhdHVzXCIsIHtcclxuICAgICAgICAgICAgY2hhbm5lbFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2IuYWRkQ2hhbm5lbEhhbmRsZXIoXCJ0eXBpbmdTdGF0dXNcIiwgdHlwaW5nU3RhdHVzSGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gbWV0aG9kcztcclxuICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmFjdG9yeShcImNvbW1vblZQRmFjdG9yeVwiLCBjb21tb25WUEZhY3RvcnkpO1xyXG5cclxuICAvKiogQG5nSW5qZWN0ICovXHJcbiAgZnVuY3Rpb24gY29tbW9uVlBGYWN0b3J5KCRyb290U2NvcGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8vIEluaXRpYWxpemVzIGEgc3RhZ2UgZm9yIHRoZSB2aXN1YWwgcGxhbm5lclxyXG4gICAgICBjcmVhdGVTdGFnZTogZnVuY3Rpb24oZGl2SWQsIGluaXRpYWxTaXplLCBwbGFubmVyRGF0YSkge1xyXG4gICAgICAgIHZhciBzdGFnZTtcclxuICAgICAgICBpZiAocGxhbm5lckRhdGEgJiYgcGxhbm5lckRhdGEuanNvblN0cmluZykge1xyXG4gICAgICAgICAgc3RhZ2UgPSBLb252YS5Ob2RlLmNyZWF0ZShwbGFubmVyRGF0YS5qc29uU3RyaW5nLCBcInN0YWdlXCIpO1xyXG4gICAgICAgICAgc3RhZ2Uud2lkdGgoaW5pdGlhbFNpemUud2lkdGgpO1xyXG4gICAgICAgICAgc3RhZ2UuaGVpZ2h0KGluaXRpYWxTaXplLmhlaWdodCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0YWdlID0gbmV3IEtvbnZhLlN0YWdlKHtcclxuICAgICAgICAgICAgY29udGFpbmVyOiBkaXZJZCxcclxuICAgICAgICAgICAgeDogMSxcclxuICAgICAgICAgICAgeTogMSxcclxuICAgICAgICAgICAgd2lkdGg6IGluaXRpYWxTaXplLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGluaXRpYWxTaXplLmhlaWdodFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBnZXRTdGFnZVNpemUgPSB0aGlzLmdldFN0YWdlU2l6ZTtcclxuICAgICAgICBzdGFnZS5vbihcIndpbmRvd1Jlc2l6ZWRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgZGltZW5zaW9ucyA9IGdldFN0YWdlU2l6ZShkaXZJZCk7XHJcbiAgICAgICAgICBzdGFnZS53aWR0aChkaW1lbnNpb25zLndpZHRoKTtcclxuICAgICAgICAgIHN0YWdlLmhlaWdodChkaW1lbnNpb25zLmhlaWdodCk7XHJcbiAgICAgICAgICBzdGFnZS5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHN0YWdlO1xyXG4gICAgICB9LFxyXG4gICAgICBnZXRTdGFnZVNpemU6IGZ1bmN0aW9uKGRpdklkKSB7XHJcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2SWQpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBoZWlnaHQ6IGVsLmNsaWVudEhlaWdodCxcclxuICAgICAgICAgIHdpZHRoOiBlbC5jbGllbnRXaWR0aFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIGdlbmVyYXRlcyBzaGFwZSBJZCBhbmQgaW5jcmVtZW50cyBpdCBldmVyeXRpbWUgeW91IGNhbGwgaXRcclxuXHJcbiAgICAgIHNoYXBlSWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkZWZhdWx0Q291bnQgPSB7XHJcbiAgICAgICAgICBzaGFwZXM6IHtcclxuICAgICAgICAgICAgcmVjdGFuZ2xlOiAwLFxyXG4gICAgICAgICAgICBzcXVhcmU6IDAsXHJcbiAgICAgICAgICAgIGNpcmNsZTogMCxcclxuICAgICAgICAgICAgZWxsaXBzZTogMCxcclxuICAgICAgICAgICAgY2FsaWJyYXRvcjogMCxcclxuICAgICAgICAgICAgZnJlZUhhbmQ6IDAsXHJcbiAgICAgICAgICAgIHBvbHlnb246IDBcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtYXJraW5nczoge1xyXG4gICAgICAgICAgICBsaW5lOiAwLFxyXG4gICAgICAgICAgICBzaW5nbGVBcnJvdzogMCxcclxuICAgICAgICAgICAgZG91YmxlQXJyb3c6IDAsXHJcbiAgICAgICAgICAgIGJlemllcjogMCxcclxuICAgICAgICAgICAgZnJlZWhhbmQ6IDAsXHJcbiAgICAgICAgICAgIHRleHQ6IDAsXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbjogMFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG1lYXN1cmVtZW50OiB7XHJcbiAgICAgICAgICAgIHJlY3RhbmdsZTogMCxcclxuICAgICAgICAgICAgc3F1YXJlOiAwLFxyXG4gICAgICAgICAgICBjaXJjbGU6IDAsXHJcbiAgICAgICAgICAgIGVsbGlwc2U6IDAsXHJcbiAgICAgICAgICAgIGNhbGlicmF0b3I6IDAsXHJcbiAgICAgICAgICAgIHBvbHlnb246IDAsXHJcbiAgICAgICAgICAgIGZyZWVIYW5kOiAwXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGN1cnJlbnRDb3VudCA9IGRlZmF1bHRDb3VudDtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgbG9hZDogZnVuY3Rpb24oY291bnQpIHtcclxuICAgICAgICAgICAgY3VycmVudENvdW50ID0gY291bnQ7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0Q291bnQ6IGZ1bmN0aW9uKHR5cGUsIHNoYXBlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRDb3VudFt0eXBlXVtzaGFwZV0rKztcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb3VudFt0eXBlXVtzaGFwZV07XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb3VudDtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRDb3VudCA9IGRlZmF1bHRDb3VudDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG4gICAgICAvKiBcclxuICAgICAgIERyYXdzdGF0ZSBmdW5jdGlvbiBsZXRzIHlvdSBzZXQgYW5kIGNoZWNrIHRoZSBjdXJyZW50IGRyYXdpbmcgc3RhdGUgZm9yIHRoZSBjYW52YXMuIChFZy4gU3F1YXJlLCBlbGxpcHNlIGV0YylcclxuICAgICAgIFlvdSBjYW4ndCBkcmF3IGEgc2hhcGUgb24gdGhlIGNhbnZhcyB1bmxlc3MgdGhlIHN0YXRlIGZvciB0aGUgcGFydGljdWxhciBzaGFwZSBpcyB0cnVlLiBUaGVzZSBzdGF0cyB3aWxsIGNoZWNrZWRcclxuICAgICAgIGluIHRoZSBldmVudCBsaXN0ZW5lcnMgb2YgdGhlIHRhcmdldCBzdWNoIGFzIHN0YWdlICwgbGF5ZXIgZXRjLlxyXG4gICAgICAqL1xyXG4gICAgICBkcmF3U3RhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8qICBEbyBub3QgbW9kaWZ5IHRoaXMgdmFyICovXHJcbiAgICAgICAgdmFyIGluaXRpYWxEcmF3U3RhdGVzID0ge1xyXG4gICAgICAgICAgc2hhcGVzOiB7XHJcbiAgICAgICAgICAgIHJlY3RhbmdsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHNxdWFyZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGNpcmNsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGVsbGlwc2U6IGZhbHNlLFxyXG4gICAgICAgICAgICBjYWxpYnJhdG9yOiBmYWxzZSxcclxuICAgICAgICAgICAgcG9seWdvbjogZmFsc2VcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtYXJraW5nczoge1xyXG4gICAgICAgICAgICBsaW5lOiBmYWxzZSxcclxuICAgICAgICAgICAgc2luZ2xlQXJyb3c6IGZhbHNlLFxyXG4gICAgICAgICAgICBkb3VibGVBcnJvdzogZmFsc2UsXHJcbiAgICAgICAgICAgIGJlemllcjogZmFsc2UsXHJcbiAgICAgICAgICAgIGZyZWVoYW5kOiBmYWxzZSxcclxuICAgICAgICAgICAgdGV4dDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNlbGVjdGlvbjogZmFsc2VcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtZWFzdXJlbWVudDoge1xyXG4gICAgICAgICAgICByZWN0YW5nbGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBzcXVhcmU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjaXJjbGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBlbGxpcHNlOiBmYWxzZSxcclxuICAgICAgICAgICAgY2FsaWJyYXRvcjogZmFsc2UsXHJcbiAgICAgICAgICAgIHBvbHlnb246IGZhbHNlLFxyXG4gICAgICAgICAgICBmcmVlSGFuZDogZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiBEcmF3IHN0YXRlcyBmcm9tIHRoZSB2aWV3IGFyZSBhc3NpZ25lZCB0byB0aGlzIHZhciAqL1xyXG4gICAgICAgIHZhciBkcmF3U3RhdGVzID0gYW5ndWxhci5jb3B5KGluaXRpYWxEcmF3U3RhdGVzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvIHNldCB0aGUgZHJhd1N0YXRlc1xyXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gdHlwZS5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTsgLy8gcmVzZXQgZHJhd3N0YXRlcyBiZWZvcmUgYXNzaWduaW5nIHN0YXRlc1xyXG4gICAgICAgICAgICBkcmF3U3RhdGVzW2tleXNbMF1dW2tleXNbMV1dID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwiZHJhd1N0YXRlQ2hhbmdlXCIsIGRyYXdTdGF0ZXMpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIC8vIHRvIGNoZWNrIHRoZSBkcmF3U3RhdGVzXHJcbiAgICAgICAgICBjaGVjazogZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IHR5cGUgPyB0eXBlLnNwbGl0KFwiLlwiKSA6IFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlID8gZHJhd1N0YXRlc1trZXlzWzBdXVtrZXlzWzFdXSA6IGRyYXdTdGF0ZXM7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBkcmF3U3RhdGVzID0gYW5ndWxhci5jb3B5KGluaXRpYWxEcmF3U3RhdGVzKTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwiZHJhd1N0YXRlQ2hhbmdlXCIsIGRyYXdTdGF0ZXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBjYWxpYnJhdGlvbiBzdGF0ZVxyXG5cclxuICAgICAgY2FsaWJyYXRpb25TdGF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHN0YXRlID0ge1xyXG4gICAgICAgICAgdmFsdWU6IDEsXHJcbiAgICAgICAgICB1bml0OiBcInVuaXRzXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBvYmo7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBVbmRvIHJlZG8gZnVuY3Rpb25hbGl0eVxyXG4gICAgICBhY3Rpb25TdGF0ZXM6IGZ1bmN0aW9uKGFjdGlvbnMpIHtcclxuICAgICAgICB2YXIgc3RhY2sgPSBhY3Rpb25zIHx8IFtdO1xyXG4gICAgICAgIHZhciBoZWFkID0gc3RhY2subGVuZ3RoIC0gMTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcHVzaDogZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgICAgIHN0YWNrLnNwbGljZShoZWFkICsgMSwgc3RhY2subGVuZ3RoLCB2YWwpO1xyXG4gICAgICAgICAgICBoZWFkID0gc3RhY2subGVuZ3RoIC0gMTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHBlZWs6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhY2tbaGVhZF07XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdW5kbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChoZWFkID4gLTEpIHtcclxuICAgICAgICAgICAgICBzdGFja1toZWFkXS5kZWxldGUoKTtcclxuICAgICAgICAgICAgICBoZWFkID0gaGVhZCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZWRvOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGhlYWQgPCBzdGFjay5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICBoZWFkID0gaGVhZCA9PT0gc3RhY2subGVuZ3RoIC0gMSA/IGhlYWQgOiBoZWFkICsgMTtcclxuICAgICAgICAgICAgICBzdGFja1toZWFkXS5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyogQXR0YWNoIGFjdGlvbiBoYW5kbGVycyB0byBlbnRpdGllcyBiZWZvcmUgcHVzaGluZyBpbnRvIGFjdGlvbiBzdGF0ZSBzdGFjayAqL1xyXG4gICAgICBhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbihzdGFnZSwgZW50aXR5LCBwcm9jZXNzLCBhY3Rpb25UeXBlLCBwcm9wcykge1xyXG4gICAgICAgIHZhciBlbnRpdHkgPSBlbnRpdHk7XHJcbiAgICAgICAgdmFyIHN0YWdlID0gc3RhZ2U7XHJcbiAgICAgICAgdmFyIHByb2Nlc3MgPSBwcm9jZXNzO1xyXG4gICAgICAgIHZhciBwcm9wcyA9IHByb3BzO1xyXG5cclxuICAgICAgICAvKiBIYW5kbGVycyAqL1xyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHtcclxuICAgICAgICAgIGNyZWF0ZToge1xyXG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGVudGl0eS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVzdG9yZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgcHJvY2Vzcy5hZGQoZW50aXR5KTtcclxuICAgICAgICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG1vdmU6IHtcclxuICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBlbnRpdHkucG9zaXRpb24ocHJvcHMuc3RhcnQpO1xyXG4gICAgICAgICAgICAgIHN0YWdlLmJhdGNoRHJhdygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXN0b3JlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBlbnRpdHkucG9zaXRpb24ocHJvcHMuZW5kKTtcclxuICAgICAgICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGRlbGV0ZToge1xyXG4gICAgICAgICAgICBkZWxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHByb2Nlc3MuYWRkKGVudGl0eSk7XHJcbiAgICAgICAgICAgICAgc3RhZ2UuYmF0Y2hEcmF3KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlc3RvcmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGVudGl0eS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNoYXBlUHJvcHM6IHtcclxuICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMuc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eVtrZXldKHByb3BzLnN0YXJ0W2tleV0pO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc3RhZ2UuYmF0Y2hEcmF3KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlc3RvcmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcy5lbmQpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eVtrZXldKHByb3BzLmVuZFtrZXldKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgc3RhZ2UuYmF0Y2hEcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgZW50aXR5OiBlbnRpdHksXHJcbiAgICAgICAgICByZXN0b3JlOiBoYW5kbGVyc1thY3Rpb25UeXBlXS5yZXN0b3JlLFxyXG4gICAgICAgICAgZGVsZXRlOiBoYW5kbGVyc1thY3Rpb25UeXBlXS5kZWxldGVcclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyogVGhpcyBmdW5jdGlvbiByZXR1cm5zIG1vdmVtZW50IHZhbHVlcyBmb3IgdW5kby9yZWRvICovXHJcbiAgICAgIG1vdmVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc3RhcnQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGFkZDogZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCFzdGFydCkge1xyXG4gICAgICAgICAgICAgIHN0YXJ0ID0gcG9zaXRpb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuICAgICAgICAgICAgICAgIGVuZDogcG9zaXRpb25cclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHNoYXBlUHJvcGVydHlIaXN0b3J5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc3RhcnQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGFkZDogZnVuY3Rpb24ocHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKCFzdGFydCkge1xyXG4gICAgICAgICAgICAgIHN0YXJ0ID0gcHJvcHM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcclxuICAgICAgICAgICAgICAgIGVuZDogcHJvcHNcclxuICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qIFRyYW5zZm9ybWVycyAqL1xyXG4gICAgICB0cmFuc2Zvcm1lcnM6IGZ1bmN0aW9uKGxheWVyKSB7XHJcbiAgICAgICAgdmFyIHN0YWdlID0gc3RhZ2U7XHJcbiAgICAgICAgdmFyIGxheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVycyA9IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgYWRkOiBmdW5jdGlvbih0cmFuc2Zvcm1lcikge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1lcnMucHVzaCh0cmFuc2Zvcm1lcik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRyYW5zZm9ybWVycywgZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICAgIHgucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsYXllci5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgLyogXHJcbiAgICAgICAgVGhlIHBvc2l0aW9uIG9mIHRoZSBwb2ludGVyIGRvZXNuJ3QgY2hhbmdlIHdoZW4gdGhlIGJhY2tncm91bmQgaW1hZ2UgbGF5ZXIgaXMgYmVpbmcgZHJhZ2dlZCBhcm91bmQuXHJcbiAgICAgICAgSW4gb3JkZXIgdG8gY29tcGVuc2F0ZSB0aGF0IG9mZnNldCwgVGhlIHN0YWdlIHBvaW50ZXIgcG9zaXRpb24gbXVzdCBiZSBzdWJ0cmFjdGVkIGZyb20gdGhlIGxheWVyIHBvc2l0aW9uXHJcbiAgICAgICovXHJcbiAgICAgIGRyYWdPZmZzZXQ6IGZ1bmN0aW9uKHN0YWdlUG9zaXRpb24sIGxheWVyT2Zmc2V0LCBzdGFnZVNjYWxlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHg6IChzdGFnZVBvc2l0aW9uLnggLSBsYXllck9mZnNldC54KSAvIHN0YWdlU2NhbGUueCxcclxuICAgICAgICAgIHk6IChzdGFnZVBvc2l0aW9uLnkgLSBsYXllck9mZnNldC55KSAvIHN0YWdlU2NhbGUueVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKiBTZWxlY3RlZCBTaGFwZSAqL1xyXG4gICAgICBzZWxlY3RlZFNoYXBlOiBmdW5jdGlvbihzaGFwZSkge1xyXG4gICAgICAgIHZhciBzaGFwZTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoYXBlO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgICAgIHNoYXBlID0gdmFsO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2hhcGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qIFNlbGVjdGlvbiBzdG9yZSAtIFRvIHN0b3JlIGFuZCByZXRyaWV2ZSBzZWxlY3RlZCBzaGFwZXMgKi9cclxuXHJcbiAgICAgIHNlbGVjdGlvblN0b3JlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdG9yZTogZnVuY3Rpb24oc2hhcGVzKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvbnMgPSBzaGFwZXM7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbnM7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcHVsbDogZnVuY3Rpb24oc2hhcGVOYW1lKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvbnMgPSBzZWxlY3Rpb25zLmZpbHRlcihmdW5jdGlvbihzaGFwZSkge1xyXG4gICAgICAgICAgICAgIGlmIChzaGFwZS5uYW1lKCkgPT09IHNoYXBlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcHVzaDogZnVuY3Rpb24oc2hhcGUpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlTmFtZXMgPSBzZWxlY3Rpb25zLm1hcChmdW5jdGlvbihzaGFwZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBzaGFwZS5uYW1lKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIShzaGFwZU5hbWVzLmluZGV4T2Yoc2hhcGUubmFtZSgpKSA+IC0xKSkge1xyXG4gICAgICAgICAgICAgIHNlbGVjdGlvbnMucHVzaChzaGFwZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvbnMgPSBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYXNzb2NpYXRpb25zOiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGFzc29jaWF0aW9ucyA9IHt9O1xyXG5cclxuICAgICAgICBsZXQgbWV0aG9kcyA9IHtcclxuICAgICAgICAgIGNyZWF0ZUFzc29jaWF0aW9uOiAoc2hhcGVJZCwgZW50aXR5SWQsIHR5cGUpID0+IHtcclxuICAgICAgICAgICAgbGV0IGtleSA9IGAke3NoYXBlSWR9LSR7ZW50aXR5SWR9LSR7RGF0ZS5ub3coKX1gO1xyXG4gICAgICAgICAgICBhc3NvY2lhdGlvbnNba2V5XSA9IHtcclxuICAgICAgICAgICAgICBzaGFwZUlkLFxyXG4gICAgICAgICAgICAgIGVudGl0eUlkLFxyXG4gICAgICAgICAgICAgIHR5cGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXRBc3NvY2lhdGlvbnM6IGtleSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXkgPyBhc3NvY2lhdGlvbnNba2V5XSA6IGFzc29jaWF0aW9ucztcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXRBc3NvY2lhdGlvbnNGb3JTYXZlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhhc3NvY2lhdGlvbnMpLnJlZHVjZSgoYWNjLCB4KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IG9iaiA9IHtcclxuICAgICAgICAgICAgICAgIHNoYXBlSWQ6IGFzc29jaWF0aW9uc1t4XS5zaGFwZUlkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogYXNzb2NpYXRpb25zW3hdLnR5cGVcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICBzd2l0Y2ggKGFzc29jaWF0aW9uc1t4XS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgIG9iai5tYXRlcmlhbElkID0gYXNzb2NpYXRpb25zW3hdLmVudGl0eUlkO1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgb2JqLmNvbWJvSWQgPSBhc3NvY2lhdGlvbnNbeF0uZW50aXR5SWQ7XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICBvYmouZXF1aXBtZW50SWQgPSBhc3NvY2lhdGlvbnNbeF0uZW50aXR5SWQ7XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBhY2MucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIFtdKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByZW1vdmVBc3NvY2lhdGlvbjoga2V5ID0+IHtcclxuICAgICAgICAgICAgYXNzb2NpYXRpb25zW2tleV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcmVzZXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgYXNzb2NpYXRpb25zID0ge307XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5mcmVlemUobWV0aG9kcyk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJldmVudHNWUEZhY3RvcnlcIiwgZXZlbnRzVlBGYWN0b3J5KTtcclxuXHJcbiAgLyoqIEBuZ0luamVjdCAqL1xyXG4gIGZ1bmN0aW9uIGV2ZW50c1ZQRmFjdG9yeSgkcm9vdFNjb3BlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aW5kb3dFdmVudHM6IGZ1bmN0aW9uKHdpbmRvd09iamVjdCkge1xyXG4gICAgICAgIHZhciBvYmo7XHJcbiAgICAgICAgdmFyIGVudGl0aWVzID0gW107XHJcbiAgICAgICAgd2luZG93T2JqZWN0LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24oZXYpIHtcclxuICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChlbnRpdGllcywgZnVuY3Rpb24odikge1xyXG4gICAgICAgICAgICB2LmZpcmUoXCJ3aW5kb3dSZXNpemVkXCIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbihlbnRpdHkpIHtcclxuICAgICAgICAgICAgZW50aXRpZXMucHVzaChlbnRpdHkpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICAgIHN0YWdlRXZlbnRzOiBmdW5jdGlvbihzdGFnZSkge1xyXG4gICAgICAgIHZhciBzdGFnZSA9IHN0YWdlO1xyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGlmICghc3RhZ2UpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXZlbnRzLnB1c2goZXZlbnQpO1xyXG4gICAgICAgICAgICBzdGFnZS5vbihldmVudCwgaGFuZGxlcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuICAgICAgc2hhcGVFdmVudHM6IGZ1bmN0aW9uKHNoYXBlKSB7XHJcbiAgICAgICAgdmFyIHNoYXBlID0gc2hhcGU7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICByZWdpc3RlcjogZnVuY3Rpb24oZXZlbnQsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKGV2ZW50KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgLyogQ2hlY2sgZm9yIGR1cGxpY2F0ZSBldmVudHMgKi9cclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZXZlbnRzLnB1c2goZXZlbnQpO1xyXG4gICAgICAgICAgICAgIHNoYXBlLm9uKGV2ZW50LCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICAgIGxheWVyRXZlbnRzOiBmdW5jdGlvbihsYXllcikge1xyXG4gICAgICAgIHZhciBsYXllciA9IGxheWVyO1xyXG4gICAgICAgIHZhciBldmVudHMgPSBbXTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudHMuaW5kZXhPZihldmVudCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgIC8qIENoZWNrIGZvciBkdXBsaWNhdGUgZXZlbnRzICovXHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGV2ZW50cy5wdXNoKGV2ZW50KTtcclxuICAgICAgICAgICAgICBsYXllci5vbihldmVudCwgaGFuZGxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5mYWN0b3J5KFwibGF5ZXJzVlBGYWN0b3J5XCIsIGxheWVyc1ZQRmFjdG9yeSk7XHJcblxyXG4gIC8qKiBAbmdJbmplY3QgKi9cclxuICBmdW5jdGlvbiBsYXllcnNWUEZhY3RvcnkoJHJvb3RTY29wZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY3JlYXRlTGF5ZXI6IGZ1bmN0aW9uKHN0YWdlKSB7XHJcbiAgICAgICAgdmFyIGxheWVyID0gbmV3IEtvbnZhLkxheWVyKCk7XHJcbiAgICAgICAgc3RhZ2UuYWRkKGxheWVyKTtcclxuICAgICAgICByZXR1cm4gbGF5ZXI7XHJcbiAgICAgIH0sXHJcbiAgICAgIGluaXRpYXRlUHJvY2VzczogZnVuY3Rpb24oc3RhZ2UsIGJhc2VMYXllcikge1xyXG4gICAgICAgIHZhciBwcm9jZXNzZXMgPSBbXSxcclxuICAgICAgICAgIGhlYWQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGNyZWF0ZVByb2Nlc3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgS29udmEuR3JvdXAoe1xyXG4gICAgICAgICAgICAgIG5hbWU6IFwicHJvY2Vzcy1cIiArIERhdGUubm93KClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHByb2Nlc3Nlcy5wdXNoKGdyb3VwKTtcclxuICAgICAgICAgICAgaGVhZCA9IHByb2Nlc3Nlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKGdyb3VwKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXRQcm9jZXNzZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VzO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldEN1cnJlbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc2VzW2hlYWRdO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNldEN1cnJlbnQ6IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICAgIGhlYWQgPSBpbmRleDtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzaG93UHJvY2VzczogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHByb2Nlc3Nlc1tpbmRleF0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm9jZXNzZXMsIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5hZGQoeCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBoaWRlUHJvY2VzczogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBwcm9jZXNzZXNbaW5kZXhdLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChwcm9jZXNzZXMsIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgICAgIHgucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAvKiBMb2FkaW5nIHByb2Nlc3MgZnJvbSBqc29uICovXHJcbiAgICAgICAgICBsb2FkUHJvY2Vzc2VzOiBmdW5jdGlvbihwcm9jZXNzZXNGcm9tSnNvbikge1xyXG4gICAgICAgICAgICBwcm9jZXNzZXMgPSBwcm9jZXNzZXNGcm9tSnNvbjtcclxuICAgICAgICAgICAgaGVhZCA9IHByb2Nlc3Nlcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJzaGFwZXNWUEZhY3RvcnlcIiwgc2hhcGVzVlBGYWN0b3J5KTtcclxuXHJcbiAgLyoqIEBuZ0luamVjdCAqL1xyXG4gIGZ1bmN0aW9uIHNoYXBlc1ZQRmFjdG9yeShcclxuICAgICRyb290U2NvcGUsXHJcbiAgICBldmVudHNWUEZhY3RvcnksXHJcbiAgICBjb21tb25WUEZhY3RvcnksXHJcbiAgICB0b29sc1ZQRmFjdG9yeVxyXG4gICkge1xyXG4gICAgdmFyIHNoYXBlSWQgPSBjb21tb25WUEZhY3Rvcnkuc2hhcGVJZCgpO1xyXG4gICAgdmFyIGNyZWF0ZWRTaGFwZTtcclxuXHJcbiAgICAvKiBPcHRpb25zIGNvbW1vbiBmb3IgcG9seWdvbiBjcmVhdGlvbiAqL1xyXG4gICAgdmFyIHBvbHlnb25PcHRpb25zID0ge1xyXG4gICAgICBpbml0OiBmYWxzZSxcclxuICAgICAgLyogdG8gY2hlY2sgaWYgYSBwb2x5Z29uIGlzIGluaXRhdGVkIG9yIG5vdCAqL1xyXG4gICAgICBwb2ludHM6IFtdLFxyXG4gICAgICBwb2ludFNldDogdHJ1ZSAvKiB0cnVlIGZvciBjbGljayBldmVudCBhbmQgZmFsc2UgZm9yIG1vdXNlIG92ZXIgZXZlbnQgKi9cclxuICAgIH07XHJcblxyXG4gICAgdmFyIHNoYXBlVG9vbHM7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLyogVGhpcyBtZXRob2QgaXMgZmlyZWQgaW4gdGhlIGNvbnRyb2xsZXIgYW5kIHNldHMgdGhlIGdsb2JhbCBzaGFwZVRvb2xzICovXHJcbiAgICAgIGdldFNoYXBlVG9vbHM6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHNoYXBlVG9vbHMgPSBvYmo7XHJcbiAgICAgIH0sXHJcbiAgICAgIC8qIFxyXG4gICAgICAgIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgc2hhcGUgd2hpY2ggaXMgaW50dXJuIHBhc3NlZCB0byB0aGUgZHJhd1NoYXBlIGZ1bmN0aW9uLlxyXG4gICAgICAgIEJhc2VlZCBvbiBtb3VzZSBjbGljayBldmVudFxyXG4gICAgICAqL1xyXG5cclxuICAgICAgbG9hZFNoYXBlSWQ6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHNoYXBlSWQubG9hZChvYmopO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0U2hhcGVJZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYXBlSWQuZ2V0KCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjcmVhdGVTaGFwZTogZnVuY3Rpb24odHlwZSwgcG9zaXRpb24pIHtcclxuICAgICAgICAvKiAwIC0gUmVjdGFuZ2xlL1NxdWFyZSAsIDEgLSBFbGxpcHNlL0NpcmNsZSAqL1xyXG4gICAgICAgIGlmIChjcmVhdGVkU2hhcGUpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBmYWxzZSxcclxuICAgICAgICAgICAgc2hhcGU6IGNyZWF0ZWRTaGFwZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNoYXBlO1xyXG4gICAgICAgIHZhciBzaGFwZVByb3BzID0gc2hhcGVUb29scy5nZXQoKTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgIHNoYXBlID0gbmV3IEtvbnZhLkxpbmUoe1xyXG4gICAgICAgICAgICAgIHBvaW50czogW1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueCxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnksXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi54LFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueSxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLngsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55LFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueCxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnksXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi54LFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueVxyXG4gICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgc3Ryb2tlOiBzaGFwZVByb3BzLnN0cm9rZSB8fCBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgbmFtZTogXCJSZWN0XCIgKyBzaGFwZUlkLmdldENvdW50KFwic2hhcGVzXCIsIFwicmVjdGFuZ2xlXCIpLFxyXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzaGFwZVByb3BzLnN0cm9rZVdpZHRoIHx8IDEsXHJcbiAgICAgICAgICAgICAgZmlsbDogc2hhcGVQcm9wcy5maWxsLFxyXG4gICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICBjbG9zZWQ6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICBzaGFwZSA9IG5ldyBLb252YS5FbGxpcHNlKHtcclxuICAgICAgICAgICAgICB4OiBwb3NpdGlvbi54LFxyXG4gICAgICAgICAgICAgIHk6IHBvc2l0aW9uLnksXHJcbiAgICAgICAgICAgICAgcmFkaXVzOiB7XHJcbiAgICAgICAgICAgICAgICB4OiAxLFxyXG4gICAgICAgICAgICAgICAgeTogMVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgc3Ryb2tlOiBzaGFwZVByb3BzLnN0cm9rZSB8fCBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgbmFtZTogXCJFbGxpcHNlXCIgKyBzaGFwZUlkLmdldENvdW50KFwic2hhcGVzXCIsIFwiZWxsaXBzZVwiKSxcclxuICAgICAgICAgICAgICBzdHJva2VXaWR0aDogc2hhcGVQcm9wcy5zdHJva2VXaWR0aCB8fCAxLFxyXG4gICAgICAgICAgICAgIGZpbGw6IHNoYXBlUHJvcHMuZmlsbCxcclxuICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjcmVhdGVkU2hhcGUgPSBzaGFwZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0YXJ0OiB0cnVlLFxyXG4gICAgICAgICAgc2hhcGU6IGNyZWF0ZWRTaGFwZVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKiBcclxuICAgICAgICBUaGlzIGZ1bmN0aW9uIGRyYXdzIHRoZSBzaGFwZSB3aGljaCBpcyBhbHJlYWR5IGNyZWF0ZWQgYnkgY3JlYXRlU2hhcGVcclxuICAgICAgICBCYXNlZCBvbiBtb3VzZW1vdmUgZXZlbnRcclxuICAgICAgKi9cclxuICAgICAgZHJhd1NoYXBlOiBmdW5jdGlvbihwb3NpdGlvbiwgc2hhcGVMb2NrLCBtaXNjKSB7XHJcbiAgICAgICAgLyogaWYgc2hhcGVsb2NrIGlzIHRydWUgLCBsb2NrIHRoZSBhc3BlY3QgcmF0aW8gKi9cclxuXHJcbiAgICAgICAgLyogTWlzYyBpcyBhIHNwZWNpYWwgcGFyYW0gZm9yIHJlY3RhbmdsZXMgc3VjaCBhcyBncmFiIHNlbGVjdG9yIGFuZCB0ZXh0IHdyYXBwZXIgKi9cclxuXHJcbiAgICAgICAgaWYgKGNyZWF0ZWRTaGFwZSkge1xyXG4gICAgICAgICAgc3dpdGNoIChjcmVhdGVkU2hhcGUuY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJMaW5lXCI6XHJcbiAgICAgICAgICAgICAgLyogVHJlYXRpbmcgcmVjdGFuZ2xlIGxpa2UgYSBwb2x5Z29uICovXHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuZHJhd1JlY3RhbmdsZShwb3NpdGlvbiwgY3JlYXRlZFNoYXBlLCBzaGFwZUxvY2ssIG1pc2MpO1xyXG5cclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIkVsbGlwc2VcIjpcclxuICAgICAgICAgICAgICBjcmVhdGVkU2hhcGUucmFkaXVzKHtcclxuICAgICAgICAgICAgICAgIC8qIE1ha2Ugc3VyZSByYWRpdXMgaXNuJ3QgbmVnYXRpdmUgKi9cclxuICAgICAgICAgICAgICAgIHg6IE1hdGguYWJzKHBvc2l0aW9uLnggLSBjcmVhdGVkU2hhcGUueCgpKSxcclxuICAgICAgICAgICAgICAgIHk6IE1hdGguYWJzKFxyXG4gICAgICAgICAgICAgICAgICBzaGFwZUxvY2tcclxuICAgICAgICAgICAgICAgICAgICA/IHBvc2l0aW9uLnggLSBjcmVhdGVkU2hhcGUueCgpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBwb3NpdGlvbi55IC0gY3JlYXRlZFNoYXBlLnkoKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIGRyYXdSZWN0YW5nbGU6IGZ1bmN0aW9uKHBvc2l0aW9uLCBzaGFwZSwgc2hhcGVsb2NrLCBtaXNjKSB7XHJcbiAgICAgICAgdmFyIHBvaW50cyA9IHNoYXBlLnBvaW50cygpOyAvKiBnZXQgcmVjdGFuZ2xlIHZlcnRpY2VzICovXHJcbiAgICAgICAgLyogRGlhZ29uYWwgaGluZ2UgLSBSZWFzc2lnbiBib3RoIHggYW5kIHkgYmFzZWQgb24gcG9zaXRpb24gKi9cclxuXHJcbiAgICAgICAgcG9pbnRzWzRdID0gcG9zaXRpb24ueDtcclxuICAgICAgICBwb2ludHNbNV0gPSBzaGFwZWxvY2tcclxuICAgICAgICAgID8gTWF0aC5hYnMocG9pbnRzWzFdICsgKHBvc2l0aW9uLnggLSBwb2ludHNbMF0pKVxyXG4gICAgICAgICAgOiBwb3NpdGlvbi55O1xyXG5cclxuICAgICAgICAvKiBZIC0gYXhpcyBoaW5nZSAoY2hhbmdlIHggLSBheGlzIGFuZCBrZWVwIHkgLSBmaXhlZCkqL1xyXG5cclxuICAgICAgICBwb2ludHNbN10gPSBzaGFwZWxvY2tcclxuICAgICAgICAgID8gTWF0aC5hYnMocG9pbnRzWzFdICsgKHBvc2l0aW9uLnggLSBwb2ludHNbMF0pKVxyXG4gICAgICAgICAgOiBwb3NpdGlvbi55O1xyXG4gICAgICAgIC8qIFggLSBheGlzIGhpbmdlIChjaGFuZ2UgeSAtIGF4aXMgYW5kIGtlZXAgeCAtIGZpeGVkKSAqL1xyXG5cclxuICAgICAgICBwb2ludHNbMl0gPSBwb3NpdGlvbi54O1xyXG4gICAgICAgIC8qIEhhbmRsZSBzZWxlY3Rpb24gKi9cclxuXHJcbiAgICAgICAgc3dpdGNoIChtaXNjKSB7XHJcbiAgICAgICAgICBjYXNlIFwiZ3JhYmJlclwiOlxyXG4gICAgICAgICAgICBzaGFwZS5kYXNoKFsxMCwgMTBdKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIFwid3JhcHBlclwiOlxyXG4gICAgICAgICAgICBzaGFwZS5zdHJva2UoXCJncmV5XCIpO1xyXG4gICAgICAgICAgICBzaGFwZS5kcmFnZ2FibGUoZmFsc2UpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qIFJlYXNzaWduIHRvIHNoYXBlICovXHJcbiAgICAgICAgc2hhcGUucG9pbnRzKHBvaW50cyk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKiBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgYWN0dWFsbHkgZGVzdHJveSB0aGUgc2hhcGUgdGhhdCBoYXMgYmVlbiBkcmF3cy4gSXQgc2ltcGx5IHJlbW92ZXMgdGhlIHZhciBpbnNpZGUgdGhpcyBmYWN0b3J5IGZ1bnRpb24gKi9cclxuICAgICAgZGVzdHJveVNoYXBlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBjcmVhdGVkU2hhcGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcG9seWdvbk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICBpbml0OiBmYWxzZSxcclxuICAgICAgICAgIHBvaW50czogW10sXHJcbiAgICAgICAgICBwb2ludFNldDogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY2xlYXIgdGhlIGRyYXdpbmcgd2hlbiB0aGUgdXNlciBjYW5jZWxzIGl0IG1pZHdheSAqL1xyXG4gICAgICBjYW5jZWxEcmF3aW5nOiBmdW5jdGlvbihzZWxlY3Rpb24pIHtcclxuICAgICAgICB2YXIgc2VsZWN0aW9uUG9pbnRzID0gY3JlYXRlZFNoYXBlLnBvaW50cygpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgICAgY3JlYXRlZFNoYXBlICYmIGNyZWF0ZWRTaGFwZS5yZW1vdmUoKTtcclxuICAgICAgICBjcmVhdGVkU2hhcGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcG9seWdvbk9wdGlvbnMgPSB7XHJcbiAgICAgICAgICBpbml0OiBmYWxzZSxcclxuICAgICAgICAgIHBvaW50czogW10sXHJcbiAgICAgICAgICBwb2ludFNldDogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvblBvaW50cztcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qIFxyXG4gICAgICAgIEBwYXJhbSBwb3NpdGlvbiA9IHN0YWdlIHBvaW50ZXIgcG9zaXRpb25cclxuICAgICAgICBAcGFyYW0gZnJlZUhhbmQgPSBCb29sZWFuIChlbmFibGluZyBmcmVlaGFuZClcclxuICAgICAgICBAcGFyYW0gZnJlZUhhbmRNYWtlciA9IEJvb2xlYW4gKGVuYWJsaW5nIG1hcmtlciBmdW5jdGlvbmFsaXR5IHdoaWNoIGRvZXNuJ3QgY2hlY2sgZm9yIHRocmVzaG9sZClcclxuICAgICAgKi9cclxuXHJcbiAgICAgIGNyZWF0ZVBvbHlnb246IGZ1bmN0aW9uKHBvc2l0aW9uLCBmcmVlSGFuZCwgZnJlZUhhbmRNYXJrZXIpIHtcclxuICAgICAgICBpZiAoIXBvbHlnb25PcHRpb25zLmluaXQgJiYgIWNyZWF0ZWRTaGFwZSkge1xyXG4gICAgICAgICAgLyogQ2hlY2sgaWYgYSBwb2x5Z29uIGhhcyBiZWVuIGluaXRpYWxpemVkIGFuZCBhbHNvIGlmIGFueSBvdGhlciBzaGFwZSBleGlzdHMgKi9cclxuICAgICAgICAgIHZhciBzaGFwZVByb3BzID0gc2hhcGVUb29scy5nZXQoKTsgLyogR2V0IHNoYXBlIHByb3BzICovXHJcbiAgICAgICAgICBwb2x5Z29uT3B0aW9ucy5wb2ludHMgPSBbcG9zaXRpb24ueCwgcG9zaXRpb24ueV07XHJcblxyXG4gICAgICAgICAgaWYgKGZyZWVIYW5kTWFya2VyKSB7XHJcbiAgICAgICAgICAgIC8qIEZvciBNYXJrZXIgKi9cclxuICAgICAgICAgICAgY3JlYXRlZFNoYXBlID0gbmV3IEtvbnZhLkxpbmUoe1xyXG4gICAgICAgICAgICAgIG5hbWU6IFwibWFya2VyRnJlZUhhbmRcIiArIHNoYXBlSWQuZ2V0Q291bnQoXCJtYXJraW5nc1wiLCBcImZyZWVoYW5kXCIpLFxyXG4gICAgICAgICAgICAgIHBvaW50czogcG9seWdvbk9wdGlvbnMucG9pbnRzLFxyXG4gICAgICAgICAgICAgIGZpbGw6IHNoYXBlUHJvcHMuZmlsbCxcclxuICAgICAgICAgICAgICBzdHJva2U6IHNoYXBlUHJvcHMuc3Ryb2tlIHx8IFwiYmxhY2tcIixcclxuICAgICAgICAgICAgICBzdHJva2VXaWR0aDogc2hhcGVQcm9wcy5zdHJva2VXaWR0aCB8fCAxXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLyogRm9yIGNsb3NhYmxlIGZyZWVoYW5kIGFuZCBwb2x5Z29uICovXHJcbiAgICAgICAgICAgIGNyZWF0ZWRTaGFwZSA9IG5ldyBLb252YS5MaW5lKHtcclxuICAgICAgICAgICAgICBuYW1lOiBmcmVlSGFuZFxyXG4gICAgICAgICAgICAgICAgPyBcImZyZWVIYW5kXCIgKyBzaGFwZUlkLmdldENvdW50KFwic2hhcGVzXCIsIFwiZnJlZUhhbmRcIilcclxuICAgICAgICAgICAgICAgIDogXCJwb2x5Z29uXCIgKyBzaGFwZUlkLmdldENvdW50KFwic2hhcGVzXCIsIFwicG9seWdvblwiKSxcclxuICAgICAgICAgICAgICBwb2ludHM6IHBvbHlnb25PcHRpb25zLnBvaW50cyxcclxuICAgICAgICAgICAgICBmaWxsOiBzaGFwZVByb3BzLmZpbGwsXHJcbiAgICAgICAgICAgICAgc3Ryb2tlOiBzaGFwZVByb3BzLnN0cm9rZSB8fCBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHNoYXBlUHJvcHMuc3Ryb2tlV2lkdGggfHwgMVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBwb2x5Z29uT3B0aW9ucy5pbml0ID0gdHJ1ZTtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiB0cnVlLFxyXG4gICAgICAgICAgICBwb2x5Z29uOiBjcmVhdGVkU2hhcGVcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8qIEVuZCBmb3IgZnJlZWhhbmQgbWFya2VyICovXHJcbiAgICAgICAgICBpZiAoZnJlZUhhbmRNYXJrZXIpIHtcclxuICAgICAgICAgICAgcG9seWdvbk9wdGlvbnMucG9pbnRTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBjcmVhdGVkU2hhcGUuZHJhZ2dhYmxlKHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIHN0YXJ0OiBmYWxzZSxcclxuICAgICAgICAgICAgICBwb2x5Z29uOiBjcmVhdGVkU2hhcGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvKiBDbG9zZSBvbmx5IHdoZW4gdGhyZXNob2xkIGlzIGF0dGFpbmVkIGZvciByZWd1bGFyIHBvbHlnb25zIGFuZCBmcmVlaGFuZCAqL1xyXG5cclxuICAgICAgICAgIGlmICh0aGlzLmNoZWNrVGhyZXNob2xkKHBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAvKiBDbG9zZSBpZiB0aHJlc2hvbGQgaXMgcmVhY2hlZCAqL1xyXG4gICAgICAgICAgICBwb2x5Z29uT3B0aW9ucy5wb2ludHMuc3BsaWNlKFxyXG4gICAgICAgICAgICAgIC0yXHJcbiAgICAgICAgICAgICk7IC8qIFJlbW92ZSBleGlzdGluZyBtb3VzZSBvdmVyIHBvaW50cyAqL1xyXG4gICAgICAgICAgICBwb2x5Z29uT3B0aW9ucy5wb2ludHMucHVzaChcclxuICAgICAgICAgICAgICBwb2x5Z29uT3B0aW9ucy5wb2ludHNbMF0sXHJcbiAgICAgICAgICAgICAgcG9seWdvbk9wdGlvbnMucG9pbnRzWzFdXHJcbiAgICAgICAgICAgICk7IC8qIENsb3NlIHBvbHlnb24gd2l0aCBpbml0YWwgcG9pbnRzICovXHJcbiAgICAgICAgICAgIGNyZWF0ZWRTaGFwZS5wb2ludHMocG9seWdvbk9wdGlvbnMucG9pbnRzKTtcclxuICAgICAgICAgICAgcG9seWdvbk9wdGlvbnMucG9pbnRTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBjcmVhdGVkU2hhcGUuY2xvc2VkKHRydWUpO1xyXG4gICAgICAgICAgICBjcmVhdGVkU2hhcGUuZHJhZ2dhYmxlKHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIHN0YXJ0OiBmYWxzZSxcclxuICAgICAgICAgICAgICBwb2x5Z29uOiBjcmVhdGVkU2hhcGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50cy5zcGxpY2UoXHJcbiAgICAgICAgICAgICAgLTJcclxuICAgICAgICAgICAgKTsgLyogUmVtb3ZlIGV4aXN0aW5nIG1vdXNlIG92ZXIgcG9pbnRzICovXHJcbiAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50cy5wdXNoKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICBjcmVhdGVkU2hhcGUucG9pbnRzKHBvbHlnb25PcHRpb25zLnBvaW50cyk7XHJcbiAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50U2V0ID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBkcmF3UG9seWdvbjogZnVuY3Rpb24ocG9zaXRpb24sIGZyZWVIYW5kKSB7XHJcbiAgICAgICAgaWYgKGNyZWF0ZWRTaGFwZSkge1xyXG4gICAgICAgICAgaWYgKGZyZWVIYW5kKSB7XHJcbiAgICAgICAgICAgIC8qIEZyZWVoYW5kIGJsb2NrICovXHJcbiAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50cy5wdXNoKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICBjcmVhdGVkU2hhcGUucG9pbnRzKHBvbHlnb25PcHRpb25zLnBvaW50cyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiBQb2x5Z29uIGJsb2NrICovXHJcbiAgICAgICAgICAgIGlmIChwb2x5Z29uT3B0aW9ucy5wb2ludFNldCkge1xyXG4gICAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50cy5wdXNoKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50U2V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgY3JlYXRlZFNoYXBlLnBvaW50cyhwb2x5Z29uT3B0aW9ucy5wb2ludHMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHBvbHlnb25PcHRpb25zLnBvaW50c1twb2x5Z29uT3B0aW9ucy5wb2ludHMubGVuZ3RoIC0gMl0gPVxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueDtcclxuICAgICAgICAgICAgICBwb2x5Z29uT3B0aW9ucy5wb2ludHNbcG9seWdvbk9wdGlvbnMucG9pbnRzLmxlbmd0aCAtIDFdID1cclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLnk7XHJcbiAgICAgICAgICAgICAgY3JlYXRlZFNoYXBlLnBvaW50cyhwb2x5Z29uT3B0aW9ucy5wb2ludHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgY3JlYXRlTGluZTogZnVuY3Rpb24ocG9zaXRpb24sIHR5cGUpIHtcclxuICAgICAgICBpZiAoY3JlYXRlZFNoYXBlKSB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGFydDogZmFsc2UsXHJcbiAgICAgICAgICAgIGxpbmU6IGNyZWF0ZWRTaGFwZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsaW5lO1xyXG4gICAgICAgIHZhciBzaGFwZVByb3BzID0gc2hhcGVUb29scy5nZXQoKTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICBjYXNlIFwibGluZVwiOlxyXG4gICAgICAgICAgICBsaW5lID0gbmV3IEtvbnZhLkxpbmUoe1xyXG4gICAgICAgICAgICAgIG5hbWU6IFwibGluZVNpbXBsZVwiICsgc2hhcGVJZC5nZXRDb3VudChcIm1hcmtpbmdzXCIsIFwibGluZVwiKSxcclxuICAgICAgICAgICAgICBwb2ludHM6IFtwb3NpdGlvbi54LCBwb3NpdGlvbi55XSxcclxuICAgICAgICAgICAgICBzdHJva2VXaWR0aDogc2hhcGVQcm9wcy5zdHJva2VXaWR0aCB8fCAxLFxyXG4gICAgICAgICAgICAgIHN0cm9rZTogc2hhcGVQcm9wcy5zdHJva2UgfHwgXCJibGFja1wiLFxyXG4gICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIFwic2luZ2xlQXJyb3dcIjpcclxuICAgICAgICAgICAgbGluZSA9IG5ldyBLb252YS5BcnJvdyh7XHJcbiAgICAgICAgICAgICAgbmFtZTogXCJsaW5lQXJyb3dcIiArIHNoYXBlSWQuZ2V0Q291bnQoXCJtYXJraW5nc1wiLCBcInNpbmdsZUFycm93XCIpLFxyXG4gICAgICAgICAgICAgIHBvaW50czogW3Bvc2l0aW9uLngsIHBvc2l0aW9uLnldLFxyXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgIHN0cm9rZTogc2hhcGVQcm9wcy5zdHJva2UgfHwgXCJibGFja1wiLFxyXG4gICAgICAgICAgICAgIGZpbGw6IHNoYXBlUHJvcHMuZmlsbCB8fCBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgIHBvaW50ZXJMZW5ndGg6IDEwLFxyXG4gICAgICAgICAgICAgIHBvaW50ZXJXaWR0aDogMTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgXCJkb3VibGVBcnJvd1wiOlxyXG4gICAgICAgICAgICBsaW5lID0gbmV3IEtvbnZhLkFycm93KHtcclxuICAgICAgICAgICAgICBuYW1lOlxyXG4gICAgICAgICAgICAgICAgXCJsaW5lQXJyb3dEb3VibGVcIiArIHNoYXBlSWQuZ2V0Q291bnQoXCJtYXJraW5nc1wiLCBcImRvdWJsZUFycm93XCIpLFxyXG4gICAgICAgICAgICAgIHBvaW50czogW3Bvc2l0aW9uLngsIHBvc2l0aW9uLnldLFxyXG4gICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzaGFwZVByb3BzLnN0cm9rZVdpZHRoIHx8IDEsXHJcbiAgICAgICAgICAgICAgc3Ryb2tlOiBzaGFwZVByb3BzLnN0cm9rZSB8fCBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgZmlsbDogc2hhcGVQcm9wcy5maWxsIHx8IFwiYmxhY2tcIixcclxuICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgcG9pbnRlckxlbmd0aDogMTAsXHJcbiAgICAgICAgICAgICAgcG9pbnRlcldpZHRoOiAxMCxcclxuICAgICAgICAgICAgICBwb2ludGVyQXRCZWdpbm5pbmc6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjcmVhdGVkU2hhcGUgPSBsaW5lO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdGFydDogdHJ1ZSxcclxuICAgICAgICAgIGxpbmU6IGNyZWF0ZWRTaGFwZVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICAgIGRyYXdMaW5lOiBmdW5jdGlvbihwb3NpdGlvbikge1xyXG4gICAgICAgIGlmIChjcmVhdGVkU2hhcGUpIHtcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBjcmVhdGVkU2hhcGUucG9pbnRzKCk7XHJcbiAgICAgICAgICBwb2ludHNbMl0gPSBwb3NpdGlvbi54O1xyXG4gICAgICAgICAgcG9pbnRzWzNdID0gcG9zaXRpb24ueTtcclxuICAgICAgICAgIGNyZWF0ZWRTaGFwZS5wb2ludHMocG9pbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjcmVhdGVCZXppZXJMaW5lOiBmdW5jdGlvbihwb3NpdGlvbikge1xyXG4gICAgICAgIGlmIChjcmVhdGVkU2hhcGUpIHtcclxuICAgICAgICAgIHZhciBjcmVhdGVkUG9pbnRzID0gY3JlYXRlZFNoYXBlLnBvaW50cygpO1xyXG5cclxuICAgICAgICAgIHZhciBxID0gW1xyXG4gICAgICAgICAgICAoY3JlYXRlZFBvaW50c1syXSAtIGNyZWF0ZWRQb2ludHNbMF0pICogMC41ICsgY3JlYXRlZFBvaW50c1swXSxcclxuICAgICAgICAgICAgKGNyZWF0ZWRQb2ludHNbM10gLSBjcmVhdGVkUG9pbnRzWzFdKSAqIDAuNSArIGNyZWF0ZWRQb2ludHNbMV1cclxuICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgdmFyIGIxID0gW1xyXG4gICAgICAgICAgICAoY3JlYXRlZFBvaW50c1syXSAtIGNyZWF0ZWRQb2ludHNbMF0pICogMC4yNSArIGNyZWF0ZWRQb2ludHNbMF0sXHJcbiAgICAgICAgICAgIChjcmVhdGVkUG9pbnRzWzNdIC0gY3JlYXRlZFBvaW50c1sxXSkgKiAwLjI1ICsgY3JlYXRlZFBvaW50c1sxXVxyXG4gICAgICAgICAgXTtcclxuICAgICAgICAgIHZhciBiMiA9IFtcclxuICAgICAgICAgICAgKGNyZWF0ZWRQb2ludHNbMl0gLSBjcmVhdGVkUG9pbnRzWzBdKSAqIDAuNzUgKyBjcmVhdGVkUG9pbnRzWzBdLFxyXG4gICAgICAgICAgICAoY3JlYXRlZFBvaW50c1szXSAtIGNyZWF0ZWRQb2ludHNbMV0pICogMC43NSArIGNyZWF0ZWRQb2ludHNbMV1cclxuICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgY3JlYXRlZFBvaW50cy5wdXNoKHFbMF0sIHFbMV0pO1xyXG5cclxuICAgICAgICAgIGNyZWF0ZWRTaGFwZS5wb2ludHMoY3JlYXRlZFBvaW50cyk7XHJcbiAgICAgICAgICBjcmVhdGVkU2hhcGUudGVuc2lvbigxLjEpO1xyXG5cclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBmYWxzZSxcclxuICAgICAgICAgICAgbGluZTogY3JlYXRlZFNoYXBlXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNoYXBlUHJvcHMgPSBzaGFwZVRvb2xzLmdldCgpO1xyXG5cclxuICAgICAgICB2YXIgYmV6aWVyID0gbmV3IEtvbnZhLkxpbmUoe1xyXG4gICAgICAgICAgbmFtZTogXCJiZXppZXJcIiArIHNoYXBlSWQuZ2V0Q291bnQoXCJtYXJraW5nc1wiLCBcImJlemllclwiKSxcclxuICAgICAgICAgIGxpbmVKb2luOiBcInJvdW5kXCIsXHJcbiAgICAgICAgICBwb2ludHM6IFtwb3NpdGlvbi54LCBwb3NpdGlvbi55XSxcclxuICAgICAgICAgIHN0cm9rZVdpZHRoOiBzaGFwZVByb3BzLnN0cm9rZVdpZHRoIHx8IDEsXHJcbiAgICAgICAgICBzdHJva2U6IHNoYXBlUHJvcHMuc3Ryb2tlIHx8IFwiYmxhY2tcIixcclxuICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNyZWF0ZWRTaGFwZSA9IGJlemllcjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0YXJ0OiB0cnVlLFxyXG4gICAgICAgICAgbGluZTogY3JlYXRlZFNoYXBlXHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGRyYXdCZXppZXJMaW5lOiBmdW5jdGlvbihwb3NpdGlvbikge1xyXG4gICAgICAgIGlmIChjcmVhdGVkU2hhcGUpIHtcclxuICAgICAgICAgIHZhciBwb2ludHMgPSBjcmVhdGVkU2hhcGUucG9pbnRzKCk7XHJcbiAgICAgICAgICBwb2ludHNbMl0gPSBwb3NpdGlvbi54O1xyXG4gICAgICAgICAgcG9pbnRzWzNdID0gcG9zaXRpb24ueTtcclxuICAgICAgICAgIGNyZWF0ZWRTaGFwZS5wb2ludHMocG9pbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyB0ZXh0XHJcblxyXG4gICAgICBjcmVhdGVUZXh0OiBmdW5jdGlvbihwcm9wcykge1xyXG4gICAgICAgIHZhciB0ZXh0U2hhcGUgPSBuZXcgS29udmEuVGV4dCh7XHJcbiAgICAgICAgICB4OiBwcm9wcy5wb3NpdGlvbi54LFxyXG4gICAgICAgICAgeTogcHJvcHMucG9zaXRpb24ueSxcclxuICAgICAgICAgIG5hbWU6IFwidGV4dFwiLFxyXG4gICAgICAgICAgdGV4dDogXCJQbGFjZWhvbGRlciB0ZXh0XCIsXHJcbiAgICAgICAgICB3aWR0aDogcHJvcHMud2lkdGgsXHJcbiAgICAgICAgICBmb250U2l6ZTogMTYsXHJcbiAgICAgICAgICBmb250RmFtaWx5OiBcIkNhbGlicmlcIixcclxuICAgICAgICAgIGZpbGw6IFwiYmxhY2tcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0ZXh0U2hhcGU7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjcmVhdGVUZXh0R3JvdXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0ZXh0R3JvdXAgPSBuZXcgS29udmEuR3JvdXAoe1xyXG4gICAgICAgICAgbmFtZTogXCJ0ZXh0R3JvdXBcIiArIHNoYXBlSWQuZ2V0Q291bnQoXCJtYXJraW5nc1wiLCBcInRleHRcIiksXHJcbiAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRleHRHcm91cDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIGNhbGlicmF0b3IgZnVuY3Rpb25cclxuICAgICAgY2FsaWJyYXRvcjogZnVuY3Rpb24oc3RhZ2UsIGxheWVyKSB7XHJcbiAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xyXG4gICAgICAgIHZhciBpc0RvbmUgPSBmYWxzZTtcclxuICAgICAgICB2YXIgaW5pdCA9IHRydWU7XHJcbiAgICAgICAgdmFyIGxpbmU7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBvc2l0aW9uLCBzZXQsIGtpbGwpIHtcclxuICAgICAgICAgIC8vIGtpbGxsaW5nIHRoZSBmdW5jdGlvblxyXG5cclxuICAgICAgICAgIGlmIChraWxsKSB7XHJcbiAgICAgICAgICAgIGxpbmUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICBsYXllci5kcmF3KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBwb3NpdGlvbiA9IHtcclxuICAgICAgICAgICAgeDogcG9zaXRpb24ueCAvIHN0YWdlLnNjYWxlKCkueCxcclxuICAgICAgICAgICAgeTogcG9zaXRpb24ueSAvIHN0YWdlLnNjYWxlKCkueVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBpZiAoIWlzRG9uZSkge1xyXG4gICAgICAgICAgICBpZiAoaW5pdCAmJiBzZXQpIHtcclxuICAgICAgICAgICAgICBwb2ludHMucHVzaChwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcclxuICAgICAgICAgICAgICBsaW5lID0gbmV3IEtvbnZhLkxpbmUoe1xyXG4gICAgICAgICAgICAgICAgcG9pbnRzOiBwb2ludHMsXHJcbiAgICAgICAgICAgICAgICBmaWxsOiBcImdyZXlcIixcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogXCJibGFja1wiLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDEsXHJcbiAgICAgICAgICAgICAgICBkYXNoOiBbNSwgMV1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBpbml0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgbGF5ZXIuYWRkKGxpbmUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpbml0KSB7XHJcbiAgICAgICAgICAgICAgaWYgKHNldCkge1xyXG4gICAgICAgICAgICAgICAgcG9pbnRzWzJdID0gcG9zaXRpb24ueDtcclxuICAgICAgICAgICAgICAgIHBvaW50c1szXSA9IHBvc2l0aW9uLnk7XHJcbiAgICAgICAgICAgICAgICBsaW5lLnBvaW50cyhwb2ludHMpO1xyXG4gICAgICAgICAgICAgICAgaXNEb25lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcImNhbGlicmF0ZWRcIiwgbGluZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvaW50c1syXSA9IHBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgICAgICBwb2ludHNbM10gPSBwb3NpdGlvbi55O1xyXG4gICAgICAgICAgICAgICAgbGluZS5wb2ludHMocG9pbnRzKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxheWVyLmRyYXcoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgY2hlY2tUaHJlc2hvbGQ6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdmFyIHByb3hpbWl0eSA9IDEwO1xyXG4gICAgICAgIC8vIGNhbHVsYXRpb24gdG8gaWRlbnRpZnkgdGhlIHByb3hpbWl0eSB0byBjbG9zZSB0aGUgcG9seWdvblxyXG4gICAgICAgIHZhciB4VXBwZXJUaHJlc2hvbGQgPSBwb2x5Z29uT3B0aW9ucy5wb2ludHNbMF0gKyBwcm94aW1pdHk7XHJcbiAgICAgICAgdmFyIHlVcHBlclRocmVzaG9sZCA9IHBvbHlnb25PcHRpb25zLnBvaW50c1sxXSArIHByb3hpbWl0eTtcclxuICAgICAgICB2YXIgeExvd2VyVGhyZXNob2xkID0gcG9seWdvbk9wdGlvbnMucG9pbnRzWzBdIC0gcHJveGltaXR5O1xyXG4gICAgICAgIHZhciB5TG93ZXJUaHJlc2hvbGQgPSBwb2x5Z29uT3B0aW9ucy5wb2ludHNbMV0gLSBwcm94aW1pdHk7XHJcbiAgICAgICAgcmV0dXJuIHhVcHBlclRocmVzaG9sZCA+IHBvc2l0aW9uLnggJiZcclxuICAgICAgICAgIHhMb3dlclRocmVzaG9sZCA8IHBvc2l0aW9uLnggJiZcclxuICAgICAgICAgICh5VXBwZXJUaHJlc2hvbGQgPiBwb3NpdGlvbi55ICYmIHlMb3dlclRocmVzaG9sZCA8IHBvc2l0aW9uLnkpXHJcbiAgICAgICAgICA/IHRydWVcclxuICAgICAgICAgIDogZmFsc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKiBFeHRyYWN0IGFsbCBzaGFwZXMgKi9cclxuICAgICAgZXh0cmFjdEFsbFNoYXBlczogZnVuY3Rpb24obGF5ZXIpIHtcclxuICAgICAgICB2YXIgYWxsU2hhcGVzID0gbGF5ZXIuZmluZChcIkdyb3VwXCIpLnJlZHVjZShmdW5jdGlvbihhY2MsIHgpIHtcclxuICAgICAgICAgIGlmICgvcHJvY2VzcyovLnRlc3QoeC5uYW1lKCkpKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh4LmdldENoaWxkcmVuKCksIGZ1bmN0aW9uKGNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgYWNjLnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwgW10pO1xyXG4gICAgICAgIHJldHVybiBhbGxTaGFwZXM7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBzZWxlY3RTaGFwZXM6IGZ1bmN0aW9uKGxheWVyLCBwb2ludHMpIHtcclxuICAgICAgICB2YXIgYWxsU2hhcGVzID0gdGhpcy5leHRyYWN0QWxsU2hhcGVzKGxheWVyKTtcclxuXHJcbiAgICAgICAgdmFyIHAxID0gW3BvaW50c1swXSwgcG9pbnRzWzFdXTtcclxuICAgICAgICB2YXIgcDIgPSBbcG9pbnRzWzRdLCBwb2ludHNbNV1dO1xyXG5cclxuICAgICAgICB2YXIgbWluID0ge1xyXG4gICAgICAgICAgeDogcG9pbnRzWzBdID4gcG9pbnRzWzRdID8gcG9pbnRzWzRdIDogcG9pbnRzWzBdLFxyXG4gICAgICAgICAgeTogcG9pbnRzWzFdID4gcG9pbnRzWzVdID8gcG9pbnRzWzVdIDogcG9pbnRzWzFdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG1heCA9IHtcclxuICAgICAgICAgIHg6IHBvaW50c1swXSA8IHBvaW50c1s0XSA/IHBvaW50c1s0XSA6IHBvaW50c1swXSxcclxuICAgICAgICAgIHk6IHBvaW50c1sxXSA8IHBvaW50c1s1XSA/IHBvaW50c1s1XSA6IHBvaW50c1sxXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGVja1NlbGVjdGlvbiA9IHRoaXMuY2hlY2tTZWxlY3Rpb247XHJcbiAgICAgICAgdmFyIHNlbGVjdGVkU2hhcGVzID0gYWxsU2hhcGVzLmZpbHRlcihmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICB2YXIgc2hhcGVOYW1lID0geC5uYW1lKCk7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIC9SZWN0Ki8udGVzdChzaGFwZU5hbWUpIHx8XHJcbiAgICAgICAgICAgIC9wb2x5Z29uKi8udGVzdChzaGFwZU5hbWUpIHx8XHJcbiAgICAgICAgICAgIC9mcmVlSGFuZCovLnRlc3Qoc2hhcGVOYW1lKSB8fFxyXG4gICAgICAgICAgICAvbWFya2VyRnJlZUhhbmQvLnRlc3Qoc2hhcGVOYW1lKVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSB4LnBvaW50cygpO1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25PZmZzZXQgPSB4LnBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGggLSAyOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAvLyBpZ25vcmUgdGhlIGxhc3QgcGFpciBzaW5jZSBpdCdzIHNpbWlsYXIgdG8gdGhlIGZpcnN0IHBhaXJcclxuICAgICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKFtcclxuICAgICAgICAgICAgICAgIHBvaW50c1tpXSArIHBvc2l0aW9uT2Zmc2V0LngsXHJcbiAgICAgICAgICAgICAgICBwb2ludHNbaSArIDFdICsgcG9zaXRpb25PZmZzZXQueVxyXG4gICAgICAgICAgICAgIF0pOyAvLyBjaHVua2lmeSBhbmQgb2Zmc2V0IHBvaW50cyBwb2ludHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiBDaGVja3MgaWYgYSBzaGFwZSBpcyBzZWxlY3RlZCBhbmQgcmV0dXJucyBCb29sZWFuICovXHJcbiAgICAgICAgICAgIHJldHVybiBjaGVja1NlbGVjdGlvbihcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBtaW46IG1pbixcclxuICAgICAgICAgICAgICAgIG1heDogbWF4XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB2ZXJ0aWNlcyxcclxuICAgICAgICAgICAgICBcInJlY3RhbmdsZVwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKC9saW5lKi8udGVzdChzaGFwZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSB4LnBvaW50cygpO1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25PZmZzZXQgPSB4LnBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgIC8vIGlnbm9yZSB0aGUgbGFzdCBwYWlyIHNpbmNlIGl0J3Mgc2ltaWxhciB0byB0aGUgZmlyc3QgcGFpclxyXG4gICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goW1xyXG4gICAgICAgICAgICAgICAgcG9pbnRzW2ldICsgcG9zaXRpb25PZmZzZXQueCxcclxuICAgICAgICAgICAgICAgIHBvaW50c1tpICsgMV0gKyBwb3NpdGlvbk9mZnNldC55XHJcbiAgICAgICAgICAgICAgXSk7IC8vIGNodW5raWZ5IGFuZCBvZmZzZXQgcG9pbnRzIHBvaW50c1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qIENoZWNrcyBpZiBhIHNoYXBlIGlzIHNlbGVjdGVkIGFuZCByZXR1cm5zIEJvb2xlYW4gKi9cclxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrU2VsZWN0aW9uKFxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1pbjogbWluLFxyXG4gICAgICAgICAgICAgICAgbWF4OiBtYXhcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHZlcnRpY2VzLFxyXG4gICAgICAgICAgICAgIFwicmVjdGFuZ2xlXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoL0VsbGlwc2UqLy50ZXN0KHNoYXBlTmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrU2VsZWN0aW9uKFxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1pbjogbWluLFxyXG4gICAgICAgICAgICAgICAgbWF4OiBtYXhcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHgucG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICBcImVsbGlwc2VcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogcmV0dXJuIG9ubHkgbmFtZXMgb2YgdGhvc2Ugc2hhcGVzICovXHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkU2hhcGVzO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgY2hlY2tTZWxlY3Rpb246IGZ1bmN0aW9uKHJhbmdlLCBwcm9wLCB0eXBlKSB7XHJcbiAgICAgICAgLyogU2VsZWN0aW9uIGxvZ2ljIGZvciByZWN0YW5nbGUgKi9cclxuICAgICAgICBpZiAodHlwZSA9PT0gXCJyZWN0YW5nbGVcIikge1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICBwcm9wW2ldWzBdID49IHJhbmdlLm1pbi54ICYmXHJcbiAgICAgICAgICAgICAgcHJvcFtpXVswXSA8PSByYW5nZS5tYXgueCAmJiAvLyB4IC0gYXhpc1xyXG4gICAgICAgICAgICAgIChwcm9wW2ldWzFdID49IHJhbmdlLm1pbi55ICYmIHByb3BbaV1bMV0gPD0gcmFuZ2UubWF4LnkpIC8vIHkgLSBheGlzXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIFNlbGVjdGlvbiBsb2dpYyBmb3IgZWxsaXBzZSAqL1xyXG4gICAgICAgIGlmICh0eXBlID09PSBcImVsbGlwc2VcIikge1xyXG4gICAgICAgICAgLy8gQ29tcGFyaW5nIHdpdGggY2VudGVyIHBvc2l0aW9uc1xyXG4gICAgICAgICAgcmV0dXJuIHByb3AueCA+PSByYW5nZS5taW4ueCAmJlxyXG4gICAgICAgICAgcHJvcC54IDw9IHJhbmdlLm1heC54ICYmIC8vIHggLSBheGlzXHJcbiAgICAgICAgICAgIChwcm9wLnkgPj0gcmFuZ2UubWluLnkgJiYgcHJvcC55IDw9IHJhbmdlLm1heC55KSAvLyAtYXhpc1xyXG4gICAgICAgICAgICA/IHRydWVcclxuICAgICAgICAgICAgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZhY3RvcnkoXCJ0b29sc1ZQRmFjdG9yeVwiLCB0b29sc1ZQRmFjdG9yeSk7XHJcblxyXG4gIC8qKiBAbmdJbmplY3QgKi9cclxuICBmdW5jdGlvbiB0b29sc1ZQRmFjdG9yeSgkcm9vdFNjb3BlLCBldmVudHNWUEZhY3RvcnkpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8vIFJldHVybnMgYXJlYSBvZiBwb2x5Z29uXHJcbiAgICAgIC8qIFxyXG4gICAgICAgIEBwYXJhbSBwb2ludHMgPSBBcnJheSwgc2NhbGUgPSBOdW1iZXJcclxuICAgICAgICBAcmV0dXJuIE51bWJlclxyXG4gICAgICAqL1xyXG4gICAgICBwb2x5Z29uQXJlYTogZnVuY3Rpb24ocG9pbnRzLCBzY2FsZSkge1xyXG4gICAgICAgIHZhciBkZXQgPSAwO1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgdmFyIGNodW5rZWRBcnJheSA9IFtdO1xyXG4gICAgICAgIHZhciBjaHVuayA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoY2h1bmsubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICBjaHVuay5wdXNoKHBvaW50c1tpXSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaHVua2VkQXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgeDogY2h1bmtbMF0sXHJcbiAgICAgICAgICAgICAgeTogY2h1bmtbMV1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNodW5rID0gW107XHJcbiAgICAgICAgICAgIGNodW5rLnB1c2gocG9pbnRzW2ldKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGwgPSBjaHVua2VkQXJyYXkubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoY2h1bmtlZEFycmF5WzBdICE9IGNodW5rZWRBcnJheVtjaHVua2VkQXJyYXkubGVuZ3RoIC0gMV0pXHJcbiAgICAgICAgICBjaHVua2VkQXJyYXkgPSBjaHVua2VkQXJyYXkuY29uY2F0KGNodW5rZWRBcnJheVswXSk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKVxyXG4gICAgICAgICAgZGV0ICs9XHJcbiAgICAgICAgICAgIGNodW5rZWRBcnJheVtpXS54ICogY2h1bmtlZEFycmF5W2kgKyAxXS55IC1cclxuICAgICAgICAgICAgY2h1bmtlZEFycmF5W2ldLnkgKiBjaHVua2VkQXJyYXlbaSArIDFdLng7XHJcblxyXG4gICAgICAgIGlmIChzY2FsZSkge1xyXG4gICAgICAgICAgcmVzdWx0ID0gKE1hdGguYWJzKGRldCkgLyAyKSAqIHNjYWxlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHQgPSBNYXRoLmFicyhkZXQpIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KHJlc3VsdCkudG9GaXhlZCgyKTtcclxuICAgICAgfSxcclxuICAgICAgLy8gQ2FsY3VsYXRlIGFyZWEgb2YgcmVjdGFuZ2xlXHJcblxyXG4gICAgICByZWN0YW5nbGVBcmVhOiBmdW5jdGlvbihoZWlnaHQsIHdpZHRoLCBzY2FsZSkge1xyXG4gICAgICAgIHZhciBhcmVhID0gaGVpZ2h0ICogd2lkdGggKiBzY2FsZTtcclxuICAgICAgICByZXR1cm4gYXJlYTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIFJldHVybiBhcmVhIG9mIGVsbGlwc2VcclxuICAgICAgZWxsaXBzZUFyZWE6IGZ1bmN0aW9uKHJhZGlpLCBzY2FsZSkge1xyXG4gICAgICAgIHZhciBhcmVhID0gTWF0aC5QSSAqIHJhZGlpLnggKiByYWRpaS55O1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBzY2FsZSA/IGFyZWEgKiBzY2FsZSA6IGFyZWE7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUZsb2F0KHJlc3VsdCkudG9GaXhlZCgyKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGVsbGlwc2VUcmFuc2ZvbWVyOiBmdW5jdGlvbihzdGFnZSwgbGF5ZXIsIGVsbGlwc2UpIHtcclxuICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcclxuICAgICAgICB2YXIgc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGdyb3VwID0gbmV3IEtvbnZhLkdyb3VwKHtcclxuICAgICAgICAgIG5hbWU6IFwidHJhbnNmb3JtZXJzXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihyYWRpdXMpIHtcclxuICAgICAgICAgICAgdmFyIGVsbGlwc2VQb3NpdGlvbiA9IGVsbGlwc2UucG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdmVydGljZXMucHVzaChcclxuICAgICAgICAgICAgICBbZWxsaXBzZVBvc2l0aW9uLnggLSByYWRpdXMueCwgZWxsaXBzZVBvc2l0aW9uLnldLFxyXG4gICAgICAgICAgICAgIFtlbGxpcHNlUG9zaXRpb24ueCArIHJhZGl1cy54LCBlbGxpcHNlUG9zaXRpb24ueV0sXHJcbiAgICAgICAgICAgICAgW2VsbGlwc2VQb3NpdGlvbi54LCBlbGxpcHNlUG9zaXRpb24ueSArIHJhZGl1cy55XSxcclxuICAgICAgICAgICAgICBbZWxsaXBzZVBvc2l0aW9uLngsIGVsbGlwc2VQb3NpdGlvbi55IC0gcmFkaXVzLnldXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHZhciBpbmMgPSAwO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godmVydGljZXMsIGZ1bmN0aW9uKHgsICRpbmRleCkge1xyXG4gICAgICAgICAgICAgIHZhciBjaXJjbGUgPSBuZXcgS29udmEuQ2lyY2xlKHtcclxuICAgICAgICAgICAgICAgIHg6IHhbMF0sXHJcbiAgICAgICAgICAgICAgICB5OiB4WzFdLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA1IC8gbGF5ZXIuc2NhbGVYKCksXHJcbiAgICAgICAgICAgICAgICBuYW1lOlxyXG4gICAgICAgICAgICAgICAgICAoJGluZGV4ICsgaW5jKS50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgICAoJGluZGV4ICsgaW5jICsgMSkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIC8qIEFzc2lnbiBuYW1lcyBhcyBjby1vcmRpbmF0ZXMgKi9cclxuICAgICAgICAgICAgICAgIGZpbGw6IFwid2hpdGVcIixcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogXCJibGFja1wiLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDMgLyBsYXllci5zY2FsZVgoKSxcclxuICAgICAgICAgICAgICAgIGRyYWdCb3VuZEZ1bmM6IGZ1bmN0aW9uKHBvcykge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6ICRpbmRleCA+IDEgPyB0aGlzLmdldEFic29sdXRlUG9zaXRpb24oKS54IDogcG9zLngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogJGluZGV4IDw9IDEgPyB0aGlzLmdldEFic29sdXRlUG9zaXRpb24oKS55IDogcG9zLnlcclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWVcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBpbmMrKztcclxuICAgICAgICAgICAgICB2YXIgY2lyY2xlRXZlbnQgPSBldmVudHNWUEZhY3Rvcnkuc2hhcGVFdmVudHMoY2lyY2xlKTtcclxuICAgICAgICAgICAgICBjaXJjbGVFdmVudC5yZWdpc3RlcihcImRyYWdtb3ZlLnRyYW5zZm9ybWVyXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzUmFkaXVzID0gZWxsaXBzZS5yYWRpdXMoKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFZlcnRleCA9IGNpcmNsZS5uYW1lKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNOZWdhdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzZWxlY3RlZFZlcnRleCkge1xyXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiMCwxXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNOZWdhdGl2ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICBlbGxpcHNlLnBvc2l0aW9uKCkueCAtIGNpcmNsZS54KCkgPCAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsbGlwc2UucmFkaXVzKHtcclxuICAgICAgICAgICAgICAgICAgICAgIHg6IE1hdGguYWJzKGVsbGlwc2UucG9zaXRpb24oKS54IC0gY2lyY2xlLngoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICB5OiBwcmV2aW91c1JhZGl1cy55XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLmNoaWxkcmVuLCBmdW5jdGlvbih6KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoei5uYW1lKCkgPT09IFwiMiwzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05lZ2F0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei54KGVsbGlwc2UucG9zaXRpb24oKS54ICsgZWxsaXBzZS5yYWRpdXMoKS54KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB6LngoZWxsaXBzZS5wb3NpdGlvbigpLnggLSBlbGxpcHNlLnJhZGl1cygpLngpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCIyLDNcIjpcclxuICAgICAgICAgICAgICAgICAgICBpc05lZ2F0aXZlID1cclxuICAgICAgICAgICAgICAgICAgICAgIGVsbGlwc2UucG9zaXRpb24oKS54IC0gY2lyY2xlLngoKSA8IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxsaXBzZS5yYWRpdXMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgeDogTWF0aC5hYnMoZWxsaXBzZS5wb3NpdGlvbigpLnggLSBjaXJjbGUueCgpKSxcclxuICAgICAgICAgICAgICAgICAgICAgIHk6IHByZXZpb3VzUmFkaXVzLnlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuY2hpbGRyZW4sIGZ1bmN0aW9uKHopIHtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmICh6Lm5hbWUoKSA9PT0gXCIwLDFcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmVnYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB6LngoZWxsaXBzZS5wb3NpdGlvbigpLnggKyBlbGxpcHNlLnJhZGl1cygpLngpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHoueChlbGxpcHNlLnBvc2l0aW9uKCkueCAtIGVsbGlwc2UucmFkaXVzKCkueCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgY2FzZSBcIjQsNVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzTmVnYXRpdmUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgZWxsaXBzZS5wb3NpdGlvbigpLnkgLSBjaXJjbGUueSgpIDwgMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBlbGxpcHNlLnJhZGl1cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICB4OiBwcmV2aW91c1JhZGl1cy54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgeTogTWF0aC5hYnMoZWxsaXBzZS5wb3NpdGlvbigpLnkgLSBjaXJjbGUueSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChncm91cC5jaGlsZHJlbiwgZnVuY3Rpb24oeikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjYsN1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOZWdhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHoueShlbGxpcHNlLnBvc2l0aW9uKCkueSArIGVsbGlwc2UucmFkaXVzKCkueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei55KGVsbGlwc2UucG9zaXRpb24oKS55IC0gZWxsaXBzZS5yYWRpdXMoKS55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICBjYXNlIFwiNiw3XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNOZWdhdGl2ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICBlbGxpcHNlLnBvc2l0aW9uKCkueSAtIGNpcmNsZS55KCkgPCAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsbGlwc2UucmFkaXVzKHtcclxuICAgICAgICAgICAgICAgICAgICAgIHg6IHByZXZpb3VzUmFkaXVzLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLmFicyhlbGxpcHNlLnBvc2l0aW9uKCkueSAtIGNpcmNsZS55KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLmNoaWxkcmVuLCBmdW5jdGlvbih6KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoei5uYW1lKCkgPT09IFwiNCw1XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05lZ2F0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei55KGVsbGlwc2UucG9zaXRpb24oKS55ICsgZWxsaXBzZS5yYWRpdXMoKS55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB6LnkoZWxsaXBzZS5wb3NpdGlvbigpLnkgLSBlbGxpcHNlLnJhZGl1cygpLnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsYXllci5kcmF3KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxsaXBzZS5maXJlKFwidHJhbnNmb3JtRWxsaXBzZVwiKTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgLyogU2NhbGUgdHJhbnNmb21lciBiYXNlZCBvbiB6b29tICovXHJcblxyXG4gICAgICAgICAgICAgIGNpcmNsZUV2ZW50LnJlZ2lzdGVyKFwic2NhbGVPblpvb21cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQucmFkaXVzKDUgLyBsYXllci5zY2FsZVgoKSk7XHJcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHJva2VXaWR0aCgzIC8gbGF5ZXIuc2NhbGVYKCkpO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICBjaXJjbGVFdmVudC5yZWdpc3RlcihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcIm1vdmVcIjtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBjaXJjbGVFdmVudC5yZWdpc3RlcihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBncm91cC5hZGQoY2lyY2xlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGVsbGlwc2UuZmlyZShcInRyYW5zZm9ybUVsbGlwc2VcIik7XHJcblxyXG4gICAgICAgICAgICBzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBsYXllci5hZGQoZ3JvdXApO1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XHJcbiAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgIGdldEdyb3VwOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBncm91cC5kZXN0cm95KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qIEN1c3RvbSB0cmFuc2Zvcm1lciBmb3IgcG9seWdvbiAqL1xyXG4gICAgICBjdXN0b21UcmFuc2Zvcm1lcjogZnVuY3Rpb24oc3RhZ2UsIGxheWVyLCBwb2x5Z29uLCBpc1JlY3RhbmdsZSkge1xyXG4gICAgICAgIC8qIENoYW5nZSB0cmFuc2Zvcm1lciBiZWhhdmlvdXMgYmFzZWQgb24gaXNSZWN0YW5nbGUgcGFyYW1ldGVyICovXHJcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gW107XHJcbiAgICAgICAgdmFyIHNldCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBncm91cCA9IG5ldyBLb252YS5Hcm91cCh7XHJcbiAgICAgICAgICBuYW1lOiBcInRyYW5zZm9ybWVyc1wiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHBvbHlnb24gPSBwb2x5Z29uO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAvLyBtZXRob2QgdG8gc2V0IHRoZSBwb2ludHNcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24ocG9pbnRzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDI7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgIC8vIGlnbm9yZSB0aGUgbGFzdCBwYWlyIHNpbmNlIGl0J3Mgc2ltaWxhciB0byB0aGUgZmlyc3QgcGFpclxyXG4gICAgICAgICAgICAgIHZlcnRpY2VzLnB1c2goW3BvaW50c1tpXSwgcG9pbnRzW2kgKyAxXV0pOyAvLyBjaHVua2lmeSBwb2ludHNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyogQ291bnRlciB0byBnZW5lcmF0ZSBjaXJjbGUgbmFtZXMgdG8gbWFwIHRoZW0gd2l0aCBjby1vcmRpbmF0ZXMgKi9cclxuICAgICAgICAgICAgdmFyIGluYyA9IDA7XHJcblxyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godmVydGljZXMsIGZ1bmN0aW9uKHgsICRpbmRleCkge1xyXG4gICAgICAgICAgICAgIHZhciBjaXJjbGUgPSBuZXcgS29udmEuQ2lyY2xlKHtcclxuICAgICAgICAgICAgICAgIHg6IHhbMF0sXHJcbiAgICAgICAgICAgICAgICB5OiB4WzFdLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiA1IC8gbGF5ZXIuc2NhbGVYKCksXHJcbiAgICAgICAgICAgICAgICBuYW1lOlxyXG4gICAgICAgICAgICAgICAgICAoJGluZGV4ICsgaW5jKS50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgICAgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgICAoJGluZGV4ICsgaW5jICsgMSkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgIC8qIEFzc2lnbiBuYW1lcyBhcyBjby1vcmRpbmF0ZXMgKi9cclxuICAgICAgICAgICAgICAgIGZpbGw6IFwid2hpdGVcIixcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogXCJibGFja1wiLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDMgLyBsYXllci5zY2FsZVgoKSxcclxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIGluYysrO1xyXG5cclxuICAgICAgICAgICAgICAvKiBSZWdpc3RlciBkcmFnbW92ZSBldmVudHMgZm9yIHRoZSB0cmFuc2Zvcm1lcidzIHZlcnRleCAqL1xyXG4gICAgICAgICAgICAgIHZhciBjaXJjbGVFdmVudCA9IGV2ZW50c1ZQRmFjdG9yeS5zaGFwZUV2ZW50cyhjaXJjbGUpO1xyXG4gICAgICAgICAgICAgIGNpcmNsZUV2ZW50LnJlZ2lzdGVyKFwiZHJhZ21vdmUudHJhbnNmb3JtZXJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVjdGFuZ2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8qIEJpbmQgb3RoZXIgdmVydGljZXMgZm9yIHJlY3RhbmdsZSAqL1xyXG4gICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRWZXJ0ZXggPSBjaXJjbGUubmFtZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgLyogRmluZCB4IGFuZCB5IGhpbmdlcyBiYXNlZCB1cG9uIGRpYWdvbmFsIGhpbmdlICovXHJcblxyXG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlbGVjdGVkVmVydGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIjAsMVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbMF0gPSBbY2lyY2xlLngoKSwgY2lyY2xlLnkoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1sxXVsxXSA9IGNpcmNsZS55KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1szXVswXSA9IGNpcmNsZS54KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuY2hpbGRyZW4sIGZ1bmN0aW9uKHopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogeCAtIGNpcmNsZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoei5uYW1lKCkgPT09IFwiNiw3XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB6LngoY2lyY2xlLngoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLyogeSAtIGNpcmNsZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoei5uYW1lKCkgPT09IFwiMiwzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB6LnkoY2lyY2xlLnkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCIyLDNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzWzFdID0gW2NpcmNsZS54KCksIGNpcmNsZS55KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbMF1bMV0gPSBjaXJjbGUueSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbMl1bMF0gPSBjaXJjbGUueCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLmNoaWxkcmVuLCBmdW5jdGlvbih6KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHggLSBjaXJjbGUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjQsNVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei54KGNpcmNsZS54KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHkgLSBjaXJjbGUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjAsMVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei55KGNpcmNsZS55KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI0LDVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzWzJdID0gW2NpcmNsZS54KCksIGNpcmNsZS55KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbM11bMV0gPSBjaXJjbGUueSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbMV1bMF0gPSBjaXJjbGUueCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLmNoaWxkcmVuLCBmdW5jdGlvbih6KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHggLSBjaXJjbGUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjIsM1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei54KGNpcmNsZS54KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHkgLSBjaXJjbGUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjYsN1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei55KGNpcmNsZS55KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI2LDdcIjpcclxuICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzWzNdID0gW2NpcmNsZS54KCksIGNpcmNsZS55KCldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbMl1bMV0gPSBjaXJjbGUueSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbMF1bMF0gPSBjaXJjbGUueCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLmNoaWxkcmVuLCBmdW5jdGlvbih6KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHggLSBjaXJjbGUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjAsMVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei54KGNpcmNsZS54KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHkgLSBjaXJjbGUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHoubmFtZSgpID09PSBcIjQsNVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgei55KGNpcmNsZS55KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAvKiBJZ25vcmUgb3RoZXIgY2lyY2xlcyBmb3IgcG9seWdvbiAqL1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZ3JvdXAuY2hpbGRyZW4sIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wLnB1c2goW3gueCgpLCB4LnkoKV0pO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgdmVydGljZXMgPSBhbmd1bGFyLmNvcHkodGVtcCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwb2x5Z29uLmZpcmUoXCJ0cmFuc2Zvcm1Qb2x5Z29uXCIpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAvKiBTY2FsZSB0cmFuc2ZvbWVyIGJhc2VkIG9uIHpvb20gKi9cclxuICAgICAgICAgICAgICBjaXJjbGVFdmVudC5yZWdpc3RlcihcInNjYWxlT25ab29tXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnJhZGl1cyg1IC8gbGF5ZXIuc2NhbGVYKCkpO1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuc3Ryb2tlV2lkdGgoMyAvIGxheWVyLnNjYWxlWCgpKTtcclxuICAgICAgICAgICAgICAgIGxheWVyLmRyYXcoKTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgY2lyY2xlRXZlbnQucmVnaXN0ZXIoXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJtb3ZlXCI7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgY2lyY2xlRXZlbnQucmVnaXN0ZXIoXCJtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgZ3JvdXAuYWRkKGNpcmNsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGF5ZXIuYWRkKGdyb3VwKTtcclxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIC8vIHVwZGF0ZSB0cmFuc2Zvcm1lciBwb3NpdGlvbiB3aGVuIHNoYXBlIGlzIG1vdmVkXHJcbiAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKG9mZnNldCkge1xyXG4gICAgICAgICAgICBncm91cC54KG9mZnNldC54KTtcclxuICAgICAgICAgICAgZ3JvdXAueShvZmZzZXQueSk7XHJcbiAgICAgICAgICAgIGxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXRQb2ludHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmVydGljZXMucmVkdWNlKGZ1bmN0aW9uKGFjYywgeCwgaSkge1xyXG4gICAgICAgICAgICAgIGFjYy5wdXNoKHhbMF0sIHhbMV0pO1xyXG4gICAgICAgICAgICAgIGlmIChpID09PSB2ZXJ0aWNlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbmNsdWRlIHRoZSBzdGFydCB2ZXJ0ZXggdHdpY2UgdG8gY29tcGxldGUgdGhlIHBvbHlnb25cclxuICAgICAgICAgICAgICAgIGFjYy5wdXNoKHZlcnRpY2VzWzBdLCB2ZXJ0aWNlc1sxXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIFtdKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXRHcm91cDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBncm91cDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyogQmV6aWVyIFRyYW5zZm9ybWVyICovXHJcblxyXG4gICAgICBiZXppZXJUcmFuc2Zvcm1lcjogZnVuY3Rpb24oc3RhZ2UsIGxheWVyLCBiZXppZXIpIHtcclxuICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcclxuICAgICAgICB2YXIgc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGdyb3VwID0gbmV3IEtvbnZhLkdyb3VwKHtcclxuICAgICAgICAgIG5hbWU6IFwidHJhbnNmb3JtZXJzXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgYmV6aWVyID0gYmV6aWVyO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAvLyBtZXRob2QgdG8gc2V0IHRoZSBwb2ludHNcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24ocG9pbnRzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgdmVydGljZXMucHVzaChbcG9pbnRzW2ldLCBwb2ludHNbaSArIDFdXSk7IC8vIGNodW5raWZ5IHBvaW50c1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiBDb3VudGVyIHRvIGdlbmVyYXRlIGNpcmNsZSBuYW1lcyB0byBtYXAgdGhlbSB3aXRoIGNvLW9yZGluYXRlcyAqL1xyXG4gICAgICAgICAgICB2YXIgaW5jID0gMDtcclxuXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2ZXJ0aWNlcywgZnVuY3Rpb24oeCwgJGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNpcmNsZSA9IG5ldyBLb252YS5DaXJjbGUoe1xyXG4gICAgICAgICAgICAgICAgeDogeFswXSxcclxuICAgICAgICAgICAgICAgIHk6IHhbMV0sXHJcbiAgICAgICAgICAgICAgICByYWRpdXM6IDUgLyBsYXllci5zY2FsZVgoKSxcclxuICAgICAgICAgICAgICAgIG5hbWU6XHJcbiAgICAgICAgICAgICAgICAgICgkaW5kZXggKyBpbmMpLnRvU3RyaW5nKCkgK1xyXG4gICAgICAgICAgICAgICAgICBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAgICgkaW5kZXggKyBpbmMgKyAxKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgLyogQXNzaWduIG5hbWVzIGFzIGNvLW9yZGluYXRlcyAqL1xyXG4gICAgICAgICAgICAgICAgZmlsbDogXCJ3aGl0ZVwiLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogMyAvIGxheWVyLnNjYWxlWCgpLFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgaW5jKys7XHJcblxyXG4gICAgICAgICAgICAgIC8qIFJlZ2lzdGVyIGRyYWdtb3ZlIGV2ZW50cyBmb3IgdGhlIHRyYW5zZm9ybWVyJ3MgdmVydGV4ICovXHJcbiAgICAgICAgICAgICAgdmFyIGNpcmNsZUV2ZW50ID0gZXZlbnRzVlBGYWN0b3J5LnNoYXBlRXZlbnRzKGNpcmNsZSk7XHJcbiAgICAgICAgICAgICAgY2lyY2xlRXZlbnQucmVnaXN0ZXIoXCJkcmFnbW92ZS50cmFuc2Zvcm1lclwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGdyb3VwLmNoaWxkcmVuLCBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICAgICAgICAgIHRlbXAucHVzaChbeC54KCksIHgueSgpXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gYW5ndWxhci5jb3B5KHRlbXApO1xyXG4gICAgICAgICAgICAgICAgYmV6aWVyLmZpcmUoXCJ0cmFuc2Zvcm1CZXppZXJcIik7XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIC8qIFNjYWxlIHRyYW5zZm9tZXIgYmFzZWQgb24gem9vbSAqL1xyXG4gICAgICAgICAgICAgIGNpcmNsZUV2ZW50LnJlZ2lzdGVyKFwic2NhbGVPblpvb21cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQucmFkaXVzKDUgLyBsYXllci5zY2FsZVgoKSk7XHJcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5zdHJva2VXaWR0aCgzIC8gbGF5ZXIuc2NhbGVYKCkpO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICBjaXJjbGVFdmVudC5yZWdpc3RlcihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcIm1vdmVcIjtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBjaXJjbGVFdmVudC5yZWdpc3RlcihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBncm91cC5hZGQoY2lyY2xlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICBsYXllci5hZGQoZ3JvdXApO1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXA7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgLy8gdXBkYXRlIHRyYW5zZm9ybWVyIHBvc2l0aW9uIHdoZW4gc2hhcGUgaXMgbW92ZWRcclxuICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24ob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGdyb3VwLngob2Zmc2V0LngpO1xyXG4gICAgICAgICAgICBncm91cC55KG9mZnNldC55KTtcclxuICAgICAgICAgICAgbGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldFBvaW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2ZXJ0aWNlcy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCB4LCBpKSB7XHJcbiAgICAgICAgICAgICAgYWNjLnB1c2goeFswXSwgeFsxXSk7XHJcbiAgICAgICAgICAgICAgaWYgKGkgPT09IHZlcnRpY2VzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIGluY2x1ZGUgdGhlIHN0YXJ0IHZlcnRleCB0d2ljZSB0byBjb21wbGV0ZSB0aGUgcG9seWdvblxyXG4gICAgICAgICAgICAgICAgYWNjLnB1c2godmVydGljZXNbMF0sIHZlcnRpY2VzWzFdKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwgW10pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldEdyb3VwOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdyb3VwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBmdW5jdGlvbiB0byBzY2FsZSB0cmFuc2Zvcm1lciBiYXNlZCBvbiB6b29tXHJcblxyXG4gICAgICBzY2FsZVRyYW5zZm9ybWVyQmFzZWRPblpvb206IGZ1bmN0aW9uKGJhc2VMYXllcikge1xyXG4gICAgICAgIHZhciB0cmFuc2Zvcm1lckdyb3VwID0gYmFzZUxheWVyLmZpbmQoXCIudHJhbnNmb3JtZXJzXCIpO1xyXG4gICAgICAgIGlmICh0cmFuc2Zvcm1lckdyb3VwLmxlbmd0aCkge1xyXG4gICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRyYW5zZm9ybWVyR3JvdXBbMF0uZ2V0Q2hpbGRyZW4oKSwgZnVuY3Rpb24oY2hpbGQpIHtcclxuICAgICAgICAgICAgY2hpbGQuZmlyZShcInNjYWxlT25ab29tXCIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgbWV0cmljczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNoYXBlSW5mbztcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNldFNoYXBlSW5mbzogZnVuY3Rpb24oaW5mbykge1xyXG4gICAgICAgICAgICBzaGFwZUluZm8gPSBpbmZvO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGdldFNoYXBlSW5mbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaGFwZUluZm87XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNvbG9yUGlja2VyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcHJvcHMgPSB7XHJcbiAgICAgICAgICBzdHJva2U6IFwiYmxhY2tcIixcclxuICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICBmaWxsOiBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMClcIixcclxuICAgICAgICAgIHN0cm9rZVdpZHRoOiAxXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICAgIHByb3BzID0gT2JqZWN0LmFzc2lnbihwcm9wcywgb2JqKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHByb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb3AgPyBwcm9wc1twcm9wXSA6IHByb3BzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIl8zZERhc2hib2FyZEN0cmxcIiwgXzNkRGFzaGJvYXJkQ3RybCk7XHJcblxyXG4gICAgZnVuY3Rpb24gXzNkRGFzaGJvYXJkQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgbG9jYWxTdG9yYWdlU2VydmljZSxcclxuICAgIGdsb2JhbHMsXHJcbiAgICBOZ01hcFxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgICB2bS5sb2dnZWRJbiA9IHRydWVcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUsIHRocm90dGxlciB9ID0gZ2xvYmFscztcclxuXHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICB2bS5sb2dnZWRJbiA9IGZhbHNlXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiXzNkdmlld2VyQ3RybFwiLCBfM2R2aWV3ZXJDdHJsKTtcclxuXHJcbiAgICBmdW5jdGlvbiBfM2R2aWV3ZXJDdHJsKFxyXG4gICAgICAgICRzY29wZSxcclxuICAgICAgICAkdGltZW91dCxcclxuICAgICAgICBhdXRoRmFjdG9yeSxcclxuICAgICAgICAkc3RhdGUsXHJcbiAgICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgICBOb3RpZmljYXRpb24sXHJcbiAgICAgICAgTmdNYXAsXHJcbiAgICAgICAgZ2xvYmFscyxcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICApIHtcclxuICAgICAgICBsZXQgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICBjb25zdCB7IGxvZ291dCB9ID0gZ2xvYmFscztcclxuICAgIFxyXG4gICAgICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgXHJcblxyXG59KSgpOyIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImFkZEl0ZW1DdHJsXCIsIGFkZEl0ZW1DdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gYWRkSXRlbUN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBOZ01hcCxcclxuICAgIFVwbG9hZCxcclxuICAgIG1vbWVudCxcclxuICAgICRsb2NhdGlvblxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBkZWJvdW5jZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyh2bS51c2VyRGF0YSlcclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5hY3RpdmVDbGFzcyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiAoJGxvY2F0aW9uLnBhdGgoKSA9PT0gcGF0aCkgPyAnYWN0aXZlJyA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiYmlsbGluZ0FyY2hpdmVDdHJsXCIsIGJpbGxpbmdBcmNoaXZlQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIGJpbGxpbmdBcmNoaXZlQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgJGxvY2F0aW9uLFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFsc1xyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlIH0gPSBnbG9iYWxzO1xyXG4gICAgaWYgKCFhdXRoRmFjdG9yeS5jaGVja1VzZXIoKSkge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEdldCBwcm9qZWN0IGxpc3QgKi9cclxuICAgIHZtLnVzZXJEYXRhID0gdXNlclN0b3JlLmdldCgpO1xyXG4gICAgdm0ubG9nb3V0ID0gKCkgPT4geyBsb2dvdXQoKTsgfTtcclxuXHJcblxyXG4gICAgdmFyIHVybCA9ICRsb2NhdGlvbi5wYXRoKCk7XHJcbiAgICBcclxuICAgIGlmICh1cmwgPT0gJy9wYXlyb2xsJykge1xyXG4gICAgICAkKCcucGF5cm9sbE1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2sgIWltcG9ydGFudCcpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgICQoJy5wYXlyb2xsTGlzdCcpLkRhdGFUYWJsZSgpO1xyXG4gICAgXHJcbiAgICBcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImNhbGN1bGF0aW9uQ3RybFwiLCBjYWxjdWxhdGlvbkN0cmwpO1xyXG5cclxuICBmdW5jdGlvbiBjYWxjdWxhdGlvbkN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgICRsb2NhdGlvbixcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHNcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgICRzY29wZS5pc0VkaXQ9ZmFsc2U7XHJcblxyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7IGxvZ291dCgpOyB9O1xyXG4gICAgJHNjb3BlLm91dGVySW5kZXg9MDtcclxuICAgICRzY29wZS5pbm5lckluZGV4PTA7XHJcbiAgICAkc2NvcGUub3V0SW5uPTA7XHJcbiAgICAkc2NvcGUudGFibGVJbnZlbnRvcnk9W107XHJcbiAgICAkc2NvcGUuSW52ZW50b3J5ID0gW107XHJcbiAgICAkc2NvcGUubWF0ZXJpYWxMaXN0ID0gW107XHJcbiAgICAkc2NvcGUuZW50aXR5VHlwZSA9IDE7XHJcbiAgICBhcGlGYWN0b3J5XHJcbiAgICAgIC5saXN0QWxsTWF0ZXJpYWxzKClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgJHNjb3BlLm1hdGVyaWFsTGlzdCA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICRzY29wZS5zZWxlY3RlZE1hdGVyaWFsID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXRlcmlhbExpc3RbMF0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZSA9PiB7fSk7XHJcblxyXG4gICAgLy8gZ2V0IERDUCBMaXN0XHJcbiAgICAkc2NvcGUuZGNwTGlzdCA9IFtdO1xyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAubGlzdEFsbENvbWJvTWF0ZXJpYWxzKClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgJHNjb3BlLmRjcExpc3QgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge30pO1xyXG5cclxuICAgIC8vIGdldCBFcXVpb21lbnQgTGlzdFxyXG4gICAgJHNjb3BlLmVxdWlwbWVudExpc3QgPSBbXTtcclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmxpc3RBbGxFcXVpcG1lbnRzKClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgJHNjb3BlLmVxdWlwbWVudExpc3QgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge30pO1xyXG5cclxuICAgICAgJHNjb3BlLm1hdGVyaWFsU2VsZWN0aW9uID0gaXRlbSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkTWF0ZXJpYWwgPSBpdGVtO1xyXG4gICAgICAgIFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgJHNjb3BlLmFzc2lnbkludmVudG9yeT1mdW5jdGlvbigpe1xyXG4gICAgICAgICQoXCIjbG9hZEludmVudG9yaWVzXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAkKFwiI2FkZHF1YW50aXR5XCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgICBcclxuICAgICAgIC8vICRzY29wZS5JbnZlbnRvcnkucHVzaCgkc2NvcGUuc2VsZWN0ZWRNYXRlcmlhbCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAkc2NvcGUudXNlcnM9W3sgXHJcbiAgICAgICAgXCJKb2huXCI6W3tcInNhbGFyeVwiOlwiMTVLXCIsXCJ5ZWFyXCI6XCIyMDEzXCJ9LHtcInNhbGFyeVwiOlwiMjBLXCIsXCJ5ZWFyXCI6XCIyMDE0XCJ9XVxyXG4gICAgICAgfSx7XHJcbiAgICAgICAgXCJCZW5cIjpbe1wic2FsYXJ5XCI6XCIxN0tcIixcInllYXJcIjpcIjIwMTNcIn0se1wic2FsYXJ5XCI6XCIyMEtcIixcInllYXJcIjpcIjIwMTRcIn0se1wic2FsYXJ5XCI6XCIyNUtcIixcInllYXJcIjpcIjIwMTRcIn1dXHJcbiAgICAgICAgfV07XHJcblxyXG4gICAgICB2bS5hZGRRdWFudGl0eT1mdW5jdGlvbihxdWFudGl0eSl7XHJcbiAgICAgICAgJChcIiNhZGRxdWFudGl0eVwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICBcclxuICAgICAgJHNjb3BlLnNlbGVjdGVkTWF0ZXJpYWwuUXVhbnRpdHk9cXVhbnRpdHk7XHJcbiAgICAgICRzY29wZS5JbnZlbnRvcnlbJHNjb3BlLmlubmVySW5kZXhdPSRzY29wZS5zZWxlY3RlZE1hdGVyaWFsO1xyXG4gICAgICAkc2NvcGUudGFibGVJbnZlbnRvcnlbJHNjb3BlLm91dGVySW5kZXhdPSRzY29wZS5JbnZlbnRvcnk7XHJcbiAgICAgICAgJHNjb3BlLmlubmVySW5kZXg9JHNjb3BlLmlubmVySW5kZXgrMTtcclxuICAgICAgLy8gICRzY29wZS5vdXRJbm49JHNjb3BlLm91dElubisxO1xyXG4gICAgICAgICBjb25zb2xlLmxvZyhcImludmVudG9yeTogXCIsJHNjb3BlLkludmVudG9yeSk7XHJcbiAgICAgICAgIGNvbnNvbGUubG9nKFwidGFibGVpbnZlbnRvcnk6IFwiLCRzY29wZS50YWJsZUludmVudG9yeSk7XHJcbiAgICAgIC8vICAgY29uc29sZS5sb2coXCJpbmRleDogXCIsJHNjb3BlLmlubmVySW5kZXgpO1xyXG5cclxuICAgICAgfTtcclxuICAgICQoJy5wYXlyb2xsTGlzdCcpLkRhdGFUYWJsZSgpO1xyXG4gICBcclxuICAgXHJcbiAgICBcclxuICAkc2NvcGUuaGVhZGVycz1bXHJcbiAgICB7bmFtZTonTm8nfSxcclxuICAgIHtuYW1lOidNYXRlcmlhbCBOYW1lJ30sXHJcbiAgICB7bmFtZTonQWRkIG9uJ30sXHJcbiAgICB7bmFtZTonQWRkIG9uJ30sXHJcbiAgICB7bmFtZTonVW5pdCd9LFxyXG4gICAge25hbWU6J1F1YW5pdHknfSxcclxuICAgIHtuYW1lOidDb3N0J30sXHJcbiAgICB7bmFtZTonTWF0ZXJpYWxzIGNvc3QnfSxcclxuICAgIHtuYW1lOidUb3RhbCBjb3N0J30sXHJcbiAgICB7bmFtZTonUHJvZml0J30sXHJcbiAgICB7bmFtZTonJSd9LFxyXG4gICAge25hbWU6J1NhbGVzIHByaWNlJ30sXHJcbiAgICB7bmFtZTonTGFib3IgY29zdCd9LFxyXG4gICAge25hbWU6J0xhYm9yIHN1bSd9LFxyXG4gICAge25hbWU6J0FjdGlvbid9XHJcbiAgXVxyXG5cclxuICAkc2NvcGUuaXRlbXM9W1xyXG4gICAge25vOicxLjEnLGxvY2F0aW9uOidTYWZldHkgc3RhaXJjYXNlJyxhZG9uMTonJyxhZG9uMjonJyx1bml0Oidwc2MnLHF1YW50aXR5Oic0Jyxjb3N0Oic2LDUwMC4wMGtyJyxtX2Nvc3Q6JzYsNTAwLjAwa3InXHJcbiAgICAsdF9jb3N0Oic2LDUwMC4wMGtyJyxwcm9maXQ6JzYsNTAwLjAwa3InLHBlcmM6JzcwJScsc19wcmljZTonNiw1MDAuMDBrcicsbF9jb3N0Oic2LDUwMC4wMGtyJyxsX3N1bTonNiw1MDAuMDBrcid9LFxyXG4gICAge25vOicxLjInLGxvY2F0aW9uOidTZXR1cCBhbmQgQ2xlYXJzaXRlJyxhZG9uMTonJyxhZG9uMjonJyx1bml0OidtMicscXVhbnRpdHk6JzEwJyxjb3N0OiczLDUwMC4wMGtyJyxtX2Nvc3Q6JzMsNTAwLjAwa3InXHJcbiAgICAsdF9jb3N0OiczLDUwMC4wMGtyJyxwcm9maXQ6JzMsNTAwLjAwa3InLHBlcmM6JzgwJScsc19wcmljZTonMyw1MDAuMDBrcicsbF9jb3N0OiczLDUwMC4wMGtyJyxsX3N1bTonMyw1MDAuMDBrcid9LFxyXG4gICAge25vOicxLjMnLGxvY2F0aW9uOidTYWZldHknLGFkb24xOicnLGFkb24yOicnLHVuaXQ6J3BjcycscXVhbnRpdHk6JzQwMCcsY29zdDonMC4wMGtyJyxtX2Nvc3Q6JzAuMDBrcidcclxuICAgICx0X2Nvc3Q6JzAuMDBrcicscHJvZml0OicwLjAwa3InLHBlcmM6JzEwJScsc19wcmljZTonMC4wMGtyJyxsX2Nvc3Q6JzAuMDBrcicsbF9zdW06JzAuMDBrcid9LFxyXG4gICAge25vOicgJyxsb2NhdGlvbjonVG90YWwnLGFkb24xOicnLGFkb24yOicnLHVuaXQ6JyAnLHF1YW50aXR5OicgJyxjb3N0OiczLDUwMC4wMGtyJyxtX2Nvc3Q6JzMsNTAwLjAwa3InXHJcbiAgICAsdF9jb3N0OiczLDUwMC4wMGtyJyxwcm9maXQ6JzMsNTAwLjAwa3InLHBlcmM6JzgwJScsc19wcmljZTonMyw1MDAuMDBrcicsbF9jb3N0OiczLDUwMC4wMGtyJyxsX3N1bTonMyw1MDAuMDBrcid9XHJcbiAgXVxyXG5cclxuXHJcblxyXG5cclxuICAkc2NvcGUubWF0ZXJpYWxfZGNwPVtcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfSxcclxuICAgIHtpbWc6J2ltZy9kY3AtaW1nLnBuZycsdGl0bGU6J0RDUCBBQkMnLGRhdGU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxtX2Nvc3Q6J01BVEVSSUFMIENPU1QnLG1fcHJpY2U6JzIwMCBES0snLHdfY29zdDonV09SS0VSIENPU1QnLHdfcHJpY2U6JzIwMCBES0snLHJlZF90eHQ6J0RDUCAtIDEyMzQnfVxyXG4gIF1cclxuXHJcbiAgXHJcbiAgLy8gJHNjb3BlLmZ1bmN0aW9uY2FsbEJlZm9yZSA9IGZ1bmN0aW9uKCl7XHJcbiAgIFxyXG4gIC8vICAgJHNjb3BlLnRhYmxlSW52ZW50b3J5LnB1c2goJHNjb3BlLkludmVudG9yeSk7XHJcbiAgLy8gICBjb25zb2xlLmxvZygkc2NvcGUudGFibGVJbnZlbnRvcnkpO1xyXG4gICBcclxuICAvLyB9O1xyXG4gIC8vICRzY29wZS5mdW5jdGlvbmNhbGxCZWZvcmUoKTtcclxuICAkKCBkb2N1bWVudCApLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICQoJyNidXR0b25fbGVmdCcpLmhpZGUoKTtcclxuICAgIFxyXG59KTtcclxuICAkc2NvcGUubGVmdENsaWNrID0gZnVuY3Rpb24oKXtcclxuICAgIGlmKCQoJy5leGFtcGxlLW9uZS1oZWFkZXInKS5zY3JvbGxMZWZ0KCkgPD0gMTAwIClcclxuICAgIHskKCcjYnV0dG9uX2xlZnQnKS5oaWRlKCl9XHJcbiAgICAkKCcjYnV0dG9uX3JpZ2h0Jykuc2hvdygpO1xyXG4gICAgJCgnLmV4YW1wbGUtb25lLWhlYWRlcicpLmFuaW1hdGUoe1xyXG4gICAgICBzY3JvbGxMZWZ0OiBcIi09MTAwcHhcIlxyXG4gICAgfSwgXCJzbG93XCIpO1xyXG4gIH07XHJcbiAgJHNjb3BlLnJpZ2h0Q2xpY2sgPSBmdW5jdGlvbigpe1xyXG4gICAgaWYgKCQoJy5leGFtcGxlLW9uZS1oZWFkZXInKS5zY3JvbGxMZWZ0KCkgPj0gMjAwKVxyXG4gICAgeyQoXCIjYnV0dG9uX3JpZ2h0XCIpLmhpZGUoKX1cclxuICAkKCcjYnV0dG9uX2xlZnQnKS5zaG93KCk7IFxyXG4gICAgJCgnLmV4YW1wbGUtb25lLWhlYWRlcicpLmFuaW1hdGUoe1xyXG4gICAgICBzY3JvbGxMZWZ0OiBcIis9MTAwcHhcIlxyXG4gICAgfSwgXCJzbG93XCIpO1xyXG4gIH07XHJcblxyXG4gIHZtLmRlbGV0ZUludmVudG9yeT1mdW5jdGlvbihpbmRleCxhcnJheSl7XHJcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIH07XHJcblxyXG4gIHZtLmVkaXRJbnZlbnRvcnkgPSBmdW5jdGlvbihpbmRleCxpdGVtKXtcclxuICAgICRzY29wZS5pc0VkaXQ9dHJ1ZTtcclxuICAvLyAgJHNjb3BlLnVwZGF0ZVRvSW52ZW50b3J5PWl0ZW07XHJcbiAgLy8gICRzY29wZS5zZWxlY3RlZEluZGV4PWluZGV4O1xyXG4gIC8vICAgJChcIiN1cGRhdGVxdWFudGl0eVwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgfTtcclxuXHJcbiAgdm0udXBkYXRlUXVhbnRpdHk9ZnVuY3Rpb24ocXVhbnRpdHkpe1xyXG4gICAgJChcIiN1cGRhdGVxdWFudGl0eVwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmFkZFByb2plY3RQbGFuID0gZnVuY3Rpb24oKXtcclxuICAgLy8gJChcIiNjYWxjLXRhYmxlLWhlYWRlclwiKS5jbG9uZSgpLmFwcGVuZFRvKFwiI2NhbGMtdGFibGVcIik7XHJcbiAgICRzY29wZS5vdXRlckluZGV4PSRzY29wZS5vdXRlckluZGV4KzE7XHJcbiAgICRzY29wZS5pbm5lckluZGV4PTA7XHJcbiAgICRzY29wZS5JbnZlbnRvcnk9W107XHJcbiAgIGNvbnNvbGUubG9nKFwib3V0aW5uXCIpO1xyXG4gIH1cclxuXHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJjYWxlbmRlckN0cmxcIiwgY2FsZW5kZXJDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gY2FsZW5kZXJDdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgICRzdGF0ZSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBnbG9iYWxzLFxyXG4gICAgTmdNYXAsXHJcbiAgICBVcGxvYWRcclxuICApIHtcclxuXHJcbiAgICAkc2NvcGUuaW52aXRlZXMgPSBbXHJcbiAgICAgICAgeyBpZDogJzEnLCBpbWc6ICcvYXNzZXRzL2ltYWdlcy91c2VyX3BpYzIucG5nJywgbmFtZTogJ0xpc2EgR3VlcnJlcm8nLCBsYjogdHJ1ZSwgJ3N0YXR1cyc6IGZhbHNlIH0sXHJcbiAgICAgICAgeyBpZDogJzInLCBpbWc6ICcvYXNzZXRzL2ltYWdlcy91c2VyX3BpYzMucG5nJywgbmFtZTogJ1BldGVyIEdyZWdvcicsIGxiOiBmYWxzZSwgJ3N0YXR1cyc6IGZhbHNlIH0sXHJcbiAgICAgICAgeyBpZDogJzMnLCBpbWc6ICcvYXNzZXRzL2ltYWdlcy91c2VyX3BpYzIucG5nJywgbmFtZTogJ0xpc2EgR3VlcnJlcm8nLCBsYjogZmFsc2UsICdzdGF0dXMnOiBmYWxzZSB9LFxyXG4gICAgICAgIHsgaWQ6ICc0JywgaW1nOiAnL2Fzc2V0cy9pbWFnZXMvdXNlcl9waWMzLnBuZycsIG5hbWU6ICdQZXRlciBHcmVnb3InLCBsYjogZmFsc2UsICdzdGF0dXMnOiBmYWxzZSB9XHJcbiAgICBdXHJcbiAgICBcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgICBsb2dvdXQoKTtcclxuICAgIH07XHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICB2bS50YWJDaGFuZ2UgPSAodmFsKSA9PiB7XHJcbiAgICAgICQoXCIuZXZlbnRtb2RhbCAubmF2LXRhYnMgbGkgLm5hdi1saW5rXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAkKFwiLmV2ZW50bW9kYWwgLm5hdi10YWJzIGxpIC5uYXYtbGlua1wiKS5lcSh2YWwpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgJChcIi5ldmVudG1vZGFsIC50YWItY29udGVudCAudGFiLXBhbmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICQoXCIuZXZlbnRtb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgJChcIi5ldmVudG1vZGFsIC50YWItY29udGVudCAudGFiLXBhbmVcIikuZXEodmFsKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICQoXCIuZXZlbnRtb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLmVxKHZhbCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdm0uZ21hcCA9IHtcclxuICAgICAgdXJsOiBcImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTNNSUEtbUtXcV82MHExSzB6T0hndXJheFQtMVFQeE5VJmxpYnJhcmllcz1wbGFjZXNcIixcclxuICAgICAgbWFya2VyczogW10sXHJcbiAgICAgIHN0eWxlczogW10sXHJcbiAgICAgIGNlbnRlcjogXCI0MSwtODdcIixcclxuICAgICAgem9vbTogM1xyXG4gICAgfTtcclxuICAgIGxldCBnT2JqTG9jYXRpb24gPSB7Y29vcmRpbmF0ZXM6W10sYWRkcmVzczonJ307XHJcblxyXG4gICAgdm0ucGxhY2VNYXJrZXIgPSBmdW5jdGlvbiAobWFwKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZ2V0UGxhY2UoKSlcclxuICAgICAgY29uc3QgcGxhY2VEYXRhID0gdGhpcy5nZXRQbGFjZSgpLmdlb21ldHJ5LmxvY2F0aW9uO1xyXG4gICAgICBjb25zb2xlLmxvZyhwbGFjZURhdGEpXHJcbiAgICAgIHZtLmdtYXAubWFya2VycyA9IFtcclxuICAgICAgICBbcGxhY2VEYXRhLmxhdCgpLCBwbGFjZURhdGEubG5nKCldXHJcbiAgICAgIF07XHJcbiAgICAgIHZtLmdtYXAuem9vbSA9IDE1O1xyXG4gICAgICB2bS5nbWFwLmNlbnRlciA9IGAke3BsYWNlRGF0YS5sYXQoKX0sJHtwbGFjZURhdGEubG5nKCl9YDtcclxuICAgICAvLyB2bS5ldmVudC5sb2NhdGlvbiA9ICBbcGxhY2VEYXRhLmxhdCgpLCBwbGFjZURhdGEubG5nKCldXHJcbiAgICAgIGdPYmpMb2NhdGlvbi5jb29yZGluYXRlcyAgPSBbcGxhY2VEYXRhLmxhdCgpLCBwbGFjZURhdGEubG5nKCldXHJcbiAgICAgIGdPYmpMb2NhdGlvbi5hZGRyZXNzID0gdGhpcy5nZXRQbGFjZSgpLmZvcm1hdHRlZF9hZGRyZXNzO1xyXG4gICAgICBjb25zb2xlLmxvZyhnT2JqTG9jYXRpb24pXHJcbiAgICB9O1xyXG4gICAgdm0uaW5wdXRJbWcgPSBbXTtcclxuICAgIHZtLnVwbG9hZEltZyA9IFtdO1xyXG4gICAgdm0uZXZlbnQ9e1xyXG4gICAgICAnbGlzdEFzc2V0cyc6W11cclxuICAgIH1cclxuICAgIHZtLmlucHV0RmlsZXMgPSBbXTtcclxuICAgIHZtLnVwbG9hZEZpbGVzID0gW107XHJcblxyXG4gICAgdm0uZmlsZVVwZGF0ZWQgPSAoZmlsZXMsIGV2ZW50LCBtb2RhbCkgPT4ge1xyXG4gICAgICBsZXQgZmlsZU9iaiA9IGV2ZW50LnRhcmdldC5maWxlcztcclxuICAgICAgY29uc29sZS5sb2coIHZtLmZpbGVOYW1lcylcclxuICAgICAgdm0uZmlsZU5hbWVzID0gT2JqZWN0LmtleXMoZmlsZU9iaikubWFwKHggPT4gZmlsZU9ialt4XS5uYW1lKTtcclxuICAgICAgY29uc29sZS5sb2coIHZtLmZpbGVOYW1lcylcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGZpbGVzLCBmdW5jdGlvbih4LCBpbmRleCkge1xyXG4gICAgICAgIHguZGVzY3JpcHRpb24gPSBcIlwiO1xyXG4gICAgICAgIGlmKG1vZGFsID09ICdpbWFnZScpIHtcclxuICAgICAgICAgIGlmKHZtLnVwbG9hZEltZy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB2bS51cGxvYWRJbWcucHVzaCh4KVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGR1cGxpY2F0ZUltZyA9IGZhbHNlXHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS51cGxvYWRJbWcsIGZ1bmN0aW9uICh5KSB7XHJcbiAgICAgICAgICAgICAgaWYoeC5uYW1lID09IHkubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZHVwbGljYXRlSW1nID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFkdXBsaWNhdGVJbWcpIHtcclxuICAgICAgICAgICAgICB2bS51cGxvYWRJbWcucHVzaCh4KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcignRmlsZSBuYW1lIGFscmVhZHkgZXhpc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZih2bS51cGxvYWRGaWxlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB2bS51cGxvYWRGaWxlcy5wdXNoKHgpXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgZHVwbGljYXRlSW1nID0gZmFsc2VcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLnVwbG9hZEZpbGVzLCBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgICAgICAgIGlmKHgubmFtZSA9PSB5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGR1cGxpY2F0ZUltZyA9IHRydWVcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghZHVwbGljYXRlSW1nKSB7XHJcbiAgICAgICAgICAgICAgdm0udXBsb2FkRmlsZXMucHVzaCh4KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcignRmlsZSBuYW1lIGFscmVhZHkgZXhpc3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIE5nTWFwLmdldE1hcCgpLnRoZW4obWFwID0+IHtcclxuICAgICAgdm0ubWFwID0gbWFwO1xyXG4gICAgICBtYXAuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgc3R5bGVzOiB2bS5nbWFwLnN0eWxlcyxcclxuICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiB0cnVlLFxyXG4gICAgICAgIHpvb21Db250cm9sOiB0cnVlLFxyXG4gICAgICAgIHpvb206IDEsXHJcbiAgICAgICAgY2VudGVyOiB7XHJcbiAgICAgICAgICBsYXQ6IDAsXHJcbiAgICAgICAgICBsbmc6IDBcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdm0udG9kYXlEYXRlID0gbW9tZW50KClcclxuICAgIHZtLmRhdGVGb3JtYXQgPSAnWVlZWS9NTS9ERCBoaDptbTpzcyc7XHJcbiAgICB2bS5yZXNldEZvcm0gPSAocmVzKT0+e1xyXG4gICAgICB2bS5ldmVudCA9IHt9O1xyXG4gICAgICB2bS51cGxvYWRJbWcgPSBbXTtcclxuICAgICAgdm0udXBsb2FkRmlsZXMgPSBbXTtcclxuICAgICAgdm0uZ2V0QWxsTWVtYmVyc0luQ3VycmVudENvbXBhbnkoKTtcclxuICAgIH1cclxuICAgIHZtLmNyZWF0ZU5ld0V2ZW50ID0gKGZvcm1EYXRhKSA9PiB7XHJcbiAgICAgICQoXCIjbmV3X2V2ZW50XCIpLm1vZGFsKFwiaGlkZVwiKTsgIFxyXG4gICAgICBsZXQgaW1nQW5kRmlsZXMgPSBbXS5jb25jYXQodm0udXBsb2FkSW1nLCB2bS51cGxvYWRGaWxlcyk7XHJcbiAgICAgIHZhciBkYXRhID0gZm9ybURhdGE7XHJcbiAgICAgIGRhdGEuZGF0ZSA9IG1vbWVudChkYXRhLmRhdGUpLmZvcm1hdCgnWVlZWS9NTS9ERCBoaDptbTpzcycpXHJcbiAgICAgIGRhdGEubG9jYXRpb24gPSBnT2JqTG9jYXRpb247XHJcbiAgICAgIGRhdGEubGlzdEFzc2V0cyA9ICBpbWdBbmRGaWxlcztcclxuICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgIGFwaUZhY3RvcnkuY3JlYXRlRXZlbnQoZGF0YSkudGhlbihyZXNwID0+IHsgICAgICAgICAgICAgICAgICBcclxuICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7ICAgXHJcbiAgICAgICAgcmV0dXJuIGFwaUZhY3RvcnkuZ2V0QWxsRXZlbnRzKClcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4obGlzdEFsbEV2ZW50c0RhdGEpXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKGVyci5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0udXBkYXRlRXZlbnQgPSAoZm9ybURhdGEpID0+IHtcclxuICAgICAgJChcIiNldmVudF9kZXRhaWxzXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgbGV0IGltZ0FuZEZpbGVzID0gW10uY29uY2F0KHZtLnVwbG9hZEltZywgdm0udXBsb2FkRmlsZXMpOyAgXHJcbiAgICAgIHZhciBkYXRhID0gZm9ybURhdGE7XHJcbiAgICAgIGRhdGEubG9jYXRpb24gPSBnT2JqTG9jYXRpb247XHJcbiAgICAgIGRhdGEubGlzdEFzc2V0cyA9IGltZ0FuZEZpbGVzO1xyXG5cclxuICAgICAgYXBpRmFjdG9yeS51cGRhdGVNeUV2ZW50KGRhdGEsZm9ybURhdGEuX2lkKS50aGVuKHJlc3AgPT4geyAgICAgICBcclxuICAgICAgICByZXR1cm4gYXBpRmFjdG9yeS5nZXRBbGxFdmVudHMoKVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihsaXN0QWxsRXZlbnRzRGF0YSlcclxuICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5kZWxldGVGaWxlID0gKGluZGV4VmFsLHR5cGUpID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXMuc3BsaWNlKGluZGV4VmFsLCAxKTtcclxuICAgICAgfVxyXG4gICAgICAvL3ZtLmV2ZW50Lmxpc3RBc3NldHMuc3BsaWNlKGluZGV4VmFsLCAxKVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5kZXNjcmlwdGlvblBvcG92ZXIgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgJHNjb3BlLmZpbGVUeXBlID0gdHlwZTtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGluZGV4VmFsO1xyXG4gICAgfTtcclxuICAgIGxldCBnQXJ5Q29tcGFueU1lbWJlcnMgPSBbXTtcclxuXHJcbiAgICBhcGlGYWN0b3J5LmdldEFsbEV2ZW50cygpXHJcbiAgICAudGhlbihsaXN0QWxsRXZlbnRzRGF0YSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBMaXN0IEFsbCBFdmVudHMgKi9cclxuICAgIGZ1bmN0aW9uIGxpc3RBbGxFdmVudHNEYXRhKHJlc3Ape1xyXG4gICAgICBsZXQgY2FsZW5kYXIgPSAkKCcjY2FsZW5kYXInKTtcclxuICAgICAgbGV0IGxBcnlFdmVudHNEYXRhID0gW11cclxuICAgICAgZm9yKGxldCB2IG9mIHJlc3AuZGF0YS5kYXRhKXtcclxuICAgICAgICBsQXJ5RXZlbnRzRGF0YS5wdXNoKHtcclxuICAgICAgICAgICd0aXRsZScgOiB2Lm5hbWUsXHJcbiAgICAgICAgICAgJ3N0YXJ0Jzp2LmRhdGUsXHJcbiAgICAgICAgICAnX2lkJzp2Ll9pZCxcclxuICAgICAgICAgICdhbGxEYXknOmZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZyhsQXJ5RXZlbnRzRGF0YSwgXCJsQXJ5RXZlbnRzRGF0YVwiKVxyXG4gICAgICB2YXIgYmdFdmVudCA9IHtcclxuICAgICAgICBpZDogLTEsXHJcbiAgICAgICAgc3RhcnQ6IG51bGwsXHJcbiAgICAgICAgZW5kOiBudWxsLFxyXG4gICAgICAgIHJlbmRlcmluZzogJ2JhY2tncm91bmQnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ29yYW5nZSdcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNhbGVuZGFyLmZ1bGxDYWxlbmRhcih7XHJcbiAgICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgICAgIGxlZnQ6ICdDYWxlbmRhcicsXHJcbiAgICAgICAgICAgIGNlbnRlcjogJ3RpdGxlLHByZXYsbmV4dCB0b2RheScsXHJcbiAgICAgICAgICAgIHJpZ2h0OiAnbW9udGgsYWdlbmRhV2VlayxhZ2VuZGFEYXksbGlzdFdlZWsnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBldmVudENsaWNrOiAoY2FsRXZlbnQsIGpzRXZlbnQsIHZpZXcpID0+IHtcclxuICAgICAgICAgIGxldCBnZXRSZXMgPSByZXNwLmRhdGEuZGF0YS5maWx0ZXIocmVzID0+IHJlcy5faWQgPT09IGNhbEV2ZW50Ll9pZCk7XHJcbiAgICAgICAgICB2bS5ldmVudCA9IGdldFJlc1swXTtcclxuICAgICAgICAgIHZtLmV2ZW50LnZpZXcgPSBtb21lbnQodm0uZXZlbnQuZGF0ZSkuZm9ybWF0KCdZWVlZL01NL0REIGhoOm1tOnNzJylcclxuICAgICAgICAgIHZtLmV2ZW50LmNvbXBhbnlNZW1iZXJzID0gZ0FyeUNvbXBhbnlNZW1iZXJzO1xyXG4gICAgICAgICAgdm0udG9kYXlEYXRlID0gdm0uZXZlbnQuZGF0ZTtcclxuICAgICAgICAgIHZtLnVwbG9hZEltZyA9IHZtLmV2ZW50Lmxpc3RBc3NldHMuaW1hZ2VzO1xyXG4gICAgICAgICAgdm0udXBsb2FkRmlsZXMgPSB2bS5ldmVudC5saXN0QXNzZXRzLmRvY3M7XHJcbiAgICAgICAgICB2bS5ldmVudC5sb2NhdGlvbiA9IHZtLmV2ZW50LmxvY2F0aW9uLmFkZHJlc3M7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2codm0uZXZlbnQpXHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uZXZlbnQubGlzdEFzc2V0cywgZnVuY3Rpb24gKHgsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHgpXHJcbiAgICAgICAgICAgIHguZGVzY3JpcHRpb24gPSAnJztcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAvLyB2bS5pbnB1dEZpbGVzID0gdm0uZXZlbnQubGlzdEFzc2V0cztcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZyh2bS5ldmVudCk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyggdm0uaW5wdXRGaWxlcyApO1xyXG4gICAgICAgICAgJCgnI2V2ZW50X2RldGFpbHMnKS5tb2RhbChcInNob3dcIilcclxuXHJcbiAgICAgICAgICAvKiBhcGlGYWN0b3J5LmdldEFsbEV2ZW50cyhjYWxFdmVudC5faWQpLnRoZW4ocmVzcCA9PiB7ICAgXHJcbiAgICAgICAgICAgIHZtLmV2ZW50ID0gcmVzcC5kYXRhLmRhdGE7XHJcbiAgICAgICAgICAgIHZtLmV2ZW50LmRhdGUgPSBtb21lbnQoIHZtLmV2ZW50LmRhdGUpLmZvcm1hdCgnWVlZWS9NTS9ERCcpXHJcbiAgICAgICAgICAgICQoJyNldmVudF9kZXRhaWxzJykubW9kYWwoXCJzaG93XCIpXHJcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICB9KTsgKi9cclxuICAgICAgXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBldmVudE1vdXNlb3ZlcjogZnVuY3Rpb24gKGV2ZW50LCBqc0V2ZW50LCB2aWV3KSB7XHJcbiAgICAgICAgLy8gICAgIC8vY29uc29sZS5sb2coJ2luJyk7XHJcbiAgICAgICAgLy8gICAgIGJnRXZlbnQuc3RhcnQgPSBldmVudC5zdGFydDtcclxuICAgICAgICAvLyAgICAgYmdFdmVudC5lbmQgPSBldmVudC5lbmQ7XHJcbiAgICAgICAgLy8gICAgIHZhciBldmVudHMgPSBjYWxlbmRhci5mdWxsQ2FsZW5kYXIoJ2NsaWVudEV2ZW50cycsIGJnRXZlbnQuaWQpO1xyXG4gICAgICAgIC8vICAgICBpZiAoZXZlbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIC8vICAgICAgICAgdmFyIGUgPSBldmVudHNbMF07XHJcbiAgICAgICAgLy8gICAgICAgICBjYWxlbmRhci5mdWxsQ2FsZW5kYXIoJ3VwZGF0ZUV2ZW50JywgZSk7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgICAgZWxzZVxyXG4gICAgICAgIC8vICAgICAgICAgY2FsZW5kYXIuZnVsbENhbGVuZGFyKCdyZW5kZXJFdmVudCcsIGJnRXZlbnQpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gZXZlbnRNb3VzZW91dDogZnVuY3Rpb24gKGV2ZW50LCBqc0V2ZW50LCB2aWV3KSB7XHJcbiAgICAgICAgLy8gICAgIC8vY29uc29sZS5sb2coJ291dCcpO1xyXG4gICAgICAgIC8vICAgICBjYWxlbmRhci5mdWxsQ2FsZW5kYXIoJ3JlbW92ZUV2ZW50cycsIGJnRXZlbnQuaWQpO1xyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgZGVmYXVsdERhdGU6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgLy9ldmVudExpbWl0OiB0cnVlLCAvLyBhbGxvdyBcIm1vcmVcIiBsaW5rIHdoZW4gdG9vIG1hbnkgZXZlbnRzXHJcbiAgICAgICAgZXZlbnRzOiBsQXJ5RXZlbnRzRGF0YVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2bS5nZXRBbGxNZW1iZXJzSW5DdXJyZW50Q29tcGFueSA9KCk9PntcclxuICAgICAgYXBpRmFjdG9yeS5nZXRBbGxNZW1iZXJzSW5DdXJyZW50Q29tcGFueSh2bS51c2VyRGF0YS5jb21wYW55SWQpLnRoZW4oZGF0YTE9PntcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhMSlcclxuICAgICAgICBnQXJ5Q29tcGFueU1lbWJlcnMgPSBkYXRhMS5kYXRhLmRhdGE7XHJcbiAgICAgICAgdm0uZXZlbnQgPSAoISF2bS5ldmVudCkgPyB2bS5ldmVudCA6IHt9O1xyXG4gICAgICAgIHZtLmV2ZW50LmNvbXBhbnlNZW1iZXJzID0gZ0FyeUNvbXBhbnlNZW1iZXJzO1xyXG4gICAgICAgIHJldHVybiBkYXRhMS5kYXRhLmRhdGE7XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdm0uZ2V0QWxsTWVtYmVyc0luQ3VycmVudENvbXBhbnkoKTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiY2xpZW50c0N0cmxcIiwgY2xpZW50c0N0cmwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsaWVudHNDdHJsKFxyXG4gICAgICAgICRzY29wZSxcclxuICAgICAgICAkdGltZW91dCxcclxuICAgICAgICBhdXRoRmFjdG9yeSxcclxuICAgICAgICAkc3RhdGUsXHJcbiAgICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgICBOb3RpZmljYXRpb24sXHJcbiAgICAgICAgTmdNYXAsXHJcbiAgICAgICAgZ2xvYmFscyxcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICApIHtcclxuICAgICAgICBsZXQgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICBjb25zdCB7IGxvZ291dCxkZWJvdW5jZSAsdXNlclN0b3JlfSA9IGdsb2JhbHM7XHJcbiAgICBcclxuICAgICAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICBcclxuICAgICAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgICAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICBcclxuICAgICAgICAkc2NvcGUuJHdhdGNoKCd2bS5jbGllbnREYXRhLmNsaWVudENvbnRhY3QuZGlhbENvZGUnLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICQoJ2EuaXRlbS1zZWxlY3RlZCBzcGFuJykucmVtb3ZlQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlJylcclxuICAgICAgICAgICQoJ2EuaXRlbS1zZWxlY3RlZCBzcGFuJykuYWRkQ2xhc3MoJ2ZhcyBmYS10aW1lcyBtci0zJylcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChcIi5jbGllbnRzTGlzdFwiKS5EYXRhVGFibGUoKTtcclxuICAgICAgICAkc2NvcGUuYWN0aXZlSnVzdGlmaWVkID0gMDtcclxuXHJcbiAgICAgICAgdm0uY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgXHJcbiAgICAgICAgdm0udG9nZ2xlT2JqID0ge1xyXG4gICAgICAgICAgdG9nZ2xlQ2xpZW50OiB7XHJcbiAgICAgICAgICAgIGNsaWVudE5hbWU6IGZhbHNlLFxyXG4gICAgICAgICAgICBwaG9uZU5vOiBmYWxzZSxcclxuICAgICAgICAgICAgZW1haWw6IGZhbHNlLFxyXG4gICAgICAgICAgICBwcmltYXJ5QWRkOiBmYWxzZSxcclxuICAgICAgICAgICAgY3JlYXRlZDogdHJ1ZSxcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNlYXJjaFRleHQgPSBcIlwiO1xyXG4gICAgICAgIHZtLnNvcnRjbGllbnRzID0gKHR5cGUsIHJlc291cmNlKSA9PiB7XHJcbiAgICAgICAgICAvKiBGb3IgdG9nZ2xpbmcgYXNjZW5kaW5nIGFuZCBkZXNjZW5kaW5nIG9yZGVyICovXHJcbiAgICAgICAgICB2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdID09PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyAodm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9IHRydWUpXHJcbiAgICAgICAgICAgIDogKHZtLnRvZ2dsZU9ialtyZXNvdXJjZV1bdHlwZV0gPSAhdm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAubGlzdEFsbENsaWVudHMoe1xyXG4gICAgICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICAgICAgY2h1bms6IDEwLFxyXG4gICAgICAgICAgICAgIHNvcnQ6IHR5cGUsXHJcbiAgICAgICAgICAgICAgc2VhcmNoOiB2bS5zZWFyY2hUZXh0LFxyXG4gICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICB2bS5hbGxDbGllbnRzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgdm0uY2xpZW50Q291bnQgPSByZXNwLmRhdGEudG90YWw7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICQoXCIjcGFnaW5hdGlvblwiKS5wYWdpbmF0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgaXRlbXM6IHZtLmNsaWVudENvdW50LFxyXG4gICAgICAgICAgICAgICAgICBpdGVtc09uUGFnZTogMTAsXHJcbiAgICAgICAgICAgICAgICAgIGNzc1N0eWxlOiBcImxpZ2h0LXRoZW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgIGhyZWZUZXh0UHJlZml4OiBcIiNcIixcclxuICAgICAgICAgICAgICAgICAgb3JkZXJpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgb25QYWdlQ2xpY2s6IGZ1bmN0aW9uKHBhZ2UsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgICAgICAgICAgICAubGlzdEFsbENsaWVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnQ6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbdHlwZV1cclxuICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYWxsQ2xpZW50cyA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5zZWFyY2hUZXh0ID0gXCJcIjtcclxuICAgICAgICBjb25zdCBzZWFyY2hEZWJvdW5jZSA9IGRlYm91bmNlKDI1MCk7IC8qIFBhc3NpbmcgaW4gdGhlIGRlYm91bmNlIHJhdGUgKi9cclxuICAgICAgICB2bS5zZWFyY2hDbGllbnRzID0gdGV4dCA9PiB7XHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gcGFzcyB0aGUgZnVuY3Rpb24gd2hpY2ggeW91IHdhbnQgdG8gZGVib3VuY2VcclxuICAgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBwYXNzIHRoZSBhcmd1bWVudHMgZnJvbSB0aGUgdmlldyBhcyBhbiBhcnJheVxyXG4gICAgICAgICAgICovXHJcbiAgICAgICAgICBzZWFyY2hEZWJvdW5jZShcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgLmxpc3RBbGxDbGllbnRzKHtcclxuICAgICAgICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2g6IHRleHQsXHJcbiAgICAgICAgICAgICAgICBzb3J0OiBcImNyZWF0ZWRcIixcclxuICAgICAgICAgICAgICAgIHNvcnRUeXBlOiBmYWxzZVxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgdm0uYWxsQ2xpZW50cyA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgICAgICAgICB2bS5jbGllbnRDb3VudCA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIjcGFnaW5hdGlvblwiKS5wYWdpbmF0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB2bS5jbGllbnRDb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zT25QYWdlOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgIGNzc1N0eWxlOiBcImxpZ2h0LXRoZW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBocmVmVGV4dFByZWZpeDogXCIjXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICBvcmRlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgIG9uUGFnZUNsaWNrOiBmdW5jdGlvbihwYWdlLCBldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGlGYWN0b3J5Lmxpc3RBbGxDbGllbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5hbGxDbGllbnRzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBbdGV4dF1cclxuICAgICAgICAgICAgLy9bdGV4dCwgcmVzb3VyY2VdXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICAvKiBJbml0aWFsbHkgc29ydCBjbGllbnRzIGluIGRlc2NlbmRpbmcgb3JkZXIgKi9cclxuICAgICAgICAgIHZtLnNvcnRjbGllbnRzKFwiY3JlYXRlZFwiLCBcInRvZ2dsZUNsaWVudFwiKTtcclxuICAgICAgICB2bS5kdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHBhZ2luZzogZmFsc2UsXHJcbiAgICAgICAgICAgIGluZm86IGZhbHNlLFxyXG4gICAgICAgICAgICBvcmRlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgIHNlYXJjaGluZzogZmFsc2VcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgZ2xvYmFscy5nZXRDb3VudHJ5Q29kZSgpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgIHZtLmdldENvdW50cnlDb2RlID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICB2bS5sb2FkQ291bnRyeUNvZGUgPSAkcXVlcnkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3AuZGF0YSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGdsb2JhbHMuZ2V0SW5kdXN0cnkoKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICB2bS5nZXRJbmR1c3RyaWVzID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdm0ubG9hZEluZHVzdHJ5ID0gJHF1ZXJ5ID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwLmRhdGEpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBnbG9iYWxzLmdldEN1cnJlbmN5KCkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgdm0uZ2V0Q3VycmVuY2llcyA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZtLmxvYWRDdXJyZW5jeSA9ICRxdWVyeSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHZtLmFkZE5ld0NsaWVudD1mdW5jdGlvbih2YWxpZCxjbGllbnRkYXRhKXtcclxuICAgICAgICAgICAgdmFyIGNsaWVudD17fTtcclxuICAgICAgICAgICAgdmFyIGluZHVzdHJpZXM9W107XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgICBpZihjbGllbnRkYXRhPT09dW5kZWZpbmVkfHxjbGllbnRkYXRhPT09bnVsbCl7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJDYW5ub3Qgc2F2ZSBlbXB0eSByZWNvcmRcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEuY2xpZW50TmFtZT09PXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgZW50ZXIgbmFtZSBvZiBjbGllbnRcIik7XHJcbiAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQuY2xpZW50TmFtZT1jbGllbnRkYXRhLmNsaWVudE5hbWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEuY2xpZW50Q29udGFjdD09PXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgZW50ZXIgcGhvbmUgZGV0YWlsc1wiKTtcclxuICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGNsaWVudC5jbGllbnRDb250YWN0PXtcclxuICAgICAgICAgICAgICAgICAgZGlhbENvZGU6IGNsaWVudGRhdGEuY2xpZW50Q29udGFjdC5kaWFsQ29kZVswXS5kaWFsQ29kZSxcclxuICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IGNsaWVudGRhdGEuY2xpZW50Q29udGFjdC5waG9uZU51bWJlclxyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYoY2xpZW50ZGF0YS5kZXNjcmlwdGlvbiE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGNsaWVudC5kZXNjcmlwdGlvbiA9IGNsaWVudGRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEueWVhckZvdW5kZWQhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQueWVhckZvdW5kZWQgPSBjbGllbnRkYXRhLnllYXJGb3VuZGVkO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZihjbGllbnRkYXRhLmNsaWVudFdlYnNpdGUhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQuY2xpZW50V2Vic2l0ZSA9IGNsaWVudGRhdGEuY2xpZW50V2Vic2l0ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgaWYoY2xpZW50ZGF0YS5lbWFpbCE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGNsaWVudC5lbWFpbD1jbGllbnRkYXRhLmVtYWlsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEuaW5kdXN0cnkhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRkYXRhLmluZHVzdHJ5LmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGluZHVzdHJpZXMucHVzaChlbGVtZW50LnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQuaW5kdXN0cnk9aW5kdXN0cmllcztcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEuY2xpZW50Q29udGFjdFBlcnNvbiE9dW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEuY2xpZW50Q29udGFjdFBlcnNvbi5kaWFsQ29kZSl7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGlhbCBjb2RlIGV4aXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICBjbGllbnQuY2xpZW50Q29udGFjdFBlcnNvbj17XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBjbGllbnRkYXRhLmNsaWVudENvbnRhY3RQZXJzb24uZmlyc3ROYW1lLCBcclxuICAgICAgICAgICAgICAgICAgICBtaWRkbGVOYW1lOiBjbGllbnRkYXRhLmNsaWVudENvbnRhY3RQZXJzb24ubWlkZGxlTmFtZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWU6Y2xpZW50ZGF0YS5jbGllbnRDb250YWN0UGVyc29uLmxhc3ROYW1lLCBcclxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogY2xpZW50ZGF0YS5jbGllbnRDb250YWN0UGVyc29uLmVtYWlsLCBcclxuICAgICAgICAgICAgICAgICAgICBtb2JpbGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlhbENvZGU6IGNsaWVudGRhdGEuY2xpZW50Q29udGFjdFBlcnNvbi5kaWFsQ29kZVswXS5kaWFsQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IGNsaWVudGRhdGEuY2xpZW50Q29udGFjdFBlcnNvbi5waG9uZU51bWJlclxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgIGNsaWVudC5jbGllbnRDb250YWN0UGVyc29uPXtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IGNsaWVudGRhdGEuY2xpZW50Q29udGFjdFBlcnNvbi5maXJzdE5hbWUsIFxyXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZU5hbWU6IGNsaWVudGRhdGEuY2xpZW50Q29udGFjdFBlcnNvbi5taWRkbGVOYW1lLCBcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTpjbGllbnRkYXRhLmNsaWVudENvbnRhY3RQZXJzb24ubGFzdE5hbWUsIFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiBjbGllbnRkYXRhLmNsaWVudENvbnRhY3RQZXJzb24uZW1haWwsIFxyXG4gICAgICAgICAgICAgICAgICAgIG1vYmlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZU51bWJlcjogY2xpZW50ZGF0YS5jbGllbnRDb250YWN0UGVyc29uLnBob25lTnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYoY2xpZW50ZGF0YS5hbm51YWxSZXZlbnVlIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgaWYoY2xpZW50ZGF0YS5hbm51YWxSZXZlbnVlLmN1cnJlbmN5Q29kZSl7XHJcbiAgICAgICAgICAgICAgICAgIGNsaWVudC5hbm51YWxSZXZlbnVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjbGllbnRkYXRhLmFubnVhbFJldmVudWUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBjbGllbnRkYXRhLmFubnVhbFJldmVudWUuY3VycmVuY3lDb2RlWzBdLmNjXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgY2xpZW50LmFubnVhbFJldmVudWUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNsaWVudGRhdGEuYW5udWFsUmV2ZW51ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBpZihjbGllbnRkYXRhLmFkZHJlc3MyIT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgaWYoY2xpZW50ZGF0YS5hZGRyZXNzMi5jb3VudHJ5Q29kZSl7XHJcbiAgICAgICAgICAgICAgICAgIGNsaWVudC5hZGRyZXNzMj17XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTE6IGNsaWVudGRhdGEuYWRkcmVzczIubGluZTEsIFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUyOiBjbGllbnRkYXRhLmFkZHJlc3MyLmxpbmUyLCBcclxuICAgICAgICAgICAgICAgICAgICBsaW5lMzogY2xpZW50ZGF0YS5hZGRyZXNzMi5saW5lMyxcclxuICAgICAgICAgICAgICAgICAgICBjaXR5OiBjbGllbnRkYXRhLmFkZHJlc3MyLmNpdHksIFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3RhbENvZGU6IGNsaWVudGRhdGEuYWRkcmVzczIucG9zdGFsQ29kZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeUNvZGU6IGNsaWVudGRhdGEuYWRkcmVzczIuY291bnRyeUNvZGVbMF0uY29kZSBcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgIGNsaWVudC5hZGRyZXNzMj17XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTE6IGNsaWVudGRhdGEuYWRkcmVzczIubGluZTEsIFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUyOiBjbGllbnRkYXRhLmFkZHJlc3MyLmxpbmUyLCBcclxuICAgICAgICAgICAgICAgICAgICBsaW5lMzogY2xpZW50ZGF0YS5hZGRyZXNzMi5saW5lMyxcclxuICAgICAgICAgICAgICAgICAgICBjaXR5OiBjbGllbnRkYXRhLmFkZHJlc3MyLmNpdHksIFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc3RhbENvZGU6IGNsaWVudGRhdGEuYWRkcmVzczIucG9zdGFsQ29kZSwgXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmKGNsaWVudGRhdGEuYWRkcmVzczEhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICBpZihjbGllbnRkYXRhLmFkZHJlc3MxLmNvdW50cnlDb2RlKXtcclxuICAgICAgICAgICAgICAgICAgY2xpZW50LmFkZHJlc3MxPXtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lMTogY2xpZW50ZGF0YS5hZGRyZXNzMS5saW5lMSwgXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTI6IGNsaWVudGRhdGEuYWRkcmVzczEubGluZTIsIFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUzOiBjbGllbnRkYXRhLmFkZHJlc3MxLmxpbmUzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNpdHk6IGNsaWVudGRhdGEuYWRkcmVzczEuY2l0eSwgXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zdGFsQ29kZTogY2xpZW50ZGF0YS5hZGRyZXNzMS5wb3N0YWxDb2RlLCBcclxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZTogY2xpZW50ZGF0YS5hZGRyZXNzMS5jb3VudHJ5Q29kZVswXS5jb2RlXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICBjbGllbnQuYWRkcmVzczE9e1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUxOiBjbGllbnRkYXRhLmFkZHJlc3MxLmxpbmUxLCBcclxuICAgICAgICAgICAgICAgICAgICBsaW5lMjogY2xpZW50ZGF0YS5hZGRyZXNzMS5saW5lMiwgXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTM6IGNsaWVudGRhdGEuYWRkcmVzczEubGluZTMsXHJcbiAgICAgICAgICAgICAgICAgICAgY2l0eTogY2xpZW50ZGF0YS5hZGRyZXNzMS5jaXR5LCBcclxuICAgICAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBjbGllbnRkYXRhLmFkZHJlc3MxLnBvc3RhbENvZGUsIFxyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgYXBpRmFjdG9yeS5jcmVhdGVDbGllbnQoY2xpZW50KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PntcclxuICAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJJc3N1ZSBoYXMgYmVlbiBzYXZlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAgICAgICAgICAgICAgICAgIHZtLmNsaWVudERhdGE9e307XHJcbiAgICAgICAgICAgICAgICAgICQoJyNhZGRDbGllbnQnKS5tb2RhbCgnaGlkZScpXHJcbiAgICAgICAgICAgICAgICAgIHZtLnNvcnRjbGllbnRzKFwiY3JlYXRlZFwiLCBcInRvZ2dsZUNsaWVudFwiKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgLmNhdGNoKGU9PntcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIpO1xyXG4gICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgfVxyXG4gICAgIFxyXG5cclxufSkoKTsiLCIoKCkgPT4ge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImNsaWVudHNEZXRhaWxDdHJsXCIsIGNsaWVudHNEZXRhaWxDdHJsKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjbGllbnRzRGV0YWlsQ3RybChcclxuICAgICAgICAkc2NvcGUsXHJcbiAgICAgICAgJHRpbWVvdXQsXHJcbiAgICAgICAgYXV0aEZhY3RvcnksXHJcbiAgICAgICAgJHN0YXRlLFxyXG4gICAgICAgICRzdGF0ZVBhcmFtcyxcclxuICAgICAgICBhcGlGYWN0b3J5LFxyXG4gICAgICAgIE5vdGlmaWNhdGlvbixcclxuICAgICAgICBOZ01hcCxcclxuICAgICAgICBnbG9iYWxzLFxyXG4gICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2VcclxuXHJcbiAgICApe1xyXG4gICAgICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbG9nb3V0LHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgICAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcblxyXG4gIFxyXG4gICAgICAgICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgZ2xvYmFscy5nZXRDb3VudHJ5Q29kZSgpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgIHZtLmdldENvdW50cnlDb2RlID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICB2bS5sb2FkQ291bnRyeUNvZGUgPSAkcXVlcnkgPT4ge1xyXG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3AuZGF0YSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZtLmNsaWVudElkID0gJHN0YXRlUGFyYW1zLmlkO1xyXG4gICAgICAgICAgJHNjb3BlLmdldENsaWVudERldGFpbCA9ICgpID0+IHtcclxuICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgIC5nZXRDbGllbnRCeUlkKHZtLmNsaWVudElkKVxyXG4gICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgdm0uQ2xpZW50RGF0YSA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY2xpZW50OiBcIix2bS5DbGllbnREYXRhKTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmdldENsaWVudERldGFpbCgpO1xyXG5cclxuICAgICAgICAgICAgdm0uc2F2ZVN0YWZmTWVtYmVyPWZ1bmN0aW9uKHN0YWZmKXtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzdGFmZik7XHJcblxyXG4gICAgICAgICAgICAgIGFwaUZhY3RvcnkuYWRkU3RhZmZNZW1iZXIoc3RhZmYsdm0uY2xpZW50SWQpXHJcbiAgICAgICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICAgICAgJCgnI2FkZF9tZW1iZXInKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q2xpZW50RGV0YWlsKCk7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIk1lbWJlciBhZGRlZCBzdWNjZXNzZnVsbHkuXCIpO1xyXG4gICAgICAgICAgICAgIH0pLmNhdGNoKGU9PntcclxuICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcImNvdWxkIG5vdCBhZGQgc3RhZmYgbWVtYmVyLlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbn0pKCk7IiwiKCgpID0+IHtcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKFwiYXBwXCIpXHJcbiAgICAuY29udHJvbGxlcihcImNvbWJvTWF0ZXJpYWxWaWV3Q3RybFwiLCBjb21ib01hdGVyaWFsVmlld0N0cmwpO1xyXG5cclxuICBmdW5jdGlvbiBjb21ib01hdGVyaWFsVmlld0N0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgJHN0YXRlUGFyYW1zLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBVcGxvYWRcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdm0uZWRpdEZsYWcgPSBmYWxzZVxyXG4gICAgdm0uY29tYm9JZCA9ICRzdGF0ZVBhcmFtcy5pZDtcclxuICAgIHZtLm1Vbml0cyA9IGdsb2JhbHMubVVuaXRzO1xyXG4gICAgdm0ucmVtb3ZlZEZpbGVzID0gW107XHJcbiAgICB2bS5jb21ib01hdGVyaWFsTGlzdCA9IFtdO1xyXG4gICAgdm0ubWF0ZXJpYWxUb3RhbCA9IDA7XHJcbiAgICB2bS5yb29mZXJUb3RhbCA9IDBcclxuXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmdldENvbXBhbnlCeUlkKHZtLnVzZXJEYXRhLmNvbXBhbnlJZClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgdm0uY29tcGFueURhdGEgPSByZXNwLmRhdGE7XHJcbiAgICAgICAgdm0uY29tcGFueUN1cnJlbmN5ID0gYW5ndWxhci5jb3B5KHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGUpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29tYm9NYXREZXRhaWwoKSB7XHJcbiAgICAgIGFwaUZhY3RvcnkuZ2V0Q29tYm9NYXRlcmlhbEJ5SWQodm0uY29tYm9JZCkudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5jb21ib0RhdGEgPSByZXNwLmRhdGEuZGF0YTtcclxuICAgICAgICB2bS5jb21ib01tYXRyaWFsTmFtZSA9IHZtLmNvbWJvRGF0YS5uYW1lXHJcbiAgICAgICAgdm0uZGVzY3JpcHRpb24gPSB2bS5jb21ib0RhdGEuZGVzY3JpcHRpb25cclxuICAgICAgICB2bS51b20gPSB2bS5jb21ib0RhdGEudW5pdFxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmNvbWJvRGF0YSlcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uY29tYm9EYXRhLmNvbWJvTWF0ZXJpYWxMaXN0LCBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgdm0ubWF0ZXJpYWxDb3N0ID0gaXRlbS5tYXRlcmlhbElkLmN1cnJlbnRSYXRlLm1hdGVyaWFsQ29zdC52YWx1ZSAqIGl0ZW0ucXVhbnRpdHk7XHJcbiAgICAgICAgICB2bS5tYXRlcmlhbFRvdGFsID0gdm0ubWF0ZXJpYWxUb3RhbCArIHZtLm1hdGVyaWFsQ29zdFxyXG4gICAgICAgICAgdm0ucm9vZmVyQ29zdCA9IGl0ZW0ubWF0ZXJpYWxJZC5jdXJyZW50UmF0ZS5yb29mZXJDb3N0LnZhbHVlICogaXRlbS5xdWFudGl0eTtcclxuICAgICAgICAgIHZtLnJvb2ZlclRvdGFsID0gdm0ucm9vZmVyVG90YWwgKyB2bS5yb29mZXJDb3N0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2codm0uY29tYm9EYXRhKTtcclxuICAgICAgICAkdGltZW91dChpbWdTbGlkZXIsIDE1MDApO1xyXG4gICAgICB9KS5jYXRjaChlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXRDb21ib01hdERldGFpbCgpXHJcblxyXG4gICAgdm0ucmVtb3ZlSW1nID0gKGltZywgdHlwZSkgPT4ge1xyXG4gICAgICBpZiAodHlwZSA9PSAnbWF0ZXJpYWxEb2N1bWVudCcpIHtcclxuICAgICAgICB2bS5yZW1vdmVkRmlsZXMucHVzaCh2bS5tYXRlcmlhbEltZ1tpbWddLl9pZClcclxuICAgICAgICB2bS5tYXRlcmlhbEltZy5zcGxpY2UoaW1nLCAxKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZtLnJlbW92ZWRGaWxlcy5wdXNoKHZtLm1hdGVyaWFsRmlsZXNbaW1nXS5faWQpXHJcbiAgICAgICAgdm0ubWF0ZXJpYWxGaWxlcy5zcGxpY2UoaW1nLCAxKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdm0uZGVsZXRlRmlsZSA9IChpbmRleFZhbCwgdHlwZSwgbmV3RmlsZSkgPT4ge1xyXG4gICAgICBpZiAodHlwZSA9PSBcImltYWdlXCIpIHtcclxuICAgICAgICB2bS51cGxvYWRJbWcuc3BsaWNlKGluZGV4VmFsLCAxKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2bS51cGxvYWRGaWxlcy5zcGxpY2UoaW5kZXhWYWwsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmVkaXRDb21ib01hdGVyaWFsTGlzdCA9IChpdGVtKSA9PiB7XHJcbiAgICAgIHZtLm1hdGVyaWFsTGlzdCA9IHZtLmNvbWJvRGF0YS5jb21ib01hdGVyaWFsTGlzdFtpdGVtXVxyXG4gICAgICB2bS5tYXRlcmlhbFF0eSA9IHZtLm1hdGVyaWFsTGlzdC5xdWFudGl0eVxyXG4gICAgICB2bS5zZWxlY3RlZE1hdGVyaWFsQ29zdCA9IHZtLm1hdGVyaWFsUXR5ICogdm0ubWF0ZXJpYWxMaXN0Lm1hdGVyaWFsSWQuY3VycmVudFJhdGUubWF0ZXJpYWxDb3N0LnZhbHVlXHJcbiAgICAgIHZtLnNlbGVjdGVkTWF0ZXJpYWxSb29mZXJDb3N0ID0gdm0ubWF0ZXJpYWxRdHkgKiB2bS5tYXRlcmlhbExpc3QubWF0ZXJpYWxJZC5jdXJyZW50UmF0ZS5yb29mZXJDb3N0LnZhbHVlXHJcbiAgICAgIGlmICh2bS5tYXRlcmlhbExpc3QucGVyY2VudGFnZUFkZGl0aW9ucy5sZW5ndGggIT0gMCAmJiB2bS5tYXRlcmlhbExpc3QucGVyY2VudGFnZUFkZGl0aW9ucy5sZW5ndGggIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdm0ucGVyY2VudGFnZUFkZGl0aW9uID0gdm0ubWF0ZXJpYWxMaXN0LnBlcmNlbnRhZ2VBZGRpdGlvbnNcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2bS5wZXJjZW50YWdlQWRkaXRpb24gPSBbXVxyXG4gICAgICB9XHJcbiAgICAgIHZtLm1hdGVyaWFsSW5kZXggPSBpdGVtXHJcbiAgICAgICQoJyNlZGl0Q29tYm9NYXRlcmlhbCcpLm1vZGFsKCdzaG93Jyk7XHJcbiAgICAgIGlmKGl0ZW0gPT0gJ25ldycpIHtcclxuICAgICAgICAkKCcjZWRpdENvbWJvTWF0ZXJpYWwgLm1vZGFsLWhlYWRlciBoNScpLnRleHQoJ0FkZCBDb21ibyBNYXRlcmlhbCBEZXRhaWxzJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJCgnI2VkaXRDb21ib01hdGVyaWFsIC5tb2RhbC1oZWFkZXIgaDUnKS50ZXh0KCdVcGRhdGUgQ29tYm8gTWF0ZXJpYWwgRGV0YWlscycpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdm0ubWF0ZXJpYWxDb21iaW5hdGlvbiA9IG1hdGVyaWFsID0+IHtcclxuICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKG1hdGVyaWFsKTtcclxuICAgICAgY29uc29sZS5sb2coXCJtYXRlcmlhbC0tXCIsIGRhdGEpO1xyXG4gICAgICBpZiAoZGF0YSAhPSBcIlwiKSB7XHJcbiAgICAgICAgdm0uY29tYm9NYXRlcmlhbExpc3QucHVzaCh7XHJcbiAgICAgICAgICBtYXRlcmlhbElkOiBkYXRhLl9pZCxcclxuICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSxcclxuICAgICAgICAgIHF1YW50aXR5OiB2bS5jb21ib0xpc3QucXVhbnRpdHksXHJcbiAgICAgICAgICBtYXRlcmlhbENvc3Q6IHZtLmNvbWJvTGlzdC5tYXRlcmlhbENvc3QsXHJcbiAgICAgICAgICByb29mZXJDb3N0OiB2bS5jb21ib0xpc3Qucm9vZmVyQ29zdCxcclxuICAgICAgICAgIHBlcmNlbnRhZ2VBZGRpdGlvbnM6IHZtLnBlcmNlbnRhZ2VBZGRpdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZtLnBlcmNlbnRhZ2VBZGRpdGlvbiA9IFtdO1xyXG4gICAgICAgIHZtLmNvbWJvTGlzdCA9IHtcclxuICAgICAgICAgIHF1YW50aXR5OiAxLFxyXG4gICAgICAgICAgbWF0ZXJpYWxDb3N0OiAwLFxyXG4gICAgICAgICAgcm9vZmVyQ29zdDogMFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmVkaXRDb21ib01hdGVyaWFsLmNvbWJvTWF0ZXJpYWwgPSBcIlwiO1xyXG4gICAgICAgICQoXCIuc2VsZWN0Mi1jaG9pY2UgLnNlbGVjdDItY2hvc2VuXCIpLnRleHQoXCJcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uYWRkUGVyY2VudGFnZVZhbHVlID0gKCkgPT4ge1xyXG4gICAgICB2bS5wZXJjZW50YWdlQWRkaXRpb24ucHVzaCh7XHJcbiAgICAgICAgcGVyY2VudGFnZVR5cGU6IFwiXCIsXHJcbiAgICAgICAgdmFsdWU6IFwiXCJcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdm0ucmVtb3ZlUGVyY2VudGFnZUFkZGl0aW9uID0gaW5kZXggPT4ge1xyXG4gICAgICB2bS5wZXJjZW50YWdlQWRkaXRpb24uc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZmlsZVVwZGF0ZWQgPSAoZmlsZXMsIGV2ZW50LCBtb2RhbCkgPT4ge1xyXG4gICAgICBsZXQgZmlsZU9iaiA9IGV2ZW50LnRhcmdldC5maWxlcztcclxuICAgICAgdm0uZmlsZU5hbWVzID0gT2JqZWN0LmtleXMoZmlsZU9iaikubWFwKHggPT4gZmlsZU9ialt4XS5uYW1lKTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGZpbGVzLCBmdW5jdGlvbiAoeCwgaW5kZXgpIHtcclxuICAgICAgICB4LmRlc2NyaXB0aW9uID0gXCJcIjtcclxuICAgICAgICBpZiAobW9kYWwgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgICBpZiAodm0udXBsb2FkSW1nLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGR1cGxpY2F0ZUltZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0udXBsb2FkSW1nLCBmdW5jdGlvbiAoeSkge1xyXG4gICAgICAgICAgICAgIGlmICh4Lm5hbWUgPT0geS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGVJbWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghZHVwbGljYXRlSW1nKSB7XHJcbiAgICAgICAgICAgICAgdm0udXBsb2FkSW1nLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiRmlsZSBuYW1lIGFscmVhZHkgZXhpc3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHZtLnVwbG9hZEZpbGVzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICgvaW1hZ2UvLnRlc3QoeC50eXBlKSkge1xyXG4gICAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHZtLnVwbG9hZEZpbGVzLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkdXBsaWNhdGVJbWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKFtdLmNvbmNhdCh2bS51cGxvYWRGaWxlcywgdm0udXBsb2FkSW1nKSwgZnVuY3Rpb24gKFxyXG4gICAgICAgICAgICAgIHlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHgubmFtZSA9PSB5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGR1cGxpY2F0ZUltZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFkdXBsaWNhdGVJbWcpIHtcclxuICAgICAgICAgICAgICBpZiAoL2ltYWdlLy50ZXN0KHgudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS51cGxvYWRGaWxlcy5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJGaWxlIG5hbWUgYWxyZWFkeSBleGlzdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB2bS50YWJDaGFuZ2UgPSAodmFsLCBmbGFnKSA9PiB7XHJcbiAgICAgIGlmICh2YWwgPT0gMSkge1xyXG4gICAgICAgIGlmICghdm0uZWRpdENvbWJvTWF0ZXJpYWwubmFtZSkge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIGVudGVyIG1hdGVyaWFsIG5hbWVcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdm0uc2VsZWN0ZWRVbml0KSB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2Ugc2VsZWN0IG1hdGVyaWFsIHVuaXRcIik7XHJcbiAgICAgICAgLyogfSBlbHNlIGlmICghdm0uZWRpdENvbWJvTWF0ZXJpYWwuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBsZWFzZSBlbnRlciBkZXNjcmlwdGlvblwiKTsgKi9cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbmV4dFByZXZUYWIodmFsKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh2YWwgPT0gMikge1xyXG4gICAgICAgIGlmICh2bS5jb21ib01hdGVyaWFsTGlzdC5sZW5ndGggPT0gMCAmJiB2bS5lZGl0Q29tYm9NYXRlcmlhbC5jb21ib01hdGVyaWFsTGlzdC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIGFkZCBDb21iaW5hdGlvbiBsaXN0XCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuZXh0UHJldlRhYih2YWwpXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5leHRQcmV2VGFiKHZhbCk7XHJcbiAgICAgIH1cclxuICAgICAgZnVuY3Rpb24gbmV4dFByZXZUYWIodmFsKSB7XHJcbiAgICAgICAgJChcIi5kY3BfbW9kYWwgLm5hdi10YWJzIGxpIC5uYXYtbGlua1wiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAkKFwiLmRjcF9tb2RhbCAubmF2LXRhYnMgbGkgLm5hdi1saW5rXCIpLmVxKHZhbCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJChcIi5kY3BfbW9kYWwgLnRhYi1jb250ZW50IC50YWItcGFuZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAkKFwiLmRjcF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAkKFwiLmRjcF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLmVxKHZhbCkuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICQoXCIuZGNwX21vZGFsIC50YWItY29udGVudCAudGFiLXBhbmVcIikuZXEodmFsKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG5cclxuICAgIH07XHJcbiAgICB2bS51bml0U2VsZWN0ID0gZGF0YSA9PiB7XHJcbiAgICAgIHZtLnNlbGVjdGVkVW5pdCA9IGRhdGEubmFtZTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZWRpdENvbWJvID0gKHZhbCkgPT4ge1xyXG4gICAgICBpZiAodmFsID09IDEpIHsgLy8gZWRpdCBNYXRlcmlhbFxyXG4gICAgICAgIHZtLmVkaXRGbGFnID0gdHJ1ZVxyXG4gICAgICAgIHZtLmVkaXRDb21ib01hdGVyaWFsID0gYW5ndWxhci5jb3B5KHZtLmNvbWJvRGF0YSlcclxuICAgICAgICB2bS5zZWxlY3RlZFVuaXQgPSB2bS5lZGl0Q29tYm9NYXRlcmlhbC51bml0XHJcbiAgICAgICAgdm0ubWF0ZXJpYWxJbWcgPSB2bS5lZGl0Q29tYm9NYXRlcmlhbC5maWxlcy5pbWFnZXM7XHJcbiAgICAgICAgdm0ubWF0ZXJpYWxGaWxlcyA9IHZtLmVkaXRDb21ib01hdGVyaWFsLmZpbGVzLmRvY3M7XHJcbiAgICAgICAgdm0ucGVyY2VudGFnZUFkZGl0aW9uID0gW11cclxuICAgICAgICB2bS51cGxvYWRJbWcgPSBbXVxyXG4gICAgICAgIHZtLnVwbG9hZEZpbGVzID0gW11cclxuICAgICAgICAkKCcjdG9kb19tb2RhbC5kY3BfbW9kYWwnKS5tb2RhbCgnc2hvdycpXHJcbiAgICAgICAgLyogJCgnLm1hdGVyaWFsRGV0YWlsIHRleHRhcmVhLCAubWF0ZXJpYWxEZXRhaWwgaW5wdXQsIC5tYXRlcmlhbERldGFpbCBzZWxlY3QnKS5hdHRyKCdkaXNhYmxlZCcsIGZhbHNlKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmNvbWJvRGF0YS5jb21ib01hdGVyaWFsTGlzdCkgKi9cclxuICAgICAgfSBlbHNlIGlmICh2YWwgPT0gMikge1xyXG4gICAgICAgIC8vICQoJy5tYXRlcmlhbERldGFpbCB0ZXh0YXJlYSwgLm1hdGVyaWFsRGV0YWlsIGlucHV0LCAubWF0ZXJpYWxEZXRhaWwgc2VsZWN0JykuYXR0cignZGlzYWJsZWQnLCB0cnVlKVxyXG4gICAgICAgICRzY29wZS5pbWdBbmRGaWxlcyA9IFtdLmNvbmNhdCh2bS51cGxvYWRJbWcsIHZtLnVwbG9hZEZpbGVzKTtcclxuICAgICAgICAkc2NvcGUudXBsb2FkYWxsRmlsZXMgPSBbXS5jb25jYXQodm0udXBsb2FkSW1nLCB2bS51cGxvYWRGaWxlcywgdm0ubWF0ZXJpYWxJbWcsIHZtLm1hdGVyaWFsRmlsZXMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBkZXNjcmlwdGlvbiA9IFtdO1xyXG4gICAgICAgIGlmICh2bS51cGxvYWRJbWcubGVuZ3RoID4gMCB8fCB2bS51cGxvYWRGaWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAkc2NvcGUuaW1nQW5kRmlsZXMubWFwKCh4LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLnB1c2goe1xyXG4gICAgICAgICAgICAgIGFzc2V0RGVzY3JpcHRpb246IHguZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjb21iYWluZWRDTUxpc3QgPSBbXS5jb25jYXQodm0uY29tYm9NYXRlcmlhbExpc3QsIHZtLmVkaXRDb21ib01hdGVyaWFsLmNvbWJvTWF0ZXJpYWxMaXN0KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjb21iYWluZWRDTUxpc3QpXHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIGNtTGlzdCA9IFtdO1xyXG4gICAgICAgIGNvbWJhaW5lZENNTGlzdC5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3g9PT09JywgeClcclxuICAgICAgICAgIGNtTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgX2lkOiB4Ll9pZCxcclxuICAgICAgICAgICAgbWF0ZXJpYWxJZDogeC5tYXRlcmlhbElkLFxyXG4gICAgICAgICAgICBxdWFudGl0eTogeC5xdWFudGl0eSxcclxuICAgICAgICAgICAgcGVyY2VudGFnZUFkZGl0aW9uczogeC5wZXJjZW50YWdlQWRkaXRpb25zXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSB7XHJcbiAgICAgICAgICBuYW1lOiB2bS5lZGl0Q29tYm9NYXRlcmlhbC5uYW1lLFxyXG4gICAgICAgICAgdW5pdDogdm0uc2VsZWN0ZWRVbml0LFxyXG4gICAgICAgICAgY29tYm9NYXRlcmlhbExpc3Q6IGNtTGlzdCxcclxuICAgICAgICAgIGZpbGVzOiAkc2NvcGUuaW1nQW5kRmlsZXMsXHJcbiAgICAgICAgICBhc3NldE9iajogZGVzY3JpcHRpb25cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY29tYm9MaXN0RGF0YSA9IHtcclxuICAgICAgICAgIGNvbWJvTGlzdEFycmF5OiBjbUxpc3QsXHJcbiAgICAgICAgICBkZWxldGVkQ29tYm9MaXN0OiB2bS5kZWxldGVkQ29tYm9MaXN0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhLCAnPT09ZGF0YScpXHJcblxyXG4gICAgICAgIGFwaUZhY3RvcnkudXBkYXRlQ29tYm9NYXRlcmlhbExpc3Qodm0uY29tYm9EYXRhLl9pZCwgY29tYm9MaXN0RGF0YSkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIGFwaUZhY3RvcnkudXBkYXRlQ29tYm9NYXRlcmlhbCh2bS5jb21ib0RhdGEuX2lkLCBkYXRhKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICQoJyN0b2RvX21vZGFsLmRjcF9tb2RhbCcpLm1vZGFsKCdoaWRlJylcclxuICAgICAgICAgICAgZ2V0Q29tYm9NYXREZXRhaWwoKVxyXG4gICAgICAgICAgICB2bS5maWxlTmFtZXMgPSBbXVxyXG4gICAgICAgICAgICAkdGltZW91dChpbWdTbGlkZXIsIDEwMDApO1xyXG4gICAgICAgICAgfSkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdmFyIGNvbWJvTWF0ZXJpYWxEYXRhID0ge1xyXG4gICAgICAgIC8vICAgbmFtZTogJHNjb3BlLnJhdGVBbmFseXNpc09CSi5uYW1lLFxyXG4gICAgICAgIC8vICAgZGVzY3JpcHRpb246ICRzY29wZS5yYXRlQW5hbHlzaXNPQkouZGVzY3JpcHRpb24sXHJcbiAgICAgICAgLy8gICB1bml0U3ltYm9sOiAkc2NvcGUucmF0ZUFuYWx5c2lzT0JKLnVuaXRTeW1ib2wsXHJcbiAgICAgICAgLy8gICByZW1vdmVkRmlsZXM6ICRzY29wZS5yZW1vdmVkRmlsZXMsXHJcbiAgICAgICAgLy8gICBmaWxlczogdm0ubmV3RmlsZXNcclxuICAgICAgICAvLyB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdm0udXBkYXRlQ29tYm8gPSAoaXRlbSwgZGF0YSkgPT4ge1xyXG4gICAgICB2bS5jb21ib0RhdGEuY29tYm9NYXRlcmlhbExpc3RbaXRlbV0ucXVhbnRpdHkgPSB2bS5tYXRlcmlhbFF0eVxyXG4gICAgICB2bS5jb21ib0RhdGEuY29tYm9NYXRlcmlhbExpc3RbaXRlbV0ucGVyY2VudGFnZUFkZGl0aW9ucyA9IGRhdGFcclxuICAgICAgY29uc29sZS5sb2codm0uY29tYm9EYXRhLmNvbWJvTWF0ZXJpYWxMaXN0W2l0ZW1dLnBlcmNlbnRhZ2VBZGRpdGlvbnMpXHJcbiAgICAgICQoJyNlZGl0Q29tYm9NYXRlcmlhbCcpLm1vZGFsKCdoaWRlJylcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbWdTbGlkZXIoKSB7XHJcbiAgICAgICQoXCIjY29tYm9DYXJvdXNlbFwiKS5mbGV4c2xpZGVyKHtcclxuICAgICAgICBhbmltYXRpb246IFwic2xpZGVcIixcclxuICAgICAgICBjb250cm9sTmF2OiBmYWxzZSxcclxuICAgICAgICBhbmltYXRpb25Mb29wOiBmYWxzZSxcclxuICAgICAgICBzbGlkZXNob3c6IGZhbHNlLFxyXG4gICAgICAgIGl0ZW1XaWR0aDogNzUsXHJcbiAgICAgICAgaXRlbU1hcmdpbjogNSxcclxuICAgICAgICBhc05hdkZvcjogXCIjY29tYm9TbGlkZXJcIlxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICQoXCIjY29tYm9TbGlkZXJcIikuZmxleHNsaWRlcih7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBcInNsaWRlXCIsXHJcbiAgICAgICAgY29udHJvbE5hdjogZmFsc2UsXHJcbiAgICAgICAgYW5pbWF0aW9uTG9vcDogZmFsc2UsXHJcbiAgICAgICAgc2xpZGVzaG93OiBmYWxzZSxcclxuICAgICAgICBzeW5jOiBcIiNjb21ib0Nhcm91c2VsXCJcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAubGlzdEFsbE1hdGVyaWFscygpXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIHZtLmFsbG1hdGVyaWxhTGlzdCA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgIHZtLmNvbWJvTGlzdCA9IHtcclxuICAgICAgICAgIHF1YW50aXR5OiAxLFxyXG4gICAgICAgICAgbWF0ZXJpYWxDb3N0OiAwLFxyXG4gICAgICAgICAgcm9vZmVyQ29zdDogMFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcbiAgICAvLyBtYXRlcmlhbCBvbiBjaGFuZ2UgZnVuY3Rpb25cclxuICAgIHZtLmdldE1hdGVyaWFsSW5mbyA9IG1hdGVyaWFsID0+IHtcclxuICAgICAgbGV0IG1hdGVyaWFsSW5mbyA9IEpTT04ucGFyc2UobWF0ZXJpYWwpO1xyXG4gICAgICBcclxuICAgICAgaWYgKG1hdGVyaWFsKSB7XHJcbiAgICAgICAgdm0uY29tYm9MaXN0Lm1hdGVyaWFsQ29zdCA9IHBhcnNlRmxvYXQoXHJcbiAgICAgICAgICBNYXRoLnJvdW5kKFxyXG4gICAgICAgICAgICB2bS5jb21ib0xpc3QucXVhbnRpdHkgKlxyXG4gICAgICAgICAgICBtYXRlcmlhbEluZm8uY3VycmVudFJhdGUubWF0ZXJpYWxDb3N0LnZhbHVlICpcclxuICAgICAgICAgICAgMTAwXHJcbiAgICAgICAgICApIC8gMTAwXHJcbiAgICAgICAgKTtcclxuICAgICAgICB2bS5jb21ib0xpc3Qucm9vZmVyQ29zdCA9IHBhcnNlRmxvYXQoXHJcbiAgICAgICAgICBNYXRoLnJvdW5kKFxyXG4gICAgICAgICAgICB2bS5jb21ib0xpc3QucXVhbnRpdHkgKlxyXG4gICAgICAgICAgICBtYXRlcmlhbEluZm8uY3VycmVudFJhdGUucm9vZmVyQ29zdC52YWx1ZSAqXHJcbiAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgKSAvIDEwMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgJChcImEuaXRlbS1zZWxlY3RlZCBzcGFuXCIpLnJlbW92ZUNsYXNzKFwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIik7XHJcbiAgICAgICAgJChcImEuaXRlbS1zZWxlY3RlZCBzcGFuXCIpLmFkZENsYXNzKFwiZmFzIGZhLXRpbWVzIG1yLTNcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2bS5kZWxldGVkQ29tYm9MaXN0ID0gW11cclxuICAgIHZtLnJlbW92ZU1hdGVyaWwgPSAoaXRlbSxmbGFnKSA9PiB7XHJcbiAgICAgIGlmKGZsYWcgPT0gJ25ldycpIHtcclxuICAgICAgICB2bS5jb21ib01hdGVyaWFsTGlzdC5zcGxpY2UoaXRlbSwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0uZGVsZXRlZENvbWJvTGlzdC5wdXNoKHZtLmVkaXRDb21ib01hdGVyaWFsLmNvbWJvTWF0ZXJpYWxMaXN0W2l0ZW1dLl9pZClcclxuICAgICAgICB2bS5lZGl0Q29tYm9NYXRlcmlhbC5jb21ib01hdGVyaWFsTGlzdC5zcGxpY2UoaXRlbSwgMSlcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImNyZWF0ZVByb2plY3RDdHJsXCIsIGNyZWF0ZVByb2plY3RDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdEN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIE5nTWFwLFxyXG4gICAgZ2xvYmFsc1xyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgbG9nb3V0LFxyXG4gICAgICB1c2VyU3RvcmUsXHJcbiAgICAgIGNvbXBhbnlTdG9yZVxyXG4gICAgfSA9IGdsb2JhbHM7XHJcblxyXG4gICAgaWYgKCFhdXRoRmFjdG9yeS5jaGVja1VzZXIoKSkge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrUHJpdmlsZWdlKFwicHJvamVjdFwiLCBcImNyZWF0ZVByb2plY3RcIikpIHtcclxuICAgICAgTm90aWZpY2F0aW9uLndhcm5pbmcoXCJJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnNcIik7XHJcbiAgICAgICRzdGF0ZS5nbyhcImRhc2hib2FyZFwiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdm0uY2xpZW50cyA9IFtdO1xyXG4gICAgLy8gYXBpRmFjdG9yeS5saXN0QWxsQ2xpZW50cygpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAvLyAgIHZtLmNsaWVudHMgPSByZXNwLmRhdGEubGlzdDtcclxuICAgIC8vIH0pO1xyXG5cclxuICAgICRzY29wZS4kd2F0Y2goXCJ2bS5wcm9qZWN0RGF0YS5jbGllbnRcIiwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICQoXCJhLml0ZW0tc2VsZWN0ZWQgc3BhblwiKS5yZW1vdmVDbGFzcyhcImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlXCIpO1xyXG4gICAgICAkKFwiYS5pdGVtLXNlbGVjdGVkIHNwYW5cIikuYWRkQ2xhc3MoXCJmYXMgZmEtdGltZXMgbXItM1wiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIFByb21pc2UuYWxsKFtcclxuICAgICAgICBhcGlGYWN0b3J5Lmxpc3RBbGxDbGllbnRzKCksXHJcbiAgICAgICAgYXBpRmFjdG9yeS5nZXRIaWVyYXJjaHlUZW1wbGF0ZSgpXHJcbiAgICAgIF0pXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIHZtLmNsaWVudHMgPSByZXNwWzBdLmRhdGEubGlzdDtcclxuICAgICAgICB2bS50ZW1wbGF0ZUxpc3QgPSByZXNwWzFdLmRhdGEuZGF0YTtcclxuICAgICAgICBsZXQgc2FtcGxlVGVtcGxhdGUgPSB2bS50ZW1wbGF0ZUxpc3QuZmlsdGVyKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5faWQgPT0gXCI1Yjg5MTBmYmRkNmZhODFhMjBiZmU3NDVcIjtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHZtLmZpbGVtYW5hZ2VyVGVtcGxhdGUgPSBcIjViODkxMGZiZGQ2ZmE4MWEyMGJmZTc0NVwiO1xyXG5cclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB2bS5nbWFwID0ge1xyXG4gICAgICB1cmw6IFwiaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzP2tleT1BSXphU3lBM01JQS1tS1dxXzYwcTFLMHpPSGd1cmF4VC0xUVB4TlUmbGlicmFyaWVzPXBsYWNlc1wiLFxyXG4gICAgICBtYXJrZXJzOiBbXSxcclxuICAgICAgc3R5bGVzOiBbXSxcclxuICAgICAgY2VudGVyOiBcIjQxLC04N1wiLFxyXG4gICAgICB6b29tOiAzXHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnByb2plY3REYXRhID0ge1xyXG4gICAgICBhZGRyZXNzOiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuc2VsZWN0Mk9wdGlvbnMgPSB7XHJcbiAgICAgIGFsbG93Q2xlYXI6IHRydWVcclxuICAgIH07XHJcblxyXG4gICAgdm0ucGxhY2VNYXJrZXIgPSBmdW5jdGlvbiAobWFwKSB7XHJcbiAgICAgIGNvbnN0IHBsYWNlRGF0YSA9IHRoaXMuZ2V0UGxhY2UoKS5nZW9tZXRyeS5sb2NhdGlvbjtcclxuICAgICAgdm0uZ21hcC5tYXJrZXJzID0gW1xyXG4gICAgICAgIFtwbGFjZURhdGEubGF0KCksIHBsYWNlRGF0YS5sbmcoKV1cclxuICAgICAgXTtcclxuICAgICAgdm0uZ21hcC56b29tID0gMTU7XHJcbiAgICAgIHZtLmdtYXAuY2VudGVyID0gYCR7cGxhY2VEYXRhLmxhdCgpfSwke3BsYWNlRGF0YS5sbmcoKX1gO1xyXG4gICAgICB2bS5wcm9qZWN0RGF0YS5hZGRyZXNzLmxvYyA9IHtcclxuICAgICAgICBjb29yZGluYXRlczogW3BsYWNlRGF0YS5sYXQoKSwgcGxhY2VEYXRhLmxuZygpXVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5hZGRQcm9qZWN0ID0gZm9ybURhdGEgPT4ge1xyXG4gICAgICBmb3JtRGF0YS5jbGllbnQgPSBmb3JtRGF0YS5jbGllbnQuX2lkO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmNyZWF0ZVByb2plY3QoZm9ybURhdGEpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIlByb2plY3QgaGFzIGJlZW4gY3JlYXRlZCBzdWNjZXNzZnVsbHlcIik7XHJcblxyXG4gICAgICAgICAgbGV0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIHByb2plY3RJZDogcmVzcC5kYXRhLl9pZCxcclxuICAgICAgICAgICAgdGVtcGxhdGVJZDogcmVzcC5kYXRhLl9pZCAmJlxyXG4gICAgICAgICAgICAgICh2bS5maWxlbWFuYWdlclRlbXBsYXRlICYmIHZtLmZpbGVtYW5hZ2VyVGVtcGxhdGUgIT0gXCJmYWxzZVwiKSA/XHJcbiAgICAgICAgICAgICAgdm0uZmlsZW1hbmFnZXJUZW1wbGF0ZSA6IFwiNWI4OTEwZmJkZDZmYTgxYTIwYmZlNzQ1XCJcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgIC5sb2FkSGllcmFyY2h5VHJlZShwYXlsb2FkKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJwcm9qZWN0aWRcIiwgcmVzcC5kYXRhLl9pZCk7XHJcbiAgICAgICAgICAkc3RhdGUuZ28oXCJkYXNoYm9hcmRcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS51cGRhdGVNYXJrZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGxldCBwb3MgPSB0aGlzLmdldFBvc2l0aW9uKCk7XHJcbiAgICAgIHZtLnByb2plY3REYXRhLmFkZHJlc3MubG9jID0ge1xyXG4gICAgICAgIGNvb3JkaW5hdGVzOiBbcG9zLmxhdCgpLCBwb3MubG5nKCldXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIE5nTWFwLmdldE1hcCgpLnRoZW4obWFwID0+IHtcclxuICAgICAgdm0ubWFwID0gbWFwO1xyXG4gICAgICBtYXAuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgc3R5bGVzOiB2bS5nbWFwLnN0eWxlcyxcclxuICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiB0cnVlLFxyXG4gICAgICAgIHpvb21Db250cm9sOiB0cnVlLFxyXG4gICAgICAgIHpvb206IDEsXHJcbiAgICAgICAgY2VudGVyOiB7XHJcbiAgICAgICAgICBsYXQ6IDAsXHJcbiAgICAgICAgICBsbmc6IDBcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uYXNzaWduVGVtcGxhdGUgPSAoKSA9PiB7XHJcbiAgICAgIHZtLmZpbGVtYW5hZ2VyVGVtcGxhdGUgPSB2bS5zZWxlY3RlZFRlbXBsYXRlLl9pZDtcclxuICAgICAgJCgnI2Fzc2lnblRlbXBsYXRlTW9kYWwnKS5tb2RhbCgnaGlkZScpXHJcbiAgICB9XHJcbiAgfVxyXG59KSgpOyIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImNyZWF0ZVZhcmlhdGlvbnNPcmRlckN0cmxcIiwgY3JlYXRlVmFyaWF0aW9uc09yZGVyQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZVZhcmlhdGlvbnNPcmRlckN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBOZ01hcCxcclxuICAgIFVwbG9hZCxcclxuICAgIG1vbWVudCxcclxuICAgICRsb2NhdGlvblxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBkZWJvdW5jZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyh2bS51c2VyRGF0YSlcclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5hY3RpdmVDbGFzcyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiAoJGxvY2F0aW9uLnBhdGgoKSA9PT0gcGF0aCkgPyAnYWN0aXZlJyA6ICcnO1xyXG4gICAgfVxyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiZGFzaGJvYXJkQ3RybFwiLCBkYXNoYm9hcmRDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gZGFzaGJvYXJkQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICAkd2luZG93LFxyXG4gICAgJGxvY2F0aW9uLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICBnbG9iYWxzLFxyXG4gICAgTmdNYXBcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcblxyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIHZtLmxvZ2dlZEluID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGxvZ291dCxcclxuICAgICAgdXNlclN0b3JlLFxyXG4gICAgICBjb21wYW55U3RvcmUsXHJcbiAgICAgIHByb2plY3RTdG9yZSxcclxuICAgICAgdGhyb3R0bGVyXHJcbiAgICB9ID0gZ2xvYmFscztcclxuXHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICB2bS5sb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2bS5sb2FkZXIgPSBmYWxzZTtcclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgIHZtLmNsaWVudFVybCA9XHJcbiAgICAgIFwiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZGt0bmhtc2p4L2ltYWdlL3VwbG9hZC92MTQ4NjEyOTIzNC9kZWZhdWx0L2NvbXBhbnkucG5nXCI7XHJcbiAgICB2bS5nbWFwID0ge1xyXG4gICAgICB1cmw6XHJcbiAgICAgICAgXCJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUEzTUlBLW1LV3FfNjBxMUswek9IZ3VyYXhULTFRUHhOVVwiLFxyXG4gICAgICBzdHlsZXM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzIxMjEyMVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy5pY29uXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBcIm9mZlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM3NTc1NzVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5zdHJva2VcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiMyMTIxMjFcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJhZG1pbmlzdHJhdGl2ZVwiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwiZ2VvbWV0cnlcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM3NTc1NzVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJhZG1pbmlzdHJhdGl2ZS5jb3VudHJ5XCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjOWU5ZTllXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwiYWRtaW5pc3RyYXRpdmUubGFuZF9wYXJjZWxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6IFwib2ZmXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwiYWRtaW5pc3RyYXRpdmUubG9jYWxpdHlcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiNiZGJkYmRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJwb2lcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM3NTc1NzVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJwb2kucGFya1wiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwiZ2VvbWV0cnlcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiMxODE4MThcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJwb2kucGFya1wiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzYxNjE2MVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInBvaS5wYXJrXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5zdHJva2VcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiMxYjFiMWJcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJyb2FkXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeS5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjMmMyYzJjXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwicm9hZFwiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzhhOGE4YVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInJvYWQuYXJ0ZXJpYWxcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImdlb21ldHJ5XCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjMzczNzM3XCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwicm9hZC5oaWdod2F5XCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzNjM2MzY1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwiZ2VvbWV0cnlcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM0ZTRlNGVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJyb2FkLmxvY2FsXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjNjE2MTYxXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwidHJhbnNpdFwiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzc1NzU3NVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcIndhdGVyXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzAwMDAwMFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcIndhdGVyXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjM2QzZDNkXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgICAgXSxcclxuICAgICAgbWFya2VyczogW11cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkTWFya2Vycyhwcm9qZWN0TGlzdCkge1xyXG4gICAgICBsZXQgbXhMYXQgPSAwLFxyXG4gICAgICAgIG14TG5nID0gMCxcclxuICAgICAgICBtbkxhdCA9IDAsXHJcbiAgICAgICAgbW5MbmcgPSAwLFxyXG4gICAgICAgIG1hcmtlcnMgPSBbXTtcclxuICAgICAgcHJvamVjdExpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBpZiAoZWxlbWVudC5hZGRyZXNzKSB7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkcmVzcy5sb2MuY29vcmRpbmF0ZXNbMF0gIT0gMCB8fFxyXG4gICAgICAgICAgICBlbGVtZW50LmFkZHJlc3MubG9jLmNvb3JkaW5hdGVzWzFdICE9IDBcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICB2YXIgbXJrciA9IHtcclxuICAgICAgICAgICAgICBpZDogZWxlbWVudC5faWQsXHJcbiAgICAgICAgICAgICAgbGF0aXR1ZGU6IGVsZW1lbnQuYWRkcmVzcy5sb2MuY29vcmRpbmF0ZXNbMV0sXHJcbiAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBlbGVtZW50LmFkZHJlc3MubG9jLmNvb3JkaW5hdGVzWzBdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG14TGF0ID0gbXhMYXQgPiBtcmtyLmxhdGl0dWRlID8gbXJrci5sYXRpdHVkZSA6IG14TGF0O1xyXG4gICAgICAgICAgICBtbkxhdCA9IG1uTGF0IDwgbXJrci5sYXRpdHVkZSA/IG1ya3IubGF0aXR1ZGUgOiBtbkxhdDtcclxuICAgICAgICAgICAgbXhMbmcgPSBteExuZyA+IG1ya3IubG9uZ2l0dWRlID8gbXJrci5sb25naXR1ZGUgOiBteExuZztcclxuICAgICAgICAgICAgbW5MbmcgPSBtbkxuZyA8IG1ya3IubG9uZ2l0dWRlID8gbXJrci5sb25naXR1ZGUgOiBtbkxuZztcclxuICAgICAgICAgICAgbWFya2Vycy5wdXNoKFttcmtyLmxhdGl0dWRlLCBtcmtyLmxvbmdpdHVkZV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBtYXJrZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEdldCBhbGwgZGFzaGJvYXJkIGRhdGEgKi9cclxuXHJcbiAgICBQcm9taXNlLmFsbChbXHJcbiAgICAgIGFwaUZhY3RvcnkuZ2V0Q29tcGFueUJ5SWQodm0udXNlckRhdGEuY29tcGFueUlkKSxcclxuICAgICAgYXBpRmFjdG9yeS5saXN0QWxsUHJvamVjdHMoKSxcclxuICAgICAgYXBpRmFjdG9yeS5saXN0QWxsQ2xpZW50cygpLFxyXG4gICAgICBhcGlGYWN0b3J5Lmxpc3RBbGxUb2RvTGlzdCgpXHJcbiAgICBdKVxyXG4gICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICAvKiBBZGQgY29tcGFueURhdGEgdG8gc3RvcmUgKi9cclxuICAgICAgICBjb21wYW55U3RvcmUuc2V0KGRhdGFbMF0uZGF0YSk7XHJcbiAgICAgICAgLyogQWRkIG1hcmtlcnMgZnJvbSBwcm9qZWN0IGRhdGEgKi9cclxuICAgICAgICB2bS5nbWFwLm1hcmtlcnMgPSBhZGRNYXJrZXJzKGRhdGFbMV0uZGF0YS5saXN0KTtcclxuICAgICAgICB2bS5kYXNoYm9hcmREYXRhID0ge1xyXG4gICAgICAgICAgY29tcGFueTogZGF0YVswXS5kYXRhLFxyXG4gICAgICAgICAgcHJvamVjdHM6IGRhdGFbMV0uZGF0YS5saXN0LFxyXG4gICAgICAgICAgY2xpZW50czogZGF0YVsyXS5kYXRhLmxpc3QsXHJcbiAgICAgICAgICB0b2RvTGlzdHM6IGRhdGFbM10uZGF0YS5kYXRhXHJcbiAgICAgICAgfTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBOZ01hcC5nZXRNYXAoKS50aGVuKG1hcCA9PiB7XHJcbiAgICAgIG1hcC5zZXRPcHRpb25zKHtcclxuICAgICAgICBzdHlsZXM6IHZtLmdtYXAuc3R5bGVzLFxyXG4gICAgICAgIGRpc2FibGVEZWZhdWx0VUk6IHRydWUsXHJcbiAgICAgICAgem9vbTogMSxcclxuICAgICAgICBjZW50ZXI6IHtcclxuICAgICAgICAgIGxhdDogMCxcclxuICAgICAgICAgIGxuZzogMFxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBQcm9qZWN0IHBpY2tlciBsb2FkIGZ1bmN0aW9uYWxpdHkgKi9cclxuXHJcbiAgICBsZXQgZW5hYmxlZCA9IHRydWUsXHJcbiAgICAgIGNodW5rU2l6ZSA9IDU7XHJcbiAgICB2bS5wcm9qZWN0U2VhcmNoID0gXCJcIjtcclxuICAgIHZtLmVuYWJsZUxhenlMb2FkID0gZmFsc2U7XHJcbiAgICB2bS5zb3J0UGFyYW1zID0ge1xyXG4gICAgICBmaWVsZDogXCJjcmVhdGVkXCIsXHJcbiAgICAgIHR5cGU6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnByb2plY3ROYW1lID0gXCJQUk9KRUNUXCI7XHJcblxyXG4gICAgLyogR2V0IGJvb2ttYXJrZWQgcHJvamVjdCBMaXN0ICovXHJcbiAgICAkc2NvcGUuZ2V0Qm9va21hcmtlZFByb2plY3QgPSAoKSA9PiB7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuZ2V0Qm9va21hcmtzKClcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLmJvb2ttYXJrZWRQcm9qZWN0ID0gcmVzcC5kYXRhLmJvb2ttYXJrcztcclxuICAgICAgICAgIHZtLmJvb2ttYXJrZWRQcm9qZWN0TGlzdCA9IGFuZ3VsYXIuY29weSh2bS5ib29rbWFya2VkUHJvamVjdCk7XHJcbiAgICAgICAgICB2bS5ib29rbWFya2VkUHJvamVjdExpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIF9pZDogXCJvdGhlcnNcIixcclxuICAgICAgICAgICAgcHJvamVjdE5hbWU6IFwiQWxsIFByb2plY3QgTGlzdFwiXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIC8vIHZtLmJvb2ttYXJrZWRQcm9qZWN0TGlzdC51bnNoaWZ0KHtcclxuICAgICAgICAgIC8vICAgX2lkOiBcIk5BXCIsXHJcbiAgICAgICAgICAvLyAgIHByb2plY3ROYW1lOiBcIlNlbGVjdCBhIHByb2plY3RcIlxyXG4gICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAvLyB2bS5wcm9qZWN0ID0gdm0uYm9va21hcmtlZFByb2plY3RMaXN0WzBdO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmdldEJvb2ttYXJrZWRQcm9qZWN0KCk7XHJcblxyXG4gICAgdm0ubG9hZFByb2plY3RGaWxlcyA9IGlkID0+IHtcclxuICAgICAgbGV0IGxpbWl0ID0gNTtcclxuICAgICAgYXBpRmFjdG9yeS5zaG93UHJvamVjdEZpbGVzKGlkLCBsaW1pdCkudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5wcm9qZWN0RmlsZXMgPSByZXNwLmRhdGEuZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdm0uYm9va21hcmtGbGFnID0gZmFsc2U7XHJcbiAgICAvKiBjaG9vc2UgcHJvamVjdCBmcm9tIGJvb2ttYXJrZWQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS5zZWxlY3RlZFByb2plY3QgPSBwcm9qZWN0ID0+IHtcclxuICAgICAgaWYgKHByb2plY3QuX2lkID09IFwib3RoZXJzXCIpIHtcclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAubGlzdEFsbFByb2plY3RzKClcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICB2bS5wcm9qZWN0UGlja2VyRGF0YSA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgICAkKFwiI2Nob29zZVByb2plY3RcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2bS5ib29rbWFya0ZsYWcgPSBmYWxzZTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2godm0uYm9va21hcmtlZFByb2plY3QsIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgIGlmICh4Ll9pZCA9PSBwcm9qZWN0Ll9pZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZtLmJvb2ttYXJrRmxhZyA9IHRydWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZtLnByb2plY3ROYW1lID0gcHJvamVjdC5wcm9qZWN0TmFtZTtcclxuICAgICAgICBwcm9qZWN0U3RvcmUuc2V0KHByb2plY3QpO1xyXG4gICAgICAgIHZtLmxvYWRQcm9qZWN0RmlsZXMocHJvamVjdC5faWQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIENob29zZSBwcm9qZWN0IGZvcm0gYWxsIHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0uY2hvb3NlUHJvamVjdCA9IHByb2plY3QgPT4ge1xyXG4gICAgICB2YXIgaW5kZXggPSB2bS5ib29rbWFya2VkUHJvamVjdExpc3QuZmluZEluZGV4KGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICByZXR1cm4geC5faWQgPT0gXCJvdGhlcnNcIjtcclxuICAgICAgfSk7XHJcbiAgICAgIHZtLmJvb2ttYXJrZWRQcm9qZWN0TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICBsZXQgYWxyZWFkeUV4aXN0ID0gdHJ1ZTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLmJvb2ttYXJrZWRQcm9qZWN0LCBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgaWYgKHguX2lkID09IHByb2plY3QuX2lkKSB7XHJcbiAgICAgICAgICBhbHJlYWR5RXhpc3QgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAoYWxyZWFkeUV4aXN0KSB7XHJcbiAgICAgICAgdm0uYm9va21hcmtlZFByb2plY3RMaXN0LnB1c2gocHJvamVjdCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZtLmJvb2ttYXJrZWRQcm9qZWN0TGlzdC5wdXNoKHtcclxuICAgICAgICBfaWQ6IFwib3RoZXJzXCIsXHJcbiAgICAgICAgcHJvamVjdE5hbWU6IFwiQWxsIFByb2plY3QgTGlzdFwiXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdm0ucHJvamVjdCA9IHByb2plY3Q7XHJcbiAgICAgIHZtLnByb2plY3ROYW1lID0gcHJvamVjdC5wcm9qZWN0TmFtZTtcclxuICAgICAgdm0uYm9va21hcmtGbGFnID0gZmFsc2U7XHJcbiAgICAgIHByb2plY3RTdG9yZS5zZXQocHJvamVjdCk7XHJcblxyXG4gICAgICAkKFwiI2Nob29zZVByb2plY3RcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAobG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJjdXJyZW50UHJvamVjdFwiKSkge1xyXG4gICAgICBsZXQgY3VycmVudFByb2plY3QgPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcImN1cnJlbnRQcm9qZWN0XCIpO1xyXG4gICAgICB2bS5wcm9qZWN0ID0gY3VycmVudFByb2plY3Q7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHZtLnByb2plY3QsIFwidm0ucHJvamVjdFwiKVxyXG4gICAgICB2bS5wcm9qZWN0TmFtZSA9IGN1cnJlbnRQcm9qZWN0LnByb2plY3ROYW1lO1xyXG4gICAgICB2bS5sb2FkUHJvamVjdEZpbGVzKHZtLnByb2plY3QuX2lkKTtcclxuXHJcbiAgICAgIGxldCBhbHJlYWR5Qm9va21hcmtlZCA9IGZhbHNlO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godm0uYm9va21hcmtlZFByb2plY3QsIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICBpZiAoeC5faWQgPT0gY3VycmVudFByb2plY3QuX2lkKSB7XHJcbiAgICAgICAgICByZXR1cm4gKGFscmVhZHlCb29rbWFya2VkID0gdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghYWxyZWFkeUJvb2ttYXJrZWQpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBpbmRleCA9IHZtLmJvb2ttYXJrZWRQcm9qZWN0TGlzdC5maW5kSW5kZXgoZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICByZXR1cm4geC5faWQgPT0gXCJvdGhlcnNcIjtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdm0uYm9va21hcmtlZFByb2plY3RMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICB2bS5ib29rbWFya2VkUHJvamVjdExpc3QucHVzaChjdXJyZW50UHJvamVjdCk7XHJcbiAgICAgICAgICB2bS5ib29rbWFya2VkUHJvamVjdExpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIF9pZDogXCJvdGhlcnNcIixcclxuICAgICAgICAgICAgcHJvamVjdE5hbWU6IFwiQWxsIFByb2plY3QgTGlzdFwiXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9LCAxNTAwKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qIEV2ZW50IGhhbmRsZXIgdG8gcmVzZXQgYWRkIG1hdGVyaWFsIG1vZGFsICovXHJcbiAgICAkKFwiI2Nob29zZVByb2plY3RcIikub24oXCJoaWRlLmJzLm1vZGFsXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2bS5lbmFibGVMYXp5TG9hZCA9IGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdm0uY2xvc2VQcm9qZWN0UGlja2VyID0gKCkgPT4ge1xyXG4gICAgICAkKFwiI2Nob29zZVByb2plY3RcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICB2bS5wcm9qZWN0ID0gbnVsbDtcclxuICAgICAgcHJvamVjdFN0b3JlLnNldChcIlwiKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uY2hlY2tCb29rbWFyayA9IGRhdGEgPT4ge1xyXG4gICAgICBsZXQgYm9va21hcmsgPSB0cnVlO1xyXG4gICAgICBsZXQgYWxyZWFkeUJvb2ttYXJrZWQgPSBmYWxzZTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLmJvb2ttYXJrZWRQcm9qZWN0LCBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgaWYgKHguX2lkID09IGRhdGEuX2lkKSB7XHJcbiAgICAgICAgICByZXR1cm4gKGFscmVhZHlCb29rbWFya2VkID0gdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKGFscmVhZHlCb29rbWFya2VkKSB7XHJcbiAgICAgICAgYm9va21hcmsgPSBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBib29rbWFyayA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuYm9va01hcmtQcm9qZWN0KHByb2plY3RTdG9yZS5nZXQoKS5faWQsIGJvb2ttYXJrKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgaWYgKGJvb2ttYXJrKSB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiUHJvamVjdCBzdWNjZXNzZnVsbHkgYm9va21hcmtlZFwiKTtcclxuICAgICAgICAgICAgdm0uYm9va21hcmtlZFByb2plY3QucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgdm0uYm9va21hcmtGbGFnID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFxyXG4gICAgICAgICAgICAgIFwiUHJvamVjdCBzdWNjZXNzZnVsbHkgcmVtb3ZlZCBmcm9tIGJvb2ttYXJrIGxpc3RcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB2bS5ib29rbWFya2VkUHJvamVjdC5maW5kSW5kZXgoZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiB4Ll9pZCA9PSBkYXRhLl9pZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZtLmJvb2ttYXJrZWRQcm9qZWN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHZtLmJvb2ttYXJrRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5hZGRNb3JlID0gKCkgPT4ge1xyXG4gICAgICBpZiAoZW5hYmxlZCkge1xyXG4gICAgICAgIGVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBlbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgIGNodW5rU2l6ZSArPSA1O1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5saXN0QWxsUHJvamVjdHMoe1xyXG4gICAgICAgICAgICBzZWFyY2g6IHZtLnByb2plY3RTZWFyY2gsXHJcbiAgICAgICAgICAgIGNodW5rOiBjaHVua1NpemUsXHJcbiAgICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICAgIHNvcnQ6IHZtLnNvcnRQYXJhbXMuZmllbGQsXHJcbiAgICAgICAgICAgIHNvcnRUeXBlOiB2bS5zb3J0UGFyYW1zLnR5cGVcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgdm0ucHJvamVjdFBpY2tlckRhdGEgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKiBGaWxlIHBpY2tlciBvcHRpb25zICovXHJcblxyXG4gICAgdm0uZmlsZVBpY2tlck9wdGlvbnMgPSB7XHJcbiAgICAgIGZpbHRlcjogXCJwZGZcIlxyXG4gICAgfTtcclxuICAgIC8qIEZ1bmN0aW9uIHRvIHNlYXJjaCBwcm9qZWN0cyAqL1xyXG4gICAgdm0uc2VhcmNoUHJvamVjdHMgPSB0ZXh0ID0+IHtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5saXN0QWxsUHJvamVjdHMoe1xyXG4gICAgICAgICAgc2VhcmNoOiB2bS5wcm9qZWN0U2VhcmNoLFxyXG4gICAgICAgICAgY2h1bms6IGNodW5rU2l6ZSxcclxuICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICBzb3J0OiB2bS5zb3J0UGFyYW1zLmZpZWxkLFxyXG4gICAgICAgICAgc29ydFR5cGU6IHZtLnNvcnRQYXJhbXMudHlwZVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5wcm9qZWN0UGlja2VyRGF0YSA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIEZ1bmN0aW9uIHRvIHNvcnQgcHJvamVjdHMgKi9cclxuICAgIHZtLnNvcnQgPSBmaWVsZCA9PiB7XHJcbiAgICAgIGlmICh2bS5zb3J0UGFyYW1zLmZpZWxkID09PSBmaWVsZCkge1xyXG4gICAgICAgIHZtLnNvcnRQYXJhbXMudHlwZSA9ICF2bS5zb3J0UGFyYW1zLnR5cGU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0uc29ydFBhcmFtcy5maWVsZCA9IGZpZWxkO1xyXG4gICAgICAgIHZtLnNvcnRQYXJhbXMudHlwZSA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAubGlzdEFsbFByb2plY3RzKHtcclxuICAgICAgICAgIHNlYXJjaDogdm0ucHJvamVjdFNlYXJjaCxcclxuICAgICAgICAgIGNodW5rOiBjaHVua1NpemUsXHJcbiAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgc29ydDogdm0uc29ydFBhcmFtcy5maWVsZCxcclxuICAgICAgICAgIHNvcnRUeXBlOiB2bS5zb3J0UGFyYW1zLnR5cGVcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgdm0ucHJvamVjdFBpY2tlckRhdGEgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUucmVkaXJlY3RUbzNEID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwicmVkaWVjdGlvbiBjYWxsZWRcIik7XHJcblxyXG4gICAgICBhcGlGYWN0b3J5LmdldDNEUGFnZSgpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVzcG9uc2U6XCIsIHJlc3BvbnNlKTtcclxuICAgICAgICAvLyBpZiAocmVzcG9uc2UuZGF0YSA9PSBcInRydWVcIikge1xyXG4gICAgICAgIC8vICAgY29uc29sZS5sb2coXCJjb25zb2xlIHdoZW4gcmVzcG9uc2UgdHJ1ZVwiLHJlc3BvbnNlKTtcclxuICAgICAgICAvLyAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiaHR0cHM6Ly9jbG91ZGVzLTNkLmNvbVwiO1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICBjb25zb2xlLmxvZyhcImNvbnNvbGUgd2hlbiByZXNwb25zZSBmYWxzZVwiLHJlc3BvbnNlKTtcclxuICAgICAgICAvLyAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IFwiaHR0cHM6Ly9jbG91ZGVzLTNkLmNvbVwiO1xyXG5cclxuICAgICAgICAvLyB9XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5nb1RvRmlsZU1hbmFnZXIgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwicHJvamVjdFwiLCBwcm9qZWN0U3RvcmUuZ2V0KCkpO1xyXG4gICAgICBpZiAocHJvamVjdFN0b3JlLmdldCgpKSB7XHJcbiAgICAgICAgJHN0YXRlLmdvKFwiZmlsZU1hbmFnZXJcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLndhcm5pbmcoXCJQbGVhc2Ugc2VsZWN0IGEgcHJvamVjdFwiKTtcclxuICAgICAgICAkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6ICQoXCIucHJvamVjdFwiKS5vZmZzZXQoKS50b3BcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICA1MDAsXHJcbiAgICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJChcIiNzZWxlY3RQcm9qZWN0XCIpXHJcbiAgICAgICAgICAgICAgLmZvY3VzKClcclxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJibGlua1wiKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgJChcIiNzZWxlY3RQcm9qZWN0XCIpLnJlbW92ZUNsYXNzKFwiYmxpbmtcIik7XHJcbiAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyogUm9vZiBwbGFuIGZ1bmN0aW9uYWxpdGllcyAqL1xyXG5cclxuICAgIHZtLnBsYW5QaWNrZXJQbGFucyA9IFtdO1xyXG4gICAgdm0ucm9vdEZvbGRlcnMgPSBbXTtcclxuXHJcbiAgICB2bS5vcGVuUGxhblBpY2tlciA9ICgpID0+IHtcclxuICAgICAgaWYgKCFwcm9qZWN0U3RvcmUuZ2V0KCkpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24ud2FybmluZyhcIk5vIHByb2plY3Qgc2VsZWN0ZWRcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuZ2V0UHJvamVjdFJvb2ZQbGFucyhwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgbGV0IHJvb2ZQbGFucyA9IHJlc3AuZGF0YS5kYXRhO1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoXCJyb29mUGxhblByb2plY3RcIiwgcHJvamVjdFN0b3JlLmdldCgpLl9pZCk7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldChcInJvb2ZQbGFuc1wiLCByb29mUGxhbnMpO1xyXG4gICAgICAgICAgdm0ucGxhblBpY2tlclBsYW5zID0gcm9vZlBsYW5zO1xyXG4gICAgICAgICAgJChcIiNjaG9vc2VSb29mTW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmdldEhpZXJhcmNoeShwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkKVxyXG5cclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLnNob3dUcmVlID0gdHJ1ZTtcclxuICAgICAgICAgIHZtLnJvb3RGb2xkZXJzID0gcmVzcC5kYXRhLmRhdGEuaGllcmFyY2hpZXM7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uY2hvb3NlUGxhbiA9IHBsYW4gPT4ge1xyXG4gICAgICAkKFwiI2Nob29zZVJvb2ZNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFwic2VsZWN0ZWRQbGFuXCIsIHBsYW4pO1xyXG4gICAgICAkc3RhdGUuZ28oXCJ2aXN1YWxQbGFubmVyXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5hbGxNb2RhbENsb3NlID0gKCkgPT4ge1xyXG4gICAgICAkKFwiI2Nob29zZUZpbGUsICNzZWxlY3RGaWxlQ2FudmFzLCAjc2VsZWN0RmlsZSwgI2Nob29zZVJvb2ZNb2RhbFwiKS5tb2RhbChcclxuICAgICAgICBcImhpZGVcIlxyXG4gICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5maWxlQ2hvb3NlID0gKCkgPT4ge1xyXG4gICAgICB2bS5waWNrZXJGb2xkZXJzID0gYW5ndWxhci5jb3B5KHZtLnJvb3RGb2xkZXJzKTtcclxuICAgICAgJChcIiNjaG9vc2VGaWxlXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgJChcIiNjaG9vc2VGaWxlXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgJChcIiNjaG9vc2VGaWxlIC5tb2RhbC1kaWFsb2dcIikuY3NzKHtcclxuICAgICAgICBcIi13ZWJraXQtYm94LXNoYWRvd1wiOiBcIjBweCAwcHggNDdweCA2cHggcmdiYSgwLCAwLCAwLCAwLjc1KVwiLFxyXG4gICAgICAgIFwiLW1vei1ib3gtc2hhZG93XCI6IFwiMHB4IDBweCA0N3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuNzUpXCIsXHJcbiAgICAgICAgXCJib3gtc2hhZG93XCI6IFwiMHB4IDBweCA0N3B4IDZweCByZ2JhKDAsIDAsIDAsIDAuNzUpXCJcclxuICAgICAgfSk7XHJcbiAgICAgICQoXCIucm9vdEZvbGRlclwiKS5zaG93KCk7XHJcbiAgICAgICQoXCIuY2hpbGRGb2xkZXJcIikuaGlkZSgpO1xyXG4gICAgICB2bS5tb3ZldG8gPSBcIm1vdmUgVG9cIjtcclxuICAgICAgJHNjb3BlLmZvbGRlck5hbWUgPSBcIlJvb3QgRm9sZGVyXCI7XHJcbiAgICAgIGlmICgkc2NvcGUuZm9sZGVyTmFtZSA9PSBcIlJvb3QgRm9sZGVyXCIpIHtcclxuICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5iYWNrQnRuVmlldyA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLiRvbihcImxvYWRlclwiLCAoZSwgZGF0YSkgPT4ge1xyXG4gICAgICB2bS5sb2FkZXIgPSBkYXRhO1xyXG4gICAgICBpZiAodm0ubG9hZGVyKSB7XHJcbiAgICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJtb2RhbC1vcGVuXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICQoXCJib2R5XCIpLnJlbW92ZUNsYXNzKFwibW9kYWwtb3BlblwiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAkc2NvcGUuJG9uKFwic2VsZWN0ZWRSb29mUGxhbkRvY1wiLCAoZSwgZGF0YSkgPT4ge1xyXG4gICAgICB2bS5zZWxlY3RlZEFzc2V0Rm9yUGxhbiA9IGRhdGE7XHJcblxyXG4gICAgICB2bS5yb29mcGxhbkJyZWFkQ3J1bWIgPVxyXG4gICAgICAgIGRhdGEuYnJlYWRDcnVtYnMucmVkdWNlKChhY2MsIHgpID0+IHtcclxuICAgICAgICAgIGFjYyArPSBgJHt4Lm5hbWV9ID4gYDtcclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwgXCJcIikgKyBkYXRhLmFzc2V0TmFtZTtcclxuXHJcbiAgICAgIGlmICgvY2xvdWRpbmFyeS8udGVzdChkYXRhLnNlY3VyZV91cmwpKSB7XHJcbiAgICAgICAgdm0uZmlsZUFycmF5ID0gZ2xvYmFscy5leHRyYWN0UGFnZXNGcm9tUGRmKGRhdGEuc2VjdXJlX3VybCwgZGF0YS5wYWdlcyk7XHJcbiAgICAgICAgdm0ubG9hZGVyID0gZmFsc2U7XHJcbiAgICAgICAgJChcIiNjaG9vc2VSb29mTW9kYWxcIikuY3NzKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICAgICAkKFwiI3NlbGVjdEZpbGVcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgICQoXCIjc2VsZWN0RmlsZVwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgdm0ucGRmRmlsZXMgPSBhbmd1bGFyLmNvcHkodm0uZmlsZUFycmF5KTtcclxuICAgICAgICBjb25zb2xlLmxvZyh2bS5maWxlQXJyYXkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChkYXRhLnBsYW5Eb2N1bWVudCkge1xyXG4gICAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZtLnBkZlBhZ2VzRGF0YSA9IHZtLnBkZkZpbGVzID0gZGF0YS5wbGFuSW1hZ2VzLm1hcCgoeCwgaSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgb2JqID0ge1xyXG4gICAgICAgICAgICAgIHBhZ2VObzogaSxcclxuICAgICAgICAgICAgICB0aXRsZTogYHRpdGxlXyR7RGF0ZS5ub3coKX1gLFxyXG4gICAgICAgICAgICAgIHVybDogeCxcclxuICAgICAgICAgICAgICBzZWxlY3RlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB2bS5sb2FkZXIgPSBmYWxzZTtcclxuICAgICAgICAgICQoXCIjY2hvb3NlUm9vZk1vZGFsXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAkKFwiI3NlbGVjdEZpbGVcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgICAgJChcIiNzZWxlY3RGaWxlXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZ2xvYmFscy5jcmVhdGVQYWdlc0Zyb21QZGYoZGF0YSkudGhlbihwYWdlcyA9PiB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2bS5wZGZQYWdlc0RhdGEgPSBwYWdlcztcclxuICAgICAgICAgICAgdm0ucGRmRmlsZXMgPSBwYWdlcztcclxuICAgICAgICAgICAgdm0ubG9hZGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICQoXCIjY2hvb3NlUm9vZk1vZGFsXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICQoXCIjc2VsZWN0RmlsZUNhbnZhc1wiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgICAgICAgICQoXCIjc2VsZWN0RmlsZUNhbnZhc1wiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdm0uaGlkZVNlbGVjdEZpbGUgPSAoKSA9PiB7XHJcbiAgICAgICQoXCIjY2hvb3NlUm9vZk1vZGFsXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xyXG4gICAgICAkKFwiI3NlbGVjdEZpbGVcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICB9O1xyXG4gICAgdm0uc2VsZWN0ZWRGaWxlTGlzdCA9ICh2YWwsIHR5cGUsIGFzc2V0KSA9PiB7XHJcbiAgICAgIGlmICh2YWwgPT0gXCJzdWJtaXRcIikge1xyXG4gICAgICAgICQoXCIjY2hvb3NlRmlsZSwgI3NlbGVjdEZpbGUsICNzZWxlY3RGaWxlQ2FudmFzXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJub25lXCIpO1xyXG4gICAgICAgICQoXCIjY2hvb3NlUm9vZk1vZGFsXCIpLmNzcyhcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xyXG4gICAgICAgIHZtLnNlbGVjdGVkRmlsZXMgPSBbXTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2godm0ucGRmRmlsZXMsIHggPT4ge1xyXG4gICAgICAgICAgaWYgKHguc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgdm0uc2VsZWN0ZWRGaWxlcy5wdXNoKHgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0eXBlID09PSAxKSB7XHJcbiAgICAgICAgICBsZXQgZW5kcG9pbnQgPVxyXG4gICAgICAgICAgICAhYXNzZXQucGxhbkRvY3VtZW50ICYmIC9jbG91ZGluYXJ5Ly50ZXN0KGFzc2V0LnNlY3VyZV91cmwpXHJcbiAgICAgICAgICAgICAgPyBcImFkZFByb2plY3RSb29mUGxhblwiXHJcbiAgICAgICAgICAgICAgOiBcImFkZFJvb2ZQbGFuc0Zyb21Bc3NldFwiO1xyXG4gICAgICAgICAgLyogQ2xvdWRpbmFyeSBwbGFucyAqL1xyXG4gICAgICAgICAgbGV0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIGFzc2V0SWQ6IGFzc2V0Ll9pZCxcclxuICAgICAgICAgICAgcHJvamVjdElkOiBwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkLFxyXG4gICAgICAgICAgICBwYWdlczogdm0uc2VsZWN0ZWRGaWxlc1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBhcGlGYWN0b3J5W2VuZHBvaW50XShwYXlsb2FkKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgICAgLmdldFByb2plY3RSb29mUGxhbnMocHJvamVjdFN0b3JlLmdldCgpLl9pZClcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBsZXQgcm9vZlBsYW5zID0gcmVzcC5kYXRhLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFxyXG4gICAgICAgICAgICAgICAgICAgIFwicm9vZlBsYW5Qcm9qZWN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdFN0b3JlLmdldCgpLl9pZFxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldChcInJvb2ZQbGFuc1wiLCByb29mUGxhbnMpO1xyXG4gICAgICAgICAgICAgICAgICB2bS5wbGFuUGlja2VyUGxhbnMgPSByb29mUGxhbnM7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvKiBTMyBwbGFucyAqL1xyXG4gICAgICAgICAgbGV0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIGFzc2V0SWQ6IGFzc2V0Ll9pZCxcclxuICAgICAgICAgICAgcGRmVXJsOiBhc3NldC5zZWN1cmVfdXJsLFxyXG4gICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RTdG9yZS5nZXQoKS5faWQsXHJcbiAgICAgICAgICAgIHBhZ2VzOiB2bS5zZWxlY3RlZEZpbGVzLnJlZHVjZSgoYWNjLCB4KSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IG9iaiA9IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB4LnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHguZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICBwYWdlTm86IHgucGFnZU5vXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBhY2MucHVzaChvYmopO1xyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIFtdKVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgLmdlbmVyYXRlUm9vZlBsYW5zKHBheWxvYWQpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgICAgICAuZ2V0UHJvamVjdFJvb2ZQbGFucyhwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGxldCByb29mUGxhbnMgPSByZXNwLmRhdGEuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoXHJcbiAgICAgICAgICAgICAgICAgICAgXCJyb29mUGxhblByb2plY3RcIixcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFwicm9vZlBsYW5zXCIsIHJvb2ZQbGFucyk7XHJcbiAgICAgICAgICAgICAgICAgIHZtLnBsYW5QaWNrZXJQbGFucyA9IHJvb2ZQbGFucztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHZhbCA9PSBcImNsb3NlXCIpIHtcclxuICAgICAgICAkKFwiI2Nob29zZUZpbGUsICNzZWxlY3RGaWxlLCAjc2VsZWN0RmlsZUNhbnZhc1wiKS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcclxuICAgICAgICAkKFwiI2Nob29zZVJvb2ZNb2RhbFwiKS5jc3MoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5nb1RvTWVldGluZ1Jvb20gPSAoKSA9PiB7XHJcbiAgICAgIGlmIChwcm9qZWN0U3RvcmUuZ2V0KCkpIHtcclxuICAgICAgICAkc3RhdGUuZ28oXCJtZWV0aW5ncm9vbVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBOb3RpZmljYXRpb24ud2FybmluZyhcIlBsZWFzZSBzZWxlY3QgYSBwcm9qZWN0XCIpO1xyXG4gICAgICAgICQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjcm9sbFRvcDogJChcIi5wcm9qZWN0XCIpLm9mZnNldCgpLnRvcFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIDUwMCxcclxuICAgICAgICAgIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKFwiI3NlbGVjdFByb2plY3RcIilcclxuICAgICAgICAgICAgICAuZm9jdXMoKVxyXG4gICAgICAgICAgICAgIC5hZGRDbGFzcyhcImJsaW5rXCIpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAkKFwiI3NlbGVjdFByb2plY3RcIikucmVtb3ZlQ2xhc3MoXCJibGlua1wiKTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImVjb25vbWljQ3RybFwiLCBlY29ub21pY0N0cmwpO1xyXG5cclxuICBmdW5jdGlvbiBlY29ub21pY0N0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBOZ01hcCxcclxuICAgIFVwbG9hZCxcclxuICAgIG1vbWVudCxcclxuICAgICRsb2NhdGlvblxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBkZWJvdW5jZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2codm0udXNlckRhdGEpXHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiAkc2NvcGUuYWN0aXZlQ2xhc3MgPSBmdW5jdGlvbiAocGF0aCkge1xyXG4gICAgICByZXR1cm4gKCRsb2NhdGlvbi5wYXRoKCkuc3Vic3RyKDAsIHBhdGgubGVuZ3RoKSA9PT0gcGF0aCkgPyAnYWN0aXZlJyA6ICcnO1xyXG4gICAgfSAqL1xyXG4gICAgJHNjb3BlLmFjdGl2ZUNsYXNzID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgcmV0dXJuICgkbG9jYXRpb24ucGF0aCgpID09PSBwYXRoKSA/ICdhY3RpdmUnIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgdm0uYW5pbWF0ZUVsZW1lbnRzID0gKCkgPT4ge1xyXG4gICAgICAkKCcucHJvZ3Jlc3NiYXInKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudFBvcyA9ICQodGhpcykub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgIHZhciB0b3BPZldpbmRvdyA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuICAgICAgICB2YXIgcGVyY2VudCA9ICQodGhpcykuZmluZCgnLmNpcmNsZScpLmF0dHIoJ2RhdGEtcGVyY2VudCcpO1xyXG4gICAgICAgIHZhciBwZXJjZW50YWdlID0gcGFyc2VJbnQocGVyY2VudCwgMTApIC8gcGFyc2VJbnQoMTAwLCAxMCk7XHJcbiAgICAgICAgdmFyIGFuaW1hdGUgPSAkKHRoaXMpLmRhdGEoJ2FuaW1hdGUnKTtcclxuICAgICAgICBpZiAoZWxlbWVudFBvcyA8IHRvcE9mV2luZG93ICsgJCh3aW5kb3cpLmhlaWdodCgpIC0gMzAgJiYgIWFuaW1hdGUpIHtcclxuICAgICAgICAgICQodGhpcykuZGF0YSgnYW5pbWF0ZScsIHRydWUpO1xyXG4gICAgICAgICAgJCh0aGlzKS5maW5kKCcuY2lyY2xlJykuY2lyY2xlUHJvZ3Jlc3Moe1xyXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiAtTWF0aC5QSSAvIDIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBwZXJjZW50IC8gMTAwLFxyXG4gICAgICAgICAgICBzaXplOiAxODAsXHJcbiAgICAgICAgICAgIHRoaWNrbmVzczogOCxcclxuICAgICAgICAgICAgZW1wdHlGaWxsOiBcInJnYmEoMCwwLDAsIC4yKVwiLFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgY29sb3I6ICcjNDNmNmZkJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KS5vbignY2lyY2xlLWFuaW1hdGlvbi1wcm9ncmVzcycsIGZ1bmN0aW9uIChldmVudCwgcHJvZ3Jlc3MsIHN0ZXBWYWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdkaXYnKS50ZXh0KChzdGVwVmFsdWUgKiAxMDApLnRvRml4ZWQoMCkpO1xyXG4gICAgICAgICAgfSkuc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBTaG93IGFuaW1hdGVkIGVsZW1lbnRzXHJcbiAgICB2bS5hbmltYXRlRWxlbWVudHMoKTtcclxuICAgICQod2luZG93KS5zY3JvbGwodm0uYW5pbWF0ZUVsZW1lbnRzKCkpO1xyXG5cclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImVjb25vbWljUGF5cm9sbEN0cmxcIiwgZWNvbm9taWNQYXlyb2xsQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIGVjb25vbWljUGF5cm9sbEN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBOZ01hcCxcclxuICAgIFVwbG9hZCxcclxuICAgIG1vbWVudCxcclxuICAgICRsb2NhdGlvblxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBkZWJvdW5jZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyh2bS51c2VyRGF0YSlcclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5hY3RpdmVDbGFzcyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiAoJGxvY2F0aW9uLnBhdGgoKSA9PT0gcGF0aCkgPyAnYWN0aXZlJyA6ICcnO1xyXG4gICAgfVxyXG5cclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiZW1wbG95ZWVzQ3RybFwiLCBlbXBsb3llZXNDdHJsKTtcclxuXHJcbiAgICBmdW5jdGlvbiBlbXBsb3llZXNDdHJsKFxyXG4gICAgICAgICRzY29wZSxcclxuICAgICAgICAkdGltZW91dCxcclxuICAgICAgICBhdXRoRmFjdG9yeSxcclxuICAgICAgICAkc3RhdGUsXHJcbiAgICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgICBOb3RpZmljYXRpb24sXHJcbiAgICAgICAgTmdNYXAsXHJcbiAgICAgICAgZ2xvYmFscyxcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICApIHtcclxuICAgICAgICBsZXQgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICBjb25zdCB7IGxvZ291dCB9ID0gZ2xvYmFscztcclxuICAgIFxyXG4gICAgICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgXHJcblxyXG59KSgpOyIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImVxdWlwbWVudEN0cmxcIiwgZXF1aXBtZW50Q3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIGVxdWlwbWVudEN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBVcGxvYWQsXHJcbiAgICBOZ01hcFxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuXHJcbiAgICAkc2NvcGUuZXF1aXBtZW50ID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL2VxdWlwbWVudC5wbmdcIixcclxuICAgICAgICB0aXRsZTogXCJFcXVpcG1lbnQgQUJDXCIsXHJcbiAgICAgICAgc3VidGl0bGU6IFwiRVEgLSAxMjM0XCIsXHJcbiAgICAgICAgd29yazogXCJXb3JrZXIgSURcIixcclxuICAgICAgICB0YWc6IFwiTk5TMSAtIEtpbSBNb3NlZ2FhcmRcIlxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL2VxdWlwbWVudC5wbmdcIixcclxuICAgICAgICB0aXRsZTogXCJFcXVpcG1lbnQgQUJDXCIsXHJcbiAgICAgICAgc3VidGl0bGU6IFwiRVEgLSAxMjM0XCIsXHJcbiAgICAgICAgd29yazogXCJDYXJcIixcclxuICAgICAgICB0YWc6IFwiTlIuIDk5XCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGltZzogXCIvYXNzZXRzL2ltYWdlcy9lcXVpcG1lbnQucG5nXCIsXHJcbiAgICAgICAgdGl0bGU6IFwiRXF1aXBtZW50IEFCQ1wiLFxyXG4gICAgICAgIHN1YnRpdGxlOiBcIkVRIC0gMTIzNFwiLFxyXG4gICAgICAgIHdvcms6IFwiV29ya2VyIElEXCIsXHJcbiAgICAgICAgdGFnOiBcIk5OUzEgLSBLaW0gTW9zZWdhYXJkXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGltZzogXCIvYXNzZXRzL2ltYWdlcy9lcXVpcG1lbnQucG5nXCIsXHJcbiAgICAgICAgdGl0bGU6IFwiRXF1aXBtZW50IEFCQ1wiLFxyXG4gICAgICAgIHN1YnRpdGxlOiBcIkVRIC0gMTIzNFwiLFxyXG4gICAgICAgIHdvcms6IFwiV29ya2VyIElEXCIsXHJcbiAgICAgICAgdGFnOiBcIk5OUzEgLSBLaW0gTW9zZWdhYXJkXCJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIGltZzogXCIvYXNzZXRzL2ltYWdlcy9lcXVpcG1lbnQucG5nXCIsXHJcbiAgICAgICAgdGl0bGU6IFwiRXF1aXBtZW50IEFCQ1wiLFxyXG4gICAgICAgIHN1YnRpdGxlOiBcIkVRIC0gMTIzNFwiLFxyXG4gICAgICAgIHdvcms6IFwiQ2FyXCIsXHJcbiAgICAgICAgdGFnOiBcIk5SLiA5OVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpbWc6IFwiL2Fzc2V0cy9pbWFnZXMvZXF1aXBtZW50LnBuZ1wiLFxyXG4gICAgICAgIHRpdGxlOiBcIkVxdWlwbWVudCBBQkNcIixcclxuICAgICAgICBzdWJ0aXRsZTogXCJFUSAtIDEyMzRcIixcclxuICAgICAgICB3b3JrOiBcIldvcmtlciBJRFwiLFxyXG4gICAgICAgIHRhZzogXCJOTlMxIC0gS2ltIE1vc2VnYWFyZFwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpbWc6IFwiL2Fzc2V0cy9pbWFnZXMvZXF1aXBtZW50LnBuZ1wiLFxyXG4gICAgICAgIHRpdGxlOiBcIkVxdWlwbWVudCBBQkNcIixcclxuICAgICAgICBzdWJ0aXRsZTogXCJFUSAtIDEyMzRcIixcclxuICAgICAgICB3b3JrOiBcIldvcmtlciBJRFwiLFxyXG4gICAgICAgIHRhZzogXCJOTlMxIC0gS2ltIE1vc2VnYWFyZFwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBpbWc6IFwiL2Fzc2V0cy9pbWFnZXMvZXF1aXBtZW50LnBuZ1wiLFxyXG4gICAgICAgIHRpdGxlOiBcIkVxdWlwbWVudCBBQkNcIixcclxuICAgICAgICBzdWJ0aXRsZTogXCJFUSAtIDEyMzRcIixcclxuICAgICAgICB3b3JrOiBcIkNhclwiLFxyXG4gICAgICAgIHRhZzogXCJOUi4gOTlcIlxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL2VxdWlwbWVudC5wbmdcIixcclxuICAgICAgICB0aXRsZTogXCJFcXVpcG1lbnQgQUJDXCIsXHJcbiAgICAgICAgc3VidGl0bGU6IFwiRVEgLSAxMjM0XCIsXHJcbiAgICAgICAgd29yazogXCJXb3JrZXIgSURcIixcclxuICAgICAgICB0YWc6IFwiTk5TMSAtIEtpbSBNb3NlZ2FhcmRcIlxyXG4gICAgICB9XHJcbiAgICBdO1xyXG4gICAgJHNjb3BlLmltZ191cGxvYWQgPSBbXHJcbiAgICAgIHsgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL2VxdWlwbWVudDMucG5nXCIgfSxcclxuICAgICAgeyBpbWc6IFwiL2Fzc2V0cy9pbWFnZXMvZXF1aXBtZW50My5wbmdcIiB9LFxyXG4gICAgICB7IGltZzogXCIvYXNzZXRzL2ltYWdlcy9lcXVpcG1lbnQzLnBuZ1wiIH1cclxuICAgIF07XHJcbiAgICAkc2NvcGUuZXF1aXBkb2N1bWVudHMgPSBbXHJcbiAgICAgIHsgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL3BkZi5wbmdcIiwgdHlwZTogXCJEb2N1bWVudF8xLnBkZlwiIH0sXHJcbiAgICAgIHsgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL3BkZi5wbmdcIiwgdHlwZTogXCJEb2N1bWVudF8yLnBkZlwiIH0sXHJcbiAgICAgIHsgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL3BkZi5wbmdcIiwgdHlwZTogXCJEb2N1bWVudF8zLnBkZlwiIH1cclxuICAgIF07XHJcblxyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdm0uaW5wdXRGaWxlcyA9IFtdO1xyXG4gICAgdm0udXBsb2FkRmlsZXMgPSBbXTtcclxuXHJcbiAgICAkKFwiLnBheXJvbGxNZW51XCIpLmhpZGUoKTtcclxuICAgIC8qIEdldCBwcm9qZWN0IGxpc3QgKi9cclxuXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipHb29nbGUgTWFwICovXHJcbiAgICB2bS5nbWFwID0ge1xyXG4gICAgICB1cmw6XHJcbiAgICAgICAgXCJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUEzTUlBLW1LV3FfNjBxMUswek9IZ3VyYXhULTFRUHhOVSZsaWJyYXJpZXM9cGxhY2VzXCIsXHJcbiAgICAgIG1hcmtlcnM6IFtdLFxyXG4gICAgICBzdHlsZXM6IFtdLFxyXG4gICAgICBjZW50ZXI6IFwiNDEsLTg3XCIsXHJcbiAgICAgIHpvb206IDNcclxuICAgIH07XHJcbiAgICBsZXQgZ0FyeUxvY2F0aW9uID0gW107XHJcblxyXG4gICAgdm0ucGxhY2VNYXJrZXIgPSBmdW5jdGlvbihtYXApIHtcclxuICAgICAgY29uc3QgcGxhY2VEYXRhID0gdGhpcy5nZXRQbGFjZSgpLmdlb21ldHJ5LmxvY2F0aW9uO1xyXG4gICAgICB2bS5nbWFwLm1hcmtlcnMgPSBbW3BsYWNlRGF0YS5sYXQoKSwgcGxhY2VEYXRhLmxuZygpXV07XHJcbiAgICAgIHZtLmdtYXAuem9vbSA9IDE1O1xyXG4gICAgICB2bS5nbWFwLmNlbnRlciA9IGAke3BsYWNlRGF0YS5sYXQoKX0sJHtwbGFjZURhdGEubG5nKCl9YDtcclxuICAgICAgLy8gdm0uZXZlbnQubG9jYXRpb24gPSAgW3BsYWNlRGF0YS5sYXQoKSwgcGxhY2VEYXRhLmxuZygpXVxyXG4gICAgICBnQXJ5TG9jYXRpb24gPSBbcGxhY2VEYXRhLmxhdCgpLCBwbGFjZURhdGEubG5nKCldO1xyXG4gICAgfTtcclxuICAgIE5nTWFwLmdldE1hcCgpLnRoZW4obWFwID0+IHtcclxuICAgICAgdm0ubWFwID0gbWFwO1xyXG4gICAgICBtYXAuc2V0T3B0aW9ucyh7XHJcbiAgICAgICAgc3R5bGVzOiB2bS5nbWFwLnN0eWxlcyxcclxuICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiB0cnVlLFxyXG4gICAgICAgIHpvb21Db250cm9sOiB0cnVlLFxyXG4gICAgICAgIHpvb206IDEsXHJcbiAgICAgICAgY2VudGVyOiB7XHJcbiAgICAgICAgICBsYXQ6IDAsXHJcbiAgICAgICAgICBsbmc6IDBcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJChcIi5tYXRlcmlhbExpc3RcIikuRGF0YVRhYmxlKCk7XHJcbiAgICBhcGlGYWN0b3J5XHJcbiAgICAgIC5saXN0QWxsRXF1aXBtZW50cygpXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIHZtLmVxdWlwbWVudCA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8qIERhdGEgdGFibGUgc2V0dXAgKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICB2bS5kdE9wdGlvbnMgPSB7XHJcbiAgICAgIHBhZ2luZzogZmFsc2UsXHJcbiAgICAgIGluZm86IGZhbHNlLFxyXG4gICAgICBvcmRlcmluZzogZmFsc2VcclxuICAgIH07XHJcbiAgICAkKFwiLmVxdWlwbWVudExpc3RcIikuRGF0YVRhYmxlKCk7XHJcblxyXG4gICAgJHNjb3BlLmFjdGl2ZUp1c3RpZmllZCA9IDA7XHJcblxyXG4gICAgdm0uY3VycmVudFBhZ2UgPSAxO1xyXG5cclxuICAgIHZtLnRvZ2dsZU9iaiA9IHtcclxuICAgICAgc3lzdGVtVGFnOiB0cnVlLFxyXG4gICAgICBtYXRlcmlhbENvc3Q6IGZhbHNlLFxyXG4gICAgICByb29mZXJDb3N0OiBmYWxzZSxcclxuICAgICAgY3JlYXRlZEF0OiBmYWxzZSxcclxuICAgICAgbmFtZTogZmFsc2VcclxuICAgIH07XHJcbiAgICB2bS5zZWFyY2hUZXh0ID0gXCJcIjtcclxuICAgIHZtLnNvcnRFcXVpcG1lbnQgPSB0eXBlID0+IHtcclxuICAgICAgLyogRm9yIHRvZ2dsaW5nIGFzY2VuZGluZyBhbmQgZGVzY2VuZGluZyBvcmRlciAqL1xyXG4gICAgICB2bS50b2dnbGVPYmpbdHlwZV0gPT09IHVuZGVmaW5lZFxyXG4gICAgICAgID8gKHZtLnRvZ2dsZU9ialt0eXBlXSA9IHRydWUpXHJcbiAgICAgICAgOiAodm0udG9nZ2xlT2JqW3R5cGVdID0gIXZtLnRvZ2dsZU9ialt0eXBlXSk7XHJcblxyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmxpc3RBbGxFcXVpcG1lbnRzKHtcclxuICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgc2VhcmNoOiB2bS5zZWFyY2hUZXh0LFxyXG4gICAgICAgICAgc29ydFR5cGU6IHZtLnRvZ2dsZU9ialt0eXBlXVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5lcXVpcG1lbnQgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHZtLmVxdWlwbWVudCk7XHJcbiAgICAgICAgICB2bS5lcXVpcG1lbnRDb3VudCA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgJChcIiNlcXVpcG1lbnRQYWdpbmF0aW9uXCIpLnBhZ2luYXRpb24oe1xyXG4gICAgICAgICAgICAgIGl0ZW1zOiB2bS5lcXVpcG1lbnRDb3VudCxcclxuICAgICAgICAgICAgICBpdGVtc09uUGFnZTogMTAsXHJcbiAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICBocmVmVGV4dFByZWZpeDogXCIjXCIsXHJcbiAgICAgICAgICAgICAgb3JkZXJpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG4gICAgICAgICAgICAgIG9uUGFnZUNsaWNrOiBmdW5jdGlvbihwYWdlLCBldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgICAgLmxpc3RBbGxFcXVpcG1lbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbdHlwZV1cclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZXF1aXBtZW50ID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNlYXJjaEVxdWlwbWVudCA9IHRleHQgPT4ge1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmxpc3RBbGxFcXVpcG1lbnRzKHtcclxuICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICBzZWFyY2g6IHRleHQsXHJcbiAgICAgICAgICBzb3J0OiBcImNyZWF0ZWREYXRlXCIsXHJcbiAgICAgICAgICBzb3J0VHlwZTogZmFsc2VcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgdm0uZXF1aXBtZW50ID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICB2bS5lcXVpcG1lbnRDb3VudCA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgJChcIiNlcXVpcG1lbnRQYWdpbmF0aW9uXCIpLnBhZ2luYXRpb24oe1xyXG4gICAgICAgICAgICAgIGl0ZW1zOiB2bS5lcXVpcG1lbnRDb3VudCxcclxuICAgICAgICAgICAgICBpdGVtc09uUGFnZTogMTAsXHJcbiAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICBocmVmVGV4dFByZWZpeDogXCIjXCIsXHJcbiAgICAgICAgICAgICAgb3JkZXJpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG4gICAgICAgICAgICAgIG9uUGFnZUNsaWNrOiBmdW5jdGlvbihwYWdlLCBldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgICAgLmxpc3RBbGxFcXVpcG1lbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbdHlwZV1cclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uZXF1aXBtZW50ID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIEluaXRpYWxseSBnZXR0aW5nIHRoZSB2YWx1ZXMgb2YgbWF0ZXJpYWwgYW5kIGNvbWJvIG1hdGVyaWFscyAqL1xyXG4gICAgdm0uc29ydEVxdWlwbWVudChcImNyZWF0ZWRBdFwiKTtcclxuICAgIC8qIEVuZCBvZiAgRGF0YSB0YWJsZSBzZXR1cCAqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICAgIC8qIEFkZCBtYXRlcmlhbCBmdW5jdGlvbmFsaXR5ICovXHJcblxyXG4gICAgdm0uYWRkRXF1aXBtZW50ID0ge1xyXG4gICAgICBjb252ZXJzaW9uRmFjdG9yOiAxXHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnRhYlNldHRpbmdzID0ge1xyXG4gICAgICBkaXNhYmxlOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAuZ2V0Q29tcGFueUJ5SWQodm0udXNlckRhdGEuY29tcGFueUlkKVxyXG4gICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5jb21wYW55RGF0YSA9IHJlc3AuZGF0YTtcclxuICAgICAgICB2bS5hZGRFcXVpcG1lbnQuY3VycmVuY3kgPSBhbmd1bGFyLmNvcHkoXHJcbiAgICAgICAgICB2bS5jb21wYW55RGF0YS5jdXJyZW50Q3VycmVuY3kuY3VycmVuY3lDb2RlXHJcbiAgICAgICAgKTtcclxuICAgICAgICB2bS5jb21wYW55Q3VycmVuY3kgPSBhbmd1bGFyLmNvcHkoXHJcbiAgICAgICAgICB2bS5jb21wYW55RGF0YS5jdXJyZW50Q3VycmVuY3kuY3VycmVuY3lDb2RlXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zb2xlLmxvZyh2bS5hZGRFcXVpcG1lbnQuY3VycmVuY3kpO1xyXG4gICAgICAgICQoXCIjY3VycmVuY3lcIilcclxuICAgICAgICAgIC52YWwodm0uYWRkRXF1aXBtZW50LmN1cnJlbmN5KVxyXG4gICAgICAgICAgLnRyaWdnZXIoXCJjaGFuZ2Uuc2VsZWN0MlwiKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHZtLkVxdWlwbWVudCA9IHt9O1xyXG4gICAgdm0uc2hvd0NvbnZlcnNpb25SYXRlID0gKGZyb20sIHRvKSA9PiB7XHJcbiAgICAgICQoXCIubG9hZGVyXCIpLnNob3coKTtcclxuICAgICAgbGV0IGN1cnJlbmN5RGF0YSA9IHtcclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIHRvXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChmcm9tICYmIHRvKSB7XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnNob3dDb252ZXJzaW9uUmF0ZShjdXJyZW5jeURhdGEpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgdm0uRXF1aXBtZW50LmNvbnZlcnNpb25GYWN0b3IgPSByZXNwLmRhdGEuY29udmVyc2lvbkZhY3RvcjtcclxuXHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICQoXCIubG9hZGVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0ubVVuaXRzID0gZ2xvYmFscy5tVW5pdHM7XHJcblxyXG4gICAgZ2xvYmFscy5nZXRDdXJyZW5jeSgpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgIHZtLmN1cnJlbmNpZXMgPSByZXNwLmRhdGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2bS50YWJTdHlsZSA9ICgpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHZtLmFkZE1hdGVyaWFsLm1hdGVyaWFsTmFtZSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgdm0uYWRkTWF0ZXJpYWwubWF0ZXJpYWxOYW1lICE9PSBcIiBcIlxyXG4gICAgICApIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbFVuaXQgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgdm0uYWRkTWF0ZXJpYWwubWF0ZXJpYWxVbml0ICE9PSBcIiBcIlxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB2bS5hZGRNYXRlcmlhbC5jdXJyZW5jeSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIHZtLmFkZE1hdGVyaWFsLmN1cnJlbmN5ICE9PSBcIlwiXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIHZtLmFkZE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3IgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICAgIHZtLmFkZE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3IgIT09IFwiXCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgJChcInVpYi10YWItaGVhZGluZy5pbmZvIGkuZmFcIikuYXR0cihcclxuICAgICAgICAgICAgICAgIFwic3R5bGVcIixcclxuICAgICAgICAgICAgICAgIFwiZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7IGNvbG9yOiAjM2NiZGFhXCJcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICQoXCJ1aWItdGFiLWhlYWRpbmcuaW5mbyAubnVtYmVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAkKFwiLmJ0bi1zdWNjZXNzLm5leHRcIikuYXR0cihcImRpc2FibGVkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAkKFwidWliLXRhYi1oZWFkaW5nLmluZm8gaS5mYVwiKS5hdHRyKFxyXG4gICAgICAgICAgICAgICAgXCJzdHlsZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IGNvbG9yOiAjM2NiZGFhXCJcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICQoXCJ1aWItdGFiLWhlYWRpbmcuaW5mbyAubnVtYmVyXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAkKFwiLmJ0bi1zdWNjZXNzLm5leHRcIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkKFwidWliLXRhYi1oZWFkaW5nLmluZm8gaS5mYVwiKS5hdHRyKFxyXG4gICAgICAgICAgICAgIFwic3R5bGVcIixcclxuICAgICAgICAgICAgICBcImRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsgY29sb3I6ICMzY2JkYWFcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAkKFwidWliLXRhYi1oZWFkaW5nLmluZm8gLm51bWJlclwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoXCIuYnRuLXN1Y2Nlc3MubmV4dFwiKS5hdHRyKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoXCJ1aWItdGFiLWhlYWRpbmcuaW5mbyBpLmZhXCIpLmF0dHIoXHJcbiAgICAgICAgICAgIFwic3R5bGVcIixcclxuICAgICAgICAgICAgXCJkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IGNvbG9yOiAjM2NiZGFhXCJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICAkKFwidWliLXRhYi1oZWFkaW5nLmluZm8gLm51bWJlclwiKS5zaG93KCk7XHJcbiAgICAgICAgICAkKFwiLmJ0bi1zdWNjZXNzLm5leHRcIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkKFwidWliLXRhYi1oZWFkaW5nLmluZm8gaS5mYVwiKS5hdHRyKFxyXG4gICAgICAgICAgXCJzdHlsZVwiLFxyXG4gICAgICAgICAgXCJkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IGNvbG9yOiAjM2NiZGFhXCJcclxuICAgICAgICApO1xyXG4gICAgICAgICQoXCJ1aWItdGFiLWhlYWRpbmcuaW5mbyAubnVtYmVyXCIpLnNob3coKTtcclxuICAgICAgICAkKFwiLmJ0bi1zdWNjZXNzLm5leHRcIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmFkZE1hdGVyaWFsTmV4dCA9ICgpID0+IHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHZtLmFkZE1hdGVyaWFsLm1hdGVyaWFsTmFtZSA9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbE5hbWUgPT0gXCIgXCJcclxuICAgICAgKSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIGVudGVyIG1hdGVyaWFsIG5hbWVcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdm0uYWRkTWF0ZXJpYWwubWF0ZXJpYWxVbml0ID09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgIHZtLmFkZE1hdGVyaWFsLm1hdGVyaWFsVW5pdCA9PSBcIiBcIlxyXG4gICAgICApIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2Ugc2VsZWN0IG1hdGVyaWFsIFVuaXRcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgdm0uYWRkTWF0ZXJpYWwuY3VycmVuY3kgPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgdm0uYWRkTWF0ZXJpYWwuY3VycmVuY3kgPT0gXCIgXCJcclxuICAgICAgKSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIHNlbGVjdCBDdXJyZW5jeVwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRzY29wZS5hY3RpdmVKdXN0aWZpZWQgPSAxO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5jaGFuZ2VDb3N0ID0gKGNvc3QsIGNvbnZlcnNpb25SYXRlKSA9PiB7XHJcbiAgICAgIHJldHVybiBjb3N0ICogY29udmVyc2lvblJhdGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmZpbGVVcGRhdGVkID0gKGZpbGVzLCBldmVudCwgbW9kZWwpID0+IHtcclxuICAgICAgbGV0IGZpbGVPYmogPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICAgIHZtLmZpbGVOYW1lcyA9IE9iamVjdC5rZXlzKGZpbGVPYmopLm1hcCh4ID0+IGZpbGVPYmpbeF0ubmFtZSk7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChmaWxlcywgZnVuY3Rpb24oeCwgaW5kZXgpIHtcclxuICAgICAgICB4LmRlc2NyaXB0aW9uID0gXCJcIjtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmFkZE1hdGVyaWFsRGV0YWlscyA9ICgpID0+IHtcclxuICAgICAgdmFyIGZvcm1EYXRhID0ge1xyXG4gICAgICAgIG5hbWU6IHZtLmFkZE1hdGVyaWFsLm1hdGVyaWFsTmFtZSxcclxuICAgICAgICB1bml0OiB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbFVuaXQsXHJcbiAgICAgICAgZXF1aXBtZW50Q29zdHM6IHtcclxuICAgICAgICAgIHZhbHVlOiB2bS5jaGFuZ2VDb3N0KFxyXG4gICAgICAgICAgICB2bS5hZGRNYXRlcmlhbC5lcXVpcG1lbnRDb3N0VmFsdWUsXHJcbiAgICAgICAgICAgIHZtLmFkZE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBjdXJyZW5jeUNvZGU6IHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJvb2ZlckNvc3Q6IHtcclxuICAgICAgICAgIHZhbHVlOiB2bS5jaGFuZ2VDb3N0KFxyXG4gICAgICAgICAgICB2bS5hZGRNYXRlcmlhbC5yb29mZXJDb3N0VmFsdWUsXHJcbiAgICAgICAgICAgIHZtLmFkZE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBjdXJyZW5jeUNvZGU6IHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZpbGVzOiB2bS5pbnB1dEZpbGVzXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmNyZWF0ZUVxdWlwbWVudChmb3JtRGF0YSlcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICQoXCIjYWRkRXF1aXBtZW50c1wiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICB2bS5zb3J0RXF1aXBtZW50KFwiY3JlYXRlZEF0XCIpO1xyXG5cclxuICAgICAgICAgIHZtLmFkZE1hdGVyaWFsID0ge1xyXG4gICAgICAgICAgICBjb252ZXJzaW9uRmFjdG9yOiAxXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGltYWdlIGFuZCBmaWxlIHVwbG9hZCBmdW50aW9uIC1zdGFydFxyXG4gICAgdm0udXBsb2FkSW1nID0gW107XHJcbiAgICB2bS51cGxvYWRGaWxlcyA9IFtdO1xyXG4gICAgdm0uZmlsZVVwZGF0ZWQgPSAoZmlsZXMsIGV2ZW50LCBtb2RhbCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyh2bS5pbnB1dEltZyk7XHJcbiAgICAgIGxldCBmaWxlT2JqID0gZXZlbnQudGFyZ2V0LmZpbGVzO1xyXG4gICAgICB2bS5maWxlTmFtZXMgPSBPYmplY3Qua2V5cyhmaWxlT2JqKS5tYXAoeCA9PiBmaWxlT2JqW3hdLm5hbWUpO1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2goZmlsZXMsIGZ1bmN0aW9uKHgsIGluZGV4KSB7XHJcbiAgICAgICAgeC5kZXNjcmlwdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgaWYgKG1vZGFsID09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgICAgaWYgKHZtLnVwbG9hZEltZy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICB2bS51cGxvYWRJbWcucHVzaCh4KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkdXBsaWNhdGVJbWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLnVwbG9hZEltZywgZnVuY3Rpb24oeSkge1xyXG4gICAgICAgICAgICAgIGlmICh4Lm5hbWUgPT0geS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGVJbWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghZHVwbGljYXRlSW1nKSB7XHJcbiAgICAgICAgICAgICAgdm0udXBsb2FkSW1nLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiRmlsZSBuYW1lIGFscmVhZHkgZXhpc3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHZtLnVwbG9hZEZpbGVzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICgvaW1hZ2UvLnRlc3QoeC50eXBlKSkge1xyXG4gICAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHZtLnVwbG9hZEZpbGVzLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkdXBsaWNhdGVJbWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKFtdLmNvbmNhdCh2bS51cGxvYWRGaWxlcywgdm0udXBsb2FkSW1nKSwgZnVuY3Rpb24oXHJcbiAgICAgICAgICAgICAgeVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICBpZiAoeC5uYW1lID09IHkubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZHVwbGljYXRlSW1nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWR1cGxpY2F0ZUltZykge1xyXG4gICAgICAgICAgICAgIGlmICgvaW1hZ2UvLnRlc3QoeC50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgdm0udXBsb2FkSW1nLnB1c2goeCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLnVwbG9hZEZpbGVzLnB1c2goeCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIkZpbGUgbmFtZSBhbHJlYWR5IGV4aXN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgY29uc29sZS5sb2codm0udXBsb2FkSW1nKTtcclxuICAgIH07XHJcbiAgICB2bS5kZXNjcmlwdGlvblBvcG92ZXIgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgJHNjb3BlLmZpbGVUeXBlID0gdHlwZTtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGluZGV4VmFsO1xyXG4gICAgfTtcclxuICAgIHZtLmFkZERlc2NyaXB0aW9uID0gKGluZGV4LCBkYXRhKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUuZmlsZVR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgICAgJChcIiNjbG9zZVBvcG92ZXJJbWdfXCIgKyBpbmRleCkudHJpZ2dlcihcImNsaWNrXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZtLnVwbG9hZEZpbGVzW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgICAgJChcIiNjbG9zZVBvcG92ZXJGaWxlX1wiICsgaW5kZXgpLnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZtLmRlbGV0ZUZpbGUgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXMuc3BsaWNlKGluZGV4VmFsLCAxKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGltYWdlIGFuZCBmaWxlIHVwbG9hZCBmdW5jdGlvbiAtZW5kXHJcblxyXG4gICAgLy8gQWRkIEVxdXBtZW50IC1zdGFydFxyXG4gICAgdm0uYWRkTmV3RXF1aXBtZW50ID0gZnVuY3Rpb24oRXF1aXBtZW50cykge1xyXG4gICAgICBsZXQgZmlsZXMgPSAoJHNjb3BlLmltZ0FuZEZpbGVzID0gW10uY29uY2F0KFxyXG4gICAgICAgIHZtLnVwbG9hZEltZyxcclxuICAgICAgICB2bS51cGxvYWRGaWxlc1xyXG4gICAgICApKTtcclxuICAgICAgY29uc29sZS5sb2coXCJFcXVpcG1lbnRzOiBcIiwgRXF1aXBtZW50cyk7XHJcbiAgICAgIHZhciBmb3JtRGF0YSA9IHtcclxuICAgICAgICBuYW1lOiBFcXVpcG1lbnRzLm5hbWUsXHJcbiAgICAgICAgdW5pdDogRXF1aXBtZW50cy51bml0LFxyXG4gICAgICAgIGZpbGVzOiBmaWxlcyxcclxuICAgICAgICBlcXVpcG1lbnRDb3N0OiB7XHJcbiAgICAgICAgICB2YWx1ZTogdm0uY2hhbmdlQ29zdChcclxuICAgICAgICAgICAgRXF1aXBtZW50cy5lcXVpcG1lbnRDb3N0LFxyXG4gICAgICAgICAgICBFcXVpcG1lbnRzLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBjdXJyZW5jeUNvZGU6IHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdvcmtlcnM6IEVxdWlwbWVudHMud29ya2VycyxcclxuICAgICAgICByb29mZXJDb3N0OiB7XHJcbiAgICAgICAgICB2YWx1ZTogdm0uY2hhbmdlQ29zdChcclxuICAgICAgICAgICAgRXF1aXBtZW50cy5yb29mZXJDb3N0LFxyXG4gICAgICAgICAgICBFcXVpcG1lbnRzLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgICAgICksXHJcbiAgICAgICAgICBjdXJyZW5jeUNvZGU6IHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvY2F0aW9uOiBnQXJ5TG9jYXRpb25cclxuICAgICAgfTtcclxuICAgICAgY29uc29sZS5sb2coZm9ybURhdGEpO1xyXG4gICAgICAkKFwiI2VxdWlwbWVudF9tb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAudXBkYXRlRXF1aXBtZW50QnlJZChmb3JtRGF0YSlcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIHZtLnNvcnRFcXVpcG1lbnQoXCJjcmVhdGVkQXRcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvLyBhZGQgZXF1aXBtZW50IC1lbmRcclxuICAgIGxldCBnQXJ5Q29tcGFueU1lbWJlcnMgPSBbXTtcclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmdldEFsbE1lbWJlcnNJbkN1cnJlbnRDb21wYW55KHZtLnVzZXJEYXRhLmNvbXBhbnlJZClcclxuICAgICAgLnRoZW4oZGF0YTEgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGExKTtcclxuICAgICAgICBnQXJ5Q29tcGFueU1lbWJlcnMgPSBkYXRhMS5kYXRhLmRhdGE7XHJcbiAgICAgICAgdm0uY29tcGFueU1lbWJlcnMgPSBnQXJ5Q29tcGFueU1lbWJlcnM7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKGVyci5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImVxdWlwbWVudFZpZXdDdHJsXCIsIGVxdWlwbWVudFZpZXdDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gZXF1aXBtZW50Vmlld0N0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICAkc3RhdGVQYXJhbXMsXHJcbiAgICBVcGxvYWRcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcblxyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuICAgIC8qIEdldCBwcm9qZWN0IGxpc3QgKi9cclxuICAgIHZtLnVzZXJEYXRhID0gdXNlclN0b3JlLmdldCgpO1xyXG4gICAgdm0ubVVuaXRzID0gZ2xvYmFscy5tVW5pdHM7XHJcbiAgICBnbG9iYWxzLmdldEN1cnJlbmN5KCkudGhlbihyZXNwID0+IHtcclxuICAgICAgdm0uY3VycmVuY2llcyA9IHJlc3AuZGF0YTtcclxuICAgIH0pO1xyXG4gICAgdm0uYWRkRXF1aXBtZW50ID0ge1xyXG4gICAgICBjb252ZXJzaW9uRmFjdG9yOiAxXHJcbiAgICB9O1xyXG5cclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmdldENvbXBhbnlCeUlkKHZtLnVzZXJEYXRhLmNvbXBhbnlJZClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgdm0uY29tcGFueURhdGEgPSByZXNwLmRhdGE7XHJcbiAgICAgICAgdm0uYWRkRXF1aXBtZW50LmN1cnJlbmN5ID0gYW5ndWxhci5jb3B5KFxyXG4gICAgICAgICAgdm0uY29tcGFueURhdGEuY3VycmVudEN1cnJlbmN5LmN1cnJlbmN5Q29kZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdm0uY29tcGFueUN1cnJlbmN5ID0gYW5ndWxhci5jb3B5KFxyXG4gICAgICAgICAgdm0uY29tcGFueURhdGEuY3VycmVudEN1cnJlbmN5LmN1cnJlbmN5Q29kZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc29sZS5sb2codm0uYWRkRXF1aXBtZW50LmN1cnJlbmN5KTtcclxuICAgICAgICAkKFwiI2N1cnJlbmN5XCIpXHJcbiAgICAgICAgICAudmFsKHZtLmFkZEVxdWlwbWVudC5jdXJyZW5jeSlcclxuICAgICAgICAgIC50cmlnZ2VyKFwiY2hhbmdlLnNlbGVjdDJcIik7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICBsZXQgZ0FyeUxvY2F0aW9uID0gW107XHJcbiAgICB2bS5wbGFjZU1hcmtlciA9IGZ1bmN0aW9uKG1hcCkge1xyXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmdldFBsYWNlKCkpO1xyXG4gICAgICBjb25zdCBwbGFjZURhdGEgPSB0aGlzLmdldFBsYWNlKCkuZ2VvbWV0cnkubG9jYXRpb247XHJcbiAgICAgIHZtLmdtYXAubWFya2VycyA9IFtbcGxhY2VEYXRhLmxhdCgpLCBwbGFjZURhdGEubG5nKCldXTtcclxuICAgICAgdm0uZ21hcC56b29tID0gMTU7XHJcbiAgICAgIHZtLmdtYXAuY2VudGVyID0gYCR7cGxhY2VEYXRhLmxhdCgpfSwke3BsYWNlRGF0YS5sbmcoKX1gO1xyXG4gICAgICAvLyB2bS5ldmVudC5sb2NhdGlvbiA9ICBbcGxhY2VEYXRhLmxhdCgpLCBwbGFjZURhdGEubG5nKCldXHJcbiAgICAgIGdBcnlMb2NhdGlvbiA9IFtwbGFjZURhdGEubGF0KCksIHBsYWNlRGF0YS5sbmcoKV07XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNob3dDb252ZXJzaW9uUmF0ZSA9IChmcm9tLCB0bykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhmcm9tLCB0byk7XHJcbiAgICAgICQoXCIubG9hZGVyXCIpLnNob3coKTtcclxuICAgICAgbGV0IGN1cnJlbmN5RGF0YSA9IHtcclxuICAgICAgICBmcm9tLFxyXG4gICAgICAgIHRvXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChmcm9tICYmIHRvKSB7XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnNob3dDb252ZXJzaW9uUmF0ZShjdXJyZW5jeURhdGEpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgdm0uZXF1aXBtZW50LmNvbnZlcnNpb25GYWN0b3IgPSByZXNwLmRhdGEuY29udmVyc2lvbkZhY3RvcjtcclxuXHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICQoXCIubG9hZGVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2bS5nbWFwID0ge1xyXG4gICAgICB1cmw6XHJcbiAgICAgICAgXCJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUEzTUlBLW1LV3FfNjBxMUswek9IZ3VyYXhULTFRUHhOVSZsaWJyYXJpZXM9cGxhY2VzXCIsXHJcbiAgICAgIG1hcmtlcnM6IFtdLFxyXG4gICAgICBzdHlsZXM6IFtdLFxyXG4gICAgICBjZW50ZXI6IFwiXCIsXHJcbiAgICAgIHpvb206IDhcclxuICAgIH07XHJcbiAgICB2bS5lcXVpcG1lbnRJZCA9ICRzdGF0ZVBhcmFtcy5pZDtcclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmdldEVxdWlwbWVudEJ5SWQodm0uZXF1aXBtZW50SWQpXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3AuZGF0YSk7XHJcbiAgICAgICAgdm0uZXF1aXBtZW50ID0gcmVzcC5kYXRhO1xyXG4gICAgICAgIHZtLmVxdWlwbWVudC5lcXVpcG1lbnRDb3N0ID0gcmVzcC5kYXRhLmN1cnJlbnRSYXRlLmVxdWlwbWVudENvc3QudmFsdWU7XHJcbiAgICAgICAgdm0uZXF1aXBtZW50LnJvb2ZlckNvc3QgPSByZXNwLmRhdGEuY3VycmVudFJhdGUucm9vZmVyQ29zdC52YWx1ZTtcclxuICAgICAgICB2bS5hZGRFcXVpcG1lbnQuY3VycmVuY3kgPVxyXG4gICAgICAgICAgcmVzcC5kYXRhLmN1cnJlbnRSYXRlLmVxdWlwbWVudENvc3QuY3VycmVuY3lDb2RlO1xyXG4gICAgICAgIHZtLnNob3dDb252ZXJzaW9uUmF0ZShcclxuICAgICAgICAgIHJlc3AuZGF0YS5jdXJyZW50UmF0ZS5lcXVpcG1lbnRDb3N0LmN1cnJlbmN5Q29kZSxcclxuICAgICAgICAgIHJlc3AuZGF0YS5jdXJyZW50UmF0ZS5lcXVpcG1lbnRDb3N0LmN1cnJlbmN5Q29kZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdm0uZ21hcC5jZW50ZXIgPSByZXNwLmRhdGEubG9jLmNvb3JkaW5hdGVzO1xyXG4gICAgICAgIHZtLnVwbG9hZEltZyA9IHJlc3AuZGF0YS5maWxlcy5pbWFnZXM7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXMgPSByZXNwLmRhdGEuZmlsZXMuZG9jcztcclxuICAgICAgICAvLyRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB2bS5kZWxldGVGaWxlID0gKGluZGV4VmFsLCB0eXBlKSA9PiB7XHJcbiAgICAgIGlmICh0eXBlID09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgIHZtLnVwbG9hZEltZy5zcGxpY2UoaW5kZXhWYWwsIDEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZtLnVwbG9hZEZpbGVzLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2bS5kZXNjcmlwdGlvblBvcG92ZXIgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgJHNjb3BlLmZpbGVUeXBlID0gdHlwZTtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGluZGV4VmFsO1xyXG4gICAgfTtcclxuICAgIHZtLmFkZERlc2NyaXB0aW9uID0gKGluZGV4LCBkYXRhKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUuZmlsZVR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgICAgaWYgKGludmVudG9yeVN0YXRlLmdldCgpLnRhYiA9PSAwKSB7XHJcbiAgICAgICAgICAkKFwiI2Nsb3NlUG9wb3ZlckltZ19cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRGNwSW1nX1wiICsgaW5kZXgpLnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXNbaW5kZXhdLmRlc2NyaXB0aW9uID0gZGF0YTtcclxuICAgICAgICBpZiAoaW52ZW50b3J5U3RhdGUuZ2V0KCkudGFiID09IDApIHtcclxuICAgICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRmlsZV9cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRGNwRmlsZV9cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnVwZGF0ZUVxdWlwbWVudCA9IGZ1bmN0aW9uKEVxdWlwbWVudHMpIHtcclxuICAgICAgbGV0IGZpbGVzID0gKCRzY29wZS5pbWdBbmRGaWxlcyA9IFtdLmNvbmNhdChcclxuICAgICAgICB2bS51cGxvYWRJbWcsXHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXNcclxuICAgICAgKSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRXF1aXBtZW50czogXCIsIEVxdWlwbWVudHMpO1xyXG4gICAgICB2YXIgZm9ybURhdGEgPSB7XHJcbiAgICAgICAgbmFtZTogRXF1aXBtZW50cy5uYW1lLFxyXG4gICAgICAgIHVuaXQ6IEVxdWlwbWVudHMudW5pdCxcclxuICAgICAgICBmaWxlczogZmlsZXMsXHJcbiAgICAgICAgZXF1aXBtZW50Q29zdDoge1xyXG4gICAgICAgICAgdmFsdWU6IHZtLmNoYW5nZUNvc3QoXHJcbiAgICAgICAgICAgIEVxdWlwbWVudHMuZXF1aXBtZW50Q29zdCxcclxuICAgICAgICAgICAgRXF1aXBtZW50cy5jb252ZXJzaW9uRmFjdG9yXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgY3VycmVuY3lDb2RlOiB2bS5jb21wYW55RGF0YS5jdXJyZW50Q3VycmVuY3kuY3VycmVuY3lDb2RlXHJcbiAgICAgICAgfSxcclxuICAgICAgICB3b3JrZXJzOiBFcXVpcG1lbnRzLndvcmtlcnMsXHJcbiAgICAgICAgcm9vZmVyQ29zdDoge1xyXG4gICAgICAgICAgdmFsdWU6IHZtLmNoYW5nZUNvc3QoXHJcbiAgICAgICAgICAgIEVxdWlwbWVudHMucm9vZmVyQ29zdCxcclxuICAgICAgICAgICAgRXF1aXBtZW50cy5jb252ZXJzaW9uRmFjdG9yXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgICAgY3VycmVuY3lDb2RlOiB2bS5jb21wYW55RGF0YS5jdXJyZW50Q3VycmVuY3kuY3VycmVuY3lDb2RlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2NhdGlvbjogZ0FyeUxvY2F0aW9uXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnNvbGUubG9nKGZvcm1EYXRhKTtcclxuICAgICAgJChcIiNlcXVpcG1lbnRfbW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLnVwZGF0ZUVxdWlwbWVudChFcXVpcG1lbnRzLl9pZCwgZm9ybURhdGEpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICB2bS5zb3J0RXF1aXBtZW50KFwiY3JlYXRlZEF0XCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGFkZCBlcXVpcG1lbnQgLWVuZFxyXG4gICAgbGV0IGdBcnlDb21wYW55TWVtYmVycyA9IFtdO1xyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAuZ2V0QWxsTWVtYmVyc0luQ3VycmVudENvbXBhbnkodm0udXNlckRhdGEuY29tcGFueUlkKVxyXG4gICAgICAudGhlbihkYXRhMSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YTEpO1xyXG4gICAgICAgIGdBcnlDb21wYW55TWVtYmVycyA9IGRhdGExLmRhdGEuZGF0YTtcclxuICAgICAgICB2bS5jb21wYW55TWVtYmVycyA9IGdBcnlDb21wYW55TWVtYmVycztcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5zbGlkZXIyID0gW1xyXG4gICAgICB7IGltZzogXCIvYXNzZXRzL2ltYWdlcy9lcXVpcG1lbnQyLmpwZ1wiIH0sXHJcbiAgICAgIHsgaW1nOiBcIi9hc3NldHMvaW1hZ2VzL2VxdWlwbWVudDIuanBnXCIgfSxcclxuICAgICAgeyBpbWc6IFwiL2Fzc2V0cy9pbWFnZXMvZXF1aXBtZW50Mi5qcGdcIiB9XHJcbiAgICBdO1xyXG4gICAgLyogJHNjb3BlLmVxdWlwX3RhYmxlID0gW1xyXG4gICAgICB7IHVuaXQ6ICdDdXJyZW5jeScsIG10OiAnRGFuaXNoIEtyb25lJyB9LFxyXG4gICAgICB7IHVuaXQ6ICdDb252ZXJzaW9uIEZhY3RvcicsIG10OiAnMScgfSxcclxuICAgICAgeyB1bml0OiAnRXF1aXBtZW50IENvc3QgKERLSyknLCBtdDogJy0tLScgfSxcclxuICAgICAgeyB1bml0OiAnV29ya2VyIENvc3QgKERLSyknLCBtdDogJy0tLScgfSxcclxuICAgICAgeyB1bml0OiAnV29ya2VyIElEJywgbXQ6ICdOTlMxIC0gS2ltIE1vc2VnYWFyZCcgfVxyXG4gICAgXSAqL1xyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiZmlsZU1hbmFnZXJDdHJsXCIsIGZpbGVNYW5hZ2VyQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIGZpbGVNYW5hZ2VyQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICRodHRwLFxyXG4gICAgJHdpbmRvdyxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIGZpbGVNYW5hZ2VyRmFjdG9yeSxcclxuICAgIHVwbG9hZEZhY3RvcnlcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcbiAgICAkc2NvcGUubmF2dGFiID0gW1xyXG4gICAgICB7IHRpdGxlOiAnU3ViIEZvbGRlciBBJywgdGFyZ2V0OiAndGFicGFuZTEnIH0sXHJcbiAgICAgIHsgdGl0bGU6ICdTdWIgRm9sZGVyIEInLCB0YXJnZXQ6ICd0YWJwYW5lMicgfSxcclxuICAgICAgeyB0aXRsZTogJ1N1YiBGb2xkZXIgQycsIHRhcmdldDogJ3RhYnBhbmUzJyB9LFxyXG4gICAgICB7IHRpdGxlOiAnU3ViIEZvbGRlciBEJywgdGFyZ2V0OiAndGFicGFuZTQnIH0sXHJcbiAgICAgIHsgdGl0bGU6ICdTdWIgRm9sZGVyIEUnLCB0YXJnZXQ6ICd0YWJwYW5lNScgfVxyXG4gICAgXVxyXG5cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGxvZ291dCxcclxuICAgICAgdXNlclN0b3JlLFxyXG4gICAgICBwcm9qZWN0U3RvcmUsXHJcbiAgICAgIGdlbmVyaWNTdG9yZSxcclxuICAgICAgYnJlYWtjcnVtYlN0b3JlXHJcbiAgICB9ID0gZ2xvYmFscztcclxuICAgIGNvbnN0IHsgY2xpcEJvYXJkIH0gPSBmaWxlTWFuYWdlckZhY3Rvcnk7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcGlGYWN0b3J5XHJcbiAgICAgIC5saXN0QWxsUHJvamVjdHMoKVxyXG4gICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5wcm9qZWN0TGlzdCA9IHJlc3AuZGF0YTtcclxuICAgICAgICAvKiBJbml0aWFsbHkgbG9hZCB0aGUgZmlyc3QgcHJvamVjdCBhcyBkZWZhdWx0ICovXHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRQcm9qZWN0ID0gcHJvamVjdFN0b3JlLmdldCgpO1xyXG5cclxuICAgICAgICB2bS5zZWxlY3RlZFByb2plY3QgPSBzZWxlY3RlZFByb2plY3QuX2lkO1xyXG5cclxuICAgICAgICB2bS5nZXRQcmltYXJ5Rm9sZGVycyhzZWxlY3RlZFByb2plY3QpO1xyXG4gICAgICAgIC8qIFNldCBiYWNrdXAgZm9sZGVycyAqL1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHZtLnJvb3RGb2xkZXJzID0gW107XHJcblxyXG4gICAgdm0uYmFja3VwRm9sZGVycyA9IHByb2plY3RTdG9yZS5nZXQoKS5iYWNrdXBGb2xkZXJzO1xyXG5cclxuICAgIHZtLndpbmRvd0l0ZW1zID0ge1xyXG4gICAgICBmb2xkZXJEYXRhOiBcIlwiLFxyXG4gICAgICBmb2xkZXJzOiBbXSxcclxuICAgICAgZmlsZXM6IFtdXHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnJlc29sdmVBc3NldEljb24gPSBhc3NldE9iaiA9PiB7XHJcbiAgICAgIGxldCBhc3NldEZvcm1hdCA9IGFzc2V0T2JqLmZvcm1hdC50cmltKCksXHJcbiAgICAgICAgaWNvbjtcclxuXHJcbiAgICAgIGlmICgvanAqZy8udGVzdChhc3NldEZvcm1hdCkpIHtcclxuICAgICAgICBpY29uID0gXCJqcGdcIjtcclxuICAgICAgfSBlbHNlIGlmICgvcG5nLy50ZXN0KGFzc2V0Rm9ybWF0KSkge1xyXG4gICAgICAgIGljb24gPSBcInBuZ1wiO1xyXG4gICAgICB9IGVsc2UgaWYgKC9wZGYvLnRlc3QoYXNzZXRGb3JtYXQpKSB7XHJcbiAgICAgICAgaWNvbiA9IFwicGRmXCI7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGljb247XHJcbiAgICB9O1xyXG4gICAgdm0uc2hvd1RyZWUgPSBmYWxzZTtcclxuICAgIHZtLmdldFByaW1hcnlGb2xkZXJzID0gKHNlbGVjdGVkUHJvamVjdCwgbGlzdCkgPT4ge1xyXG4gICAgICBpZiAobGlzdCkge1xyXG4gICAgICAgIC8qIEZpbHRlcmluZyB0aHJvdWdoIHRoZSBsaXN0IG9mIHByb2ogaWYgcGFyYW0gaXMgYSBzdHJpbmcgKi9cclxuICAgICAgICBwcm9qZWN0U3RvcmUuc2V0KFxyXG4gICAgICAgICAgbGlzdC5maWx0ZXIoeCA9PiB7XHJcbiAgICAgICAgICAgIGlmICh4Ll9pZCA9PT0gc2VsZWN0ZWRQcm9qZWN0KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfSlbMF1cclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHByb2plY3RTdG9yZS5zZXQoc2VsZWN0ZWRQcm9qZWN0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdm0uYmFja3VwRm9sZGVycyA9IHByb2plY3RTdG9yZS5nZXQoKS5iYWNrdXBGb2xkZXJzO1xyXG5cclxuICAgICAgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgIGFwaUZhY3RvcnkuZ2V0SGllcmFyY2h5KHByb2plY3RTdG9yZS5nZXQoKS5faWQpLFxyXG4gICAgICAgIGFwaUZhY3Rvcnkudmlld1Byb2plY3RBc3NldHMocHJvamVjdFN0b3JlLmdldCgpLl9pZClcclxuICAgICAgXSlcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLnNob3dUcmVlID0gdHJ1ZTtcclxuICAgICAgICAgIHZtLnJvb3RGb2xkZXJzID0gcmVzcFswXS5kYXRhLmRhdGEuaGllcmFyY2hpZXM7XHJcbiAgICAgICAgICB2bS5wcm9qZWN0RmlsZXMgPSByZXNwWzFdLmRhdGEuZGF0YTtcclxuICAgICAgICAgIHZtLmxvYWRGaWxlc1RvQXV0b0NvbXBsZXRlID0gJHF1ZXJ5ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKHZtLnByb2plY3RGaWxlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyB2bS5zZWxlY3RlZFByb2plY3QgPSBcIjVhZmQ0NTIwZDA4ZDRiMzg1OWZlOWJkNlwiO1xyXG4gICAgLy8gdm0uZ2V0UHJpbWFyeUZvbGRlcnModm0uc2VsZWN0ZWRQcm9qZWN0KTtcclxuXHJcbiAgICB2bS5nZXRGb2xkZXIgPSBpZCA9PiB7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuZ2V0SGllcmFyY2h5Q2hpbGRyZW4oaWQpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwLmRhdGEpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIFN0b3JpbmcgdGhlIGZpbGUgcGF0aCBpbiBhIHN0b3JlIGR1ZSB0byBsaW1pdGF0aW9ucyBpbiB0aGUgcGx1Z2luICovXHJcblxyXG4gICAgY29uc3QgZmlsZURlc3RpbmF0aW9uID0gZ2VuZXJpY1N0b3JlKCk7XHJcblxyXG4gICAgdm0udHJlZU9wdGlvbnMgPSB7XHJcbiAgICAgIGFjY2VwdDogZnVuY3Rpb24oc291cmNlLCBkZXN0LCBkZXN0SW5kZXgpIHtcclxuICAgICAgICBpZiAoc291cmNlLmZpbGUpIHtcclxuICAgICAgICAgIGZpbGVEZXN0aW5hdGlvbi5zdG9yZShkZXN0KTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRyYWdTdG9wOiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGxldCB7IHNvdXJjZSwgZGVzdCB9ID0gZXZlbnQ7XHJcbiAgICAgICAgLyogRXhjbHVzaXZlIGZvciBmaWxlcyAqL1xyXG4gICAgICAgIGlmIChzb3VyY2Uubm9kZVNjb3BlLmZpbGUpIHtcclxuICAgICAgICAgIC8qIFN0ZXAgMTogIEdldCB0aGUgZGVzdCB2YWx1ZSBmcm9tIHRoZSBleHRlcm5hbCBzdG9yZSBhbmQgYXBwZW5kIHRvIGRlc3QgKi9cclxuICAgICAgICAgIGxldCBkZXN0aW5hdGlvbiA9IGZpbGVEZXN0aW5hdGlvbi5nZXQoKTtcclxuICAgICAgICAgIGlmICghZGVzdGluYXRpb24uJG5vZGVTY29wZSkge1xyXG4gICAgICAgICAgICAvKiBSZXR1cm4gZm9yIGludmFsaWQgZHJhZ3MgKi9cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbGV0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIGFzc2V0SWQ6IHNvdXJjZS5ub2RlU2NvcGUuZmlsZS5faWQsXHJcbiAgICAgICAgICAgIHNvdXJjZUlkOiBzb3VyY2Uubm9kZVNjb3BlLiRwYXJlbnQuJG5vZGVTY29wZS4kbW9kZWxWYWx1ZS5faWQsXHJcbiAgICAgICAgICAgIGRlc3RJZDogZGVzdGluYXRpb24uJG5vZGVTY29wZS4kbW9kZWxWYWx1ZS5faWRcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICAvKiBTdGVwIDI6IFN5bmMgd2l0aCBiYWNrZW5kIGJ1dCBkb24ndCB3YWl0IGZvciB0aGUgcmVzcG9uc2UgICovXHJcbiAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgIC5tb3ZlQXNzZXRzKHBheWxvYWQpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoZGVzdGluYXRpb24uJG5vZGVTY29wZS4kbW9kZWxWYWx1ZS5maWxlcykge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbi4kbm9kZVNjb3BlLiRtb2RlbFZhbHVlLmZpbGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgc291cmNlLm5vZGVTY29wZS5maWxlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXN0aW5hdGlvbi4kbm9kZVNjb3BlLiRtb2RlbFZhbHVlLmZpbGVzID0gW3NvdXJjZS5ub2RlU2NvcGUuZmlsZV07XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLyogU3RlcCAzOiBSZW1vdmUgdGhlIGZpbGUgZnJvbSB0aGUgc291cmNlIGZvbGRlciAqL1xyXG4gICAgICAgICAgc291cmNlLm5vZGVTY29wZS4kcGFyZW50LiRub2RlU2NvcGUuJG1vZGVsVmFsdWUuZmlsZXMgPSBzb3VyY2Uubm9kZVNjb3BlLiRwYXJlbnQuJG5vZGVTY29wZS4kbW9kZWxWYWx1ZS5maWxlcy5maWx0ZXIoXHJcbiAgICAgICAgICAgIHggPT4geC5faWQgIT09IHNvdXJjZS5ub2RlU2NvcGUuZmlsZS5faWRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICBkcm9wcGVkOiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGxldCB7IHNvdXJjZSwgZGVzdCB9ID0gZXZlbnQ7XHJcbiAgICAgICAgbGV0IHBheWxvYWQ7XHJcblxyXG4gICAgICAgIC8qIEZvciBtb3ZpbmcgZm9sZGVycyAqL1xyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBkZXN0Lm5vZGVzU2NvcGUuJG5vZGVTY29wZSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgc291cmNlLm5vZGVTY29wZS4kcGFyZW50Tm9kZVNjb3BlID09PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvKiBJZ25vcmUgc2FtZSBsZXZlbCBkcmFncyAqL1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBkZXN0Lm5vZGVzU2NvcGUuJG5vZGVTY29wZSA9PT0gbnVsbCAmJlxyXG4gICAgICAgICAgc291cmNlLm5vZGVTY29wZS4kcGFyZW50Tm9kZVNjb3BlICE9PSBudWxsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAvKiBEcmFnZ2luZyB0byByb290ICovXHJcbiAgICAgICAgICBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAxLFxyXG4gICAgICAgICAgICBoaWVyYXJjaHlJZDogc291cmNlLm5vZGVTY29wZS4kbW9kZWxWYWx1ZS5faWQsXHJcbiAgICAgICAgICAgIHBhcmVudElkOiBzb3VyY2Uubm9kZVNjb3BlLiRwYXJlbnROb2RlU2NvcGUuJG1vZGVsVmFsdWUuX2lkLFxyXG4gICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RTdG9yZS5nZXQoKS5faWRcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgIGRlc3Qubm9kZXNTY29wZS4kbm9kZVNjb3BlICE9PSBudWxsICYmXHJcbiAgICAgICAgICBzb3VyY2Uubm9kZVNjb3BlLiRwYXJlbnROb2RlU2NvcGUgPT09IG51bGxcclxuICAgICAgICApIHtcclxuICAgICAgICAgIC8qIERyYWdnaW5nIGZyb20gcm9vdCAqL1xyXG4gICAgICAgICAgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgdHlwZTogMixcclxuICAgICAgICAgICAgaGllcmFyY2h5SWQ6IHNvdXJjZS5ub2RlU2NvcGUuJG1vZGVsVmFsdWUuX2lkLFxyXG4gICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RTdG9yZS5nZXQoKS5faWQsXHJcbiAgICAgICAgICAgIGRlc3RJZDogZGVzdC5ub2Rlc1Njb3BlLiRub2RlU2NvcGUuJG1vZGVsVmFsdWUuX2lkXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvKiBEcmFnZ2luZyBiZXR3ZWVuIHN1YiBmb2xkZXJzICovXHJcbiAgICAgICAgICBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAzLFxyXG4gICAgICAgICAgICBoaWVyYXJjaHlJZDogc291cmNlLm5vZGVTY29wZS4kbW9kZWxWYWx1ZS5faWQsXHJcbiAgICAgICAgICAgIHBhcmVudElkOiBzb3VyY2Uubm9kZVNjb3BlLiRwYXJlbnROb2RlU2NvcGUuJG1vZGVsVmFsdWUuX2lkLFxyXG4gICAgICAgICAgICBkZXN0SWQ6IGRlc3Qubm9kZXNTY29wZS4kbm9kZVNjb3BlLiRtb2RlbFZhbHVlLl9pZFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5kcmFnTW92ZU5vZGVzKHBheWxvYWQpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MocmVzcC5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByb290Rm9sZGVyU3RvcmUgPSBnZW5lcmljU3RvcmUoKTtcclxuXHJcbiAgICB2bS5zZXRSb290Rm9sZGVyID0gb2JqID0+IHtcclxuICAgICAgcm9vdEZvbGRlclN0b3JlLnN0b3JlKG9iaik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qIGFkZCBtb2RhbCBzZXR0aW5ncyAqL1xyXG4gICAgdm0uYWRkTW9kYWxBY3RpdmVUYWIgPSAwO1xyXG4gICAgJChcIiNhZGRNb2RhbFwiKS5vbihcImhpZGUuYnMubW9kYWxcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZtLmZpbGVOYW1lcyA9IFtdO1xyXG4gICAgICB2bS5hZGRNb2RhbEFjdGl2ZVRhYiA9IDA7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2bS5hZGRQcmltYXJ5Rm9sZGVyID0gKG5hbWUsIHByb2plY3RJZCkgPT4ge1xyXG4gICAgICBsZXQgcGF5bG9hZCA9IHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGlzUGFyZW50OiB0cnVlLFxyXG4gICAgICAgIHByb2plY3RJZDogcHJvamVjdElkXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IG5vZGVPYmogPSByb290Rm9sZGVyU3RvcmUuZ2V0KCk7XHJcbiAgICAgICQoXCIjYWRkTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmFkZEhpZXJhcmNoeShwYXlsb2FkKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgbm9kZU9iai4kbm9kZXNTY29wZS4kbW9kZWxWYWx1ZS5wdXNoKHJlc3AuZGF0YS5kYXRhKTtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwicm9vdGZvbGRlclwiLCByb290Rm9sZGVyU3RvcmUuZ2V0KCkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLm9wZW5BZGRNb2RhbCA9IChzb3VyY2UsIG9iaikgPT4ge1xyXG4gICAgICB2bS5hZGRNb2RhbFNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgdm0ubm9kZU9iaiA9IG9iajtcclxuICAgICAgJChcIiNhZGRNb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNob3dMb2FkZXIgPSBmYWxzZTtcclxuXHJcbiAgICB2bS50b2dnbGVGb2xkZXIgPSAoZm9sZGVyLCBpY29uLCBub2RlKSA9PiB7XHJcbiAgICAgIGlmIChmb2xkZXIuJG1vZGVsVmFsdWUuYmFja3VwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKGZvbGRlci4kdHJlZVNjb3BlLiRlbGVtZW50WzBdKVxyXG4gICAgICAvLyBjb25zb2xlLmxvZygkKGZvbGRlci4kZWxlbWVudFswXSkuZmluZCgnLnJvdyAuZmlsZS1saXN0aW5nJylbMF0uYWRkQ2xhc3MoJ2JnLWRhcmsnKSlcclxuICAgICAgJChmb2xkZXIuJHRyZWVTY29wZS4kZWxlbWVudFswXSlcclxuICAgICAgICAuZmluZChcIi5mb2xkZXItb3BlblwiKVxyXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImZvbGRlci1vcGVuXCIpO1xyXG4gICAgICAkKGZvbGRlci4kZWxlbWVudFswXSlcclxuICAgICAgICAuZmluZChcIi5yb3dcIilcclxuICAgICAgICAuZmlyc3QoKVxyXG4gICAgICAgIC5hZGRDbGFzcyhcImZvbGRlci1vcGVuXCIpO1xyXG5cclxuICAgICAgdm0uc2hvd0xvYWRlciA9IHRydWU7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAudmlld0hpZXJhcmNoeShmb2xkZXIuJG1vZGVsVmFsdWUuX2lkKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgLyogQXBwZW5kIGZpbGVzIHRvIHRoZSBmb2xkZXIgKi9cclxuICAgICAgICAgIHZtLndpbmRvd0l0ZW1zID0ge1xyXG4gICAgICAgICAgICBmb2xkZXJEYXRhOiBmb2xkZXIsXHJcbiAgICAgICAgICAgIGZvbGRlcnM6IGZvbGRlci4kbW9kZWxWYWx1ZS5jaGlsZHJlbixcclxuICAgICAgICAgICAgZmlsZXM6IHJlc3AuZGF0YS5maWxlc1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB2bS5icmVhZENydW1iTGlzdCA9IHJlc3AuZGF0YS5icmVhZGNydW1icztcclxuICAgICAgICAgIHZtLnNob3dMb2FkZXIgPSBmYWxzZTtcclxuICAgICAgICAgIGZvbGRlci4kbW9kZWxWYWx1ZS5maWxlcyA9IHJlc3AuZGF0YS5maWxlcztcclxuICAgICAgICAgIG5hdmlnYXRpb25TdGFjay5wdXNoKGZvbGRlcik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgaWYgKGZvbGRlci5jb2xsYXBzZWQpIHtcclxuICAgICAgICBmb2xkZXIudG9nZ2xlKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoaWNvbikge1xyXG4gICAgICAgIG5hdmlnYXRpb25TdGFjay5wdXNoKGZvbGRlcik7XHJcbiAgICAgICAgLy8gZm9sZGVyLnRvZ2dsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG5hdmlnYXRpb25TdGFjayA9IGZpbGVNYW5hZ2VyRmFjdG9yeS5uYXZpZ2F0aW9uU3RhY2soKTtcclxuXHJcbiAgICB2bS5uYXZpZ2F0ZSA9IGZvcndhcmQgPT4ge1xyXG4gICAgICBsZXQgZm9sZGVyID0gZm9yd2FyZFxyXG4gICAgICAgID8gbmF2aWdhdGlvblN0YWNrLmZvcndhcmQoKVxyXG4gICAgICAgIDogbmF2aWdhdGlvblN0YWNrLmJhY2t3YXJkKCk7XHJcblxyXG4gICAgICAvLyBpZiAoZm9sZGVyID8gKGZvbGRlci5jb2xsYXBzZWQgPyB0cnVlIDogZmFsc2UpIDogZmFsc2UpIHtcclxuICAgICAgaWYgKGZvbGRlcikge1xyXG4gICAgICAgIHZtLnNob3dMb2FkZXIgPSB0cnVlO1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC52aWV3SGllcmFyY2h5KGZvbGRlci4kbW9kZWxWYWx1ZS5faWQpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgLyogQXBwZW5kIGZpbGVzIHRvIHRoZSBmb2xkZXIgKi9cclxuICAgICAgICAgICAgdm0ud2luZG93SXRlbXMgPSB7XHJcbiAgICAgICAgICAgICAgZm9sZGVyRGF0YTogZm9sZGVyLFxyXG4gICAgICAgICAgICAgIGZvbGRlcnM6IGZvbGRlci4kbW9kZWxWYWx1ZS5jaGlsZHJlbixcclxuICAgICAgICAgICAgICBmaWxlczogcmVzcC5kYXRhLmZpbGVzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZtLnNob3dMb2FkZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9sZGVyLiRtb2RlbFZhbHVlLmZpbGVzID0gcmVzcC5kYXRhLmZpbGVzO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5vcGVuRm9sZGVyID0gaWQgPT4ge1xyXG4gICAgICAvKiBHZXQgdGhlIG5vZGUgb2JqIGZyb20gdGhlIHdpbmRvdyBpdGVtIG9iaiAqL1xyXG4gICAgICBsZXQgZm9sZGVyRGF0YSA9IHZtLndpbmRvd0l0ZW1zLmZvbGRlckRhdGFcclxuICAgICAgICAuY2hpbGROb2RlcygpXHJcbiAgICAgICAgLnJlZHVjZSgoYWNjLCB4KSA9PiB7XHJcbiAgICAgICAgICBpZiAoeC4kbW9kZWxWYWx1ZS5faWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgIGFjYyA9IHg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgIH0sIG51bGwpO1xyXG5cclxuICAgICAgdm0uc2hvd0xvYWRlciA9IHRydWU7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAudmlld0hpZXJhcmNoeShpZClcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIG5hdmlnYXRpb25TdGFjay5wdXNoKGZvbGRlckRhdGEpO1xyXG4gICAgICAgICAgLyogQXBwZW5kIGZpbGVzIHRvIHRoZSBmb2xkZXIgKi9cclxuICAgICAgICAgIHZtLndpbmRvd0l0ZW1zID0ge1xyXG4gICAgICAgICAgICBmb2xkZXJEYXRhOiBmb2xkZXJEYXRhLFxyXG4gICAgICAgICAgICBmb2xkZXJzOiByZXNwLmRhdGEuZm9sZGVycyxcclxuICAgICAgICAgICAgZmlsZXM6IHJlc3AuZGF0YS5maWxlc1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZtLmJyZWFkQ3J1bWJMaXN0ID0gcmVzcC5kYXRhLmJyZWFkY3J1bWJzO1xyXG4gICAgICAgICAgdm0uc2hvd0xvYWRlciA9IGZhbHNlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmFkZEZvbGRlciA9IChuYW1lLCBmb2xkZXIpID0+IHtcclxuICAgICAgJChcIiNhZGRNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgIGxldCBwYXlsb2FkID0ge1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgaXNQYXJlbnQ6IGZhbHNlLFxyXG4gICAgICAgIHBhcmVudDogZm9sZGVyXHJcbiAgICAgIH07XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuYWRkSGllcmFyY2h5KHBheWxvYWQpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBmb2xkZXIuY2hpbGRyZW4ucHVzaChyZXNwLmRhdGEuZGF0YSk7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uYWRkRmlsZVRvSGllcmFyY2h5ID0gKGFzc2V0cywgZm9sZGVyKSA9PiB7XHJcbiAgICAgICQoXCIjYWRkTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBjb25zdCBhc3NldElkID0gYXNzZXRzLm1hcCh4ID0+IHguX2lkKTtcclxuICAgICAgY29uc3QgaGllcmFyY2h5SWQgPSBmb2xkZXIuX2lkO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmFkZEZpbGVUb0hpZXJhcmNoeSh7XHJcbiAgICAgICAgICBhc3NldElkLFxyXG4gICAgICAgICAgaGllcmFyY2h5SWRcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2cocmVzcCk7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZGVsZXRlRmlsZSA9IChpZCwgZm9sZGVyRGF0YSkgPT4ge1xyXG4gICAgICAkKFwiI2ZpbGVWaWV3XCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5kZWxldGVBc3NldHMoe1xyXG4gICAgICAgICAgYXNzZXRJZDogaWRcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgdm0uc2hvd0xvYWRlciA9IHRydWU7XHJcbiAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgIC52aWV3SGllcmFyY2h5KGZvbGRlckRhdGEuJG1vZGVsVmFsdWUuX2lkKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAvKiBBcHBlbmQgZmlsZXMgdG8gdGhlIGZvbGRlciAqL1xyXG4gICAgICAgICAgICAgIHZtLndpbmRvd0l0ZW1zID0ge1xyXG4gICAgICAgICAgICAgICAgZm9sZGVyRGF0YTogZm9sZGVyRGF0YSxcclxuICAgICAgICAgICAgICAgIGZvbGRlcnM6IGZvbGRlckRhdGEuJG1vZGVsVmFsdWUuY2hpbGRyZW4sXHJcbiAgICAgICAgICAgICAgICBmaWxlczogcmVzcC5kYXRhLmZpbGVzXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB2bS5zaG93TG9hZGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgZm9sZGVyRGF0YS4kbW9kZWxWYWx1ZS5maWxlcyA9IHJlc3AuZGF0YS5maWxlcztcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBGaWxlICAgaGFuZGxpbmcgKi9cclxuICAgIHZtLnVwbG9hZFN0YXRlID0gZmFsc2U7XHJcbiAgICB2bS5jb21wbGV0ZWRBbGwgPSBmYWxzZTtcclxuXHJcbiAgICB2bS5maWxlVXBkYXRlZCA9IChmaWxlcywgZXZlbnQpID0+IHtcclxuICAgICAgLyogUmVmcmVzaCB1cGxvYWQgc3RhdGVzIHdpdGggbmV3IGZpbGVzICovXHJcbiAgICAgIGxldCBmaWxlT2JqID0gZXZlbnQudGFyZ2V0LmZpbGVzO1xyXG4gICAgICB2bS51cGxvYWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICB2bS5jb21wbGV0ZWRBbGwgPSBmYWxzZTtcclxuXHJcbiAgICAgIHZtLmZpbGVOYW1lcyA9IE9iamVjdC5rZXlzKGZpbGVPYmopLm1hcCh4ID0+IHtcclxuICAgICAgICBsZXQgdmFsID0gZmlsZU9ialt4XTtcclxuICAgICAgICB2YWwucHJvZ3Jlc3MgPSAwO1xyXG4gICAgICAgIHZhbC5pc1BhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhbC5jb21wbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB2YWwuYWJvcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHZhbC5wbGFuID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdm0udG9nZ2xlVXBsb2FkVmlld01heGltaXplID0gdmFsID0+IHtcclxuICAgICAgdm0udXBsb2FkVmlld01heGltaXplID0gIXZhbDtcclxuICAgIH07XHJcblxyXG4gICAgLyogQ2FwdHVyZSByZWxvYWQgYW5kIGJhY2sgZXZlbnRzICovXHJcblxyXG4gICAgLy8gd2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgLy8gICAvLyB2bS51cGxvYWRTdGF0ZSAmJlxyXG4gICAgLy8gICByZXR1cm4gKGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gICAgIGlmICh3aW5kb3cuY29uZmlybShcIkFyZSB5b3Ugc3VyZT8gRmlsZSB1cGxvYWQgd2lsbCBiZSBhYm9ydGVkXCIpKSB7XHJcbiAgICAvLyAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICB9KSgpO1xyXG4gICAgLy8gfTtcclxuXHJcbiAgICAvKiBNYWluIHVwbG9hZCBmdW5jdGlvbmFsaXR5ICovXHJcblxyXG4gICAgdm0ucHJlVXBsb2FkID0gKGZpbGVzLCBmb2xkZXIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZmlsZXMpO1xyXG4gICAgICAkKFwiI2FkZE1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgZmlsZU1hbmFnZXJGYWN0b3J5XHJcbiAgICAgICAgLmNoZWNrRHVwbGljYXRlRmlsZXMoZmlsZXMsIGZvbGRlci5faWQpXHJcbiAgICAgICAgLnRoZW4ocHJvY2Vzc2VkID0+IHtcclxuICAgICAgICAgIGlmIChwcm9jZXNzZWQuZHVwbGljYXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdm0ucHJlVXBsb2FkRmlsZXMgPSBwcm9jZXNzZWQ7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLnByZVVwbG9hZEZpbGVzKTtcclxuICAgICAgICAgICAgJChcIiN2ZXJzaW9uaW5nTW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvY2Vzc2VkKTtcclxuICAgICAgICAgICAgdm0udXBsb2FkRmlsZShwcm9jZXNzZWQsIHByb2plY3RTdG9yZS5nZXQoKS5faWQsIGZvbGRlcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0ucHJvY2Vzc0R1cGxpY2F0ZUZpbGVOYW1lID0gZmlsZSA9PiB7XHJcbiAgICAgIGlmIChmaWxlLmFjdGlvbiA9PT0gXCJ2ZXJzaW9uXCIpIHtcclxuICAgICAgICBmaWxlLmFzc2V0TmFtZSA9IGZpbGVNYW5hZ2VyRmFjdG9yeS5nZW5lcmF0ZVZlcnNpb24oZmlsZS5uYW1lKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmaWxlLmFzc2V0TmFtZSA9IGZpbGUubmFtZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS51cGxvYWRGaWxlID0gKGZpbGVzLCBwcm9qZWN0SWQsIGZvbGRlcikgPT4ge1xyXG4gICAgICAvKiBWYWxpZGF0ZSBkdXBsaWNhdGUgZmlsZXMgKi9cclxuICAgICAgaWYgKGZpbGVNYW5hZ2VyRmFjdG9yeS5jaGVja05hbWVDaGFuZ2UoZmlsZXMuZHVwbGljYXRlcykpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24ud2FybmluZyhcIkZpbGUgbmFtZXMgY2FuJ3QgYmUgdGhlIHNhbWVcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8qIENvbGxhdGUgZmlsZXMgKi9cclxuICAgICAgJChcIiN2ZXJzaW9uaW5nTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBmaWxlcyA9IFsuLi5maWxlcy5kdXBsaWNhdGVzLCAuLi5maWxlcy51cGxvYWRGaWxlc107XHJcbiAgICAgIHZtLnVwbG9hZFN0YXRlID0gdHJ1ZTtcclxuICAgICAgJChcIiNhZGRNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgIHZtLnVwbG9hZFZpZXdGaWxlcyA9IGZpbGVNYW5hZ2VyRmFjdG9yeS5zcGxpdERlc3RpbmF0aW9uKGZpbGVzKTtcclxuICAgICAgLyogQ2F0ZWdvcml6ZSBmaWxlcyAqL1xyXG4gICAgICBhbmd1bGFyLmZvckVhY2godm0udXBsb2FkVmlld0ZpbGVzLnMzLCB4ID0+IHtcclxuICAgICAgICAvKiBBdHRhY2ggZXZlbnRzIGFuZCBwcm9wcyB0byBmaWxlT2JqIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSB2aWV3ICovXHJcbiAgICAgICAgbGV0IHVwbG9hZEhhbmRsZXIgPSBldmFwb3JhdGUgPT4ge1xyXG4gICAgICAgICAgLyogdXBsb2FkIHRvIHMzIGlmIHZhbHVlIGlzIGxlc3MgdGhhbiAzICovXHJcbiAgICAgICAgICB4LnBhdXNlID0gdXBsb2FkRmFjdG9yeS5wYXVzZS5iaW5kKGV2YXBvcmF0ZSwgeCk7XHJcbiAgICAgICAgICB4LnJlc3VtZSA9IHVwbG9hZEZhY3RvcnkucmVzdW1lLmJpbmQoZXZhcG9yYXRlLCB4KTtcclxuICAgICAgICAgIHguYWJvcnQgPSB1cGxvYWRGYWN0b3J5LmFib3J0LmJpbmQoZXZhcG9yYXRlLCB4KTtcclxuICAgICAgICAgIGxldCBhZGRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IHgubmFtZSxcclxuICAgICAgICAgICAgZmlsZTogeCxcclxuICAgICAgICAgICAgcHJvZ3Jlc3M6IChwLCBzdGF0cykgPT4ge1xyXG4gICAgICAgICAgICAgIC8qIEFXUyBwcm9ncmVzcyBwZXJjZW50YWdlIGZhbGxzIGJhY2sgc29tZXRpbWVzIGR1ZSB0byBtaXNzaW5nIGZyYWdtZW50YXRpb24uIFxyXG4gICAgICAgICAgICAgIFVwZGF0ZSBwcm9ncmVzcyB2YWx1ZSBvbmx5IHdoZW4gaXQncyBoaWdoZXIgdGhhbiB0aGUgcHJldmlvdXMgdmFsdWUgKi9cclxuICAgICAgICAgICAgICB4LnByb2dyZXNzID1cclxuICAgICAgICAgICAgICAgIHgucHJvZ3Jlc3MgPiBNYXRoLnJvdW5kKHAgKiAxMDApXHJcbiAgICAgICAgICAgICAgICAgID8geC5wcm9ncmVzc1xyXG4gICAgICAgICAgICAgICAgICA6IE1hdGgucm91bmQocCAqIDEwMCk7XHJcbiAgICAgICAgICAgICAgLyogQ2hlY2sgY29tcGxldGlvbiAqL1xyXG4gICAgICAgICAgICAgIHZtLmNvbXBsZXRlZEFsbCA9IGZpbGVNYW5hZ2VyRmFjdG9yeS5jaGVja1VwbG9hZENvbXBsZXRpb24oXHJcbiAgICAgICAgICAgICAgICB2bS51cGxvYWRWaWV3RmlsZXNcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIC8qIFJlZnJlc2ggdmlldyB3aXRoIHNjb3BlID4gYXBwbHkgKi9cclxuICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbXBsZXRlOiAoX3hociwgYXdzS2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgeC5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIC8qIFJlZnJlc2ggdmlldyB3aXRoIHNjb3BlID4gYXBwbHkgKi9cclxuICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb21wbGV0ZSFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgZXZhcG9yYXRlLmFkZChhZGRDb25maWcpLnRoZW4oXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uKGF3c09iamVjdEtleSkge1xyXG4gICAgICAgICAgICAgIC8qIFN1Y2Nlc3MgYmxvY2sgKi9cclxuICAgICAgICAgICAgICBsZXQgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGZpbGVNYW5hZ2VyRmFjdG9yeS5yZXNvbHZlRGVzdFR5cGUoeCksXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RTdG9yZS5nZXQoKS5faWQsXHJcbiAgICAgICAgICAgICAgICBmb2xkZXJJZDogZm9sZGVyLl9pZCxcclxuICAgICAgICAgICAgICAgIGFzc2V0RGF0YToge1xyXG4gICAgICAgICAgICAgICAgICBhc3NldE5hbWU6IHguYXNzZXROYW1lLFxyXG4gICAgICAgICAgICAgICAgICBidWNrZXQ6IFwiM2RmaWxlc2RhdGFcIixcclxuICAgICAgICAgICAgICAgICAga2V5OiBgdGVzdC8ke3gubmFtZX1gLFxyXG4gICAgICAgICAgICAgICAgICBtaW1ldHlwZTogeC50eXBlLFxyXG4gICAgICAgICAgICAgICAgICBieXRlczogeC5zaXplLFxyXG4gICAgICAgICAgICAgICAgICBwbGFuRG9jdW1lbnQ6IHgucGxhblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgICAgLm5ld0ZpbGVVcGxvYWQocGF5bG9hZClcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoZm9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9sZGVyLmZpbGVzLnB1c2gocmVzcC5kYXRhLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiRmlsZSBzdWNjZXNzZnVsbHkgdXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGaWxlIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZCB0bzpcIiwgYXdzT2JqZWN0S2V5KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24ocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgLyogRmFpbHVyZSBibG9jayAqL1xyXG4gICAgICAgICAgICAgIHguYWJvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgLyogQ2hlY2sgY29tcGxldGlvbiAqL1xyXG4gICAgICAgICAgICAgIHZtLmNvbXBsZXRlZEFsbCA9IGZpbGVNYW5hZ2VyRmFjdG9yeS5jaGVja1VwbG9hZENvbXBsZXRpb24oXHJcbiAgICAgICAgICAgICAgICB2bS51cGxvYWRWaWV3RmlsZXNcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIC8qIFJlZnJlc2ggdmlldyB3aXRoIHNjb3BlID4gYXBwbHkgKi9cclxuICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGaWxlIGRpZCBub3QgdXBsb2FkIHN1Y2Vzc2Z1bGx5OlwiLCByZWFzb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHVwbG9hZEZhY3Rvcnkuc3RhcnQodXBsb2FkSGFuZGxlcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHZtLnVwbG9hZFZpZXdGaWxlcy5jbG91ZGluYXJ5Lmxlbmd0aCkge1xyXG4gICAgICAgIGxldCBjbG91ZGluYXJ5UGF5bG9hZCA9IHtcclxuICAgICAgICAgIGZpbGVzOiB2bS51cGxvYWRWaWV3RmlsZXMuY2xvdWRpbmFyeSxcclxuICAgICAgICAgIC8qIFNlbmQgYXNzZXQgbmFtZXMgc2VwYXJhdGVseSAqL1xyXG4gICAgICAgICAgYXNzZXROYW1lczogdm0udXBsb2FkVmlld0ZpbGVzLmNsb3VkaW5hcnkubWFwKHggPT4geC5hc3NldE5hbWUpLFxyXG4gICAgICAgICAgcHJvamVjdElkLFxyXG4gICAgICAgICAgaGllcmFyY2h5SWQ6IGZvbGRlci5faWRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAudXBsb2FkRmlsZUluRmlsZU1hbmFnZXIoY2xvdWRpbmFyeVBheWxvYWQpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgdm0udXBsb2FkVmlld0ZpbGVzLmNsb3VkaW5hcnkgPSB2bS51cGxvYWRWaWV3RmlsZXMuY2xvdWRpbmFyeS5tYXAoXHJcbiAgICAgICAgICAgICAgeCA9PiB7XHJcbiAgICAgICAgICAgICAgICB4LmNvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIC8qIENoZWNrIGNvbXBsZXRpb24gKi9cclxuICAgICAgICAgICAgdm0uY29tcGxldGVkQWxsID0gZmlsZU1hbmFnZXJGYWN0b3J5LmNoZWNrVXBsb2FkQ29tcGxldGlvbihcclxuICAgICAgICAgICAgICB2bS51cGxvYWRWaWV3RmlsZXNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgLyogUmVmcmVzaCB2aWV3IHdpdGggc2NvcGUgPiBhcHBseSAqL1xyXG4gICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmb2xkZXIpIHtcclxuICAgICAgICAgICAgICByZXNwLmRhdGEuZGF0YS5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9sZGVyLmZpbGVzLnB1c2goeCk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uY2xvc2VVcGxvYWRWaWV3ID0gKCkgPT4ge1xyXG4gICAgICB2bS51cGxvYWRTdGF0ZSA9IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5maWxlVmlldyA9IGZpbGUgPT4ge1xyXG4gICAgICAkKFwiI2ZpbGVWaWV3XCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgdm0ucHJldmlld0RhdGEgPSBmaWxlO1xyXG4gICAgICB2bS5wcmV2aWV3RGF0YS5jdXN0b21VcmwgPVxyXG4gICAgICAgIGZpbGUuZm9ybWF0ID09PSBcInBkZlwiXHJcbiAgICAgICAgICA/IGZpbGUuc2VjdXJlX3VybC5yZXBsYWNlKC9cXC5wZGYvLCBcIi5wbmdcIilcclxuICAgICAgICAgIDogZmlsZS5zZWN1cmVfdXJsO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBUb2dnbGluZyBlZGl0ICovXHJcblxyXG4gICAgdm0uZWRpdEVuYWJsZWQgPSBmYWxzZTtcclxuICAgIHZtLnRvZ2dsZUVkaXQgPSBib29sID0+IHtcclxuICAgICAgdm0uZWRpdEVuYWJsZWQgPSBib29sO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBDb250ZXh0IG1lbnUgZnVuY3Rpb25hbGl0eSAqL1xyXG4gICAgJHNjb3BlLmJhY2tCdG5WaWV3ID0gZmFsc2U7XHJcbiAgICB2bS5jb250ZXh0TWVudU9wdGlvbnMgPSB7XHJcbiAgICAgIGV4cGxvcmVyOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGV4dDogXCJQYXN0ZSBpdGVtKHMpXCIsXHJcbiAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGl0ZW1TY29wZSwgJGV2ZW50LCBtb2RlbFZhbHVlLCB0ZXh0LCAkbGkpIHtcclxuICAgICAgICAgICAgaWYgKHZtLndpbmRvd0l0ZW1zLmZvbGRlckRhdGEpIHtcclxuICAgICAgICAgICAgICBjbGlwQm9hcmRcclxuICAgICAgICAgICAgICAgIC5wYXN0ZSh2bS53aW5kb3dJdGVtcy5mb2xkZXJEYXRhLiRtb2RlbFZhbHVlLl9pZClcclxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBpZiAocmVzcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgICAgICAgIC52aWV3SGllcmFyY2h5KHZtLndpbmRvd0l0ZW1zLmZvbGRlckRhdGEuJG1vZGVsVmFsdWUuX2lkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEFwcGVuZCBmaWxlcyB0byB0aGUgZm9sZGVyICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLndpbmRvd0l0ZW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvbGRlckRhdGE6IHZtLndpbmRvd0l0ZW1zLmZvbGRlckRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9sZGVyczogcmVzcC5kYXRhLmZvbGRlcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IHJlc3AuZGF0YS5maWxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24ud2FybmluZyhcIkNhbm5vdCBwYXN0ZSBmaWxlIGluIHJvb3QgbG9jYXRpb25cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIGZpbGU6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0ZXh0OiBcIkNvcHlcIixcclxuICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkaXRlbVNjb3BlLCAkZXZlbnQsIG1vZGVsVmFsdWUsIHRleHQsICRsaSkge1xyXG4gICAgICAgICAgICBjbGlwQm9hcmQuY29weSgkaXRlbVNjb3BlLmZpbGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGV4dDogXCJDdXRcIixcclxuICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkaXRlbVNjb3BlLCAkZXZlbnQsIG1vZGVsVmFsdWUsIHRleHQsICRsaSkge1xyXG4gICAgICAgICAgICBjbGlwQm9hcmQuY3V0KFxyXG4gICAgICAgICAgICAgICRpdGVtU2NvcGUuZmlsZSxcclxuICAgICAgICAgICAgICB2bS53aW5kb3dJdGVtcy5mb2xkZXJEYXRhLiRtb2RlbFZhbHVlLl9pZFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGV4dDogXCJNb3ZlIHRvXCIsXHJcbiAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGl0ZW1TY29wZSkge1xyXG4gICAgICAgICAgICB2bS5wZGZvbmx5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZtLnBpY2tlckZvbGRlcnMgPSBhbmd1bGFyLmNvcHkodm0ucm9vdEZvbGRlcnMpO1xyXG4gICAgICAgICAgICB2bS5tb3ZlVG9Tb3VyY2VGaWxlID0gJGl0ZW1TY29wZS5maWxlO1xyXG4gICAgICAgICAgICAkKFwiI21vdmVUb1wiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgICAgICAgICQoXCIucm9vdEZvbGRlclwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgICQoXCIuY2hpbGRGb2xkZXJcIikuaGlkZSgpO1xyXG4gICAgICAgICAgICB2bS5tb3ZldG8gPSBcIm1vdmUgVG9cIjtcclxuICAgICAgICAgICAgJHNjb3BlLmZvbGRlck5hbWUgPSBcIlJvb3QgRm9sZGVyXCI7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuZm9sZGVyTmFtZSA9PSBcIlJvb3QgRm9sZGVyXCIpIHtcclxuICAgICAgICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICRzY29wZS5iYWNrQnRuVmlldyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gICAgdm0uY2hpbGRGb2xkZXJWaWV3ID0gdmFsID0+IHtcclxuICAgICAgdm0uY2hpbGRGb2xkZXJzID0gdmFsLmNoaWxkcmVuO1xyXG4gICAgICB2bS5tb3ZldG8gPSB2YWwubmFtZTtcclxuICAgICAgJChcIi5yb290Rm9sZGVyXCIpLmhpZGUoKTtcclxuICAgICAgJChcIi5jaGlsZEZvbGRlclwiKS5zaG93KCk7XHJcbiAgICB9O1xyXG4gICAgJHNjb3BlLmJhY2tCdG5WaWV3ID0gZmFsc2U7XHJcbiAgICBpZiAoJHNjb3BlLmZvbGRlck5hbWUgPT0gXCJSb290IEZvbGRlclwiKSB7XHJcbiAgICAgICRzY29wZS5iYWNrQnRuVmlldyA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBIaWVyYXJjaHkgdGVtcGxhdGUgKi9cclxuICAgIHZtLnNhdmVIaWVyYXJjaHlUcmVlID0gbmFtZSA9PiB7XHJcbiAgICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBsZWFzZSBlbnRlciB0ZW1wbGF0ZSBuYW1lXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICQoXCIjc2F2ZVRlbXBsYXRlTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAgICAgbmFtZTogbmFtZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnNhdmVIaWVyYXJjaHlUcmVlKHByb2plY3RTdG9yZS5nZXQoKS5faWQsIGRhdGEpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MocmVzcC5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jb25zb2xlLmxvZyhlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5zZWxlY3RlZFRlbXBsYXRlID0gXCJcIjtcclxuXHJcbiAgICAvLyBnZXRIaWVyYXJjaHlUZW1wbGF0ZVxyXG5cclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmdldEhpZXJhcmNoeVRlbXBsYXRlKClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgdm0udGVtcGxhdGVMaXN0ID0gcmVzcC5kYXRhLmRhdGE7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdm0uYXNzaWduVGVtcGxhdGUgPSAoKSA9PiB7XHJcbiAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgIHByb2plY3RJZDogcHJvamVjdFN0b3JlLmdldCgpLl9pZCxcclxuICAgICAgICB0ZW1wbGF0ZUlkOiB2bS5zZWxlY3RlZFRlbXBsYXRlLl9pZFxyXG4gICAgICB9O1xyXG4gICAgICAkKFwiI2Fzc2lnblRlbXBsYXRlTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmNoYW5nZVByb2plY3RUZW1wbGF0ZShkYXRhKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MocmVzcC5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgdm0uZ2V0UHJpbWFyeUZvbGRlcnMocHJvamVjdFN0b3JlLmdldCgpKTtcclxuICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgLmdldFByb2plY3RCeUlkKHByb2plY3RTdG9yZS5nZXQoKS5faWQpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgIHByb2plY3RTdG9yZS5zZXQocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgICB2bS5iYWNrdXBGb2xkZXJzID0gcHJvamVjdFN0b3JlLmdldCgpLmJhY2t1cEZvbGRlcnM7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uc2hvd0JhY2t1cEZpbGVzID0gZmFsc2U7XHJcbiAgICB2bS5zaG93UmVjZW50RmlsZXMgPSBmYWxzZTtcclxuXHJcbiAgICB2bS50b2dnbGVCb29rbWFya3MgPSAodmFsLCBrZXkpID0+IHtcclxuICAgICAgdm1ba2V5XSA9ICF2YWw7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmxvYWRQcm9qZWN0RmlsZXMgPSBpZCA9PiB7XHJcbiAgICAgIGxldCBsaW1pdCA9IDU7XHJcbiAgICAgIGFwaUZhY3Rvcnkuc2hvd1Byb2plY3RGaWxlcyhpZCwgbGltaXQpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIHZtLnByb2plY3RGaWxlcyA9IHJlc3BvbnNlLmRhdGEuZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdm0ubG9hZFByb2plY3RGaWxlcyhwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkKTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcImludm9pY2VDdHJsXCIsIGludm9pY2VDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gaW52b2ljZUN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBOZ01hcCxcclxuICAgIFVwbG9hZCxcclxuICAgIG1vbWVudCxcclxuICAgICRsb2NhdGlvblxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBkZWJvdW5jZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyh2bS51c2VyRGF0YSlcclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5hY3RpdmVDbGFzcyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiAoJGxvY2F0aW9uLnBhdGgoKSA9PT0gcGF0aCkgPyAnYWN0aXZlJyA6ICcnO1xyXG4gICAgfVxyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJpc3N1ZURldGFpbEN0cmxcIiwgaXNzdWVEZXRhaWxDdHJsKTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc3N1ZURldGFpbEN0cmwoXHJcbiAgICAgICAgJHNjb3BlLFxyXG4gICAgICAgICR0aW1lb3V0LFxyXG4gICAgICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgICAgICRzdGF0ZSxcclxuICAgICAgICAkc3RhdGVQYXJhbXMsXHJcbiAgICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgICBOb3RpZmljYXRpb24sXHJcbiAgICAgICAgTmdNYXAsXHJcbiAgICAgICAgZ2xvYmFscyxcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICAgIEZpbGVTYXZlclxyXG4gICAgICAgIFxyXG4gICAgICApIHtcclxuXHJcbiAgICAgICAgbGV0IHZtID0gdGhpcztcclxuICAgICAgICBjb25zdCB7IGxvZ291dCx1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICAgICAgaWYgKCFhdXRoRmFjdG9yeS5jaGVja1VzZXIoKSkge1xyXG4gICAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZtLnVzZXJEYXRhID0gdXNlclN0b3JlLmdldCgpO1xyXG5cclxuICBcclxuICAgICAgICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgICAgICAgbG9nb3V0KCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgdm0uaXNzdWVJZCA9ICRzdGF0ZVBhcmFtcy5pZDtcclxuICAgICAgICAgIHZtLkltYWdlQXNzZXRzPVtdO1xyXG4gICAgICAgICAgdm0uRG9jdW1lbnRBc3NldHM9W107XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAkc2NvcGUuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgICAgJHNjb3BlLml0ZW1zUGVyUGFnZSA9IDM7XHJcbiAgICAgICAgICBcclxuXHJcbiAgICAgICAgICB2bS5nZXRJc3N1ZURldGFpbCA9ICgpID0+IHtcclxuICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgIC5nZXRJc3N1ZUJ5SWQodm0uaXNzdWVJZClcclxuICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgIHZtLmlzc3VlRGF0YSA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaXNzdWVkYXRhOiBcIix2bS5pc3N1ZURhdGEpO1xyXG4gICAgICAgICAgICAgICB2bS50b3RhbEl0ZW1zID0gdm0uaXNzdWVEYXRhLmNvbW1lbnRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgJHNjb3BlLkFycmF5Q29tbWVudHM9dm0uaXNzdWVEYXRhLmNvbW1lbnRzLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgJHNjb3BlLkFycmF5QWN0aXZpdGllcz12bS5pc3N1ZURhdGEuaXNzdWVBY3Rpdml0eS5yZXZlcnNlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdm0uYWxsQ29tbWVudHMgPSAkc2NvcGUuQXJyYXlDb21tZW50cy5zbGljZSgwLDMpO1xyXG4gICAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcz0kc2NvcGUuQXJyYXlBY3Rpdml0aWVzLnNsaWNlKDAsNik7XHJcbiAgICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3BhZ2luYXRpb25cIikucGFnaW5hdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zOiB2bS50b3RhbEl0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICBpdGVtc09uUGFnZTogJHNjb3BlLml0ZW1zUGVyUGFnZSxcclxuICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICAgICAgaHJlZlRleHRQcmVmaXg6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICBvcmRlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG4gICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICBvblBhZ2VDbGljazogZnVuY3Rpb24ocGFnZSwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFBhZ2luZ0RhdGEocGFnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJChcIiNwYWdpbmF0aW9uQWN0aXZpdHlcIikucGFnaW5hdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zOiB2bS5pc3N1ZURhdGEuaXNzdWVBY3Rpdml0eS5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zT25QYWdlOiA3LFxyXG4gICAgICAgICAgICAgICAgICBjc3NTdHlsZTogXCJsaWdodC10aGVtZVwiLFxyXG4gICAgICAgICAgICAgICAgICBocmVmVGV4dFByZWZpeDogXCIjXCIsXHJcbiAgICAgICAgICAgICAgICAgIG9yZGVyaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXHJcbiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIG9uUGFnZUNsaWNrOiBmdW5jdGlvbihwYWdlLCBldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZpdHlQYWdpbmdEYXRhKHBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgdm0uaXNzdWVEYXRhLmxpc3RBc3NldHMubWFwKHg9PntcclxuICAgICAgICAgICAgICAgIGlmKHgubWltZXR5cGU9PVwiaW1hZ2UvcG5nXCJ8fHgubWltZXR5cGU9PVwiaW1hZ2UvanBnXCIpe1xyXG4gICAgICAgICAgICAgICAgICB2bS5JbWFnZUFzc2V0cy5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHZtLkRvY3VtZW50QXNzZXRzLnB1c2goeCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICBcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0UGFnaW5nRGF0YShwYWdlKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIHZhciBwYWdlZERhdGEgPSB2bS5pc3N1ZURhdGEuY29tbWVudHMuc2xpY2UoXHJcbiAgICAgICAgICAgICAgICAocGFnZSAtIDEpICogICRzY29wZS5pdGVtc1BlclBhZ2UsXHJcbiAgICAgICAgICAgICAgICBwYWdlICogJHNjb3BlLml0ZW1zUGVyUGFnZVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdm0uYWxsQ29tbWVudHMgPSBwYWdlZERhdGE7XHJcbiAgICAgICAgICAgICAgLyoqdG8gcmVmcmVzaCB0aGUgY29tbWVudHMgd2hlbiBwYWdlIGNsaWNrIHVzZSAkYXBwbHkgKi9cclxuICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRBY3Rpdml0eVBhZ2luZ0RhdGEocGFnZSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICB2YXIgcGFnZWREYXRhID0gdm0uaXNzdWVEYXRhLmlzc3VlQWN0aXZpdHkuc2xpY2UoXHJcbiAgICAgICAgICAgICAgICAocGFnZSAtIDEpICogIDcsXHJcbiAgICAgICAgICAgICAgICBwYWdlICogN1xyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgdm0uYWxsQWN0aXZpdGllcyA9IHBhZ2VkRGF0YTtcclxuICAgICAgICAgICAgICAvKip0byByZWZyZXNoIHRoZSBjb21tZW50cyB3aGVuIHBhZ2UgY2xpY2sgdXNlICRhcHBseSAqL1xyXG4gICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2bS5nZXRJc3N1ZURldGFpbCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICBcclxuICAgICAgICAgICBcclxuICAgICAgLy9BZGQgY29tbWVudHMuLi4uXHJcbiAgICAgIHZtLnBvc3RDb21tZW50ID0gZnVuY3Rpb24oY29tbWVudCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjb21tZW50OiBcIixjb21tZW50KTtcclxuICAgICAgIGxldCBjb21tZW50MSA9IGNvbW1lbnQucmVwbGFjZSgvXFxuXFxyPy9nLCAnPGJyIC8+Jyk7XHJcbiAgICAgICBjb25zb2xlLmxvZyhcImNvbW1lbnQ6IFwiLGNvbW1lbnQxKTtcclxuXHJcbiAgICAgICBpZihjb21tZW50PT11bmRlZmluZWQpe1xyXG4gICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgYWRkIGNvbW1lbnQuXCIpO1xyXG4gICAgICAgfWVsc2V7XHJcbiAgICAgICAgIHZhciBjb21tZW50b2JqPXtcImNvbW1lbnRcIjpjb21tZW50fVxyXG4gICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgIC5wb3N0Q29tbWVudEZvcklzc3VlKHZtLmlzc3VlSWQsY29tbWVudG9iailcclxuICAgICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXNwOlwiLHJlc3ApO1xyXG4gICAgICAgICAgICAgIHZtLmdldElzc3VlRGV0YWlsKCk7XHJcbiAgICAgICAgICAgICAgJChcIiNjb21tZW50YXJlYVwiKS52YWwoJycpO1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiQ29tbWVudCBhZGRlZCBzdWNjZXNzZnVsbHkuLlwiKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZT0+e1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIkNvdWxkbid0IHVwZGF0ZSBjb21tZW50XCIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgJHNjb3BlLmNoYW5nZUNvbXBsZXRpb25TdGF0dXMgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgIGFsZXJ0KFwiY29tcGxldGlvblwiKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vZG93bmxvYWQgYXR0YWNobWVudCBmaWxlXHJcbiAgICAgIHZtLmRvd25sb2FkRmlsZSA9IGZ1bmN0aW9uKGRvY3Mpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZG9jc1wiLGRvY3MpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2RvY3NdLCB7dHlwZTogZG9jcy5taW1ldHlwZX0pO1xyXG4gICAgICAgICBjb25zb2xlLmxvZyhcImJsb2JcIixibG9iKTtcclxuICAgICAgICAgc2F2ZUFzKGJsb2IsIGRvY3Mub3JpZ2lvbmFsbmFtZSk7XHJcbiAgICAgICAgLy93aW5kb3cubG9jYXRpb24uaHJlZiA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgICBcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgICRzY29wZS5yZU9wZW5Jc3N1ZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgLy92YXIgVGVtcE9iamVjdD17XCJjb21wbGV0aW9uU3RhdHVzXCI6T1BFTn1cclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgLnJlT3Blbklzc3VlU3RhdHVzVXBkYXRlKHZtLmlzc3VlSWQpXHJcbiAgICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICAgdm0uZ2V0SXNzdWVEZXRhaWwoKTtcclxuICAgICAgICAgICAgICQoXCIjY29uZmlybW1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiSXNzdWUgc3RhdHVzIGlzIG5vdyBvcGVuXCIpO1xyXG4gICAgICAgICAgIH0pLmNhdGNoKGU9PntcclxuICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcImNvdWxkIG5vdCB1cGRhdGUgU3RhdHVzXCIpO1xyXG4gICAgICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRzY29wZS5tYXJrSXNzdWVBc0NvbXBsZXRlID0gZnVuY3Rpb24oY29tbWVudCxpbWFnZUZpbGVzKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhjb21tZW50KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhpbWFnZUZpbGVzKTtcclxuICAgICAgICB2YXIgZWRpdE9iamVjdD17Y29tbWVudDpjb21tZW50LEltYWdlczppbWFnZUZpbGVzfTtcclxuICAgICAgICBhcGlGYWN0b3J5LnNhdmVJc3N1ZUFzQ29tcGxldGUodm0uaXNzdWVJZCxlZGl0T2JqZWN0KVxyXG4gICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICB2bS5nZXRJc3N1ZURldGFpbCgpO1xyXG4gICAgICAgICAgICAgJChcIiNjb21wbGV0aW9uc3RhdHVzbW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJJc3N1ZSBpcyBiZWVuIG1hcmtlZCBhcyBjb21wbGV0ZWRcIik7XHJcbiAgICAgICAgICB9KS5jYXRjaChlPT57XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlNvbWV0aGluZyB3cm9uZyBoYXBwZW5lZC4gY291bGRlbnQgdXBkYXRlIGNoYW5nZXNcIik7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgfVxyXG4gICAgfSkoKTtcclxuXHJcbiAgIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwiaXNzdWVzQ3RybFwiLCBpc3N1ZXNDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gaXNzdWVzQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICRyb290U2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgJHEsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIGZpbGVNYW5hZ2VyRmFjdG9yeSxcclxuICAgIFVwbG9hZCxcclxuICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICB1cGxvYWRGYWN0b3J5XHJcbiAgKSB7XHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgdm0uYmFja0ltZztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUsIGRlYm91bmNlIH0gPSBnbG9iYWxzO1xyXG4gICAgdm0uVXBsb2FkRmlsZXMgPSBbXTtcclxuICAgIHZtLmlzc3VlRGF0YSA9IHt9O1xyXG4gICAgJHNjb3BlLmlzc3VlTW9kZWwgPSB7fTtcclxuICAgICRzY29wZS5maWxlO1xyXG4gICAgJHNjb3BlLmNvbW1lbnQgPSBcIlwiO1xyXG4gICAgLy8gICAkc2NvcGUuaW5wdXRGaWxlcyA9IFtdO1xyXG4gICAgJHNjb3BlLm9wZW5FZGl0ID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuZmlsZXNUb1JlbW92ZSA9IFtdO1xyXG4gICAgJHNjb3BlLmlzU2VsZWN0ZWRCdG4gPSBmYWxzZTtcclxuICAgICRzY29wZS51cGRhdGVmb3JtID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuVW5kb0FycmF5ID0gW107XHJcbiAgICAkc2NvcGUucmVkb0FycmF5ID0gW107XHJcbiAgICB2bS5wbGFuVG9NYXJrID0gW107XHJcbiAgICB2bS5Mb2NhbEltZ3MgPSBbXTtcclxuICAgIC8vIGNvbnN0IHsgbG9nb3V0IH0gPSBnbG9iYWxzO1xyXG4gICAgJHNjb3BlLnNlYXJjaGluZ1RleHQgPSBmYWxzZTtcclxuICAgICRzY29wZS5vcGVuRmlsbENvbG9yID0gZmFsc2U7XHJcbiAgICAvL2NvbG9yIHBpY2tlciB2YXJpYWJsZXNcclxuICAgICRzY29wZS5jb2xvcnBpY2sgPSBcIiMwMDAwZmZcIjtcclxuICAgICRzY29wZS5jb2xvcldlbGw7XHJcbiAgICAkc2NvcGUuZmlsbFdlbGw7XHJcbiAgICAkc2NvcGUuZmlsbENvbG9yID0gXCJ0cmFuc3BhcmVudFwiO1xyXG4gICAgJHNjb3BlLnRleHRGb3JtID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbGlkZUNhbnZhc1wiKTtcclxuICAgIHZtLmVycm9ySW1hZ2UgPSBcImFzc2V0cy9pbWFnZXMvZW5kdXNlcmlzc3VlLnBuZ1wiO1xyXG4gICAgJHNjb3BlLmJ0bk1hcmtlciA9IFwiLi4vYXNzZXRzL2ltYWdlcy9ncHMucG5nXCI7XHJcbiAgICAkc2NvcGUuYnRuQ2lyY2xlID0gXCIuLi9hc3NldHMvaW1hZ2VzL2NpcmNsZS1zaGFwZS1vdXRsaW5lLnBuZ1wiO1xyXG4gICAgJHNjb3BlLmJ0bkxpbmUgPSBcIi4uL2Fzc2V0cy9pbWFnZXMvbGluZWljb24ucG5nXCI7XHJcbiAgICAkc2NvcGUuYnRuVGV4dCA9IFwiLi4vYXNzZXRzL2ltYWdlcy90ZXh0LW9wdGlvbi1pbnRlcmZhY2Utc3ltYm9sLnBuZ1wiO1xyXG5cclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5pbnB1dEltZyA9IFtdO1xyXG4gICAgdm0udXBsb2FkSW1nID0gW107XHJcbiAgICB2bS5pbnB1dEZpbGVzID0gW107XHJcbiAgICB2bS51cGxvYWRGaWxlcyA9IFtdO1xyXG5cclxuICAgIC8qIERhdGEgdGFibGUgc2V0dXAgKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICAkKFwiLmlzc3Vlc0xpc3RcIikuRGF0YVRhYmxlKCk7XHJcbiAgICAkc2NvcGUuYWN0aXZlSnVzdGlmaWVkID0gMDtcclxuXHJcbiAgICB2bS5jdXJyZW50UGFnZSA9IDE7XHJcblxyXG4gICAgdm0udG9nZ2xlT2JqID0ge1xyXG4gICAgICB0b2dnbGVJc3N1ZToge1xyXG4gICAgICAgIHN5c3RlbVRhZzogZmFsc2UsXHJcbiAgICAgICAgdGl0bGU6IGZhbHNlLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBmYWxzZSxcclxuICAgICAgICBwcm9qZWN0TmFtZTogZmFsc2UsXHJcbiAgICAgICAgY3JlYXRlZDogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdm0uc2VhcmNoVGV4dCA9IFwiXCI7XHJcbiAgICB2bS5zb3J0aXNzdWVzID0gKHR5cGUsIHJlc291cmNlKSA9PiB7XHJcbiAgICAgIC8qIEZvciB0b2dnbGluZyBhc2NlbmRpbmcgYW5kIGRlc2NlbmRpbmcgb3JkZXIgKi9cclxuICAgICAgdm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyAodm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9IHRydWUpXHJcbiAgICAgICAgOiAodm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9ICF2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdKTtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5saXN0QWxsSXNzdWVzKHtcclxuICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgc2VhcmNoOiB2bS5zZWFyY2hUZXh0LFxyXG4gICAgICAgICAgc29ydFR5cGU6IHZtLnRvZ2dsZU9ialtyZXNvdXJjZV1bdHlwZV1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgLy8gdm1bcmVzb3VyY2VdPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgIC8vIHZtW3Jlc291cmNlICsgXCJDb3VudFwiXSA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgIHZtLmFsbElzc3VlcyA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJhbGwgaXNzdWVzXCIsIHZtLmFsbElzc3Vlcyk7XHJcbiAgICAgICAgICB2bS5pc3N1ZUNvdW50ID0gcmVzcC5kYXRhLnRvdGFsO1xyXG4gICAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoaW5nVGV4dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkKFwiI3BhZ2luYXRpb25cIikucGFnaW5hdGlvbih7XHJcbiAgICAgICAgICAgICAgaXRlbXM6IHZtLmlzc3VlQ291bnQsXHJcbiAgICAgICAgICAgICAgaXRlbXNPblBhZ2U6IDEwLFxyXG4gICAgICAgICAgICAgIGNzc1N0eWxlOiBcImxpZ2h0LXRoZW1lXCIsXHJcbiAgICAgICAgICAgICAgaHJlZlRleHRQcmVmaXg6IFwiI1wiLFxyXG4gICAgICAgICAgICAgIG9yZGVyaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcclxuICAgICAgICAgICAgICBvblBhZ2VDbGljazogZnVuY3Rpb24ocGFnZSwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgICAgICAgIC5saXN0QWxsSXNzdWVzKHtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbdHlwZV1cclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYWxsSXNzdWVzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHNlYXJjaERlYm91bmNlID0gZGVib3VuY2UoMjUwKTsgLyogUGFzc2luZyBpbiB0aGUgZGVib3VuY2UgcmF0ZSAqL1xyXG4gICAgdm0uc2VhcmNoSXNzdWVzID0gdGV4dCA9PiB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIHBhc3MgdGhlIGZ1bmN0aW9uIHdoaWNoIHlvdSB3YW50IHRvIGRlYm91bmNlXHJcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgLSBwYXNzIHRoZSBhcmd1bWVudHMgZnJvbSB0aGUgdmlldyBhcyBhbiBhcnJheVxyXG4gICAgICAgKi9cclxuICAgICAgc2VhcmNoRGVib3VuY2UoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAubGlzdEFsbElzc3Vlcyh7XHJcbiAgICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICAgICAgc2VhcmNoOiB0ZXh0LFxyXG4gICAgICAgICAgICAgIHNvcnQ6IFwiY3JlYXRlZFwiLFxyXG4gICAgICAgICAgICAgIHNvcnRUeXBlOiBmYWxzZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICB2bS5hbGxJc3N1ZXMgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICB2bS5pc3N1ZUNvdW50ID0gcmVzcC5kYXRhLnRvdGFsO1xyXG5cclxuICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoaW5nVGV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkKFwiI3BhZ2luZ1wiKS5wYWdpbmF0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgaXRlbXM6IHZtLmlzc3VlQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zT25QYWdlOiAxMCxcclxuICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICAgICAgaHJlZlRleHRQcmVmaXg6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICBvcmRlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG5cclxuICAgICAgICAgICAgICAgICAgb25QYWdlQ2xpY2s6IGZ1bmN0aW9uKHBhZ2UsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgICAgICAgICAgICAubGlzdEFsbElzc3Vlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydDogdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydFR5cGU6IHZtLnRvZ2dsZU9ialtyZXNvdXJjZV1bdHlwZV1cclxuICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYWxsSXNzdWVzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFt0ZXh0XVxyXG4gICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBJbml0aWFsbHkgc29ydCBpc3N1ZSBpbiBkZXNjZW5kaW5nIG9yZGVyICovXHJcbiAgICB2bS5zb3J0aXNzdWVzKFwiY3JlYXRlZFwiLCBcInRvZ2dsZUlzc3VlXCIpO1xyXG5cclxuICAgIHZtLmR0T3B0aW9ucyA9IHtcclxuICAgICAgcGFnaW5nOiBmYWxzZSxcclxuICAgICAgaW5mbzogZmFsc2UsXHJcbiAgICAgIG9yZGVyaW5nOiBmYWxzZSxcclxuICAgICAgc2VhcmNoaW5nOiBmYWxzZVxyXG4gICAgfTtcclxuXHJcbiAgICAvKiBFbmQgb2YgIERhdGEgdGFibGUgc2V0dXAgKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICAkc2NvcGUuaXNzdWVDYXRlZ29yeSA9IFtcIlNhZmV0eVwiLCBcIlF1YWxpdHlcIiwgXCJJc3N1ZVwiXTtcclxuXHJcbiAgICBhcGlGYWN0b3J5Lmxpc3RBbGxVc2VycygpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgIHZtLmFsbFVzZXJzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhcGlGYWN0b3J5Lmxpc3RBbGxSb29mZXJzKCkudGhlbihyZXNwID0+IHtcclxuICAgICAgdm0uYWxsUm9vZmVycyA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgfSk7XHJcblxyXG4gICAgYXBpRmFjdG9yeS5saXN0QWxsUHJvamVjdHMoKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICB2bS5hbGxQcm9qZWN0cyA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgfSk7XHJcblxyXG4gICAgYXBpRmFjdG9yeS5nZXRJc3N1ZXNMaXN0KCkudGhlbihyZXNwID0+IHtcclxuICAgICAgdm0ubGlzdE9mSXNzdWUgPSByZXNwLmRhdGEubGlzdDtcclxuICAgIH0pO1xyXG5cclxuICAgIHZtLmRlc2NyaXB0aW9uUG9wb3ZlciA9IChpbmRleFZhbCwgdHlwZSkgPT4ge1xyXG4gICAgICAkc2NvcGUuZmlsZVR5cGUgPSB0eXBlO1xyXG4gICAgICAkc2NvcGUuZmlsZUluZGV4ID0gaW5kZXhWYWw7XHJcbiAgICB9O1xyXG4gICAgdm0uYWRkRGVzY3JpcHRpb24gPSAoaW5kZXgsIGRhdGEpID0+IHtcclxuICAgICAgaWYgKCRzY29wZS5maWxlVHlwZSA9PSBcImltYWdlXCIpIHtcclxuICAgICAgICB2bS51cGxvYWRJbWdbaW5kZXhdLmRlc2NyaXB0aW9uID0gZGF0YTtcclxuXHJcbiAgICAgICAgJChcIiNjbG9zZVBvcG92ZXJJbWdfXCIgKyBpbmRleCkudHJpZ2dlcihcImNsaWNrXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZtLnVwbG9hZEZpbGVzW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcblxyXG4gICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRmlsZV9cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uZmlsZUFkZGVkID0gKGZpbGVzLCBldmVudCwgbW9kYWwpID0+IHtcclxuICAgICAgY29uc29sZS5sb2codm0uaW5wdXRJbWcpO1xyXG4gICAgICBsZXQgZmlsZU9iaiA9IGV2ZW50LnRhcmdldC5maWxlcztcclxuICAgICAgdm0uZmlsZU5hbWVzID0gT2JqZWN0LmtleXMoZmlsZU9iaikubWFwKHggPT4gZmlsZU9ialt4XS5uYW1lKTtcclxuICAgICAgYW5ndWxhci5mb3JFYWNoKGZpbGVzLCBmdW5jdGlvbih4LCBpbmRleCkge1xyXG4gICAgICAgIHguZGVzY3JpcHRpb24gPSBcIlwiO1xyXG4gICAgICAgIGlmIChtb2RhbCA9PSBcImltYWdlXCIpIHtcclxuICAgICAgICAgIGlmICh2bS51cGxvYWRJbWcubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdm0udXBsb2FkSW1nLnB1c2goeCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgZHVwbGljYXRlSW1nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS51cGxvYWRJbWcsIGZ1bmN0aW9uKHkpIHtcclxuICAgICAgICAgICAgICBpZiAoeC5uYW1lID09IHkubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgZHVwbGljYXRlSW1nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWR1cGxpY2F0ZUltZykge1xyXG4gICAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIkZpbGUgbmFtZSBhbHJlYWR5IGV4aXN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICh2bS51cGxvYWRGaWxlcy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoL2ltYWdlLy50ZXN0KHgudHlwZSkpIHtcclxuICAgICAgICAgICAgICB2bS51cGxvYWRJbWcucHVzaCh4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICB2bS51cGxvYWRGaWxlcy5wdXNoKHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgZHVwbGljYXRlSW1nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChbXS5jb25jYXQodm0udXBsb2FkRmlsZXMsIHZtLnVwbG9hZEltZyksIGZ1bmN0aW9uKFxyXG4gICAgICAgICAgICAgIHlcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHgubmFtZSA9PSB5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGR1cGxpY2F0ZUltZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFkdXBsaWNhdGVJbWcpIHtcclxuICAgICAgICAgICAgICBpZiAoL2ltYWdlLy50ZXN0KHgudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2bS51cGxvYWRGaWxlcy5wdXNoKHgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJGaWxlIG5hbWUgYWxyZWFkeSBleGlzdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHZtLnVwbG9hZEltZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmRlbGV0ZUZpbGUgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXMuc3BsaWNlKGluZGV4VmFsLCAxKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5hZGRJc3N1ZURldGFpbHMgPSAoKSA9PiB7XHJcbiAgICAgIGlmICghdm0uaXNzdWVEYXRhLnByb2plY3QpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgU2VsZWN0IHByb2plY3RcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGVsc2UgaWYgKCF2bS5pc3N1ZURhdGEuY2F0ZWdvcnkpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgU2VsZWN0IGlzc3VlIENhdGVnb3J5XCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSBlbHNlIGlmICghdm0uaXNzdWVEYXRhLmFzc2lnbmVkVG8pIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgU2VsZWN0IGFzc2lnbmVkIHVzZXJcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGVsc2UgaWYgKCF2bS5pc3N1ZURhdGEub3duZXIpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgU2VsZWN0IGlzc3VlIG93bmVyXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGUuaW1nQW5kRmlsZXMgPSBbXS5jb25jYXQodm0udXBsb2FkSW1nLCB2bS51cGxvYWRGaWxlcyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmltZ0FuZEZpbGVzKTtcclxuICAgICAgICB2YXIgZm9ybURhdGEgPSB7XHJcbiAgICAgICAgICB0aXRsZTogdm0uaXNzdWVEYXRhLnRpdGxlLFxyXG4gICAgICAgICAgZGVzY3JpcHRpb246IHZtLmlzc3VlRGF0YS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgIHByb2plY3RJZDogdm0uaXNzdWVEYXRhLnByb2plY3QsXHJcbiAgICAgICAgICBpc3N1ZUNhdGVnb3J5OiB2bS5pc3N1ZURhdGEuY2F0ZWdvcnksXHJcbiAgICAgICAgICBhc3NpZ25lZFRvOiB2bS5pc3N1ZURhdGEuYXNzaWduZWRUbyxcclxuICAgICAgICAgIGlzc3VlU3RhdHVzOiB2bS5pc3N1ZURhdGEuaXNzdWVTdGF0dXMsXHJcbiAgICAgICAgICBvd25lcklkOiB2bS5pc3N1ZURhdGEub3duZXIsXHJcbiAgICAgICAgICBkZXBlbmRlbmN5T246IHZtLmlzc3VlRGF0YS5kZXBlbmRlbmN5T24sXHJcbiAgICAgICAgICBkZWFkTGluZTogdm0uaXNzdWVEYXRhLmRlYWRMaW5lLFxyXG4gICAgICAgICAgZmlsZXM6ICRzY29wZS5pbWdBbmRGaWxlcyxcclxuICAgICAgICAgIGFzc2V0T2JqOiAkc2NvcGUuaW1nQW5kRmlsZXMubWFwKCh4LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgYXNzZXREZXNjcmlwdGlvbjogeC5kZXNjcmlwdGlvblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5jcmVhdGVJc3N1ZShmb3JtRGF0YSlcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICQoXCIjaXNzdWVfbW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAkKFwiI2lzc3VlX21hcmtlclwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgICAgICAgIHZtLmlucHV0SW1nID0gW107XHJcbiAgICAgICAgICAgIHZtLnVwbG9hZEltZyA9IFtdO1xyXG4gICAgICAgICAgICB2bS5pbnB1dEZpbGVzID0gW107XHJcbiAgICAgICAgICAgIHZtLnVwbG9hZEZpbGVzID0gW107XHJcbiAgICAgICAgICAgIHZtLmlzc3VlRGF0YSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLyogU2V0dGluZyBiZWxvdyBwcm9wIHRydWUgdG8gZm9yY2UgZGVjZW5kaW5nIG9yZGVyIG9uIG1hdGVyaWFsIGFkZCBpbnN0ZWFkIG9mIHRvZ2dsaW5nIHN0YXRlcyAqL1xyXG5cclxuICAgICAgICAgICAgdm0udG9nZ2xlT2JqLnRvZ2dsZUlzc3VlLmNyZWF0ZWRBdCA9IHRydWU7XHJcbiAgICAgICAgICAgIHZtLnNvcnRNYXRlcmlhbHMoXCJjcmVhdGVkQXRcIik7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnVwZGF0ZUlzc3VlRGV0YWlscyA9IGZvcm1EYXRhID0+IHtcclxuICAgICAgdmFyIGlzc3VlT2JqZWN0ID0ge307XHJcbiAgICAgIGlmICh2bS51cGRhdGVJc3N1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInVwZGF0ZSBpc3N1ZSBpcyB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgaXNzdWVPYmplY3QuVGl0bGUgPSAkc2NvcGUuaXNzdWVNb2RlbC50aXRsZTtcclxuICAgICAgICBpc3N1ZU9iamVjdC5kZXNjcmlwdGlvbiA9ICRzY29wZS5pc3N1ZU1vZGVsLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIGlzc3VlT2JqZWN0LmRlYWRMaW5lID0gJHNjb3BlLmlzc3VlTW9kZWwuZGVhZExpbmU7XHJcbiAgICAgICAgaXNzdWVPYmplY3QuaXNzdWVTdGF0dXMgPSAkc2NvcGUuaXNzdWVNb2RlbC5pc3N1ZVN0YXR1cztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInVwZGF0ZSBpc3V1ZSBpcyBub3QgdW5kZmluZWQgc28gaW4gZXNsZSBjYXNlXCIpO1xyXG4gICAgICAgIGlmICh2bS51cGRhdGVJc3N1ZS50aXRsZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGlzc3VlT2JqZWN0LlRpdGxlID0gJHNjb3BlLmlzc3VlTW9kZWwudGl0bGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlzc3VlT2JqZWN0LlRpdGxlID0gdm0udXBkYXRlSXNzdWUudGl0bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgLy8gJCgnI2lzc3VlX21vZGFsJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAvLyQoJyNpc3N1ZV9tYXJrZXInKS5tb2RhbCgnc2hvdycpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0udXBkYXRlSXNzdWVEZXRhaWxzID0gZm9ybURhdGEgPT4ge1xyXG4gICAgICAgXHJcbiAgICAgICAgdmFyIGlzc3VlT2JqZWN0PXt9O1xyXG4gICAgICAgIGlmKHZtLnVwZGF0ZUlzc3VlPT11bmRlZmluZWQpe1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGUgaXNzdWUgaXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgaXNzdWVPYmplY3QuVGl0bGUgPSAgJHNjb3BlLmlzc3VlTW9kZWwudGl0bGU7XHJcbiAgICAgICAgICBpc3N1ZU9iamVjdC5kZXNjcmlwdGlvbiA9ICRzY29wZS5pc3N1ZU1vZGVsLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpc3N1ZU9iamVjdC5kZXNjcmlwdGlvbiA9IHZtLnVwZGF0ZUlzc3VlLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodm0udXBkYXRlSXNzdWUuZGVhZExpbmUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBpc3N1ZU9iamVjdC5kZWFkTGluZSA9ICRzY29wZS5pc3N1ZU1vZGVsLmRlYWRMaW5lO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpc3N1ZU9iamVjdC5kZWFkTGluZSA9IHZtLnVwZGF0ZUlzc3VlLmRlYWRMaW5lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodm0udXBkYXRlSXNzdWUuaXNzdWVTdGF0dXMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBpc3N1ZU9iamVjdC5pc3N1ZVN0YXR1cyA9ICRzY29wZS5pc3N1ZU1vZGVsLmlzc3VlU3RhdHVzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpc3N1ZU9iamVjdC5pc3N1ZVN0YXR1cyA9IHZtLnVwZGF0ZUlzc3VlLmlzc3VlU3RhdHVzO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCRzY29wZS5pbnB1dEZpbGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBpc3N1ZU9iamVjdC5maWxlcyA9ICRzY29wZS5pbnB1dEZpbGVzO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgkc2NvcGUuZmlsZXNUb1JlbW92ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJmaWxlcyB0byByZW1vdmVcIiwgJHNjb3BlLmZpbGVzVG9SZW1vdmUpO1xyXG4gICAgICAgIGlzc3VlT2JqZWN0LnJlbW92ZWRGaWxlcyA9ICRzY29wZS5maWxlc1RvUmVtb3ZlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiSVNVVUVPQkpFQ1RcIiwgaXNzdWVPYmplY3QpO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLnVwZGF0ZUlzc3VlKGlzc3VlT2JqZWN0LCAkc2NvcGUuaXNzdWVNb2RlbC5faWQpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIklzc3VlIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgICAgJHNjb3BlLmlucHV0RmlsZXMgPSBbXTtcclxuICAgICAgICAgICRzY29wZS5maWxlc1RvUmVtb3ZlID0gW107XHJcbiAgICAgICAgICAkc2NvcGUudXBkYXRlZm9ybSA9IGZhbHNlO1xyXG4gICAgICAgICAgJChcIiNpc3N1ZWRldGFpbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICB2bS5zb3J0aXNzdWVzKFwiY3JlYXRlZFwiLCBcInRvZ2dsZUlzc3VlXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAkc2NvcGUuaW5wdXRGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgJHNjb3BlLmZpbGVzVG9SZW1vdmUgPSBbXTtcclxuICAgICAgICAgICRzY29wZS51cGRhdGVmb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy9yZWFkaW5nIGZpbGUgaW1hZ2VzXHJcbiAgICAkc2NvcGUucmVhZEltZyA9IGZ1bmN0aW9uKGZpbGVJbWcpIHtcclxuICAgICAgdmFyIG91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYmxhaFwiKTtcclxuICAgICAgb3V0cHV0LnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZUltZyk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5kZWxldGVJbWcgPSBmdW5jdGlvbihpbmRleCwgYXJyYXkpIHtcclxuICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0ubG9jYWxGaWxlcyA9IFtdO1xyXG4gICAgJHNjb3BlLmdldEZpbGVzRnJvbUxvY2FsID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJsb2NhbCBmaWxlczogXCIsIGZpbGVzKTtcclxuICAgICAgaWYgKGZpbGVzKSB7XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnNhdmVMb2NhbElzc3VlQXNzZXQoZmlsZXMpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSRVNQOiBcIiwgcmVzcCk7XHJcbiAgICAgICAgICAgIHJlc3AuZGF0YS5kYXRhLmZvckVhY2gob25lZmlsZSA9PiB7XHJcbiAgICAgICAgICAgICAgLy92YXIgU1JDID0gVVJMLmNyZWF0ZU9iamVjdFVSTChvbmVmaWxlKTtcclxuICAgICAgICAgICAgICB2bS5wbGFuVG9NYXJrLnB1c2gob25lZmlsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkKFwiI2lzc3VlX21hcmtlclwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdENhbnZhc0ltZyA9IHZtLnBsYW5Ub01hcmsuc2xpY2UoLTEpO1xyXG4gICAgICAgICAgICAkKFwiI2Nhcm91c2VsbGlzdFwiKVxyXG4gICAgICAgICAgICAgIC5jYXJvdXNlbChcInBhdXNlXCIpXHJcbiAgICAgICAgICAgICAgLnJlbW92ZURhdGEoKTtcclxuICAgICAgICAgICAgJChcIiNjYXJvdXNlbGxpc3RcIikuY2Fyb3VzZWwodm0ucGxhblRvTWFyayk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXHJcbiAgICAgICAgICAgICAgXCJjb3VsZG5vdCBsb2FkIGltYWdlcyBwbGVhc2Ugc2VsZWN0IGltYWdlcyBhZ2Fpbi5cIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vICQoXCIjc2xpZGVDYW52YXNcIikuY3NzKFwiYmFja2dyb3VuZC1pbWFnZVwiLFwidXJsKFwiK2ZpcnN0Q2FudmFzSW1nWzBdLnVybCtcIilcIik7XHJcblxyXG4gICAgICAgIC8vICAkKFwiI2xvY2FsZmlsZXNtb2RlbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiTm8gRmlsZXMgc2VsZWN0ZWQuXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAkKFwiI2lzc3VlX21vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgLy8gJChcIiNpc3N1ZV9tYXJrZXJcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkKFwiI2lzc3VlX21hcmtlclwiKS5vbihcImhpZGRlbi5icy5tb2RhbFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICQodGhpcykucmVtb3ZlRGF0YShcImJzLm1vZGFsXCIpO1xyXG4gICAgICBpZiAoJChcIiNjaG9vc2VJc3N1ZVJvb2ZNb2RhbFwiKS5pcyhcIjp2aXNpYmxlXCIpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJNb2RhbCBpcyBvcGVuXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiTW9kYWwgaXMgY2xvc2VkXCIpO1xyXG4gICAgICAgICQodGhpcykubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuZ2V0SW1hZ2VzSW5DYXJvc2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBwcm9qZWN0SUQgPSBcIjU4ZWI5ZDJlYzkyMWQ2NzAzNjc4NzgzMlwiO1xyXG5cclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5nZXRQcm9qZWN0Um9vZlBsYW5zKHByb2plY3RJRClcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIC8vJChcIiNpc3N1ZV9tb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICBsZXQgUHJvamVjdFBsYW5zID0gcmVzcC5kYXRhLmRhdGE7XHJcbiAgICAgICAgICB2bS5wbGFuUGlja2VyUGxhbnMgPSBQcm9qZWN0UGxhbnM7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInBsYW5waWNrZXI6IFwiLCB2bS5wbGFuUGlja2VyUGxhbnMpO1xyXG4gICAgICAgICAgJChcIiNpc3N1ZV9tYXJrZXJcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgJChcIiNjaG9vc2VJc3N1ZVJvb2ZNb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uY2hvb3NlUGxhbkRhdGEgPSBmdW5jdGlvbihwbGFuKSB7XHJcbiAgICAgIHZtLnBsYW5Ub01hcmsucHVzaChwbGFuLmFzc2V0T2JqKTtcclxuICAgICAgLy8gIGNvbnNvbGUubG9nKHZtLnBsYW5Ub01hcmspO1xyXG4gICAgfTtcclxuICAgIC8vVGVzdCBwYW5cclxuICAgIHZtLmNob29zZVBsYW5EYXRhMSA9IGZ1bmN0aW9uKHBsYW4pIHtcclxuICAgICAgdm0ucGxhblRvTWFyay5wdXNoKHBsYW4pO1xyXG4gICAgICAvLyAgY29uc29sZS5sb2codm0ucGxhblRvTWFyayk7XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5hZGRUb0RldGFpbHMgPSBmdW5jdGlvbihpbWdhcnJheSkge1xyXG4gICAgICAkKFwiI2Nob29zZUlzc3VlUm9vZk1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgJChcIiNpc3N1ZV9tYXJrZXJcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcInZtLnBsYW4gdG8gbXJrOlwiLCB2bS5wbGFuVG9NYXJrKTtcclxuICAgICAgdmFyIGZpcnN0Q2FudmFzSW1nID0gaW1nYXJyYXkuc2xpY2UoLTEpO1xyXG4gICAgICAvLyQoXCIjc2xpZGVDYW52YXNcIikuY3NzKFwiYmFja2dyb3VuZC1pbWFnZVwiLFwidXJsKFwiK2ZpcnN0Q2FudmFzSW1nWzBdLnVybCtcIilcIik7XHJcbiAgICAgICQoXCIjY2Fyb3VzZWxsaXN0XCIpXHJcbiAgICAgICAgLmNhcm91c2VsKFwicGF1c2VcIilcclxuICAgICAgICAucmVtb3ZlRGF0YSgpO1xyXG4gICAgICAkKFwiI2Nhcm91c2VsbGlzdFwiKS5jYXJvdXNlbCh2bS5wbGFuVG9NYXJrKTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmdldERldGFpbCA9IGZ1bmN0aW9uKGlzc3VlKSB7XHJcbiAgICAgICQoXCIjaXNzdWVkZXRhaWxcIikubW9kYWwoKTtcclxuICAgICAgJHNjb3BlLmlzc3VlTW9kZWwgPSBpc3N1ZTtcclxuXHJcbiAgICAgICRzY29wZS5UaXRsZSA9ICRzY29wZS5pc3N1ZU1vZGVsLnRpdGxlO1xyXG4gICAgICAkc2NvcGUuRGVzY3JpcHRpb24gPSAkc2NvcGUuaXNzdWVNb2RlbC5kZXNjcmlwdGlvbjtcclxuXHJcbiAgICAgICRzY29wZS5EZWFkTGluZURhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuaXNzdWVNb2RlbC5kZWFkTGluZSk7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVhZGxpbmVcIikuZGVmYXVsdFZhbHVlID0gJHNjb3BlLkRlYWRMaW5lRGF0ZTtcclxuICAgICAgJHNjb3BlLmRheSA9ICRzY29wZS5EZWFkTGluZURhdGUuZ2V0RGF0ZSgpIC0gMTtcclxuXHJcbiAgICAgICRzY29wZS5tb250aCA9ICRzY29wZS5EZWFkTGluZURhdGUuZ2V0TW9udGgoKSArIDE7XHJcblxyXG4gICAgICAkc2NvcGUueWVhciA9ICRzY29wZS5EZWFkTGluZURhdGUuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICAgICRzY29wZS5kZWFkTGluZURhdGUgPSAkc2NvcGUubW9udGggKyBcIi9cIiArICRzY29wZS5kYXkgKyBcIi9cIiArICRzY29wZS55ZWFyO1xyXG5cclxuICAgICAgJHNjb3BlLlN0YXR1cyA9ICRzY29wZS5pc3N1ZU1vZGVsLmlzc3VlU3RhdHVzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuYWRkRmlsZVRvVXBkYXRlID0gZnVuY3Rpb24oZmlsZSwgY29tbWVudCkge1xyXG4gICAgICAkc2NvcGUuaW5wdXRGaWxlcy5wdXNoKHsgZmlsZTogZmlsZSwgY29tbWVudDogY29tbWVudCB9KTtcclxuICAgICAgY29uc29sZS5sb2coJHNjb3BlLmlucHV0RmlsZXMpO1xyXG4gICAgICAkc2NvcGUuZmlsZSA9IFwiXCI7XHJcbiAgICAgICRzY29wZS5jb21tZW50ID0gXCJcIjtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnVwZGF0ZVJlcXVlc3QgPSBmdW5jdGlvbih1cGRhdGVvYmopIHtcclxuICAgICAgY29uc29sZS5sb2coXCJ0byB1cGRhdGUgZGF0YVwiLCB1cGRhdGVvYmopO1xyXG5cclxuICAgICAgJHNjb3BlLnVwZGF0ZWZvcm0gPSB0cnVlO1xyXG4gICAgICAkc2NvcGUub3BlbkVkaXQgPSBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLnJlbW92ZUZpbGVzID0gZnVuY3Rpb24oaW5kZXgsIGFycmF5LCBpbWFnZUlkKSB7XHJcbiAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwicmVtb3ZpbmcgZmlsZXNcIiwgXCJpbmRleFwiLCBpbmRleCwgXCJpbWFnZUlkXCIsIGltYWdlSWQpO1xyXG4gICAgICAkc2NvcGUuZmlsZXNUb1JlbW92ZS5wdXNoKGltYWdlSWQpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcInJlbW92aW5nIGZpbGVzXCIsICRzY29wZS5maWxlc1RvUmVtb3ZlKTtcclxuICAgIH07XHJcbiAgICB2bS5jbG9zZVVwZHRlTW9kZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgJHNjb3BlLnVwZGF0ZWZvcm0gPSBmYWxzZTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLm9wZW5FZGl0RGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkc2NvcGUub3BlbkVkaXQgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgICRzY29wZS5jbG9zZUVkaXREYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRzY29wZS5vcGVuRWRpdCA9IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuaW1hZ2VUZW1wVXJsID0gXCIuLi9hc3NldHMvaW1hZ2VzL3Jvb2Z0ZXN0aW1hZ2VzL2ltYWdlMS5qcGdcIjtcclxuICAgICRzY29wZS5yb29mdGVzdERlbW8gPSBmdW5jdGlvbihzdHJpbmcpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJzdHJpbmdcIiwgc3RyaW5nKTtcclxuICAgICAgJHNjb3BlLmltYWdlVGVtcFVybCA9IFwiLi5cIiArIHN0cmluZztcclxuICAgIH07XHJcblxyXG4gICAgLy8gJHNjb3BlLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbGlkZUNhbnZhcycpO1xyXG4gICAgJChcIiNpc3N1ZV9tYXJrZXJcIikub24oXCJzaG93bi5icy5tb2RhbFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICQoXCIjY2Fyb3VzZWxsaXN0XCIpLmZsZXhzbGlkZXIoe1xyXG4gICAgICAgIGFuaW1hdGlvbjogXCJzbGlkZVwiLFxyXG4gICAgICAgIGNvbnRyb2xOYXY6IGZhbHNlLFxyXG4gICAgICAgIGFuaW1hdGlvbkxvb3A6IGZhbHNlLFxyXG4gICAgICAgIHNsaWRlc2hvdzogZmFsc2UsXHJcbiAgICAgICAgaXRlbVdpZHRoOiAyMDAsXHJcbiAgICAgICAgaXRlbU1hcmdpbjogM1xyXG4gICAgICB9KTtcclxuICAgICAgLy8kc2NvcGUuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NsaWRlQ2FudmFzJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUudGhpc0ltYWdlID0gXCJcIjtcclxuICAgIHZtLm1hcmtpbmdzQXJyYXkgPSBbXTtcclxuICAgICRzY29wZS5yYXRpbztcclxuICAgICRzY29wZS5vcGVuU2xpZGVySW1hZ2UgPSBmdW5jdGlvbihwbGFuLCBpbmRleCwgY291bnQpIHtcclxuICAgICAgLy8gYWxlcnQoXCJ0byBvcGVuIGltYWdlXCIpO1xyXG4gICAgICAvLyBpZihjb3VudD09Mil7XHJcbiAgICAgIC8vICAgYWxlcnQoXCJjb3VudCAyXCIpO1xyXG4gICAgICAvLyAgIGlmKCRzY29wZS5wcmV2aW91c3BsYW4pe1xyXG4gICAgICAvLyAgICAgYWxlcnQoXCJwcmV2aW91cyBwbGFuIGlzIHRoZXJlLlwiKTtcclxuICAgICAgLy8gICAgIGlmKCRzY29wZS5wcmV2aW91c3BsYW4udXJsPT1wbGFuLnVybCl7XHJcbiAgICAgIC8vICAgICAgIGNvbnNvbGUubG9nKFwiXCIpO1xyXG4gICAgICAvLyAgICAgfWVsc2V7XHJcbiAgICAgIC8vICAgICAgIGFsZXJ0KFwicHJldmlvdXMgcGxhbiBub3QgLlwiKTtcclxuICAgICAgLy8gICAgICAgdmFyIGRhdGFJbWFnZT0kc2NvcGUuY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcclxuICAgICAgLy8gICAgICAgZmV0Y2goZGF0YUltYWdlKVxyXG4gICAgICAvLyAgICAgICAudGhlbihyZXMgPT4gcmVzLmJsb2IoKSlcclxuICAgICAgLy8gICAgICAgLnRoZW4oYmxvYiA9PiB7XHJcbiAgICAgIC8vICAgICAgICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFtibG9iXSwgXCJkZXRhaWxmaWxlXCIpO1xyXG4gICAgICAvLyAgICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmsnKTtcclxuICAgICAgLy8gICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCAnTWludHlQYXBlci5wbmcnKTtcclxuICAgICAgLy8gICAgICAgICBsZXQgZGF0YWltYWdlPWxpbmsuc2V0QXR0cmlidXRlKCdocmVmJyxibG9iKTtcclxuICAgICAgLy8gICAgICAgICBsaW5rLmNsaWNrKCk7XHJcblxyXG4gICAgICAvLyAgICAgICAgdm0uVXBsb2FkRmlsZXMucHVzaCh7LyppbWFnZTogJHNjb3BlLnByZXZpb3VzcGxhbi5faWQsbWFya2luZ3M6dm0ubWFya2luZ3NBcnJheSwqL21hcmtlZEltZzpmaWxlfSk7XHJcbiAgICAgIC8vICAgICAgICBjb25zb2xlLmxvZyhcImNsaWNrIGV2ZW50IHVwbG9hZCBhcnJheTogXCIsdm0uVXBsb2FkRmlsZXMpO1xyXG4gICAgICAvLyAgICAgICAgYWxlcnQoXCJwdXNoZWQgaW4gYXJyYXlcIik7XHJcbiAgICAgIC8vICAgICAgICAkc2NvcGUucHJldmlvdXNwbGFuPXBsYW47XHJcbiAgICAgIC8vICAgICAgIH0pXHJcbiAgICAgIC8vICAgICB9XHJcbiAgICAgIC8vICAgfWVsc2V7XHJcbiAgICAgIC8vICAgICBhbGVydChcInRvIHNldCBwcmV2aW91cyBwbGFuIGZpcnN0XCIpO1xyXG4gICAgICAvLyAgICAgJHNjb3BlLnByZXZpb3VzcGxhbj1wbGFuO1xyXG5cclxuICAgICAgLy8gICB9XHJcblxyXG4gICAgICAvLyAgfWVsc2V7XHJcbiAgICAgIC8vICAgYWxlcnQoXCJub3QgY291bnQgMlwiKTtcclxuICAgICAgLy8gIH1cclxuXHJcbiAgICAgICRzY29wZS50aGlzSW1hZ2UgPSBwbGFuO1xyXG5cclxuICAgICAgJHNjb3BlLmNvbnRleHQgPSAkc2NvcGUuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgbGV0IGJhc2VfaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgYmFzZV9pbWFnZS5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XHJcbiAgICAgIGJhc2VfaW1hZ2Uuc3JjID0gcGxhbi51cmw7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYmFzZSBpbWFnZVwiKTtcclxuICAgXHJcbiAgICB2YXIgaFJhdGlvID0gJHNjb3BlLmNhbnZhcy53aWR0aCAgLyBiYXNlX2ltYWdlLndpZHRoICAgIDtcclxuICAgIHZhciB2UmF0aW8gPSAgJHNjb3BlLmNhbnZhcy5oZWlnaHQgLyBiYXNlX2ltYWdlLmhlaWdodCAgO1xyXG4gICAgJHNjb3BlLnJhdGlvICA9IE1hdGgubWluICggaFJhdGlvLCB2UmF0aW8gKTtcclxuICAgIGNvbnNvbGUubG9nKFwiUkFUSU86IFwiLCAkc2NvcGUucmF0aW8pO1xyXG4gICAgdmFyIGNlbnRlclNoaWZ0X3ggPSAoICRzY29wZS5jYW52YXMud2lkdGggLSBiYXNlX2ltYWdlLndpZHRoKiAkc2NvcGUucmF0aW8gKSAvIDI7XHJcbiAgICB2YXIgY2VudGVyU2hpZnRfeSA9ICggJHNjb3BlLmNhbnZhcy5oZWlnaHQgLSBiYXNlX2ltYWdlLmhlaWdodCogJHNjb3BlLnJhdGlvICkgLyAyOyAgXHJcbiAgICAkc2NvcGUuY29udGV4dC5jbGVhclJlY3QoMCwwLCRzY29wZS5jYW52YXMud2lkdGgsICRzY29wZS5jYW52YXMuaGVpZ2h0KTtcclxuICAgIHZtLm1hcmtpbmdzQXJyYXk9W107XHJcbiAgICAkc2NvcGUuY29udGV4dC5kcmF3SW1hZ2UoYmFzZV9pbWFnZSwgMCwwLCBiYXNlX2ltYWdlLndpZHRoLCBiYXNlX2ltYWdlLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJTaGlmdF94LGNlbnRlclNoaWZ0X3ksYmFzZV9pbWFnZS53aWR0aCogJHNjb3BlLnJhdGlvLCBiYXNlX2ltYWdlLmhlaWdodCogJHNjb3BlLnJhdGlvKTsgXHJcbiAgICAgY29uc29sZS5sb2coXCJwbGFjZWQgaW1hZ2VcIik7XHJcbiAgfVxyXG5cclxuICB2bS5hZGRNYXJrZWRJbWdEYXRhPWZ1bmN0aW9uKCl7XHJcbiAgICBjb25zb2xlLmxvZyhcImFkZCBtYXJrIGltYWdlIGZ1bmN0aW9uXCIpO1xyXG4gICAgdmFyIGRhdGFJbWFnZT0kc2NvcGUuY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcclxuICAgIGZldGNoKGRhdGFJbWFnZSlcclxuICAgIC50aGVuKHJlcyA9PiByZXMuYmxvYigpKVxyXG4gICAgLnRoZW4oYmxvYiA9PiB7XHJcbiAgICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbYmxvYl0sIFwiZGV0YWlsZmlsZVwiKVxyXG4gICAgICBjb25zb2xlLmxvZyhcImZpbGU6IFwiLGZpbGUpO1xyXG4gICAgICB2bS5VcGxvYWRGaWxlcy5wdXNoKHtpbWFnZTogJHNjb3BlLnRoaXNJbWFnZS5faWQsbWFya2luZ3M6dm0ubWFya2luZ3NBcnJheSxtYXJrZWRJbWc6ZmlsZX0pO1xyXG4gICAgICAgY29uc29sZS5sb2coXCJ2bS5VcGxvYWRGaWxlc1wiLHZtLlVwbG9hZEZpbGVzKTtcclxuICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICAgXHJcblxyXG4gICAgICB2YXIgaFJhdGlvID0gJHNjb3BlLmNhbnZhcy53aWR0aCAvIGJhc2VfaW1hZ2Uud2lkdGg7XHJcbiAgICAgIHZhciB2UmF0aW8gPSAkc2NvcGUuY2FudmFzLmhlaWdodCAvIGJhc2VfaW1hZ2UuaGVpZ2h0O1xyXG4gICAgICAkc2NvcGUucmF0aW8gPSBNYXRoLm1pbihoUmF0aW8sIHZSYXRpbyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiUkFUSU86IFwiLCAkc2NvcGUucmF0aW8pO1xyXG4gICAgICB2YXIgY2VudGVyU2hpZnRfeCA9XHJcbiAgICAgICAgKCRzY29wZS5jYW52YXMud2lkdGggLSBiYXNlX2ltYWdlLndpZHRoICogJHNjb3BlLnJhdGlvKSAvIDI7XHJcbiAgICAgIHZhciBjZW50ZXJTaGlmdF95ID1cclxuICAgICAgICAoJHNjb3BlLmNhbnZhcy5oZWlnaHQgLSBiYXNlX2ltYWdlLmhlaWdodCAqICRzY29wZS5yYXRpbykgLyAyO1xyXG4gICAgICAkc2NvcGUuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgJHNjb3BlLmNhbnZhcy53aWR0aCwgJHNjb3BlLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICB2bS5tYXJraW5nc0FycmF5ID0gW107XHJcbiAgICAgICRzY29wZS5jb250ZXh0LmRyYXdJbWFnZShcclxuICAgICAgICBiYXNlX2ltYWdlLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMCxcclxuICAgICAgICBiYXNlX2ltYWdlLndpZHRoLFxyXG4gICAgICAgIGJhc2VfaW1hZ2UuaGVpZ2h0LFxyXG4gICAgICAgIGNlbnRlclNoaWZ0X3gsXHJcbiAgICAgICAgY2VudGVyU2hpZnRfeSxcclxuICAgICAgICBiYXNlX2ltYWdlLndpZHRoICogJHNjb3BlLnJhdGlvLFxyXG4gICAgICAgIGJhc2VfaW1hZ2UuaGVpZ2h0ICogJHNjb3BlLnJhdGlvXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwicGxhY2VkIGltYWdlXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5hZGRNYXJrZWRJbWdEYXRhID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiYWRkIG1hcmsgaW1hZ2UgZnVuY3Rpb25cIik7XHJcbiAgICAgIHZhciBkYXRhSW1hZ2UgPSAkc2NvcGUuY2FudmFzLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKTtcclxuICAgICAgZmV0Y2goZGF0YUltYWdlKVxyXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMuYmxvYigpKVxyXG4gICAgICAgIC50aGVuKGJsb2IgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFtibG9iXSwgXCJkZXRhaWxmaWxlXCIpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJmaWxlOiBcIiwgZmlsZSk7XHJcbiAgICAgICAgICB2bS5VcGxvYWRGaWxlcy5wdXNoKHtcclxuICAgICAgICAgICAgaW1hZ2U6ICRzY29wZS50aGlzSW1hZ2UuX2lkLFxyXG4gICAgICAgICAgICAvKm1hcmtpbmdzOnZtLm1hcmtpbmdzQXJyYXksKi8gbWFya2VkSW1nOiBmaWxlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwidm0uVXBsb2FkRmlsZXNcIiwgdm0uVXBsb2FkRmlsZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvL0NBTlZBUyBNRVRIT0RTIEVWRU5UU1xyXG4gICAgJHNjb3BlLmlzTGluZSA9IGZhbHNlO1xyXG4gICAgJHNjb3BlLmlzQ2lyY2xlID0gZmFsc2U7XHJcbiAgICAkc2NvcGUuaXNNYXJrZXIgPSBmYWxzZTtcclxuICAgICRzY29wZS5pc1RleHQgPSBmYWxzZTtcclxuXHJcbiAgICAkc2NvcGUuZHJhd0xpbmVPbkNhbnZhcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkc2NvcGUub3BlbkZpbGxDb2xvciA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuc25hcHNob3Q7XHJcbiAgICAgICRzY29wZS50ZXh0Rm9ybSA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUuZHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgJHNjb3BlLmRyYWdTdGFydExvY2F0aW9uO1xyXG4gICAgICAkKFwiI2dwc2J0blwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0QzRDNEM1wiKTtcclxuXHJcbiAgICAgICRzY29wZS5idG5NYXJrZXIgPSBcIi4uL2Fzc2V0cy9pbWFnZXMvZ3BzLnBuZ1wiO1xyXG4gICAgICAkc2NvcGUuYnRuQ2lyY2xlID0gXCIuLi9hc3NldHMvaW1hZ2VzL2NpcmNsZS1zaGFwZS1vdXRsaW5lLnBuZ1wiO1xyXG4gICAgICAkc2NvcGUuYnRuTGluZSA9IFwiLi4vYXNzZXRzL2ltYWdlcy9saW5ld2hpdGUucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5UZXh0ID0gXCIuLi9hc3NldHMvaW1hZ2VzL3RleHQtb3B0aW9uLWludGVyZmFjZS1zeW1ib2wucG5nXCI7XHJcblxyXG4gICAgICAkKFwiI3R4dGJ0blwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0QzRDNEM1wiKTtcclxuICAgICAgJChcIiNjaXJjbGVidG5cIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNEM0QzRDNcIik7XHJcbiAgICAgICQoXCIjbGluZWJ1dHRvblwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzAwOUFDRFwiKTtcclxuICAgICAgJHNjb3BlLmNvbnRleHQxID0gJHNjb3BlLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcblxyXG4gICAgICAkc2NvcGUucmVjdCA9ICRzY29wZS5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAkc2NvcGUuaXNDaXJjbGUgPT0gdHJ1ZSB8fFxyXG4gICAgICAgICRzY29wZS5pc01hcmtlciA9PSB0cnVlIHx8XHJcbiAgICAgICAgJHNjb3BlLmlzVGV4dCA9PSB0cnVlXHJcbiAgICAgICkge1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBkcmFnU3RhcnQpO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBkcmFnKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGRyYWdTdG9wKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgTWFya1dyaXRlKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgVGV4dFdyaXRlKTtcclxuICAgICAgfVxyXG4gICAgICAkc2NvcGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZHJhZ1N0YXJ0TGluZSk7XHJcbiAgICAgICRzY29wZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBkcmFnTGluZSk7XHJcbiAgICAgICRzY29wZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJhZ1N0b3BMaW5lKTtcclxuICAgIH07XHJcblxyXG4gICAgLy9MaW5lIEZ1bmN0aW9uc1xyXG4gICAgZnVuY3Rpb24gZHJhZ1N0YXJ0TGluZShlKSB7XHJcbiAgICAgICRzY29wZS5pc0xpbmUgPSB0cnVlO1xyXG4gICAgICAkc2NvcGUuZHJhZ2dpbmcgPSB0cnVlO1xyXG4gICAgICB2YXIgeCA9IE1hdGguZmxvb3IoXHJcbiAgICAgICAgICAoKGUuY2xpZW50WCAtICRzY29wZS5yZWN0LmxlZnQpIC9cclxuICAgICAgICAgICAgKCRzY29wZS5yZWN0LnJpZ2h0IC0gJHNjb3BlLnJlY3QubGVmdCkpICpcclxuICAgICAgICAgICAgJHNjb3BlLmNhbnZhcy53aWR0aFxyXG4gICAgICAgICksXHJcbiAgICAgICAgeSA9IE1hdGguZmxvb3IoXHJcbiAgICAgICAgICAoKGUuY2xpZW50WSAtICRzY29wZS5yZWN0LnRvcCkgL1xyXG4gICAgICAgICAgICAoJHNjb3BlLnJlY3QuYm90dG9tIC0gJHNjb3BlLnJlY3QudG9wKSkgKlxyXG4gICAgICAgICAgICAkc2NvcGUuY2FudmFzLmhlaWdodFxyXG4gICAgICAgICk7XHJcbiAgICAgICRzY29wZS5kcmFnU3RhcnRMb2NhdGlvbiA9IHsgWDogeCwgWTogeSB9O1xyXG4gICAgICAkc2NvcGUuc25hcHNob3QgPSAkc2NvcGUuY29udGV4dDEuZ2V0SW1hZ2VEYXRhKFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMCxcclxuICAgICAgICAkc2NvcGUuY2FudmFzLndpZHRoLFxyXG4gICAgICAgICRzY29wZS5jYW52YXMuaGVpZ2h0XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkcmFnTGluZShlKSB7XHJcbiAgICAgIHZhciBwb3NpdGlvbjtcclxuICAgICAgdmFyIHggPSBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgKChlLmNsaWVudFggLSAkc2NvcGUucmVjdC5sZWZ0KSAvXHJcbiAgICAgICAgICAgICgkc2NvcGUucmVjdC5yaWdodCAtICRzY29wZS5yZWN0LmxlZnQpKSAqXHJcbiAgICAgICAgICAgICRzY29wZS5jYW52YXMud2lkdGhcclxuICAgICAgICApLFxyXG4gICAgICAgIHkgPSBNYXRoLmZsb29yKFxyXG4gICAgICAgICAgKChlLmNsaWVudFkgLSAkc2NvcGUucmVjdC50b3ApIC9cclxuICAgICAgICAgICAgKCRzY29wZS5yZWN0LmJvdHRvbSAtICRzY29wZS5yZWN0LnRvcCkpICpcclxuICAgICAgICAgICAgJHNjb3BlLmNhbnZhcy5oZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgICBpZiAoJHNjb3BlLmRyYWdnaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLnB1dEltYWdlRGF0YSgkc2NvcGUuc25hcHNob3QsIDAsIDApO1xyXG4gICAgICAgIHBvc2l0aW9uID0geyBYOiB4LCBZOiB5IH07XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICRzY29wZS5jb250ZXh0MS5tb3ZlVG8oXHJcbiAgICAgICAgICAkc2NvcGUuZHJhZ1N0YXJ0TG9jYXRpb24uWCxcclxuICAgICAgICAgICRzY29wZS5kcmFnU3RhcnRMb2NhdGlvbi5ZXHJcbiAgICAgICAgKTtcclxuICAgICAgICAkc2NvcGUuY29udGV4dDEubGluZVRvKHBvc2l0aW9uLlgsIHBvc2l0aW9uLlkpO1xyXG4gICAgICAgICRzY29wZS5jb250ZXh0MS5zdHJva2VTdHlsZSA9ICRzY29wZS5jb2xvcnBpY2s7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLmxpbmVDYXAgPSBcInJvdW5kXCI7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkcmFnU3RvcExpbmUoZSl7XHJcbiAgICAgICAgJHNjb3BlLmRyYWdnaW5nPWZhbHNlO1xyXG4gICAgICAgICRzY29wZS5jb250ZXh0MS5wdXRJbWFnZURhdGEoJHNjb3BlLnNuYXBzaG90LDAsMCk7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uO1xyXG4gICAgICAgIHZhciB4PU1hdGguZmxvb3IoICggZS5jbGllbnRYIC0gJHNjb3BlLnJlY3QubGVmdCApIC8gKCAkc2NvcGUucmVjdC5yaWdodCAtICRzY29wZS5yZWN0LmxlZnQgKSAqICRzY29wZS5jYW52YXMud2lkdGggKSxcclxuICAgICAgICB5PU1hdGguZmxvb3IoICggZS5jbGllbnRZIC0gJHNjb3BlLnJlY3QudG9wICkgLyAoICRzY29wZS5yZWN0LmJvdHRvbSAtICRzY29wZS5yZWN0LnRvcCApICogJHNjb3BlLmNhbnZhcy5oZWlnaHQgKVxyXG4gICAgICAgIHBvc2l0aW9uPXsnWCc6eCwnWSc6eX07XHJcbiAgICAgICAvLyBjb25zb2xlLmxvZyhcImRyYWcgbG9jYXRpb25cIixwb3NpdGlvbi5YLHBvc2l0aW9uLlkpO1xyXG4gICAgICAgICRzY29wZS5jb250ZXh0MS5iZWdpblBhdGgoKTtcclxuICAgICAgICAkc2NvcGUuY29udGV4dDEubW92ZVRvKCRzY29wZS5kcmFnU3RhcnRMb2NhdGlvbi5YLCRzY29wZS5kcmFnU3RhcnRMb2NhdGlvbi5ZKTtcclxuICAgICAgICAkc2NvcGUuY29udGV4dDEubGluZVRvKHBvc2l0aW9uLlgscG9zaXRpb24uWSk7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLnN0cm9rZVN0eWxlID0gJHNjb3BlLmNvbG9ycGljaztcclxuICAgICAgICAkc2NvcGUuY29udGV4dDEubGluZVdpZHRoPTI7XHJcbiAgICAgICAgJHNjb3BlLmNvbnRleHQxLmxpbmVDYXA9J3JvdW5kJztcclxuICAgICAgICAkc2NvcGUuY29udGV4dDEuc3Ryb2tlKCk7XHJcbiAgICAgICB2YXIgaW1hZ2VEYXRhID0gJHNjb3BlLmNvbnRleHQxLmdldEltYWdlRGF0YSgwLDAsJHNjb3BlLmNhbnZhcy53aWR0aCwkc2NvcGUuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAkc2NvcGUuVW5kb0FycmF5LnB1c2goaW1hZ2VEYXRhKTtcclxuICAgICAgIHZtLm1hcmtpbmdzQXJyYXkucHVzaChpbWFnZURhdGEpO1xyXG4gICAgICAgY29uc29sZS5sb2coXCJ1bmRvQXJyYXk6IFwiLCRzY29wZS5VbmRvQXJyYXkpO1xyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy9DSVJDTEVcclxuXHJcbiAgICAkc2NvcGUuZHJhd0NpcmNsZU9uQ2FudmFzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRzY29wZS5vcGVuRmlsbENvbG9yID0gdHJ1ZTtcclxuICAgICAgJHNjb3BlLnRleHRGb3JtID0gZmFsc2U7XHJcbiAgICAgICQoXCIjZ3BzYnRuXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjRDNEM0QzXCIpO1xyXG5cclxuICAgICAgJHNjb3BlLmJ0bk1hcmtlciA9IFwiLi4vYXNzZXRzL2ltYWdlcy9ncHMucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5DaXJjbGUgPSBcIi4uL2Fzc2V0cy9pbWFnZXMvY2lyY2xld2hpdGUucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5MaW5lID0gXCIuLi9hc3NldHMvaW1hZ2VzL2xpbmVpY29uLnBuZ1wiO1xyXG4gICAgICAkc2NvcGUuYnRuVGV4dCA9IFwiLi4vYXNzZXRzL2ltYWdlcy90ZXh0LW9wdGlvbi1pbnRlcmZhY2Utc3ltYm9sLnBuZ1wiO1xyXG5cclxuICAgICAgJChcIiNsaW5lYnV0dG9uXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjRDNEM0QzXCIpO1xyXG4gICAgICAkKFwiI3R4dGJ0blwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0QzRDNEM1wiKTtcclxuICAgICAgJChcIiNjaXJjbGVidG5cIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiMwMDlBQ0RcIik7XHJcbiAgICAgICQoXCIjY2lyY2xlYnRuXCIpLmNzcyhcImNvbG9yXCIsIFwiI2ZmZmZmZlwiKTtcclxuXHJcbiAgICAgICRzY29wZS5jdHggPSAkc2NvcGUuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgJHNjb3BlLmNhbnZhc3ggPSAkKCRzY29wZS5jYW52YXMpLm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICRzY29wZS5jYW52YXN5ID0gJCgkc2NvcGUuY2FudmFzKS5vZmZzZXQoKS50b3A7XHJcbiAgICAgICRzY29wZS5sYXN0X21vdXNleSwgJHNjb3BlLm1vdXNleTtcclxuICAgICAgJHNjb3BlLmxhc3RfbW91c2V4ID0gJHNjb3BlLmxhc3RfbW91c2V5ID0gMDtcclxuICAgICAgJHNjb3BlLm1vdXNleCA9ICRzY29wZS5tb3VzZXkgPSAwO1xyXG4gICAgICAkc2NvcGUubW91c2Vkb3duID0gZmFsc2U7XHJcbiAgICAgICRzY29wZS5yZWN0MSA9ICRzY29wZS5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGlmICgkc2NvcGUuaXNMaW5lID09IHRydWUgfHwgJHNjb3BlLmlzTWFya2VyID09IHRydWUpIHtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgZHJhZ1N0YXJ0TGluZSk7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGRyYWdMaW5lKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGRyYWdTdG9wTGluZSk7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIE1hcmtXcml0ZSk7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIFRleHRXcml0ZSk7XHJcbiAgICAgIH1cclxuICAgICAgJHNjb3BlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGRyYWdTdGFydCk7XHJcbiAgICAgICRzY29wZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBkcmFnKTtcclxuICAgICAgJHNjb3BlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBkcmFnU3RvcCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vY2lyY2wgZnVuY3Rpb25zXHJcbiAgICBmdW5jdGlvbiBkcmFnU3RhcnQoZSkge1xyXG4gICAgICAkc2NvcGUuaXNDaXJjbGUgPSB0cnVlO1xyXG4gICAgICAvLyAkc2NvcGUubGFzdF9tb3VzZXggPSBwYXJzZUludChlLmNsaWVudFgtJHNjb3BlLmNhbnZhc3gpO1xyXG4gICAgICAvLyAkc2NvcGUubGFzdF9tb3VzZXkgPSBwYXJzZUludChlLmNsaWVudFktJHNjb3BlLmNhbnZhc3kpO1xyXG4gICAgICAkc2NvcGUubGFzdF9tb3VzZXggPSBwYXJzZUludChcclxuICAgICAgICAoKGUuY2xpZW50WCAtICRzY29wZS5yZWN0MS5sZWZ0KSAvXHJcbiAgICAgICAgICAoJHNjb3BlLnJlY3QxLnJpZ2h0IC0gJHNjb3BlLnJlY3QxLmxlZnQpKSAqXHJcbiAgICAgICAgICAkc2NvcGUuY2FudmFzLndpZHRoXHJcbiAgICAgICk7XHJcbiAgICAgICRzY29wZS5sYXN0X21vdXNleSA9IHBhcnNlSW50KFxyXG4gICAgICAgICgoZS5jbGllbnRZIC0gJHNjb3BlLnJlY3QxLnRvcCkgL1xyXG4gICAgICAgICAgKCRzY29wZS5yZWN0MS5ib3R0b20gLSAkc2NvcGUucmVjdDEudG9wKSkgKlxyXG4gICAgICAgICAgJHNjb3BlLmNhbnZhcy5oZWlnaHRcclxuICAgICAgKTtcclxuICAgICAgJHNjb3BlLm1vdXNlZG93biA9IHRydWU7XHJcbiAgICAgICRzY29wZS5zbmFwc2hvdENpcmNsZSA9ICRzY29wZS5jdHguZ2V0SW1hZ2VEYXRhKFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMCxcclxuICAgICAgICAkc2NvcGUuY2FudmFzLndpZHRoLFxyXG4gICAgICAgICRzY29wZS5jYW52YXMuaGVpZ2h0XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkcmFnKGUpIHtcclxuICAgICAgLy8gJHNjb3BlLm1vdXNleCA9IHBhcnNlSW50KGUuY2xpZW50WC0kc2NvcGUuY2FudmFzeCk7XHJcbiAgICAgIC8vICRzY29wZS5tb3VzZXkgPSBwYXJzZUludChlLmNsaWVudFktJHNjb3BlLmNhbnZhc3kpO1xyXG4gICAgICAkc2NvcGUubW91c2V4ID0gcGFyc2VJbnQoXHJcbiAgICAgICAgKChlLmNsaWVudFggLSAkc2NvcGUucmVjdDEubGVmdCkgL1xyXG4gICAgICAgICAgKCRzY29wZS5yZWN0MS5yaWdodCAtICRzY29wZS5yZWN0MS5sZWZ0KSkgKlxyXG4gICAgICAgICAgJHNjb3BlLmNhbnZhcy53aWR0aFxyXG4gICAgICApO1xyXG4gICAgICAkc2NvcGUubW91c2V5ID0gcGFyc2VJbnQoXHJcbiAgICAgICAgKChlLmNsaWVudFkgLSAkc2NvcGUucmVjdDEudG9wKSAvXHJcbiAgICAgICAgICAoJHNjb3BlLnJlY3QxLmJvdHRvbSAtICRzY29wZS5yZWN0MS50b3ApKSAqXHJcbiAgICAgICAgICAkc2NvcGUuY2FudmFzLmhlaWdodFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKCRzY29wZS5tb3VzZWRvd24pIHtcclxuICAgICAgICAvLyAgJHNjb3BlLmN0eC5jbGVhclJlY3QoMCwwLCRzY29wZS5jYW52YXMud2lkdGgsJHNjb3BlLmNhbnZhcy5oZWlnaHQpOyAvL2NsZWFyIGNhbnZhc1xyXG4gICAgICAgIC8vU2F2ZVxyXG4gICAgICAgICRzY29wZS5jdHguc2F2ZSgpO1xyXG4gICAgICAgICRzY29wZS5jdHgucHV0SW1hZ2VEYXRhKCRzY29wZS5zbmFwc2hvdENpcmNsZSwgMCwgMCk7XHJcbiAgICAgICAgJHNjb3BlLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAvL0R5bmFtaWMgc2NhbGluZ1xyXG5cclxuICAgICAgICB2YXIgc2NhbGV4ID0gMSAqICgoJHNjb3BlLm1vdXNleCAtICRzY29wZS5sYXN0X21vdXNleCkgLyAyKTtcclxuICAgICAgICB2YXIgc2NhbGV5ID0gMSAqICgoJHNjb3BlLm1vdXNleSAtICRzY29wZS5sYXN0X21vdXNleSkgLyAyKTtcclxuICAgICAgICAkc2NvcGUuY3R4LnNjYWxlKHNjYWxleCwgc2NhbGV5KTtcclxuICAgICAgICAvL0NyZWF0ZSBlbGxpcHNlXHJcbiAgICAgICAgJHNjb3BlLmNlbnRlcnggPSAkc2NvcGUubGFzdF9tb3VzZXggLyBzY2FsZXggKyAxO1xyXG4gICAgICAgICRzY29wZS5jZW50ZXJ5ID0gJHNjb3BlLmxhc3RfbW91c2V5IC8gc2NhbGV5ICsgMTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmN0eC5hcmMoJHNjb3BlLmNlbnRlcngsICRzY29wZS5jZW50ZXJ5LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgLy9SZXN0b3JlIGFuZCBkcmF3XHJcbiAgICAgICAgJHNjb3BlLmN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgJHNjb3BlLmN0eC5zdHJva2VTdHlsZSA9ICRzY29wZS5jb2xvcnBpY2s7XHJcbiAgICAgICAgJHNjb3BlLmN0eC5maWxsU3R5bGUgPSAkc2NvcGUuZmlsbENvbG9yO1xyXG4gICAgICAgICRzY29wZS5jdHguZmlsbCgpO1xyXG4gICAgICAgICRzY29wZS5jdHgubGluZVdpZHRoID0gMjtcclxuICAgICAgICAkc2NvcGUuY3R4LnN0cm9rZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkcmFnU3RvcChlKSB7XHJcbiAgICAgICRzY29wZS5tb3VzZWRvd24gPSBmYWxzZTtcclxuICAgICAgdmFyIGltYWdlRGF0YSA9ICRzY29wZS5jdHguZ2V0SW1hZ2VEYXRhKFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMCxcclxuICAgICAgICAkc2NvcGUuY2FudmFzLndpZHRoLFxyXG4gICAgICAgICRzY29wZS5jYW52YXMuaGVpZ2h0XHJcbiAgICAgICk7XHJcbiAgICAgICRzY29wZS5VbmRvQXJyYXkucHVzaChpbWFnZURhdGEpO1xyXG4gICAgICB2bS5tYXJraW5nc0FycmF5LnB1c2goaW1hZ2VEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICAvL01BUktFUlxyXG4gICAgJHNjb3BlLmRyYXdtYXJrZXJPbkNhbnZhcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAkc2NvcGUub3BlbkZpbGxDb2xvciA9IHRydWU7XHJcbiAgICAgICRzY29wZS50ZXh0Rm9ybSA9IGZhbHNlO1xyXG4gICAgICAkc2NvcGUubWFya2VyY29udGV4dCA9ICRzY29wZS5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgJHNjb3BlLmlzQ2lyY2xlID09IHRydWUgfHxcclxuICAgICAgICAkc2NvcGUuaXNMaW5lID09IHRydWUgfHxcclxuICAgICAgICAkc2NvcGUuaXNUZXh0ID09IHRydWVcclxuICAgICAgKSB7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGRyYWdTdGFydCk7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGRyYWcpO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJhZ1N0b3ApO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBkcmFnU3RhcnRMaW5lKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZHJhZ0xpbmUpO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJhZ1N0b3BMaW5lKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgVGV4dFdyaXRlKTtcclxuICAgICAgfVxyXG4gICAgICAkKFwiI2dwc2J0blwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzAwOUFDRFwiKTtcclxuXHJcbiAgICAgICRzY29wZS5idG5NYXJrZXIgPSBcIi4uL2Fzc2V0cy9pbWFnZXMvZ3Bzd2hpdGUucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5DaXJjbGUgPSBcIi4uL2Fzc2V0cy9pbWFnZXMvY2lyY2xlLXNoYXBlLW91dGxpbmUucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5MaW5lID0gXCIuLi9hc3NldHMvaW1hZ2VzL2xpbmVpY29uLnBuZ1wiO1xyXG4gICAgICAkc2NvcGUuYnRuVGV4dCA9IFwiLi4vYXNzZXRzL2ltYWdlcy90ZXh0LW9wdGlvbi1pbnRlcmZhY2Utc3ltYm9sLnBuZ1wiO1xyXG5cclxuICAgICAgJChcIiN0eHRidG5cIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNEM0QzRDNcIik7XHJcbiAgICAgICQoXCIjY2lyY2xlYnRuXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjRDNEM0QzXCIpO1xyXG4gICAgICAkKFwiI2xpbmVidXR0b25cIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNEM0QzRDNcIik7XHJcbiAgICAgICRzY29wZS5yZWN0bWFya2VyID0gJHNjb3BlLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgJHNjb3BlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIE1hcmtXcml0ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIE1hcmtXcml0ZShlKSB7XHJcbiAgICAgICRzY29wZS5pc01hcmtlciA9IHRydWU7XHJcbiAgICAgIHZhciBtb3VzZXggPSBwYXJzZUludChcclxuICAgICAgICAoKGUuY2xpZW50WCAtICRzY29wZS5yZWN0bWFya2VyLmxlZnQpIC9cclxuICAgICAgICAgICgkc2NvcGUucmVjdG1hcmtlci5yaWdodCAtICRzY29wZS5yZWN0bWFya2VyLmxlZnQpKSAqXHJcbiAgICAgICAgICAkc2NvcGUuY2FudmFzLndpZHRoXHJcbiAgICAgICk7XHJcbiAgICAgIHZhciBtb3VzZXkgPSBwYXJzZUludChcclxuICAgICAgICAoKGUuY2xpZW50WSAtICRzY29wZS5yZWN0bWFya2VyLnRvcCkgL1xyXG4gICAgICAgICAgKCRzY29wZS5yZWN0bWFya2VyLmJvdHRvbSAtICRzY29wZS5yZWN0bWFya2VyLnRvcCkpICpcclxuICAgICAgICAgICRzY29wZS5jYW52YXMuaGVpZ2h0XHJcbiAgICAgICk7XHJcbiAgICAgICRzY29wZS5tYXJrZXJjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAkc2NvcGUubWFya2VyY29udGV4dC5hcmMobW91c2V4LCBtb3VzZXksIDgsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgJHNjb3BlLm1hcmtlcmNvbnRleHQuc3Ryb2tlU3R5bGUgPSAkc2NvcGUuY29sb3JwaWNrO1xyXG4gICAgICAkc2NvcGUubWFya2VyY29udGV4dC5maWxsU3R5bGUgPSBcImJsdWVcIjtcclxuICAgICAgJHNjb3BlLm1hcmtlcmNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAkc2NvcGUubWFya2VyY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgdmFyIGltYWdlRGF0YSA9ICRzY29wZS5tYXJrZXJjb250ZXh0LmdldEltYWdlRGF0YShcclxuICAgICAgICAwLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy53aWR0aCxcclxuICAgICAgICAkc2NvcGUuY2FudmFzLmhlaWdodFxyXG4gICAgICApO1xyXG4gICAgICAkc2NvcGUuVW5kb0FycmF5LnB1c2goaW1hZ2VEYXRhKTtcclxuICAgICAgdm0ubWFya2luZ3NBcnJheS5wdXNoKGltYWdlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy90ZXh0IHdyaXRpbmdcclxuICAgICRzY29wZS5maWxsVGV4dE9uQ2FudmFzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICRzY29wZS5vcGVuRmlsbENvbG9yID0gZmFsc2U7XHJcbiAgICAgICRzY29wZS50ZXh0Rm9ybSA9IHRydWU7XHJcbiAgICAgICQoXCIjZ3BzYnRuXCIpLmNzcyhcImJhY2tncm91bmQtY29sb3JcIiwgXCIjRDNEM0QzXCIpO1xyXG5cclxuICAgICAgJHNjb3BlLmJ0bk1hcmtlciA9IFwiLi4vYXNzZXRzL2ltYWdlcy9ncHMucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5DaXJjbGUgPSBcIi4uL2Fzc2V0cy9pbWFnZXMvY2lyY2xlLXNoYXBlLW91dGxpbmUucG5nXCI7XHJcbiAgICAgICRzY29wZS5idG5MaW5lID0gXCIuLi9hc3NldHMvaW1hZ2VzL2xpbmVpY29uLnBuZ1wiO1xyXG4gICAgICAkc2NvcGUuYnRuVGV4dCA9IFwiLi4vYXNzZXRzL2ltYWdlcy90ZXh0d2hpdGUucG5nXCI7XHJcblxyXG4gICAgICAkKFwiI3R4dGJ0blwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiIzAwOUFDRFwiKTtcclxuICAgICAgJChcIiNjaXJjbGVidG5cIikuY3NzKFwiYmFja2dyb3VuZC1jb2xvclwiLCBcIiNEM0QzRDNcIik7XHJcbiAgICAgICQoXCIjbGluZWJ1dHRvblwiKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0QzRDNEM1wiKTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgICRzY29wZS5pc0NpcmNsZSA9PSB0cnVlIHx8XHJcbiAgICAgICAgJHNjb3BlLmlzTGluZSA9PSB0cnVlIHx8XHJcbiAgICAgICAgJHNjb3BlLmlzTWFya2VyID09IHRydWVcclxuICAgICAgKSB7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGRyYWdTdGFydCk7XHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGRyYWcpO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJhZ1N0b3ApO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBkcmFnU3RhcnRMaW5lKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgZHJhZ0xpbmUpO1xyXG4gICAgICAgICRzY29wZS5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZHJhZ1N0b3BMaW5lKTtcclxuICAgICAgICAkc2NvcGUuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgTWFya1dyaXRlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJHNjb3BlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIFRleHRXcml0ZSk7XHJcbiAgICAgIC8vICRzY29wZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsZXh0VXApO1xyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIFRleHRXcml0ZShlKSB7XHJcbiAgICAgICRzY29wZS5pc1RleHQgPSB0cnVlO1xyXG5cclxuICAgICAgJHNjb3BlLmNudHh0ID0gJHNjb3BlLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgIHZhciBjb29yZHMgPSAkc2NvcGUuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICB2YXIgbW91c2V4ID0gcGFyc2VJbnQoXHJcbiAgICAgICAgKChlLmNsaWVudFggLSBjb29yZHMubGVmdCkgLyAoY29vcmRzLnJpZ2h0IC0gY29vcmRzLmxlZnQpKSAqXHJcbiAgICAgICAgICAkc2NvcGUuY2FudmFzLndpZHRoXHJcbiAgICAgICk7XHJcbiAgICAgIHZhciBtb3VzZXkgPSBwYXJzZUludChcclxuICAgICAgICAoKGUuY2xpZW50WSAtIGNvb3Jkcy50b3ApIC8gKGNvb3Jkcy5ib3R0b20gLSBjb29yZHMudG9wKSkgKlxyXG4gICAgICAgICAgJHNjb3BlLmNhbnZhcy5oZWlnaHRcclxuICAgICAgKTtcclxuICAgICAgJHNjb3BlLmNudHh0LmZvbnQgPSBcIjE1cHggVGltZXMgTmV3IFJvbWFuXCI7XHJcbiAgICAgICRzY29wZS5jbnR4dC5maWxsU3R5bGUgPSAkc2NvcGUuY29sb3JwaWNrO1xyXG4gICAgICAkc2NvcGUuY250eHQuc3Ryb2tlVGV4dCgkc2NvcGUucGxhY2VEYXRhQXRQaXhlbCwgbW91c2V4LCBtb3VzZXkpO1xyXG4gICAgICB2YXIgaW1hZ2VEYXRhID0gJHNjb3BlLmNudHh0LmdldEltYWdlRGF0YShcclxuICAgICAgICAwLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgJHNjb3BlLmNhbnZhcy53aWR0aCxcclxuICAgICAgICAkc2NvcGUuY2FudmFzLmhlaWdodFxyXG4gICAgICApO1xyXG4gICAgICAkc2NvcGUuVW5kb0FycmF5LnB1c2goaW1hZ2VEYXRhKTtcclxuICAgICAgdm0ubWFya2luZ3NBcnJheS5wdXNoKGltYWdlRGF0YSk7XHJcbiAgICAgICRzY29wZS5wbGFjZURhdGFBdFBpeGVsID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUuVW5kb0RyYXdpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKCRzY29wZS5VbmRvQXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciB1bmRvQ3R4ID0gJHNjb3BlLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdW5kb0N0eC5jbGVhclJlY3QoMCwgMCwgJHNjb3BlLmNhbnZhcy53aWR0aCwgJHNjb3BlLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIHZhciBpbWdkYXRhID0gJHNjb3BlLlVuZG9BcnJheS5wb3AoKTtcclxuICAgICAgICAkc2NvcGUucmVkb0FycmF5LnB1c2goaW1nZGF0YSk7XHJcblxyXG4gICAgICAgICRzY29wZS5VbmRvQXJyYXkuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgIHVuZG9DdHgucHV0SW1hZ2VEYXRhKGVsZW1lbnQsIDAsIDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICRzY29wZS5SZWRvRHJhd2luZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdW5kb0N0eCA9ICRzY29wZS5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICBpZiAoJHNjb3BlLnJlZG9BcnJheS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHJlZG8gPSAkc2NvcGUucmVkb0FycmF5LnBvcCgpO1xyXG5cclxuICAgICAgICB1bmRvQ3R4LnB1dEltYWdlRGF0YShyZWRvLCAwLCAwKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5zYXZlTWFya0luZm89ZnVuY3Rpb24oKXtcclxuICAgIFxyXG5cclxuXHJcbiAgICAgICB2YXIgbWFya2VkZmlsZSA9IEpTT04uc3RyaW5naWZ5KHZtLlVwbG9hZEZpbGVzKTtcclxuICAgICAgXHJcbiAgICAgICBhcGlGYWN0b3J5LnBvc3RNYXJrSW1nKG1hcmtlZGZpbGUpXHJcbiAgICAgICAgICAudGhlbihyZXNwPT57XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWZ0ZXIgcG9zdCBtYXJraW5nc1wiKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibmV3RGF0YTogXCIsbmV3RGF0YSk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgXHJcblxyXG4gICAgICB2YXIgbWFya2VkZmlsZSA9IHsgZGF0YTogXCJkYXRhZmlsZVwiLCBhbGxPYmo6IHZtLlVwbG9hZEZpbGVzIH07XHJcblxyXG4gICAgICBhcGlGYWN0b3J5LnBvc3RNYXJrSW1nKG1hcmtlZGZpbGUpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJhZnRlciBwb3N0IG1hcmtpbmdzXCIpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIm5ld0RhdGE6IFwiLCBuZXdEYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICAgIC8vIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIC8vcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBGaWxlIGluc3RhbmNlXHJcbiAgICBmdW5jdGlvbiB1cmx0b0ZpbGUodXJsLCBmaWxlbmFtZSwgbWltZVR5cGUpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKHVybClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgIHJldHVybiByZXMuYXJyYXlCdWZmZXIoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGJ1Zikge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBGaWxlKFtidWZdLCBmaWxlbmFtZSwgeyB0eXBlOiBtaW1lVHlwZSB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLmxpZ2h0Ym94IGltZ1wiLCBmdW5jdGlvbihlKSB7fSk7XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJtYXRlcmlhbEN0cmxcIiwgbWF0ZXJpYWxDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gbWF0ZXJpYWxDdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgICRzdGF0ZSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBnbG9iYWxzLFxyXG4gICAgTmdNYXAsXHJcbiAgICBVcGxvYWQsXHJcbiAgICBtb21lbnRcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSwgZGVib3VuY2UgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcblxyXG4gICAgY29uc29sZS5sb2codm0udXNlckRhdGEpO1xyXG4gICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0udGltZWNoZWNrID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhmaWxlKTsgLy9kZWZpbmVkIGluIGJyb3dzZXIsIHVuZGVmaW5lZCBvbiBtb2JpbGVcclxuICAgIH07XHJcblxyXG4gICAgdm0uaW5wdXRJbWcgPSBbXTtcclxuICAgIHZtLnVwbG9hZEltZyA9IFtdO1xyXG4gICAgdm0uaW5wdXRGaWxlcyA9IFtdO1xyXG4gICAgdm0udXBsb2FkRmlsZXMgPSBbXTtcclxuICAgIC8qIERhdGEgdGFibGUgc2V0dXAgKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICB2bS5kdE9wdGlvbnMgPSB7XHJcbiAgICAgIHJldHJpZXZlOiB0cnVlLFxyXG4gICAgICBwYWdpbmc6IGZhbHNlLFxyXG4gICAgICBpbmZvOiBmYWxzZSxcclxuICAgICAgb3JkZXJpbmc6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIC8vICQoXCIubWF0ZXJpYWxMaXN0XCIpLkRhdGFUYWJsZSgpO1xyXG5cclxuICAgIC8qIFNldHRpbmcgdXAgaW52ZW50b3J5IHN0YXRlICovXHJcbiAgICBjb25zdCBpbnZlbnRvcnlTdGF0ZSA9IGdsb2JhbHMuaW52ZW50b3J5U3RhdGUoKTtcclxuICAgIHZtLmFjdGl2ZVRhYiA9IGludmVudG9yeVN0YXRlLmdldCgpLnRhYjtcclxuICAgICQoXCIudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpXHJcbiAgICAgIC5lcShpbnZlbnRvcnlTdGF0ZS5nZXQoKS50YWIpXHJcbiAgICAgIC5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICB2bS5jdXJyZW50UGFnZSA9IDE7XHJcblxyXG4gICAgdm0udG9nZ2xlVGFiID0gdmFsID0+IHtcclxuICAgICAgaW52ZW50b3J5U3RhdGUuc2V0VGFiKHZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnRvZ2dsZU9iaiA9IHtcclxuICAgICAgbWF0ZXJpYWw6IHtcclxuICAgICAgICBzeXN0ZW1UYWc6IHRydWUsXHJcbiAgICAgICAgbWF0ZXJpYWxDb3N0OiBmYWxzZSxcclxuICAgICAgICByb29mZXJDb3N0OiBmYWxzZSxcclxuICAgICAgICBjcmVhdGVkQXQ6IHRydWUsXHJcbiAgICAgICAgbmFtZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY29tYm86IHtcclxuICAgICAgICBzeXN0ZW1UYWc6IHRydWUsXHJcbiAgICAgICAgbWF0ZXJpYWxDb3N0OiBmYWxzZSxcclxuICAgICAgICByb29mZXJDb3N0OiBmYWxzZSxcclxuICAgICAgICBjcmVhdGVkQXQ6IHRydWUsXHJcbiAgICAgICAgbmFtZTogZmFsc2VcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBhcGlGYWN0b3J5XHJcbiAgICAgIC5nZXRBbGxTdXBwbGllcnMoKVxyXG4gICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5zdXBwbGllcnMgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB2bS5zZWFyY2hUZXh0ID0gaW52ZW50b3J5U3RhdGUuZ2V0KCkuc2VhcmNoVGV4dDtcclxuXHJcbiAgICAkc2NvcGUuJHdhdGNoKFxyXG4gICAgICBcInZtLnNlYXJjaFRleHRcIixcclxuICAgICAgdGV4dCA9PiB7XHJcbiAgICAgICAgaW52ZW50b3J5U3RhdGUudGV4dCh0ZXh0KTtcclxuICAgICAgfSxcclxuICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuXHJcbiAgICB2bS51bml0U2VsZWN0ID0gZGF0YSA9PiB7XHJcbiAgICAgIHZtLnNlbGVjdGVkVW5pdCA9IGRhdGEubmFtZTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uc29ydERpc3BsYXkgPSAodHlwZSwgcmVzb3VyY2UpID0+IHtcclxuICAgICAgaWYgKHR5cGUgJiYgcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gYFNvcnRlZCBCeTogJHt0eXBlfSAtICR7XHJcbiAgICAgICAgICB2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdID8gXCJBU0NcIiA6IFwiRFNDXCJcclxuICAgICAgICB9YDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5zb3J0TWF0ZXJpYWxzID0gKHR5cGUsIHJlc291cmNlKSA9PiB7XHJcbiAgICAgIC8qIEZvciB0b2dnbGluZyBhc2NlbmRpbmcgYW5kIGRlc2NlbmRpbmcgb3JkZXIgKi9cclxuICAgICAgdm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9PT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyAodm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9IHRydWUpXHJcbiAgICAgICAgOiAodm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXSA9ICF2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdKTtcclxuICAgICAgbGV0IGFwaU5hbWUgPVxyXG4gICAgICAgIHJlc291cmNlID09PSBcIm1hdGVyaWFsXCIgPyBcImxpc3RBbGxNYXRlcmlhbHNcIiA6IFwibGlzdEFsbENvbWJvTWF0ZXJpYWxzXCI7XHJcblxyXG4gICAgICBhcGlGYWN0b3J5W2FwaU5hbWVdKHtcclxuICAgICAgICBwYWdlOiBpbnZlbnRvcnlTdGF0ZS5nZXQoKS5wYWdlW3Jlc291cmNlXSxcclxuICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgc29ydDogdHlwZSxcclxuICAgICAgICBzZWFyY2g6IGludmVudG9yeVN0YXRlLmdldCgpLnNlYXJjaFRleHQsXHJcbiAgICAgICAgc29ydFR5cGU6IHZtLnRvZ2dsZU9ialtyZXNvdXJjZV1bdHlwZV1cclxuICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtW3Jlc291cmNlXSA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgdm1bcmVzb3VyY2UgKyBcIkNvdW50XCJdID0gcmVzcC5kYXRhLnRvdGFsO1xyXG4gICAgICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAkKFwiI1wiICsgcmVzb3VyY2UgKyBcIlBhZ2luYXRpb25cIikucGFnaW5hdGlvbih7XHJcbiAgICAgICAgICAgICAgaXRlbXM6IHZtW3Jlc291cmNlICsgXCJDb3VudFwiXSxcclxuICAgICAgICAgICAgICBpdGVtc09uUGFnZTogMTAsXHJcbiAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICBocmVmVGV4dFByZWZpeDogXCIjXCIsXHJcbiAgICAgICAgICAgICAgb3JkZXJpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBpbnZlbnRvcnlTdGF0ZS5nZXQoKS5wYWdlW3Jlc291cmNlXSxcclxuICAgICAgICAgICAgICBvblBhZ2VDbGljazogZnVuY3Rpb24ocGFnZSwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBpbnZlbnRvcnlTdGF0ZS5zZXRQYWdlKHJlc291cmNlLCBwYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBhcGlGYWN0b3J5W2FwaU5hbWVdKHtcclxuICAgICAgICAgICAgICAgICAgcGFnZTogcGFnZSxcclxuICAgICAgICAgICAgICAgICAgY2h1bms6IDEwLFxyXG4gICAgICAgICAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICBzZWFyY2g6IGludmVudG9yeVN0YXRlLmdldCgpLnNlYXJjaFRleHQsXHJcbiAgICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbcmVzb3VyY2VdW3R5cGVdXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2bVtyZXNvdXJjZV0gPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgc2VhcmNoRGVib3VuY2UgPSBkZWJvdW5jZSgyNTApOyAvKiBQYXNzaW5nIGluIHRoZSBkZWJvdW5jZSByYXRlICovXHJcbiAgICB2bS5zZWFyY2hNYXRlcmlhbHMgPSAodGV4dCwgcmVzb3VyY2UpID0+IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gcGFzcyB0aGUgZnVuY3Rpb24gd2hpY2ggeW91IHdhbnQgdG8gZGVib3VuY2VcclxuICAgICAgICogQHBhcmFtIHtBcnJheX0gYXJncyAtIHBhc3MgdGhlIGFyZ3VtZW50cyBmcm9tIHRoZSB2aWV3IGFzIGFuIGFycmF5XHJcbiAgICAgICAqL1xyXG4gICAgICBzZWFyY2hEZWJvdW5jZShcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICBsZXQgYXBpTmFtZSA9XHJcbiAgICAgICAgICAgIHJlc291cmNlID09PSBcIm1hdGVyaWFsXCJcclxuICAgICAgICAgICAgICA/IFwibGlzdEFsbE1hdGVyaWFsc1wiXHJcbiAgICAgICAgICAgICAgOiBcImxpc3RBbGxDb21ib01hdGVyaWFsc1wiO1xyXG5cclxuICAgICAgICAgIGFwaUZhY3RvcnlbYXBpTmFtZV0oe1xyXG4gICAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICAgIHNlYXJjaDogdGV4dCxcclxuICAgICAgICAgICAgc29ydDogXCJjcmVhdGVkRGF0ZVwiLFxyXG4gICAgICAgICAgICBzb3J0VHlwZTogZmFsc2VcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgIHZtW3Jlc291cmNlXSA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgICAgIHZtW3Jlc291cmNlICsgXCJDb3VudFwiXSA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAkKFwiI1wiICsgcmVzb3VyY2UgKyBcIlBhZ2luYXRpb25cIikucGFnaW5hdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zOiB2bVtyZXNvdXJjZSArIFwiQ291bnRcIl0sXHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zT25QYWdlOiAxMCxcclxuICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICAgICAgaHJlZlRleHRQcmVmaXg6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICBvcmRlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG4gICAgICAgICAgICAgICAgICBvblBhZ2VDbGljazogZnVuY3Rpb24ocGFnZSwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwaUZhY3RvcnlbYXBpTmFtZV0oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgcGFnZTogcGFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgIHNvcnQ6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBzb3J0VHlwZTogdm0udG9nZ2xlT2JqW3Jlc291cmNlXVt0eXBlXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0ubWF0ZXJpYWxzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFt0ZXh0LCByZXNvdXJjZV1cclxuICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgLyogSW5pdGlhbGx5IGdldHRpbmcgdGhlIHZhbHVlcyBvZiBtYXRlcmlhbCBhbmQgY29tYm8gbWF0ZXJpYWxzICovXHJcbiAgICB2bS5zb3J0TWF0ZXJpYWxzKFwiY3JlYXRlZEF0XCIsIFwibWF0ZXJpYWxcIik7XHJcbiAgICB2bS5zb3J0TWF0ZXJpYWxzKFwiY3JlYXRlZEF0XCIsIFwiY29tYm9cIik7XHJcbiAgICAvKiBFbmQgb2YgIERhdGEgdGFibGUgc2V0dXAgKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICAvKiBBZGQgbWF0ZXJpYWwgZnVuY3Rpb25hbGl0eSAqL1xyXG4gICAgbGV0IGRlZmF1bHRNYWludGVuYW5jZVBlcmlvZCA9IDkwO1xyXG4gICAgdm0uYWRkTWF0ZXJpYWwgPSB7XHJcbiAgICAgIGNvbnZlcnNpb25GYWN0b3I6IDEsXHJcbiAgICAgIG1haW50ZW5hbmNlUGVyaW9kOiBkZWZhdWx0TWFpbnRlbmFuY2VQZXJpb2QsXHJcbiAgICAgIG1haW50ZW5hbmNlRGF0ZTogbW9tZW50KClcclxuICAgICAgICAuYWRkKGRlZmF1bHRNYWludGVuYW5jZVBlcmlvZCwgXCJkYXlzXCIpXHJcbiAgICAgICAgLmZvcm1hdCgpXHJcbiAgICB9O1xyXG4gICAgdm0uY2hhbmdlTWFpbnRlbmFuY2VQZXJpb2QgPSBkYXlzID0+IHtcclxuICAgICAgdm0uYWRkTWF0ZXJpYWwubWFpbnRlbmFuY2VEYXRlID0gbW9tZW50KClcclxuICAgICAgICAuYWRkKGRheXMsIFwiZGF5c1wiKVxyXG4gICAgICAgIC5mb3JtYXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdm0udGFiU2V0dGluZ3MgPSB7IGRpc2FibGU6IHRydWUgfTtcclxuXHJcbiAgICB2bS50YWJDaGFuZ2UgPSAodmFsLCBmbGFnKSA9PiB7XHJcbiAgICAgIGlmIChmbGFnID09IFwiY29tYm9cIikge1xyXG4gICAgICAgIGlmICh2YWwgPT0gMCkge1xyXG4gICAgICAgICAgdm0udGFiQ2hhbmdlRnVuKHZhbCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWwgPT0gMSkge1xyXG4gICAgICAgICAgaWYgKCF2bS5hZGRDb21ib01hdGVyaWFsRm9ybS5uYW1lKSB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBsZWFzZSBlbnRlciBjb21ibyBtYXRlcmlhbCBuYW1lXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCF2bS5zZWxlY3RlZFVuaXQpIHtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIHNlbGVjdCB1bml0XCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKCF2bS5hZGRDb21ib01hdGVyaWFsRm9ybS5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgZW50ZXIgY29tYm8gZGVzY3JpcHRpb25cIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZtLnRhYkNoYW5nZUZ1bih2YWwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodmFsID09IDIpIHtcclxuICAgICAgICAgIGlmICh2bS5jb21ib01hdGVyaWFsTGlzdC5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgYWRkIENvbWJpbmF0aW9uIGxpc3RcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZtLlRvdGFsTUMgPSAwO1xyXG4gICAgICAgICAgICB2bS5Ub3RhbFJDID0gMDtcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLmNvbWJvTWF0ZXJpYWxMaXN0LCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIHZtLlRvdGFsTUMgPVxyXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh2bS5Ub3RhbE1DKSArIHBhcnNlRmxvYXQodmFsdWUubWF0ZXJpYWxDb3N0KTtcclxuICAgICAgICAgICAgICB2bS5Ub3RhbFJDID1cclxuICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQodm0uVG90YWxSQykgKyBwYXJzZUZsb2F0KHZhbHVlLnJvb2ZlckNvc3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdm0uVG90YWxNQyA9IHBhcnNlRmxvYXQoTWF0aC5yb3VuZCh2bS5Ub3RhbE1DICogMTAwKSAvIDEwMCk7XHJcbiAgICAgICAgICAgIHZtLlRvdGFsUkMgPSBwYXJzZUZsb2F0KE1hdGgucm91bmQodm0uVG90YWxSQyAqIDEwMCkgLyAxMDApO1xyXG4gICAgICAgICAgICB2bS50YWJDaGFuZ2VGdW4odmFsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHZhbCA9PSAwKSB7XHJcbiAgICAgICAgICB2bS50YWJDaGFuZ2VGdW4xKHZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWwgPT0gMSkge1xyXG4gICAgICAgICAgaWYgKCF2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbE5hbWUpIHtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIGVudGVyIG1hdGVyaWFsIG5hbWVcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoIXZtLnNlbGVjdGVkVW5pdCkge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2Ugc2VsZWN0IG1hdGVyaWFsIHVuaXRcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgLyogfSBlbHNlIGlmICghdm0uYWRkTWF0ZXJpYWwuY3VycmVuY3kpIHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2Ugc2VsZWN0IGN1cnJlbmN5XCIpO1xyXG4gICAgICAgICAgICAgIHJldHVybjsgKi9cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZtLnRhYkNoYW5nZUZ1bjEodmFsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2bS50YWJDaGFuZ2VGdW4gPSB2YWwgPT4ge1xyXG4gICAgICAkKFwiLmRjcF9tb2RhbCAubmF2LXRhYnMgbGkgLm5hdi1saW5rXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAkKFwiLmRjcF9tb2RhbCAubmF2LXRhYnMgbGkgLm5hdi1saW5rXCIpXHJcbiAgICAgICAgLmVxKHZhbClcclxuICAgICAgICAuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAkKFwiLmRjcF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAkKFwiLmRjcF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgJChcIi5kY3BfbW9kYWwgLnRhYi1jb250ZW50IC50YWItcGFuZVwiKVxyXG4gICAgICAgIC5lcSh2YWwpXHJcbiAgICAgICAgLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgJChcIi5kY3BfbW9kYWwgLnRhYi1jb250ZW50IC50YWItcGFuZVwiKVxyXG4gICAgICAgIC5lcSh2YWwpXHJcbiAgICAgICAgLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS50YWJDaGFuZ2VGdW4xID0gdmFsID0+IHtcclxuICAgICAgJChcIi5tYXRlcmlhbF9tb2RhbCAubmF2LXRhYnMgbGkgLm5hdi1saW5rXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAkKFwiLm1hdGVyaWFsX21vZGFsIC5uYXYtdGFicyBsaSAubmF2LWxpbmtcIilcclxuICAgICAgICAuZXEodmFsKVxyXG4gICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuXHJcbiAgICAgICQoXCIubWF0ZXJpYWxfbW9kYWwgLnRhYi1jb250ZW50IC50YWItcGFuZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgJChcIi5tYXRlcmlhbF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgJChcIi5tYXRlcmlhbF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpXHJcbiAgICAgICAgLmVxKHZhbClcclxuICAgICAgICAuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAkKFwiLm1hdGVyaWFsX21vZGFsIC50YWItY29udGVudCAudGFiLXBhbmVcIilcclxuICAgICAgICAuZXEodmFsKVxyXG4gICAgICAgIC5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgIH07XHJcblxyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAuZ2V0Q29tcGFueUJ5SWQodm0udXNlckRhdGEuY29tcGFueUlkKVxyXG4gICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5jb21wYW55RGF0YSA9IHJlc3AuZGF0YTtcclxuICAgICAgICB2bS5hZGRNYXRlcmlhbC5jdXJyZW5jeSA9IGFuZ3VsYXIuY29weShcclxuICAgICAgICAgIHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGVcclxuICAgICAgICApO1xyXG4gICAgICAgIHZtLmNvbXBhbnlDdXJyZW5jeSA9IGFuZ3VsYXIuY29weShcclxuICAgICAgICAgIHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGVcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmFkZE1hdGVyaWFsLmN1cnJlbmN5KTtcclxuICAgICAgICAkKFwiI2N1cnJlbmN5XCIpXHJcbiAgICAgICAgICAudmFsKHZtLmFkZE1hdGVyaWFsLmN1cnJlbmN5KVxyXG4gICAgICAgICAgLnRyaWdnZXIoXCJjaGFuZ2Uuc2VsZWN0MlwiKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICRzY29wZS4kd2F0Y2goXCJ2bS5hZGRNYXRlcmlhbC5jdXJyZW5jeVwiLCBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAkKFwiYS5pdGVtLXNlbGVjdGVkIHNwYW5cIikucmVtb3ZlQ2xhc3MoXCJnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZVwiKTtcclxuICAgICAgJChcImEuaXRlbS1zZWxlY3RlZCBzcGFuXCIpLmFkZENsYXNzKFwiZmFzIGZhLXRpbWVzIG1yLTNcIik7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2bS5zaG93Q29udmVyc2lvblJhdGUgPSAoZnJvbSwgdG8pID0+IHtcclxuICAgICAgJChcIi5sb2FkZXJcIikuc2hvdygpO1xyXG4gICAgICBsZXQgY3VycmVuY3lEYXRhID0ge1xyXG4gICAgICAgIGZyb20sXHJcbiAgICAgICAgdG9cclxuICAgICAgfTtcclxuICAgICAgaWYgKGZyb20gJiYgdG8pIHtcclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAuc2hvd0NvbnZlcnNpb25SYXRlKGN1cnJlbmN5RGF0YSlcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICB2bS5hZGRNYXRlcmlhbC5jb252ZXJzaW9uRmFjdG9yID0gcmVzcC5kYXRhLmNvbnZlcnNpb25GYWN0b3I7XHJcblxyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAkKFwiLmxvYWRlclwiKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmFkZE1hdGVyaWFsTmV4dCA9ICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2codm0uYWRkTWF0ZXJpYWwubWF0ZXJpYWxVbml0KTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHZtLmFkZE1hdGVyaWFsLm1hdGVyaWFsTmFtZSA9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbE5hbWUgPT0gXCJcIlxyXG4gICAgICApIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgZW50ZXIgbWF0ZXJpYWwgbmFtZVwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghdm0uYWRkTWF0ZXJpYWwubWF0ZXJpYWxVbml0ICYmIHZtLmFkZE1hdGVyaWFsLm1hdGVyaWFsVW5pdCA9PSBcIlwiKSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIHNlbGVjdCBtYXRlcmlhbCBVbml0XCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHZtLmFkZE1hdGVyaWFsLmN1cnJlbmN5ID09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIHZtLmFkZE1hdGVyaWFsLmN1cnJlbmN5ID09IFwiXCJcclxuICAgICAgKSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIHNlbGVjdCBDdXJyZW5jeVwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRzY29wZS5hY3RpdmVKdXN0aWZpZWQgPSAxO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5jaGFuZ2VDb3N0ID0gKHR5cGUsIGNvc3QpID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT0gXCJib3RoXCIpIHtcclxuICAgICAgICB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbENvc3RWYWx1ZSA9XHJcbiAgICAgICAgICB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbENvc3RWYWx1ZSAqIHZtLmFkZE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3I7XHJcbiAgICAgICAgdm0uYWRkTWF0ZXJpYWwucm9vZmVyQ29zdFZhbHVlID1cclxuICAgICAgICAgIHZtLmFkZE1hdGVyaWFsLnJvb2ZlckNvc3RWYWx1ZSAqIHZtLmFkZE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3I7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGNvc3QgLyB2bS5hZGRNYXRlcmlhbC5jb252ZXJzaW9uRmFjdG9yO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmRlbGV0ZUZpbGUgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXMuc3BsaWNlKGluZGV4VmFsLCAxKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5kZXNjcmlwdGlvblBvcG92ZXIgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgJHNjb3BlLmZpbGVUeXBlID0gdHlwZTtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGluZGV4VmFsO1xyXG4gICAgfTtcclxuICAgIHZtLmFkZERlc2NyaXB0aW9uID0gKGluZGV4LCBkYXRhKSA9PiB7XHJcbiAgICAgIGlmICgkc2NvcGUuZmlsZVR5cGUgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgdm0udXBsb2FkSW1nW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgICAgaWYgKGludmVudG9yeVN0YXRlLmdldCgpLnRhYiA9PSAwKSB7XHJcbiAgICAgICAgICAkKFwiI2Nsb3NlUG9wb3ZlckltZ19cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRGNwSW1nX1wiICsgaW5kZXgpLnRyaWdnZXIoXCJjbGlja1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0udXBsb2FkRmlsZXNbaW5kZXhdLmRlc2NyaXB0aW9uID0gZGF0YTtcclxuICAgICAgICBpZiAoaW52ZW50b3J5U3RhdGUuZ2V0KCkudGFiID09IDApIHtcclxuICAgICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRmlsZV9cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoXCIjY2xvc2VQb3BvdmVyRGNwRmlsZV9cIiArIGluZGV4KS50cmlnZ2VyKFwiY2xpY2tcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdm0uY2xlYXJEYXRhID0gdmFsID0+IHtcclxuICAgICAgaWYgKHZhbCA9PSBcImRjcFwiKSB7XHJcbiAgICAgICAgdm0uYWRkQ29tYm9NYXRlcmlhbEZvcm0gPSB7fTtcclxuICAgICAgICB2bS5pbnB1dEltZyA9IFtdO1xyXG4gICAgICAgIHZtLnVwbG9hZEltZyA9IFtdO1xyXG4gICAgICAgIHZtLmlucHV0RmlsZXMgPSBbXTtcclxuICAgICAgICB2bS51cGxvYWRGaWxlcyA9IFtdO1xyXG4gICAgICAgIHZtLnNlbGVjdGVkVW5pdCA9IFwiXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdm0uYWRkTWF0ZXJpYWwgPSB7XHJcbiAgICAgICAgICBjb252ZXJzaW9uRmFjdG9yOiAxLFxyXG4gICAgICAgICAgbWFpbnRlbmFuY2VQZXJpb2Q6IDkwLFxyXG4gICAgICAgICAgY3VycmVuY3k6IGFuZ3VsYXIuY29weSh2bS5jb21wYW55RGF0YS5jdXJyZW50Q3VycmVuY3kuY3VycmVuY3lDb2RlKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc29sZS5sb2codm0uYWRkTWF0ZXJpYWwpO1xyXG4gICAgICAgIHZtLmlucHV0SW1nID0gW107XHJcbiAgICAgICAgdm0udXBsb2FkSW1nID0gW107XHJcbiAgICAgICAgdm0uaW5wdXRGaWxlcyA9IFtdO1xyXG4gICAgICAgIHZtLnVwbG9hZEZpbGVzID0gW107XHJcbiAgICAgICAgdm0uc2VsZWN0ZWRVbml0ID0gXCJcIjtcclxuICAgICAgICAkKFwiI3Byb2ZpbGUtdGFiLCAjZGNwMVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAkKFwiI2hvbWUtdGFiLCAjbWF0ZXJpYWwxXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICQoXCIjbWF0ZXJpYWwxXCIpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICB2bS5jaGFuZ2VNYWludGVuYW5jZVBlcmlvZCh2bS5hZGRNYXRlcmlhbC5tYWludGVuYW5jZVBlcmlvZCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2bS5hZGRNYXRlcmlhbERldGFpbHMgPSAoKSA9PiB7XHJcbiAgICAgIGlmICghdm0uc2VsZWN0ZWRVbml0KSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIFNlbGVjdCBVbml0XCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSBlbHNlIGlmICghdm0uYWRkTWF0ZXJpYWwubWF0ZXJpYWxDb3N0VmFsdWUpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgU2VsZWN0IG1hdGVyaWFsIGNvc3QgdmFsdWVcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGVsc2UgaWYgKCF2bS5hZGRNYXRlcmlhbC5yb29mZXJDb3N0VmFsdWUpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgU2VsZWN0IHJvb2ZlciBjb3N0IHZhbHVlXCIpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2NvcGUuaW1nQW5kRmlsZXMgPSBbXS5jb25jYXQodm0udXBsb2FkSW1nLCB2bS51cGxvYWRGaWxlcyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLmltZ0FuZEZpbGVzKTtcclxuICAgICAgICB2YXIgZm9ybURhdGEgPSB7XHJcbiAgICAgICAgICBuYW1lOiB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbE5hbWUsXHJcbiAgICAgICAgICB1bml0OiB2bS5zZWxlY3RlZFVuaXQsXHJcbiAgICAgICAgICBtYXRlcmlhbENvc3Q6IHtcclxuICAgICAgICAgICAgdmFsdWU6IHZtLmNoYW5nZUNvc3QoXCJtYXRlcmlhbFwiLCB2bS5hZGRNYXRlcmlhbC5tYXRlcmlhbENvc3RWYWx1ZSksXHJcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogdm0uYWRkTWF0ZXJpYWwuY3VycmVuY3lcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICByb29mZXJDb3N0OiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB2bS5jaGFuZ2VDb3N0KFwicm9vZmVyXCIsIHZtLmFkZE1hdGVyaWFsLnJvb2ZlckNvc3RWYWx1ZSksXHJcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogdm0uYWRkTWF0ZXJpYWwuY3VycmVuY3lcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtYWludGVuYW5jZVBlcmlvZDogdm0uYWRkTWF0ZXJpYWwubWFpbnRlbmFuY2VQZXJpb2QsXHJcbiAgICAgICAgICBzdXBwbGllcnM6IHZtLmFkZE1hdGVyaWFsLnN1cHBsaWVycyxcclxuICAgICAgICAgIGZpbGVzOiAkc2NvcGUuaW1nQW5kRmlsZXMsXHJcbiAgICAgICAgICBhc3NldE9iajogJHNjb3BlLmltZ0FuZEZpbGVzLm1hcCgoeCwgaSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIGFzc2V0RGVzY3JpcHRpb246IHguZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zb2xlLmxvZyhmb3JtRGF0YSk7XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLmNyZWF0ZU1hdGVyaWFscyhmb3JtRGF0YSlcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAkc2NvcGUudGFiID0gMTtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MocmVzcC5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAkKFwiI3RvZG9fbW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAkKFwiI3Byb2ZpbGUtdGFiLCAjZGNwMVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJChcIiNob21lLXRhYiwgI21hdGVyaWFsMVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJChcIiNtYXRlcmlhbDFcIikuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICB2bS5pbnB1dEltZyA9IFtdO1xyXG4gICAgICAgICAgICB2bS51cGxvYWRJbWcgPSBbXTtcclxuICAgICAgICAgICAgdm0uaW5wdXRGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICB2bS51cGxvYWRGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RlZFVuaXQgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgLyogU2V0dGluZyBiZWxvdyBwcm9wIHRydWUgdG8gZm9yY2UgZGVjZW5kaW5nIG9yZGVyIG9uIG1hdGVyaWFsIGFkZCBpbnN0ZWFkIG9mIHRvZ2dsaW5nIHN0YXRlcyAqL1xyXG4gICAgICAgICAgICB2bS50b2dnbGVPYmoubWF0ZXJpYWwuY3JlYXRlZEF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdm0uc29ydE1hdGVyaWFscyhcImNyZWF0ZWRBdFwiLCBcIm1hdGVyaWFsXCIpO1xyXG4gICAgICAgICAgICB2bS5hZGRNYXRlcmlhbCA9IHtcclxuICAgICAgICAgICAgICBjb252ZXJzaW9uRmFjdG9yOiAxXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmdldE1hdGVyaWFsQnlJZCA9IGlkID0+IHtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5nZXRNYXRlcmlhbEJ5SWQoaWQpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiBFdmVudCBoYW5kbGVyIHRvIHJlc2V0IGFkZCBtYXRlcmlhbCBtb2RhbCAqL1xyXG4gICAgJChcIiNhZGRNYXRlcmlhbFwiKS5vbihcImhpZGUuYnMubW9kYWxcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICRzY29wZS5hY3RpdmVKdXN0aWZpZWQgPSAwO1xyXG4gICAgICB2bS5hZGRNYXRlcmlhbCA9IHtcclxuICAgICAgICBjb252ZXJzaW9uRmFjdG9yOiAxXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBBZGQgQ29tYm8gTWF0ZXJpYWwgKi9cclxuICAgIHZtLmNvbWJvTWF0ZXJpYWxMaXN0ID0gW107XHJcbiAgICB2bS5hZGRDb21ib01hdGVyaWFsRm9ybSA9IHt9O1xyXG4gICAgdm0ucGVyY2VudGFnZUFkZGl0aW9uID0gW107XHJcblxyXG4gICAgLyogZ2V0IGFsbCBtYXRlcmlhbCBMaXN0ICovXHJcbiAgICB2bS5tVW5pdHMgPSBnbG9iYWxzLm1Vbml0cztcclxuICAgIGdsb2JhbHMuZ2V0Q3VycmVuY3koKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICB2bS5jdXJyZW5jaWVzID0gcmVzcC5kYXRhO1xyXG4gICAgICB2bS5sb2FkQ3VycmVuY2llcyA9ICRxdWVyeSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUocmVzcC5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmxpc3RBbGxNYXRlcmlhbHMoKVxyXG4gICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICB2bS5hbGxtYXRlcmlsYUxpc3QgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB2bS5jb21ib0xpc3QgPSB7XHJcbiAgICAgIHF1YW50aXR5OiAxLFxyXG4gICAgICBtYXRlcmlhbENvc3Q6IDAsXHJcbiAgICAgIHJvb2ZlckNvc3Q6IDBcclxuICAgIH07XHJcblxyXG4gICAgdm0uZ2V0TWF0ZXJpYWxJbmZvID0gbWF0ZXJpYWwgPT4ge1xyXG4gICAgICBsZXQgbWF0ZXJpYWxJbmZvID0gSlNPTi5wYXJzZShtYXRlcmlhbCk7XHJcbiAgICAgIGlmIChtYXRlcmlhbCkge1xyXG4gICAgICAgIHZtLmNvbWJvTGlzdC5tYXRlcmlhbENvc3QgPSBwYXJzZUZsb2F0KFxyXG4gICAgICAgICAgTWF0aC5yb3VuZChcclxuICAgICAgICAgICAgdm0uY29tYm9MaXN0LnF1YW50aXR5ICpcclxuICAgICAgICAgICAgICBtYXRlcmlhbEluZm8uY3VycmVudFJhdGUubWF0ZXJpYWxDb3N0LnZhbHVlICpcclxuICAgICAgICAgICAgICAxMDBcclxuICAgICAgICAgICkgLyAxMDBcclxuICAgICAgICApO1xyXG4gICAgICAgIHZtLmNvbWJvTGlzdC5yb29mZXJDb3N0ID0gcGFyc2VGbG9hdChcclxuICAgICAgICAgIE1hdGgucm91bmQoXHJcbiAgICAgICAgICAgIHZtLmNvbWJvTGlzdC5xdWFudGl0eSAqXHJcbiAgICAgICAgICAgICAgbWF0ZXJpYWxJbmZvLmN1cnJlbnRSYXRlLnJvb2ZlckNvc3QudmFsdWUgKlxyXG4gICAgICAgICAgICAgIDEwMFxyXG4gICAgICAgICAgKSAvIDEwMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgJChcImEuaXRlbS1zZWxlY3RlZCBzcGFuXCIpLnJlbW92ZUNsYXNzKFwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmVcIik7XHJcbiAgICAgICAgJChcImEuaXRlbS1zZWxlY3RlZCBzcGFuXCIpLmFkZENsYXNzKFwiZmFzIGZhLXRpbWVzIG1yLTNcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uUXR5Q2hhbmdlID0gKHZhbCwgZGF0YSkgPT4ge1xyXG4gICAgICBsZXQgbWF0ZXJpYWwgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICBpZiAodmFsID09IFwiXCIgfHwgdmFsID09IDApIHtcclxuICAgICAgICB2bS5jb21ib0xpc3QucXVhbnRpdHkgPSAxO1xyXG4gICAgICAgIHZhbCA9IDE7XHJcbiAgICAgICAgdm0uY29tYm9MaXN0Lm1hdGVyaWFsQ29zdCA9IHBhcnNlRmxvYXQoXHJcbiAgICAgICAgICBNYXRoLnJvdW5kKHZhbCAqIG1hdGVyaWFsLmN1cnJlbnRSYXRlLm1hdGVyaWFsQ29zdC52YWx1ZSAqIDEwMCkgLyAxMDBcclxuICAgICAgICApO1xyXG4gICAgICAgIHZtLmNvbWJvTGlzdC5yb29mZXJDb3N0ID0gcGFyc2VGbG9hdChcclxuICAgICAgICAgIE1hdGgucm91bmQodmFsICogbWF0ZXJpYWwuY3VycmVudFJhdGUucm9vZmVyQ29zdC52YWx1ZSAqIDEwMCkgLyAxMDBcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZtLmNvbWJvTGlzdC5tYXRlcmlhbENvc3QgPSBwYXJzZUZsb2F0KFxyXG4gICAgICAgICAgTWF0aC5yb3VuZCh2YWwgKiBtYXRlcmlhbC5jdXJyZW50UmF0ZS5tYXRlcmlhbENvc3QudmFsdWUgKiAxMDApIC8gMTAwXHJcbiAgICAgICAgKTtcclxuICAgICAgICB2bS5jb21ib0xpc3Qucm9vZmVyQ29zdCA9IHBhcnNlRmxvYXQoXHJcbiAgICAgICAgICBNYXRoLnJvdW5kKHZhbCAqIG1hdGVyaWFsLmN1cnJlbnRSYXRlLnJvb2ZlckNvc3QudmFsdWUgKiAxMDApIC8gMTAwXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5hZGRQZXJjZW50YWdlVmFsdWUgPSAoKSA9PiB7XHJcbiAgICAgIHZtLnBlcmNlbnRhZ2VBZGRpdGlvbi5wdXNoKHtcclxuICAgICAgICBwZXJjZW50YWdlVHlwZTogXCJcIixcclxuICAgICAgICB2YWx1ZTogXCJcIlxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgICB2bS5yZW1vdmVQZXJjZW50YWdlQWRkaXRpb24gPSBpbmRleCA9PiB7XHJcbiAgICAgIHZtLnBlcmNlbnRhZ2VBZGRpdGlvbi5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5tYXRlcmlhbENvbWJpbmF0aW9uID0gbWF0ZXJpYWwgPT4ge1xyXG4gICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UobWF0ZXJpYWwpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIm1hdGVyaWFsLS1cIiwgZGF0YSk7XHJcbiAgICAgIGlmIChkYXRhICE9IFwiXCIpIHtcclxuICAgICAgICB2bS5jb21ib01hdGVyaWFsTGlzdC5wdXNoKHtcclxuICAgICAgICAgIG1hdGVyaWFsSWQ6IGRhdGEuX2lkLFxyXG4gICAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgICAgcXVhbnRpdHk6IHZtLmNvbWJvTGlzdC5xdWFudGl0eSxcclxuICAgICAgICAgIG1hdGVyaWFsQ29zdDogdm0uY29tYm9MaXN0Lm1hdGVyaWFsQ29zdCxcclxuICAgICAgICAgIHJvb2ZlckNvc3Q6IHZtLmNvbWJvTGlzdC5yb29mZXJDb3N0LFxyXG4gICAgICAgICAgcGVyY2VudGFnZUFkZGl0aW9uczogdm0ucGVyY2VudGFnZUFkZGl0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdm0ucGVyY2VudGFnZUFkZGl0aW9uID0gW107XHJcbiAgICAgICAgdm0uY29tYm9MaXN0ID0ge1xyXG4gICAgICAgICAgcXVhbnRpdHk6IDEsXHJcbiAgICAgICAgICBtYXRlcmlhbENvc3Q6IDAsXHJcbiAgICAgICAgICByb29mZXJDb3N0OiAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uYWRkQ29tYm9NYXRlcmlhbEZvcm0uY29tYm9NYXRlcmlhbCA9IFwiXCI7XHJcbiAgICAgICAgJChcIi5zZWxlY3QyLWNob2ljZSAuc2VsZWN0Mi1jaG9zZW5cIikudGV4dChcIlwiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5maWxlVXBkYXRlZCA9IChmaWxlcywgZXZlbnQsIG1vZGFsKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHZtLmlucHV0SW1nKTtcclxuICAgICAgbGV0IGZpbGVPYmogPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICAgIHZtLmZpbGVOYW1lcyA9IE9iamVjdC5rZXlzKGZpbGVPYmopLm1hcCh4ID0+IGZpbGVPYmpbeF0ubmFtZSk7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChmaWxlcywgZnVuY3Rpb24oeCwgaW5kZXgpIHtcclxuICAgICAgICB4LmRlc2NyaXB0aW9uID0gXCJcIjtcclxuICAgICAgICBpZiAobW9kYWwgPT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgICBpZiAodm0udXBsb2FkSW1nLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHZtLnVwbG9hZEltZy5wdXNoKHgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGR1cGxpY2F0ZUltZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0udXBsb2FkSW1nLCBmdW5jdGlvbih5KSB7XHJcbiAgICAgICAgICAgICAgaWYgKHgubmFtZSA9PSB5Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGR1cGxpY2F0ZUltZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKCFkdXBsaWNhdGVJbWcpIHtcclxuICAgICAgICAgICAgICB2bS51cGxvYWRJbWcucHVzaCh4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJGaWxlIG5hbWUgYWxyZWFkeSBleGlzdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAodm0udXBsb2FkRmlsZXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgaWYgKC9pbWFnZS8udGVzdCh4LnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgdm0udXBsb2FkSW1nLnB1c2goeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdm0udXBsb2FkRmlsZXMucHVzaCh4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGR1cGxpY2F0ZUltZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goW10uY29uY2F0KHZtLnVwbG9hZEZpbGVzLCB2bS51cGxvYWRJbWcpLCBmdW5jdGlvbihcclxuICAgICAgICAgICAgICB5XHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIGlmICh4Lm5hbWUgPT0geS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGVJbWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICghZHVwbGljYXRlSW1nKSB7XHJcbiAgICAgICAgICAgICAgaWYgKC9pbWFnZS8udGVzdCh4LnR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICB2bS51cGxvYWRJbWcucHVzaCh4KTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0udXBsb2FkRmlsZXMucHVzaCh4KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiRmlsZSBuYW1lIGFscmVhZHkgZXhpc3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zb2xlLmxvZyh2bS51cGxvYWRJbWcpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5jcmVhdGVDb21ib01hdGVyaWFsTGlzdCA9ICgpID0+IHtcclxuICAgICAgdmFyIGNtTGlzdCA9IFtdO1xyXG4gICAgICAkc2NvcGUuaW1nQW5kRmlsZXMgPSBbXS5jb25jYXQodm0udXBsb2FkSW1nLCB2bS51cGxvYWRGaWxlcyk7XHJcbiAgICAgIHZtLmNvbWJvTWF0ZXJpYWxMaXN0LmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgY21MaXN0LnB1c2goe1xyXG4gICAgICAgICAgbWF0ZXJpYWxJZDogeC5tYXRlcmlhbElkLFxyXG4gICAgICAgICAgcXVhbnRpdHk6IHgucXVhbnRpdHksXHJcbiAgICAgICAgICBwZXJjZW50YWdlQWRkaXRpb25zOiB4LnBlcmNlbnRhZ2VBZGRpdGlvbnNcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICBuYW1lOiB2bS5hZGRDb21ib01hdGVyaWFsRm9ybS5uYW1lLFxyXG4gICAgICAgIHVuaXQ6IHZtLnNlbGVjdGVkVW5pdCxcclxuICAgICAgICBjb21ib01hdGVyaWFsTGlzdDogY21MaXN0LFxyXG4gICAgICAgIGZpbGVzOiAkc2NvcGUuaW1nQW5kRmlsZXMsXHJcbiAgICAgICAgYXNzZXRPYmo6ICRzY29wZS5pbWdBbmRGaWxlcy5tYXAoKHgsIGkpID0+IHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFzc2V0RGVzY3JpcHRpb246IHguZGVzY3JpcHRpb25cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSlcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuZ2V0U3lzdGVtVGFnKClcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIGRhdGEuc3lzdGVtVGFnID0gcmVzcC5kYXRhLmNvbWJvVGFnO1xyXG4gICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAuY3JlYXRlQ29tYm9NYXRlcmlhbChkYXRhKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgJChcIiN0b2RvX21vZGFsLmRjcF9tb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZS5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnJlbW92ZU1hdGVyaWwgPSBpdGVtID0+IHtcclxuICAgICAgdm0uY29tYm9NYXRlcmlhbExpc3Quc3BsaWNlKGl0ZW0sIDEpO1xyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIm1hdGVyaWFsVmlld0N0cmxcIiwgbWF0ZXJpYWxWaWV3Q3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIG1hdGVyaWFsVmlld0N0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgJHN0YXRlUGFyYW1zLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBVcGxvYWRcclxuICApIHtcclxuICAgIC8qIFJlcXVpcmluZyB2YXJzICovXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZXQgcHJvamVjdCBsaXN0ICovXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG4gICAgdm0uaW5wdXRJbWc9W107XHJcbiAgICB2bS5pbnB1dEZpbGVzID1bXTtcclxuICAgIHZtLmNsZWFyRGF0YSA9ICgpID0+IHtcclxuICAgICAgdm0uaW5wdXRJbWcgPSBbXVxyXG4gICAgICB2bS5pbnB1dEZpbGVzID0gW11cclxuICAgICAgdm0uc2VsZWN0ZWRVbml0ID0gJydcclxuICAgICAgJCgnI3Byb2ZpbGUtdGFiLCAjZGNwMScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxyXG4gICAgICAkKCcjaG9tZS10YWIsICNtYXRlcmlhbDEnKS5hZGRDbGFzcygnYWN0aXZlJylcclxuICAgICAgJCgnI21hdGVyaWFsMScpLmFkZENsYXNzKCdzaG93JylcclxuICAgIH1cclxuXHJcbiAgICBhcGlGYWN0b3J5XHJcbiAgICAgIC5nZXRDb21wYW55QnlJZCh2bS51c2VyRGF0YS5jb21wYW55SWQpXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIHZtLmNvbXBhbnlEYXRhID0gcmVzcC5kYXRhO1xyXG4gICAgICAgIHZtLmN1cnJlbnRDdXJyZW5jeSA9IHZtLmNvbXBhbnlEYXRhLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGU7XHJcbiAgICAgICAgY29uc29sZS5sb2codm0uY3VycmVudEN1cnJlbmN5LCAnLS0tY3VycmVudEN1cnJlbmN5JylcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIHZtLm1hdGVyaWFsSWQgPSAkc3RhdGVQYXJhbXMuaWQ7XHJcbiAgICB2bS5tVW5pdHMgPSBnbG9iYWxzLm1Vbml0cztcclxuICAgIGdsb2JhbHMuZ2V0Q3VycmVuY3koKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICB2bS5jdXJyZW5jaWVzID0gcmVzcC5kYXRhO1xyXG4gICAgICB2bS5sb2FkQ3VycmVuY2llcyA9ICRxdWVyeSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUocmVzcC5kYXRhKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB2bS5jaGFuZ2VDb3N0ID0gKHR5cGUsIGNvc3QpID0+IHtcclxuICAgICAgaWYodHlwZSA9PSAnYm90aCcpIHtcclxuICAgICAgICB2bS5tYXRlcmlhbENvc3RWYWx1ZSA9IHZtLm1hdGVyaWFsQ29zdFZhbHVlIC8gdm0uZWRpdE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3I7XHJcbiAgICAgICAgdm0ucm9vZmVyQ29zdFZhbHVlID0gdm0ucm9vZmVyQ29zdFZhbHVlIC8gdm0uZWRpdE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gY29zdCAvIHZtLmVkaXRNYXRlcmlhbC5jb252ZXJzaW9uRmFjdG9yO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNob3dDb252ZXJzaW9uUmF0ZSA9IChmcm9tLCB0bykgPT4ge1xyXG4gICAgICAkKFwiLmxvYWRlclwiKS5zaG93KCk7XHJcbiAgICAgIGxldCBjdXJyZW5jeURhdGEgPSB7XHJcbiAgICAgICAgZnJvbSxcclxuICAgICAgICB0b1xyXG4gICAgICB9O1xyXG4gICAgICBpZiAoZnJvbSkge1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5zaG93Q29udmVyc2lvblJhdGUoY3VycmVuY3lEYXRhKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgIHZtLmVkaXRNYXRlcmlhbC5jb252ZXJzaW9uRmFjdG9yID0gcmVzcC5kYXRhLmNvbnZlcnNpb25GYWN0b3I7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvKiBpZiAodm0ubWF0ZXJpYWxDb3N0VmFsdWUpIHtcclxuICAgICAgICAgICAgICB2bS5tYXRlcmlhbENvc3RWYWx1ZSA9IHZtLm1hdGVyaWFsQ29zdFZhbHVlICogdm0uZWRpdE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm0ucm9vZmVyQ29zdFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgdm0ucm9vZmVyQ29zdFZhbHVlID0gdm0ucm9vZmVyQ29zdFZhbHVlICogdm0uZWRpdE1hdGVyaWFsLmNvbnZlcnNpb25GYWN0b3JcclxuICAgICAgICAgICAgfSAqL1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICQoXCIubG9hZGVyXCIpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnRhYkNoYW5nZSA9ICh2YWwpID0+IHtcclxuICAgICAgaWYgKHZhbCA9PSAwKSB7XHJcbiAgICAgICAgY2hhbmdlVGFiKHZhbClcclxuICAgICAgfSBlbHNlIGlmICh2YWwgPT0gMSkge1xyXG4gICAgICAgIGlmICghdm0uZWRpdE1hdGVyaWFsLm5hbWUpIHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBsZWFzZSBlbnRlciBtYXRlcmlhbCBuYW1lXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXZtLnNlbGVjdGVkVW5pdCkge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiUGxlYXNlIHNlbGVjdCBtYXRlcmlhbCB1bml0XCIpO1xyXG4gICAgICAgICAgLyogfSBlbHNlIGlmICghdm0uZWRpdE1hdGVyaWFsLmN1cnJlbmN5KSB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBsZWFzZSBzZWxlY3QgY3VycmVuY3lcIik7ICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNoYW5nZVRhYih2YWwpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VUYWIodmFsKSB7XHJcbiAgICAgICAgJChcIi5tYXRlcmlhbF9tb2RhbCAubmF2LXRhYnMgbGkgLm5hdi1saW5rXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICQoXCIubWF0ZXJpYWxfbW9kYWwgLm5hdi10YWJzIGxpIC5uYXYtbGlua1wiKS5lcSh2YWwpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAkKFwiLm1hdGVyaWFsX21vZGFsIC50YWItY29udGVudCAudGFiLXBhbmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgJChcIi5tYXRlcmlhbF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAkKFwiLm1hdGVyaWFsX21vZGFsIC50YWItY29udGVudCAudGFiLXBhbmVcIikuZXEodmFsKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgJChcIi5tYXRlcmlhbF9tb2RhbCAudGFiLWNvbnRlbnQgLnRhYi1wYW5lXCIpLmVxKHZhbCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICB9O1xyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAuZ2V0QWxsU3VwcGxpZXJzKClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgdm0uc3VwcGxpZXJzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgY29uc29sZS5sb2codm0uc3VwcGxpZXJzLCAnPS0tLXN1cHBsaWVycycpXHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdm0uZWRpdEZsYWcgPSBmYWxzZTtcclxuICAgIHZtLnJlbW92ZWRGaWxlcyA9IFtdO1xyXG4gICAgJHNjb3BlLmdldE1hdERldGFpbCA9ICgpID0+IHtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5nZXRNYXRlcmlhbEJ5SWQodm0ubWF0ZXJpYWxJZClcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLm1hdHJpYWxEYXRhID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICAgY29uc29sZS5sb2codm0ubWF0cmlhbERhdGEpXHJcbiAgICAgICAgICB2bS5tYXRyaWFsTmFtZSA9IHZtLm1hdHJpYWxEYXRhLm5hbWU7XHJcbiAgICAgICAgICB2bS5tYXRyaWFsVW5pdCA9IHZtLm1hdHJpYWxEYXRhLnVuaXQ7XHJcbiAgICAgICAgICB2bS5tYXRyaWFsQ29zdCA9IE51bWJlcihcclxuICAgICAgICAgICAgdm0ubWF0cmlhbERhdGEuY3VycmVudFJhdGUubWF0ZXJpYWxDb3N0LnZhbHVlXHJcbiAgICAgICAgICApLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICB2bS5tYXRyaWFsQ3VycmVuY3lDb2RlID1cclxuICAgICAgICAgICAgdm0ubWF0cmlhbERhdGEuY3VycmVudFJhdGUubWF0ZXJpYWxDb3N0LmN1cnJlbmN5Q29kZTtcclxuICAgICAgICAgIHZtLm1hdHJpYWxSb29mZXJDb3N0ID0gTnVtYmVyKFxyXG4gICAgICAgICAgICB2bS5tYXRyaWFsRGF0YS5jdXJyZW50UmF0ZS5yb29mZXJDb3N0LnZhbHVlXHJcbiAgICAgICAgICApLnRvRml4ZWQoMik7XHJcbiAgICAgICAgICB2bS5tYXRyaWFsUm9vZmVyQ3VycmVuY3lDb2RlID0gdm0ubWF0cmlhbERhdGEuY3VycmVudFJhdGUucm9vZmVyQ29zdC5jdXJyZW5jeUNvZGU7XHJcbiAgICAgICAgICB2bS5tYXRyaWFsQ3JlYXRlZEJ5ID0gdm0ubWF0cmlhbERhdGEucHJvdmlkZXJEYXRhLnVwZGF0ZWRCeS5uYW1lO1xyXG4gICAgICAgICAgdm0ubWF0cmlhbENyZWF0ZWRBdCA9IHZtLm1hdHJpYWxEYXRhLmNyZWF0ZWRBdDtcclxuICAgICAgICAgIHZtLm1hdHJpYWxVcGRhdGVkQXQgPSB2bS5tYXRyaWFsRGF0YS5jcmVhdGVkQXQ7XHJcbiAgICAgICAgICAkc2NvcGUuZ3JheV9ib3ggPSBbXHJcbiAgICAgICAgICAgIHsgJ2ltZyc6ICcvYXNzZXRzL2ltYWdlcy9Vbml0LUljb24ucG5nJywgJ3RpdGxlJzogJ1VuaXQnLCAndmFsdWUnOiB2bS5tYXRyaWFsVW5pdCB9LFxyXG4gICAgICAgICAgICB7ICdpbWcnOiAnL2Fzc2V0cy9pbWFnZXMvRG9sbGFyLUljb24ucG5nJywgJ3RpdGxlJzogJ01hdGVyaWFsIENvc3QnLCAndmFsdWUnOiB2bS5tYXRyaWFsQ29zdCwgJ2N1cnJlbmN5Q29kZSc6IHZtLm1hdHJpYWxDdXJyZW5jeUNvZGUgfSxcclxuICAgICAgICAgICAgeyAnaW1nJzogJy9hc3NldHMvaW1hZ2VzL0RvbGxhci1JY29uLnBuZycsICd0aXRsZSc6ICdXb3JrZXIgQ29zdCcsICd2YWx1ZSc6IHZtLm1hdHJpYWxSb29mZXJDb3N0LCAnY3VycmVuY3lDb2RlJzogdm0ubWF0cmlhbFJvb2ZlckN1cnJlbmN5Q29kZSB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgICAkc2NvcGUubmV4dE1haW50YW5jZURhdGVDYWxjKHZtLm1hdHJpYWxEYXRhLmNyZWF0ZWRBdCwgdm0ubWF0cmlhbERhdGEubWFpbnRlbmFuY2VQZXJpb2QpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgICRzY29wZS5nZXRNYXREZXRhaWwoKTtcclxuICAgICRzY29wZS5uZXh0TWFpbnRhbmNlRGF0ZUNhbGMgPSAoY3JlYXRlZEF0LCBtYWludGVuYW5jZVBlcmlvZCkgPT4ge1xyXG4gICAgICBsZXQgY3JlYXRlZERhdGUgPSBtb21lbnQoY3JlYXRlZEF0KS5mb3JtYXQoXCJYXCIpO1xyXG4gICAgICBsZXQgbmV4dE1haW50YW5jZURhdGUgPSBtb21lbnQoY3JlYXRlZEF0KS5hZGQobWFpbnRlbmFuY2VQZXJpb2QsIFwiZGF5c1wiKS5mb3JtYXQoXCJYXCIpO1xyXG4gICAgICBpZiAoY3JlYXRlZERhdGUgPCBuZXh0TWFpbnRhbmNlRGF0ZSkge1xyXG4gICAgICAgIHZtLm5leHRNYWludGVuYW5jZURhdGUgPSBtb21lbnQoY3JlYXRlZEF0KS5hZGQobWFpbnRlbmFuY2VQZXJpb2QsIFwiZGF5c1wiKS5mb3JtYXQoXCJNTU0gREQsIFlZWVlcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWxlcnQoKVxyXG4gICAgICAgIGxldCBjcmVhdGVkRGF0ZTEgPSBtb21lbnQudXRjKGNyZWF0ZWRBdCkuYWRkKG1haW50ZW5hbmNlUGVyaW9kLCBcImRheXNcIikuZm9ybWF0KClcclxuICAgICAgICAkc2NvcGUubmV4dE1haW50YW5jZURhdGVDYWxjKGNyZWF0ZWREYXRlMSwgbWFpbnRlbmFuY2VQZXJpb2QpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2bS5yZW1vdmVJbWcgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgaWYgKHR5cGUgPT0gJ21hdGVyaWFsSW1nJykge1xyXG4gICAgICAgIHZtLnJlbW92ZWRGaWxlcy5wdXNoKHZtLm1hdHJpYWxEYXRhLmZpbGVzLmltYWdlc1tpbmRleFZhbF0uX2lkKTtcclxuICAgICAgICB2bS5tYXRlcmlhbEltZy5zcGxpY2UoaW5kZXhWYWwsIDEpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2ltYWdlJykge1xyXG4gICAgICAgIHZtLmlucHV0SW1nLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnbWF0ZXJpYWxEb2N1bWVudCcpIHtcclxuICAgICAgICB2bS5yZW1vdmVkRmlsZXMucHVzaCh2bS5tYXRyaWFsRGF0YS5maWxlcy5kb2NzW2luZGV4VmFsXS5faWQpO1xyXG4gICAgICAgIHZtLm1hdGVyaWFsRmlsZXMuc3BsaWNlKGluZGV4VmFsLCAxKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdkb2N1bWVudCcpIHtcclxuICAgICAgICB2bS5pbnB1dEZpbGVzLnNwbGljZShpbmRleFZhbCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2bS5kZXNjcmlwdGlvblBvcG92ZXIgPSAoaW5kZXhWYWwsIHR5cGUpID0+IHtcclxuICAgICAgJHNjb3BlLmZpbGVUeXBlID0gdHlwZTtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGluZGV4VmFsO1xyXG4gICAgfVxyXG4gICAgdm0uYWRkRGVzY3JpcHRpb24gPSAoaW5kZXgsIGRhdGEpID0+IHtcclxuICAgICAgaWYgKCRzY29wZS5maWxlVHlwZSA9PSAnbWF0ZXJpYWxJbWcnKSB7XHJcbiAgICAgICAgdm0ubWF0ZXJpYWxJbWdbaW5kZXhdLmRlc2NyaXB0aW9uID0gZGF0YTtcclxuICAgICAgICB2bS5tYXRlcmlhbEltZ1tpbmRleF0uYXNzZXREZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmZpbGVUeXBlID09ICdpbWFnZScpIHtcclxuICAgICAgICB2bS5pbnB1dEltZ1tpbmRleF0uZGVzY3JpcHRpb24gPSBkYXRhO1xyXG4gICAgICB9IGVsc2UgaWYgKCRzY29wZS5maWxlVHlwZSA9PSAnbWF0ZXJpYWxEb2N1bWVudCcpIHtcclxuICAgICAgICB2bS5tYXRlcmlhbEZpbGVzW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgICAgdm0ubWF0ZXJpYWxGaWxlc1tpbmRleF0uYXNzZXREZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmZpbGVUeXBlID09ICdkb2N1bWVudCcpIHtcclxuICAgICAgICB2bS5pbnB1dEZpbGVzW2luZGV4XS5kZXNjcmlwdGlvbiA9IGRhdGE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHZtLmNoYW5nZU1haW50ZW5hbmNlUGVyaW9kID0gZGF5cyA9PiB7XHJcbiAgICAgIHZtLmVkaXRNYXRlcmlhbC5tYWludGVuYW5jZURhdGUgPSBtb21lbnQodm0uZWRpdE1hdGVyaWFsLmNyZWF0ZWRBdClcclxuICAgICAgICAuYWRkKGRheXMsIFwiZGF5c1wiKVxyXG4gICAgICAgIC5mb3JtYXQoKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIHZtLmVkaXRNYXRlcmlhbEZ1bmN0aW9uID0gdmFsID0+IHtcclxuICAgICAgaWYgKHZhbCA9PSAxKSB7XHJcbiAgICAgICAgLy8gZWRpdCBNYXRlcmlhbFxyXG4gICAgICAgIHZtLmVkaXRGbGFnID0gdHJ1ZTtcclxuICAgICAgICB2bS5lZGl0TWF0ZXJpYWwgPSBhbmd1bGFyLmNvcHkodm0ubWF0cmlhbERhdGEpO1xyXG4gICAgICAgIHZtLmNoYW5nZU1haW50ZW5hbmNlUGVyaW9kKHZtLm1hdHJpYWxEYXRhLm1haW50ZW5hbmNlUGVyaW9kKTtcclxuICAgICAgICB2bS5zZWxlY3RlZFVuaXQgPSB2bS5lZGl0TWF0ZXJpYWwudW5pdDtcclxuICAgICAgICB2bS5tYXRlcmlhbEltZyA9IHZtLmVkaXRNYXRlcmlhbC5maWxlcy5pbWFnZXM7XHJcbiAgICAgICAgdm0ubWF0ZXJpYWxGaWxlcyA9IHZtLmVkaXRNYXRlcmlhbC5maWxlcy5kb2NzO1xyXG4gICAgICAgIHZtLm1hdGVyaWFsQ29zdFZhbHVlID0gdm0uZWRpdE1hdGVyaWFsLmN1cnJlbnRSYXRlLm1hdGVyaWFsQ29zdC52YWx1ZTtcclxuICAgICAgICB2bS5yb29mZXJDb3N0VmFsdWUgPSB2bS5lZGl0TWF0ZXJpYWwuY3VycmVudFJhdGUucm9vZmVyQ29zdC52YWx1ZTtcclxuICAgICAgICB2bS5lZGl0TWF0ZXJpYWwuY29udmVyc2lvbkZhY3RvciA9IDFcclxuICAgICAgICB2bS5zaG93Q29udmVyc2lvblJhdGUodm0uY3VycmVudEN1cnJlbmN5LCB2bS5lZGl0TWF0ZXJpYWwuY3VycmVuY3kpO1xyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5tYXRlcmlhbEltZywgZnVuY3Rpb24gKHgsIGluZGV4KSB7XHJcbiAgICAgICAgICB4LmRlc2NyaXB0aW9uID0gJyc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLm1hdGVyaWFsRmlsZXMsIGZ1bmN0aW9uICh4LCBpbmRleCkge1xyXG4gICAgICAgICAgeC5kZXNjcmlwdGlvbiA9ICcnO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBzdXBwbGllcnMgPSB2bS5lZGl0TWF0ZXJpYWwuc3VwcGxpZXJzLm1hcCh4ID0+IHguX2lkKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmVkaXRNYXRlcmlhbCwgJy0tLS1lZGl0TWF0ZXJpYWwnKTtcclxuICAgICAgICAkKCcjY3VycmVuY3knKS52YWwodm0uY3VycmVudEN1cnJlbmN5KS50cmlnZ2VyKCdjaGFuZ2Uuc2VsZWN0MicpO1xyXG4gICAgICAgICQoJyNzdXBwbGllcnMnKS52YWwoc3VwcGxpZXJzKS50cmlnZ2VyKCdjaGFuZ2Uuc2VsZWN0MicpO1xyXG4gICAgICAgICQoJyN0b2RvX21vZGFsLm1hdGVyaWFsX21vZGFsJykubW9kYWwoJ3Nob3cnKTtcclxuICAgICAgICAkKCcjcHJvZmlsZS10YWIsICNkY3AxJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICQoJyNob21lLXRhYiwgI21hdGVyaWFsMScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKCcjbWF0ZXJpYWwxJykuYWRkQ2xhc3MoJ3Nob3cnKTtcclxuICAgICAgfSBlbHNlIGlmICh2YWwgPT0gMikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmlucHV0SW1nLCB2bS5pbnB1dEZpbGVzKTtcclxuICAgICAgICAkc2NvcGUudXBsb2FkRmlsZXMgPSBbXS5jb25jYXQodm0uaW5wdXRJbWcsdm0uaW5wdXRGaWxlcyk7XHJcbiAgICAgICAgJHNjb3BlLnVwbG9hZGFsbEZpbGVzID0gW10uY29uY2F0KHZtLmlucHV0SW1nLCB2bS5pbnB1dEZpbGVzLCB2bS5tYXRlcmlhbEltZywgdm0ubWF0ZXJpYWxGaWxlcyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnVwbG9hZGFsbEZpbGVzKTtcclxuICAgICAgICAvLyB1cGRhdGUgTWF0ZXJpYWxcclxuICAgICAgICB2bS5lZGl0RmxhZyA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBkZXNjcmlwdGlvbiA9IFtdO1xyXG4gICAgICAgIGlmICh2bS5pbnB1dEltZy5sZW5ndGggPiAwIHx8IHZtLmlucHV0RmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgJHNjb3BlLnVwbG9hZGFsbEZpbGVzLm1hcCgoeCwgaSkgPT4ge1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbi5wdXNoKHtcclxuICAgICAgICAgICAgICBhc3NldERlc2NyaXB0aW9uOiB4LmRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbWF0ZXJpYWx1cGRhdGVkYXRhID0ge1xyXG4gICAgICAgICAgbmFtZTogdm0uZWRpdE1hdGVyaWFsLm5hbWUsXHJcbiAgICAgICAgICB1bml0OiB2bS5zZWxlY3RlZFVuaXQsXHJcbiAgICAgICAgICByZW1vdmVkRmlsZXM6IHZtLnJlbW92ZWRGaWxlcyxcclxuICAgICAgICAgIHN1cHBsaWVyczogdm0uZWRpdE1hdGVyaWFsLnN1cHBsaWVycyxcclxuICAgICAgICAgIG1haW50ZW5hbmNlUGVyaW9kOiB2bS5lZGl0TWF0ZXJpYWwubWFpbnRlbmFuY2VQZXJpb2QsXHJcbiAgICAgICAgICBjdXJyZW50UmF0ZToge1xyXG4gICAgICAgICAgICBtYXRlcmlhbENvc3Q6IHtcclxuICAgICAgICAgICAgICB2YWx1ZTogdm0uY2hhbmdlQ29zdCgnbWF0ZXJpYWwnLCB2bS5tYXRlcmlhbENvc3RWYWx1ZSksXHJcbiAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiB2bS5lZGl0TWF0ZXJpYWwuY3VycmVuY3kgLy8kc2NvcGUuY2hlY2tOdWxsKCRzY29wZS5tYXRlcmlhbE9iai5tYXRlcmlhbENvc3RjdXJyZW5jeUNvZGUpW1wiY2NcIl1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcm9vZmVyQ29zdDoge1xyXG4gICAgICAgICAgICAgIHZhbHVlOiB2bS5jaGFuZ2VDb3N0KCdyb29mZXInLCB2bS5yb29mZXJDb3N0VmFsdWUpLFxyXG4gICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogdm0uZWRpdE1hdGVyaWFsLmN1cnJlbmN5IC8vJHNjb3BlLmNoZWNrTnVsbCgkc2NvcGUubWF0ZXJpYWxPYmoucm9vZmVyQ29zdGN1cnJlbmN5Q29kZSlbXCJjY1wiXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZmlsZXM6ICRzY29wZS51cGxvYWRGaWxlcyxcclxuICAgICAgICAgIGFzc2V0T2JqOiBkZXNjcmlwdGlvblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnVwZGF0ZU1hdGVyaWFsQnlJZCh2bS5tYXRlcmlhbElkLCBtYXRlcmlhbHVwZGF0ZWRhdGEpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MocmVzcC5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAkKCcjdG9kb19tb2RhbC5tYXRlcmlhbF9tb2RhbCcpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICRzY29wZS5nZXRNYXREZXRhaWwoKTtcclxuICAgICAgICAgICAgdm0uZmlsZU5hbWVzPVtdO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5maWxlVXBkYXRlZCA9IChmaWxlcywgZXZlbnQpID0+IHtcclxuICAgICAgbGV0IGZpbGVPYmogPSBldmVudC50YXJnZXQuZmlsZXM7XHJcbiAgICAgIHZtLmZpbGVOYW1lcyA9IE9iamVjdC5rZXlzKGZpbGVPYmopLm1hcCh4ID0+IGZpbGVPYmpbeF0ubmFtZSk7XHJcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChmaWxlcywgZnVuY3Rpb24gKHgsIGluZGV4KSB7XHJcbiAgICAgICAgeC5kZXNjcmlwdGlvbiA9ICcnXHJcbiAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGltZ1NsaWRlcigpIHtcclxuICAgICAgJChcIiNjYXJvdXNlbFwiKS5mbGV4c2xpZGVyKHtcclxuICAgICAgICBhbmltYXRpb246IFwic2xpZGVcIixcclxuICAgICAgICBjb250cm9sTmF2OiBmYWxzZSxcclxuICAgICAgICBhbmltYXRpb25Mb29wOiBmYWxzZSxcclxuICAgICAgICBzbGlkZXNob3c6IGZhbHNlLFxyXG4gICAgICAgIGl0ZW1XaWR0aDogNzUsXHJcbiAgICAgICAgaXRlbU1hcmdpbjogNSxcclxuICAgICAgICBhc05hdkZvcjogXCIjc2xpZGVyXCJcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkKFwiI3NsaWRlclwiKS5mbGV4c2xpZGVyKHtcclxuICAgICAgICBhbmltYXRpb246IFwic2xpZGVcIixcclxuICAgICAgICBjb250cm9sTmF2OiBmYWxzZSxcclxuICAgICAgICBhbmltYXRpb25Mb29wOiBmYWxzZSxcclxuICAgICAgICBzbGlkZXNob3c6IGZhbHNlLFxyXG4gICAgICAgIHN5bmM6IFwiI2Nhcm91c2VsXCJcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG5cclxuICB9XHJcbiAgXHJcbiAgXHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcIm1lZXRpbmdSb29tQ3RybFwiLCBtZWV0aW5nUm9vbUN0cmwpO1xyXG5cclxuICBmdW5jdGlvbiBtZWV0aW5nUm9vbUN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgJHN0YXRlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBVcGxvYWQsXHJcbiAgICBTQmNvbW1vbixcclxuICAgIFNCY2hhbm5lbCxcclxuICAgIFNCZXZlbnRzXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG5cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBjb21wYW55U3RvcmUsIHByb2plY3RTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgIGxldCByb29tID0gU0Jjb21tb247XHJcbiAgICBsZXQgc3RvcmUgPSByb29tLnN0b3JlKCk7XHJcbiAgICBjb25zb2xlLmxvZyh2bS51c2VyRGF0YSk7XHJcbiAgICBhcGlGYWN0b3J5XHJcbiAgICAgIC5nZXRBY2Nlc3NNZWV0aW5nUm9vbVRva2VuKClcclxuICAgICAgLyogU3RlcCAxIC0gT2J0YWluIGFjY2VzcyB0b2tlbiAqL1xyXG4gICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzcC5kYXRhLmFjY2Vzc1Rva2VuO1xyXG4gICAgICB9KVxyXG4gICAgICAvKiBTdGVwIDIgLSBMb2dpbiB1c2VyICovXHJcbiAgICAgIC50aGVuKHRva2VuID0+IHtcclxuICAgICAgICBpZiAoIXRva2VuKSB0aHJvdyBuZXcgRXJyb3IoXCJUb2tlbiB1bmF2YWlsYWJsZVwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJvb20uY29ubmVjdChcclxuICAgICAgICAgIHVzZXJTdG9yZS5nZXQoKS5faWQsXHJcbiAgICAgICAgICB0b2tlblxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC8qIFN0ZXAgMyAtIEdldCBjaGFubmVsIGxpc3QgYWZ0ZXIgc3VjY2Vzc2Z1bGwgY29ubmVjdGlvbiAqL1xyXG4gICAgICAudGhlbihjb25uZWN0ZWRVc2VyID0+IHtcclxuICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIkNvbm5lY3RlZCB0byBtZWV0aW5nIHJvb21cIik7XHJcbiAgICAgICAgc3RvcmUuc2V0KFwidXNlclwiLCBjb25uZWN0ZWRVc2VyKTtcclxuICAgICAgICByZXR1cm4gU0JjaGFubmVsLmxpc3RDaGFubmVscyhwcm9qZWN0U3RvcmUuZ2V0KCkuX2lkKTtcclxuICAgICAgfSlcclxuICAgICAgLyogU3RlcCA0IC0gQmluZCBpbml0aWFsIHZpZXcgdmFycyBoZXJlICovXHJcbiAgICAgIC50aGVuKHVwZGF0ZUNoYW5uZWxMaXN0KVxyXG4gICAgICAvKiBTdGVwIDUgLSBMb2FkIGRlZmF1bHQgY2hhbm5lbCAqL1xyXG4gICAgICAudGhlbihsb2FkRGVmYXVsdENoYW5uZWwpXHJcbiAgICAgIC8qIFN0ZXAgNiAtIFVwZGF0ZSBDaGFubmVsIGNvbnRlbnRzICovXHJcbiAgICAgIC50aGVuKHVwZGF0ZU1lc3NhZ2VzKVxyXG4gICAgICAvKiBTdGVwIDcgLSBHZXQgbWVldGluZyByb2RvICovXHJcbiAgICAgIC50aGVuKGdldE1lZXRpbmdUb2RvKHRydWUpKVxyXG4gICAgICAuY2F0Y2gocm9vbS5lcnJvcik7XHJcblxyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAuZ2V0QWxsTWVtYmVyc0luQ3VycmVudENvbXBhbnkodXNlclN0b3JlLmdldCgpLmNvbXBhbnlJZClcclxuICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgdm0uY29tcGFueVVzZXJzID0gcmVzcC5kYXRhLmRhdGE7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChyb29tLmVycm9yKTtcclxuXHJcbiAgICAvKiBWaWV3IGZ1bmN0aW9ucyAmIG9iamVjdHMgKi9cclxuICAgIHZtLm5ld01lZXRpbmcgPSB7fTtcclxuXHJcbiAgICB2bS5jcmVhdGVDaGFubmVsID0gKGZvcm1EYXRhLCBtZWV0aW5nTmFtZSkgPT4ge1xyXG4gICAgICAkKFwiI25ld21lZXRpbmdfcG9wdXBcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBpZiAoIXN0b3JlLmdldChcInVzZXJcIikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIFNCY2hhbm5lbC5jcmVhdGVDaGFubmVsKFxyXG4gICAgICAgIG1lZXRpbmdOYW1lLFxyXG4gICAgICAgIHVzZXJTdG9yZS5nZXQoKS5faWQsXHJcbiAgICAgICAgcHJvamVjdFN0b3JlLmdldCgpLl9pZFxyXG4gICAgICApXHJcbiAgICAgICAgLnRoZW4oY2hhbm5lbCA9PiB7XHJcbiAgICAgICAgICBmb3JtRGF0YS5jaGFubmVsVXJsID0gY2hhbm5lbC51cmw7XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICBjaGFubmVsLFxyXG4gICAgICAgICAgICBmb3JtRGF0YS5hc3NpZ25lZFRvLFxyXG4gICAgICAgICAgICBhcGlGYWN0b3J5LmNyZWF0ZVRvZG9MaXN0KGZvcm1EYXRhKSxcclxuICAgICAgICAgICAgYXBpRmFjdG9yeS5pbnZpdGVVc2Vyc1RvTWVldGluZyh7IHVzZXJzOiBmb3JtRGF0YS5hc3NpZ25lZFRvIH0pXHJcbiAgICAgICAgICBdKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKChbY2hhbm5lbCwgdXNlcnNdKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gU0JjaGFubmVsLmludml0ZVVzZXJzKGNoYW5uZWwsIHVzZXJzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKF8gPT4ge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJNZWV0aW5nIHJvb20gY3JlYXRlZCBzdWNjZXNzZnVsbHkhXCIpO1xyXG4gICAgICAgICAgcmV0dXJuIFNCY2hhbm5lbC5saXN0Q2hhbm5lbHMocHJvamVjdFN0b3JlLmdldCgpLl9pZCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbih1cGRhdGVDaGFubmVsTGlzdClcclxuICAgICAgICAuY2F0Y2gocm9vbS5lcnJvcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnZpZXdDaGFubmVsID0gKGNoYW5uZWwsICRldmVudCkgPT4ge1xyXG4gICAgICBjaGFubmVsLm1hcmtBc1JlYWQoKTtcclxuICAgICAgU0JjaGFubmVsLmdldENoYW5uZWxNZXNzYWdlcyhjaGFubmVsKVxyXG4gICAgICAgIC50aGVuKHVwZGF0ZU1lc3NhZ2VzKVxyXG4gICAgICAgIC50aGVuKGdldE1lZXRpbmdUb2RvKCRldmVudCkpXHJcbiAgICAgICAgLmNhdGNoKHJvb20uZXJyb3IpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5zdGFydFR5cGluZyA9IGNoYW5uZWwgPT4ge1xyXG4gICAgICBjaGFubmVsLnN0YXJ0VHlwaW5nKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNlbmRNZXNzYWdlID0gKGNoYW5uZWwsIG1lc3NhZ2UpID0+IHtcclxuICAgICAgdm0ubWVzc2FnZUJveCA9IFwiXCI7XHJcbiAgICAgIGNoYW5uZWwuZW5kVHlwaW5nKCk7XHJcbiAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UudHJpbSgpKSB7XHJcbiAgICAgICAgU0JjaGFubmVsLnNlbmRNZXNzYWdlKGNoYW5uZWwsIG1lc3NhZ2UpXHJcbiAgICAgICAgICAudGhlbihjaGFubmVsID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIFNCY2hhbm5lbC5nZXRDaGFubmVsTWVzc2FnZXMoY2hhbm5lbCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLnRoZW4odXBkYXRlTWVzc2FnZXMpXHJcbiAgICAgICAgICAuY2F0Y2gocm9vbS5lcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uc2VuZE1lc3NhZ2VPbkVudGVyID0gZSA9PiB7XHJcbiAgICAgIGlmIChlLndoaWNoID09PSAxMykge1xyXG4gICAgICAgIHZtLnNlbmRNZXNzYWdlLmNhbGwobnVsbCwgdm0uY3VycmVudENoYW5uZWwsIHZtLm1lc3NhZ2VCb3gpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnNlbmRGaWxlTWVzc2FnZSA9IChjaGFubmVsLCBmaWxlcykgPT4ge1xyXG4gICAgICAkKFwiI2F0dGFjaF9wb3B1cFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAubmV3TWVldGluZ0ZpbGVNZXNzYWdlKHtcclxuICAgICAgICAgIGZpbGVzXHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZXNwID0+XHJcbiAgICAgICAgICBQcm9taXNlLmFsbChTQmNoYW5uZWwuc2VuZEZpbGVNZXNzYWdlKGNoYW5uZWwsIHJlc3AuZGF0YS5kYXRhKSlcclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oXyA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIkZpbGVzIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICAgICAgICAgIHJldHVybiBTQmNoYW5uZWwuZ2V0Q2hhbm5lbE1lc3NhZ2VzKGNoYW5uZWwpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odXBkYXRlTWVzc2FnZXMpXHJcbiAgICAgICAgLmNhdGNoKHJvb20uZXJyb3IpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5yZXNvbHZlVGVtcGxhdGVVcmwgPSBtID0+IHtcclxuICAgICAgaWYgKG0ubWVzc2FnZVR5cGUgPT09IFwidXNlclwiKSB7XHJcbiAgICAgICAgaWYgKG0uX3NlbmRlci51c2VySWQgPT09IHVzZXJTdG9yZS5nZXQoKS5faWQpIHtcclxuICAgICAgICAgIHJldHVybiBcInVzZXJNZXNzYWdlXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBcIm1lc3NhZ2VcIjtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKG0uX3NlbmRlci51c2VySWQgPT09IHVzZXJTdG9yZS5nZXQoKS5faWQpIHtcclxuICAgICAgICAgIHJldHVybiBcInVzZXJGaWxlTWVzc2FnZVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gXCJmaWxlTWVzc2FnZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5vcGVuSW52aXRlUG9wdXAgPSAoY3VycmVudENoYW5uZWwsIGNvbXBhbnlVc2VycykgPT4ge1xyXG4gICAgICAkKFwiI21lbWJlcnNfcG9wdXBcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICBpZiAoIWN1cnJlbnRDaGFubmVsIHx8ICFjb21wYW55VXNlcnMpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGN1cnJlbnRDaGFubmVsTWVtYmVycyA9IE9iamVjdC5rZXlzKGN1cnJlbnRDaGFubmVsLm1lbWJlck1hcCk7XHJcbiAgICAgIC8vIEZpbHRlciBjaGFubmVsIHVzZXJzXHJcbiAgICAgIHZtLmludml0ZWVzID0gY29tcGFueVVzZXJzXHJcbiAgICAgICAgLmZpbHRlcih4ID0+IHtcclxuICAgICAgICAgIHJldHVybiBjdXJyZW50Q2hhbm5lbE1lbWJlcnMuaW5kZXhPZih4Ll9pZCkgPiAtMSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5tYXAoeCA9PiB7XHJcbiAgICAgICAgICB4LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5pbnZpdGVVc2VycyA9IChjaGFubmVsLCB1c2VycykgPT4ge1xyXG4gICAgICAkKFwiI21lbWJlcnNfcG9wdXBcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICB1c2VycyA9IHVzZXJzLmZpbHRlcih4ID0+IHguY2hlY2tlZCkubWFwKHggPT4geC5faWQpO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmludml0ZVVzZXJzVG9NZWV0aW5nKHsgdXNlcnMgfSlcclxuICAgICAgICAudGhlbihfID0+IHtcclxuICAgICAgICAgIHJldHVybiBTQmNoYW5uZWwuaW52aXRlVXNlcnMoY2hhbm5lbCwgdXNlcnMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oXyA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIlVzZXIocykgaW52aXRlZFwiKTtcclxuICAgICAgICAgIHJldHVybiBTQmNoYW5uZWwubGlzdENoYW5uZWxzKHByb2plY3RTdG9yZS5nZXQoKS5faWQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4odXBkYXRlQ2hhbm5lbExpc3QpXHJcbiAgICAgICAgLmNhdGNoKHJvb20uZXJyb3IpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5vcGVuRmlsZVZpZXdlciA9IGNoYW5uZWwgPT4ge1xyXG4gICAgICAkKFwiI3NoYXJlZGZpbGVzX3BvcHVwXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgU0JjaGFubmVsLmdldENoYW5uZWxGaWxlcyhjaGFubmVsKVxyXG4gICAgICAgIC50aGVuKGxpc3RGaWxlcylcclxuICAgICAgICAuY2F0Y2gocm9vbS5lcnJvcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmNoZWNrUmVhZFN0YXR1cyA9IGNoYW5uZWwgPT4ge1xyXG4gICAgICByZXR1cm4gY2hhbm5lbFxyXG4gICAgICAgIC5nZXRSZWFkTWVtYmVycyhjaGFubmVsLmxhc3RNZXNzYWdlLCB0cnVlKVxyXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4ge1xyXG4gICAgICAgICAgYWNjID0geC51c2VySWQgPT09IHVzZXJTdG9yZS5nZXQoKS5faWQgfHwgYWNjO1xyXG4gICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmxhdW5jaFRvZG9Qb3B1cCA9ICgpID0+IHtcclxuICAgICAgJChcIiN0b2RvX21lZXRpbmdcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5jcmVhdGVUb2RvTGlzdCA9IChmb3JtRGF0YSwgY3VycmVudENoYW5uZWwsIHZhbGlkKSA9PiB7XHJcbiAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICQoXCIjdG9kb19tZWV0aW5nXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICBmb3JtRGF0YS5jaGFubmVsVXJsID0gY3VycmVudENoYW5uZWwudXJsO1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5jcmVhdGVUb2RvTGlzdChmb3JtRGF0YSlcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIlRvZG8gY3JlYXRlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q2hhbm5lbDtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAudGhlbihnZXRNZWV0aW5nVG9kbyh0cnVlKSlcclxuICAgICAgICAgIC5jYXRjaChyb29tLmVycm9yKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJQbGVhc2UgZmlsbCBhbGwgdGhlIGRldGFpbHNcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyogTGlzdGVuZXJzICovXHJcbiAgICBTQmV2ZW50cy5pbml0KCk7IC8vIEluaXRpYWxpemUgZXZlbnRzXHJcblxyXG4gICAgLyogTmV3IG1lc3NhZ2UgaGFuZGxlciAqL1xyXG4gICAgJHNjb3BlLiRvbihcIm5ld01lZWluZ1Jvb21NZXNzYWdlXCIsIChlLCBkYXRhKSA9PiB7XHJcbiAgICAgIGlmICh2bS5jdXJyZW50Q2hhbm5lbC51cmwgPT09IGRhdGEuY2hhbm5lbC51cmwpIHtcclxuICAgICAgICB2bS52aWV3Q2hhbm5lbChkYXRhLmNoYW5uZWwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIFNCY2hhbm5lbC5saXN0Q2hhbm5lbHMocHJvamVjdFN0b3JlLmdldCgpLl9pZClcclxuICAgICAgICAgIC50aGVuKHVwZGF0ZUNoYW5uZWxMaXN0KVxyXG4gICAgICAgICAgLmNhdGNoKHJvb20uZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUuJG9uKFwibmV3Q2hhbm5lbEpvaW5lZFwiLCAoZSwgZGF0YSkgPT4ge1xyXG4gICAgICBTQmNoYW5uZWwubGlzdENoYW5uZWxzKHByb2plY3RTdG9yZS5nZXQoKS5faWQpXHJcbiAgICAgICAgLnRoZW4odXBkYXRlQ2hhbm5lbExpc3QpXHJcbiAgICAgICAgLmNhdGNoKHJvb20uZXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbihcInR5cGluZ1N0YXR1c1wiLCAoZSwgZGF0YSkgPT4ge1xyXG4gICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qIENvbXBvc2FibGUgZnVuY3Rpb25zICovXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVDaGFubmVsTGlzdChsaXN0KSB7XHJcbiAgICAgIHZtLmNoYW5uZWxMaXN0ID0gbGlzdDtcclxuICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWREZWZhdWx0Q2hhbm5lbChjaGFubmVscykge1xyXG4gICAgICBpZiAoY2hhbm5lbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJldHVybiBTQmNoYW5uZWwuZ2V0Q2hhbm5lbE1lc3NhZ2VzKGNoYW5uZWxzWzBdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1lc3NhZ2VzKGNoYW5uZWwpIHtcclxuICAgICAgdm0uY3VycmVudENoYW5uZWwgPSBjaGFubmVsO1xyXG4gICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgIGxldCBjaGF0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcclxuICAgICAgICAgIFwiY2hhdC1jb250YWluZXJcIlxyXG4gICAgICAgIClbMF07XHJcbiAgICAgICAgY2hhdENvbnRhaW5lci5zY3JvbGxUb3AgPSBjaGF0Q29udGFpbmVyLnNjcm9sbEhlaWdodDtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBjaGFubmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpc3RGaWxlcyhjaGFubmVsKSB7XHJcbiAgICAgIHZtLnNoYXJlZEZpbGVzID0gY2hhbm5lbC5maWxlcy5yZWR1Y2UoXHJcbiAgICAgICAgKGFjYywgeCkgPT4ge1xyXG4gICAgICAgICAgaWYgKC9wbmd8anBnfGpwZWd8Z2lmLy50ZXN0KHgudHlwZSkpIHtcclxuICAgICAgICAgICAgYWNjLmltYWdlcy5wdXNoKHgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYWNjLmRvY3MucHVzaCh4KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpbWFnZXM6IFtdLFxyXG4gICAgICAgICAgZG9jczogW11cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE1lZXRpbmdUb2RvKCRldmVudCkge1xyXG4gICAgICBpZiAoJGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNoYW5uZWwpIHtcclxuICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgLmdldE1lZXRpbmdUb2RvKHsgY2hhbm5lbFVybDogY2hhbm5lbC51cmwgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgdm0udG9kb0xpc3QgPSByZXNwLmRhdGEudG9kb0xpc3Q7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChyb29tLmVycm9yKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdHdpbGlvID0gVHdpbGlvO1xyXG4gICAgY29uc29sZS5sb2codHdpbGlvKTtcclxuICAgIGNvbnN0IFZpZGVvID0gVHdpbGlvLlZpZGVvO1xyXG4gICAgLyogbGV0IEFjY2Vzc1Rva2VuID0gdHdpbGlvLmp3dC5BY2Nlc3NUb2tlbjtcclxuICAgIGxldCBWaWRlb0dyYW50ID0gQWNjZXNzVG9rZW4uVmlkZW9HcmFudDsgKi9cclxuXHJcbiAgICBsZXQgcHJldmlld1RyYWNrcywgYWN0aXZlUm9vbSwgaWRlbnRpdHk7XHJcblxyXG4gICAgLy8gQXR0YWNoIHRoZSBUcmFja3MgdG8gdGhlIERPTS5cclxuICAgIGZ1bmN0aW9uIGF0dGFjaFRyYWNrcyh0cmFja3MsIGNvbnRhaW5lcikge1xyXG4gICAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmFjay5hdHRhY2goKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEF0dGFjaCB0aGUgUGFydGljaXBhbnQncyBUcmFja3MgdG8gdGhlIERPTS5cclxuICAgIGZ1bmN0aW9uIGF0dGFjaFBhcnRpY2lwYW50VHJhY2tzKHBhcnRpY2lwYW50LCBjb250YWluZXIpIHtcclxuICAgICAgdmFyIHRyYWNrcyA9IEFycmF5LmZyb20ocGFydGljaXBhbnQudHJhY2tzLnZhbHVlcygpKTtcclxuICAgICAgYXR0YWNoVHJhY2tzKHRyYWNrcywgY29udGFpbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZXRhY2ggdGhlIFRyYWNrcyBmcm9tIHRoZSBET00uXHJcbiAgICBmdW5jdGlvbiBkZXRhY2hUcmFja3ModHJhY2tzKSB7XHJcbiAgICAgIHRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XHJcbiAgICAgICAgdHJhY2suZGV0YWNoKCkuZm9yRWFjaChmdW5jdGlvbihkZXRhY2hlZEVsZW1lbnQpIHtcclxuICAgICAgICAgIGRldGFjaGVkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBEZXRhY2ggdGhlIFBhcnRpY2lwYW50J3MgVHJhY2tzIGZyb20gdGhlIERPTS5cclxuICAgIGZ1bmN0aW9uIGRldGFjaFBhcnRpY2lwYW50VHJhY2tzKHBhcnRpY2lwYW50KSB7XHJcbiAgICAgIHZhciB0cmFja3MgPSBBcnJheS5mcm9tKHBhcnRpY2lwYW50LnRyYWNrcy52YWx1ZXMoKSk7XHJcbiAgICAgIGRldGFjaFRyYWNrcyh0cmFja3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdoZW4gd2UgYXJlIGFib3V0IHRvIHRyYW5zaXRpb24gYXdheSBmcm9tIHRoaXMgcGFnZSwgZGlzY29ubmVjdFxyXG4gICAgLy8gZnJvbSB0aGUgcm9vbSwgaWYgam9pbmVkLlxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdm0ubGVhdmVSb29tSWZKb2luZWQpO1xyXG5cclxuICAgIC8vIEFjdGl2aXR5IGxvZy5cclxuICAgIGZ1bmN0aW9uIGxvZyhtZXNzYWdlKSB7XHJcbiAgICAgIHZhciBsb2dEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvZ1wiKTtcclxuICAgICAgbG9nRGl2LmlubmVySFRNTCArPSBcIjxwPiZndDsmbmJzcDtcIiArIG1lc3NhZ2UgKyBcIjwvcD5cIjtcclxuICAgICAgbG9nRGl2LnNjcm9sbFRvcCA9IGxvZ0Rpdi5zY3JvbGxIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCFcclxuICAgIGZ1bmN0aW9uIHJvb21Kb2luZWQocm9vbSkge1xyXG4gICAgICB3aW5kb3cucm9vbSA9IGFjdGl2ZVJvb20gPSByb29tO1xyXG5cclxuICAgICAgbG9nKFwiSm9pbmVkIGFzICdcIiArIGlkZW50aXR5ICsgXCInXCIpO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbi1qb2luXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b24tbGVhdmVcIikuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XHJcblxyXG4gICAgICAvLyBBdHRhY2ggTG9jYWxQYXJ0aWNpcGFudCdzIFRyYWNrcywgaWYgbm90IGFscmVhZHkgYXR0YWNoZWQuXHJcbiAgICAgIHZhciBwcmV2aWV3Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2NhbC1tZWRpYVwiKTtcclxuICAgICAgaWYgKCFwcmV2aWV3Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJ2aWRlb1wiKSkge1xyXG4gICAgICAgIGF0dGFjaFBhcnRpY2lwYW50VHJhY2tzKHJvb20ubG9jYWxQYXJ0aWNpcGFudCwgcHJldmlld0NvbnRhaW5lcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEF0dGFjaCB0aGUgVHJhY2tzIG9mIHRoZSBSb29tJ3MgUGFydGljaXBhbnRzLlxyXG4gICAgICByb29tLnBhcnRpY2lwYW50cy5mb3JFYWNoKGZ1bmN0aW9uKHBhcnRpY2lwYW50KSB7XHJcbiAgICAgICAgbG9nKFwiQWxyZWFkeSBpbiBSb29tOiAnXCIgKyBwYXJ0aWNpcGFudC5pZGVudGl0eSArIFwiJ1wiKTtcclxuICAgICAgICB2YXIgcHJldmlld0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVtb3RlLW1lZGlhXCIpO1xyXG4gICAgICAgIGF0dGFjaFBhcnRpY2lwYW50VHJhY2tzKHBhcnRpY2lwYW50LCBwcmV2aWV3Q29udGFpbmVyKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBXaGVuIGEgUGFydGljaXBhbnQgam9pbnMgdGhlIFJvb20sIGxvZyB0aGUgZXZlbnQuXHJcbiAgICAgIHJvb20ub24oXCJwYXJ0aWNpcGFudENvbm5lY3RlZFwiLCBmdW5jdGlvbihwYXJ0aWNpcGFudCkge1xyXG4gICAgICAgIGxvZyhcIkpvaW5pbmc6ICdcIiArIHBhcnRpY2lwYW50LmlkZW50aXR5ICsgXCInXCIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFdoZW4gYSBQYXJ0aWNpcGFudCBhZGRzIGEgVHJhY2ssIGF0dGFjaCBpdCB0byB0aGUgRE9NLlxyXG4gICAgICByb29tLm9uKFwidHJhY2tBZGRlZFwiLCBmdW5jdGlvbih0cmFjaywgcGFydGljaXBhbnQpIHtcclxuICAgICAgICBsb2cocGFydGljaXBhbnQuaWRlbnRpdHkgKyBcIiBhZGRlZCB0cmFjazogXCIgKyB0cmFjay5raW5kKTtcclxuICAgICAgICB2YXIgcHJldmlld0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVtb3RlLW1lZGlhXCIpO1xyXG4gICAgICAgIGF0dGFjaFRyYWNrcyhbdHJhY2tdLCBwcmV2aWV3Q29udGFpbmVyKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBXaGVuIGEgUGFydGljaXBhbnQgcmVtb3ZlcyBhIFRyYWNrLCBkZXRhY2ggaXQgZnJvbSB0aGUgRE9NLlxyXG4gICAgICByb29tLm9uKFwidHJhY2tSZW1vdmVkXCIsIGZ1bmN0aW9uKHRyYWNrLCBwYXJ0aWNpcGFudCkge1xyXG4gICAgICAgIGxvZyhwYXJ0aWNpcGFudC5pZGVudGl0eSArIFwiIHJlbW92ZWQgdHJhY2s6IFwiICsgdHJhY2sua2luZCk7XHJcbiAgICAgICAgZGV0YWNoVHJhY2tzKFt0cmFja10pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFdoZW4gYSBQYXJ0aWNpcGFudCBsZWF2ZXMgdGhlIFJvb20sIGRldGFjaCBpdHMgVHJhY2tzLlxyXG4gICAgICByb29tLm9uKFwicGFydGljaXBhbnREaXNjb25uZWN0ZWRcIiwgZnVuY3Rpb24ocGFydGljaXBhbnQpIHtcclxuICAgICAgICBsb2coXCJQYXJ0aWNpcGFudCAnXCIgKyBwYXJ0aWNpcGFudC5pZGVudGl0eSArIFwiJyBsZWZ0IHRoZSByb29tXCIpO1xyXG4gICAgICAgIGRldGFjaFBhcnRpY2lwYW50VHJhY2tzKHBhcnRpY2lwYW50KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBPbmNlIHRoZSBMb2NhbFBhcnRpY2lwYW50IGxlYXZlcyB0aGUgcm9vbSwgZGV0YWNoIHRoZSBUcmFja3NcclxuICAgICAgLy8gb2YgYWxsIFBhcnRpY2lwYW50cywgaW5jbHVkaW5nIHRoYXQgb2YgdGhlIExvY2FsUGFydGljaXBhbnQuXHJcbiAgICAgIHJvb20ub24oXCJkaXNjb25uZWN0ZWRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbG9nKFwiTGVmdFwiKTtcclxuICAgICAgICBpZiAocHJldmlld1RyYWNrcykge1xyXG4gICAgICAgICAgcHJldmlld1RyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcHJldmlld1RyYWNrcyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRldGFjaFBhcnRpY2lwYW50VHJhY2tzKHJvb20ubG9jYWxQYXJ0aWNpcGFudCk7XHJcbiAgICAgICAgcm9vbS5wYXJ0aWNpcGFudHMuZm9yRWFjaChkZXRhY2hQYXJ0aWNpcGFudFRyYWNrcyk7XHJcbiAgICAgICAgYWN0aXZlUm9vbSA9IG51bGw7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b24tam9pblwiKS5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1dHRvbi1sZWF2ZVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIExlYXZlIFJvb20uXHJcbiAgICB2bS5sZWF2ZVJvb21JZkpvaW5lZCA9ICgpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coYWN0aXZlUm9vbSk7XHJcbiAgICAgIGlmIChhY3RpdmVSb29tKSB7XHJcbiAgICAgICAgYWN0aXZlUm9vbS5kaXNjb25uZWN0KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdm0uc3RhcnRWaWRlb0NoYXQgPSAoKSA9PiB7XHJcbiAgICAgIHZhciBsb2NhbFRyYWNrc1Byb21pc2UgPSBwcmV2aWV3VHJhY2tzXHJcbiAgICAgICAgPyBQcm9taXNlLnJlc29sdmUocHJldmlld1RyYWNrcylcclxuICAgICAgICA6IFZpZGVvLmNyZWF0ZUxvY2FsVHJhY2tzKCk7XHJcblxyXG4gICAgICBsb2NhbFRyYWNrc1Byb21pc2VcclxuICAgICAgICAudGhlbihcclxuICAgICAgICAgIGZ1bmN0aW9uKHRyYWNrcykge1xyXG4gICAgICAgICAgICB3aW5kb3cucHJldmlld1RyYWNrcyA9IHByZXZpZXdUcmFja3MgPSB0cmFja3M7XHJcbiAgICAgICAgICAgIHZhciBwcmV2aWV3Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2NhbC1tZWRpYVwiKTtcclxuICAgICAgICAgICAgaWYgKCFwcmV2aWV3Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJ2aWRlb1wiKSkge1xyXG4gICAgICAgICAgICAgIGF0dGFjaFRyYWNrcyh0cmFja3MsIHByZXZpZXdDb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuYWJsZSB0byBhY2Nlc3MgbG9jYWwgbWVkaWFcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICBsb2coXCJVbmFibGUgdG8gYWNjZXNzIENhbWVyYSBhbmQgTWljcm9waG9uZVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4ocmVzID0+IHtcclxuICAgICAgICAgIGFwaUZhY3RvcnkuZ2V0VHdpbGlvQWNjZXNzVG9rZW4oKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3A7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICBpZGVudGl0eSA9IGRhdGE7XHJcbiAgICAgICAgICB2YXIgY29ubmVjdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwicm9vbU5hbWVcIixcclxuICAgICAgICAgICAgbG9nTGV2ZWw6IFwiZGVidWdcIlxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICBpZiAocHJldmlld1RyYWNrcykge1xyXG4gICAgICAgICAgICBjb25uZWN0T3B0aW9ucy50cmFja3MgPSBwcmV2aWV3VHJhY2tzO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEpvaW4gdGhlIFJvb20gd2l0aCB0aGUgdG9rZW4gZnJvbSB0aGUgc2VydmVyIGFuZCB0aGVcclxuICAgICAgICAgIC8vIExvY2FsUGFydGljaXBhbnQncyBUcmFja3MuXHJcbiAgICAgICAgICBWaWRlby5jb25uZWN0KFxyXG4gICAgICAgICAgICB2bS51c2VyRGF0YS50b2tlbixcclxuICAgICAgICAgICAgY29ubmVjdE9wdGlvbnNcclxuICAgICAgICAgICkudGhlbihyb29tSm9pbmVkLCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgICBsb2coXCJDb3VsZCBub3QgY29ubmVjdCB0byBUd2lsaW86IFwiICsgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJwYXlyb2xsQ3RybFwiLCBwYXlyb2xsQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIHBheXJvbGxDdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgICRzdGF0ZSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBnbG9iYWxzXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7IGxvZ291dCgpOyB9O1xyXG5cclxuXHJcbiAgICB2YXIgdXJsID0gJGxvY2F0aW9uLnBhdGgoKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAkKCcucGF5cm9sbE1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2sgIWltcG9ydGFudCcpO1xyXG4gICAgXHJcbiAgICAkKCcucGF5cm9sbExpc3QnKS5EYXRhVGFibGUoKTtcclxuICAgIFxyXG4gICAgXHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJwcmVMb2dpbkN0cmxcIiwgcHJlTG9naW5DdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gcHJlTG9naW5DdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBnbG9iYWxzLFxyXG4gICAgbG9jYWxTdG9yYWdlU2VydmljZSxcclxuICAgIE5vdGlmaWNhdGlvbixcclxuICAgIE5nTWFwXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgcHJvZ3Jlc3MsIGxvZ291dCwgdXNlclN0b3JlIH0gPSBnbG9iYWxzO1xyXG4gICAgdm0ubG9nZ2VkSW4gPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgJHN0YXRlLmdvKFwiZGFzaGJvYXJkXCIpO1xyXG4gICAgICB2bS5sb2dnZWRJbiA9IHRydWU7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHb29nbGUgbWFwIGNvbmZpZyAqL1xyXG5cclxuICAgIHZtLmdtYXAgPSB7XHJcbiAgICAgIHVybDpcclxuICAgICAgICBcImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9QUl6YVN5QTNNSUEtbUtXcV82MHExSzB6T0hndXJheFQtMVFQeE5VXCIsXHJcbiAgICAgIHN0eWxlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImdlb21ldHJ5XCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjMjEyMTIxXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLmljb25cIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6IFwib2ZmXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzc1NzU3NVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzIxMjEyMVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcImFkbWluaXN0cmF0aXZlXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzc1NzU3NVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcImFkbWluaXN0cmF0aXZlLmNvdW50cnlcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM5ZTllOWVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdmlzaWJpbGl0eTogXCJvZmZcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJhZG1pbmlzdHJhdGl2ZS5sb2NhbGl0eVwiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiI2JkYmRiZFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInBvaVwiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzc1NzU3NVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInBvaS5wYXJrXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzE4MTgxOFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInBvaS5wYXJrXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjNjE2MTYxXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwicG9pLnBhcmtcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzFiMWIxYlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInJvYWRcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImdlb21ldHJ5LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiMyYzJjMmNcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJyb2FkXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjOGE4YThhXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwicm9hZC5hcnRlcmlhbFwiLFxyXG4gICAgICAgICAgZWxlbWVudFR5cGU6IFwiZ2VvbWV0cnlcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiMzNzM3MzdcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJyb2FkLmhpZ2h3YXlcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImdlb21ldHJ5XCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjM2MzYzNjXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwicm9hZC5oaWdod2F5LmNvbnRyb2xsZWRfYWNjZXNzXCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJnZW9tZXRyeVwiLFxyXG4gICAgICAgICAgc3R5bGVyczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29sb3I6IFwiIzRlNGU0ZVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGZlYXR1cmVUeXBlOiBcInJvYWQubG9jYWxcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiM2MTYxNjFcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBmZWF0dXJlVHlwZTogXCJ0cmFuc2l0XCIsXHJcbiAgICAgICAgICBlbGVtZW50VHlwZTogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjNzU3NTc1XCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwid2F0ZXJcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImdlb21ldHJ5XCIsXHJcbiAgICAgICAgICBzdHlsZXJzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb2xvcjogXCIjMDAwMDAwXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZmVhdHVyZVR5cGU6IFwid2F0ZXJcIixcclxuICAgICAgICAgIGVsZW1lbnRUeXBlOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgICAgICAgIHN0eWxlcnM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbG9yOiBcIiMzZDNkM2RcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBtYXJrZXJzOiBbWzI4LjcwNDEsIDc3LjEwMjVdLCBbMTMuMDgyNywgODAuMjcwN11dXHJcbiAgICB9O1xyXG5cclxuICAgIE5nTWFwLmdldE1hcCgpLnRoZW4obWFwID0+IHtcclxuICAgICAgbWFwLnNldE9wdGlvbnMoe1xyXG4gICAgICAgIHN0eWxlczogdm0uZ21hcC5zdHlsZXMsXHJcbiAgICAgICAgZGlzYWJsZURlZmF1bHRVSTogdHJ1ZSxcclxuICAgICAgICB6b29tOiAyLFxyXG4gICAgICAgIGNlbnRlcjoge1xyXG4gICAgICAgICAgbGF0OiAyOC43MDQxLFxyXG4gICAgICAgICAgbG5nOiA3Ny4xMDI1XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8qIExvZ2luICovXHJcbiAgICAvLyAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xyXG4gICAgLy8gICBpZiAoaXNWYWxpZCkge1xyXG4gICAgLy8gICAgIGFsZXJ0KClcclxuICAgIC8vICAgICB2YXIgZm9ybURhdGEgPSB7XHJcbiAgICAvLyAgICAgICBlbWFpbDogJHNjb3BlLnVzZXJuYW1lLFxyXG4gICAgLy8gICAgICAgcGFzc3dvcmQ6ICRzY29wZS5wYXNzd29yZFxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhmb3JtRGF0YSlcclxuICAgIC8vICAgICBhcGlGYWN0b3J5XHJcbiAgICAvLyAgICAgICAubG9naW4oZm9ybURhdGEpXHJcbiAgICAvLyAgICAgICAudGhlbihyZXNwID0+IHsgfSlcclxuICAgIC8vICAgICAgIC5jYXRjaChlcnIgPT4geyB9KTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gfVxyXG4gICAgdm0ucmVnc2l0ZXJNb2RhbCA9ICgpID0+IHtcclxuICAgICAgJChcIiNsb2dpbk1vZGFsLCAjZm9yZ290UGFzc01vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgJChcIiNyZWdpc3Rlck1vZGFsXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgIH07XHJcbiAgICB2bS5sb2dpbk1vZGFsID0gKCkgPT4ge1xyXG4gICAgICAkKFwiI3JlZ2lzdGVyTW9kYWwsICNmb3Jnb3RQYXNzTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAkKFwiI2xvZ2luTW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgfTtcclxuICAgIHZtLmZvcmdvdFBhc3NNb2RhbCA9ICgpID0+IHtcclxuICAgICAgJChcIiNsb2dpbk1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgJChcIiNmb3Jnb3RQYXNzTW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5sb2dpbiA9IChpc1ZhbGlkLCBmb3JtRGF0YSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhmb3JtRGF0YSk7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAubG9naW4oZm9ybURhdGEpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAkKFwiI2xvZ2luTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJtb2RhbC1vcGVuXCIpO1xyXG4gICAgICAgICAgJChcIi5tb2RhbC1iYWNrZHJvcFwiKS5oaWRlKCk7XHJcbiAgICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnNldChcImFjY2Vzcy10b2tlblwiLCByZXNwLmRhdGEudG9rZW4pO1xyXG4gICAgICAgICAgdXNlclN0b3JlLnNldChyZXNwLmRhdGEudXNlcik7XHJcbiAgICAgICAgICAkc3RhdGUuZ28oXCJkYXNoYm9hcmRcIik7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIkxvZ2luIHN1Y2Nlc3NcIik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZm9yZ290UGFzcyA9IChpc1ZhbGlkLCBmb3JtRGF0YSkgPT4ge1xyXG4gICAgICBpZiAoZm9ybURhdGEgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwicGxlYXNlIFZhbGlkIG1haWwgSWRcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBmb3JtRGF0YTtcclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAuZm9yZ290UGFzc3dvcmQoZGF0YSlcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAkKFwiI2ZvcmdvdFBhc3NNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLnJlZ2lzdGVyID0gKGlzVmFsaWQsIGZvcm1EYXRhKSA9PiB7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAucmVnaXN0cmF0aW9uKGZvcm1EYXRhKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgJChcIiNyZWdpc3Rlck1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgJChcIiNyZWdpc3Rlck1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uc3Vic2NyaWJlID0gZW1haWwgPT4ge1xyXG4gICAgICBsZXQgZW1haWxSZWdleCA9IC9eXFx3KyhbXFwuLV0/XFx3KykqQFxcdysoW1xcLi1dP1xcdyspKihcXC5cXHd7MiwzfSkrJC87XHJcbiAgICAgIGlmICghZW1haWxSZWdleC50ZXN0KGVtYWlsKSkge1xyXG4gICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIkludmFsaWQgZW1haWxcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuc3Vic2NyaWJlKHsgZW1haWw6IGVtYWlsIH0pXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5zdWJzY3JpYmVFbWFpbCA9IFwiXCI7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG4gIChmdW5jdGlvbigkKSB7XHJcbiAgICAkKHdpbmRvdykub24oXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAkKFwiI3JlZ2lzdGVyTW9kYWwgLm1vZGFsLWJvZHlcIikubUN1c3RvbVNjcm9sbGJhcih7XHJcbiAgICAgICAgc2V0SGVpZ2h0OiAzNDAsXHJcbiAgICAgICAgdGhlbWU6IFwibWluaW1hbC1kYXJrXCJcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwicHJvamVjdEN0cmxcIiwgcHJvamVjdEN0cmwpO1xyXG5cclxuICBmdW5jdGlvbiBwcm9qZWN0Q3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIE5nTWFwXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG5cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuXHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG5cclxuICAgIHZtLnVzZXJEYXRhID0gdXNlclN0b3JlLmdldCgpO1xyXG5cclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmxpc3RBbGxQcm9qZWN0cygpXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3AuZGF0YSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcInJlcG9ydERldGFpbEN0cmxcIiwgcmVwb3J0RGV0YWlsQ3RybCk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVwb3J0RGV0YWlsQ3RybChcclxuICAgICAgICAkc2NvcGUsXHJcbiAgICAgICAgJHRpbWVvdXQsXHJcbiAgICAgICAgYXV0aEZhY3RvcnksXHJcbiAgICAgICAgJHN0YXRlLFxyXG4gICAgICAgIGFwaUZhY3RvcnksXHJcbiAgICAgICAgTm90aWZpY2F0aW9uLFxyXG4gICAgICAgIE5nTWFwLFxyXG4gICAgICAgIGdsb2JhbHMsXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZSxcclxuICAgICAgKSB7XHJcbiAgICAgICAgbGV0IHZtID0gdGhpcztcclxuICAgICAgICAkc2NvcGUuaW1hZ2UxPVwiLi4vYXNzZXRzL2ltYWdlcy9yZXBvcnRpbWdzL3JlcC5qcGdcIjtcclxuICAgICAgICAkc2NvcGUuaW1hZ2UyPVwiLi4vYXNzZXRzL2ltYWdlcy9yZXBvcnRpbWdzL2ZpbGUuanBnXCI7XHJcbiAgICAgICAgY29uc3QgeyBsb2dvdXQgfSA9IGdsb2JhbHM7XHJcbiAgICAgICAgJHNjb3BlLnJlcG9ydE9iaj17fTtcclxuICAgICAgICAkc2NvcGUuc2h3Q29tbWVudFNlY3Rpb249ZmFsc2U7XHJcbiAgICAgICAgJHNjb3BlLlJlcG9ydElzc3VlPXt9O1xyXG4gICAgICAgICRzY29wZS5pc3N1ZVRvQWRkPVtdO1xyXG4gICAgICAgICRzY29wZS5tb2RlbHMgPSB7XHJcbiAgICAgICAgICBzZWxlY3RlZDogbnVsbCxcclxuICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUuZXhwb3J0VG9QZGYgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgaW1nLnNyYz1cIi4uL2Fzc2V0cy9pbWFnZXMvcmVwb3J0aW1ncy9yZXAuanBnXCI7XHJcbiAgICAgICAgICB2YXIgaW1nMSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgaW1nMS5zcmM9XCIuLi9hc3NldHMvaW1hZ2VzL3JlcG9ydGltZ3MvZmlsZS5qcGdcIjtcclxuICAgICAgICB2YXIgZG9jID0gbmV3IGpzUERGKCdwJyk7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7ICdiYWNrZ3JvdW5kJzogJyNmZmYnIH07XHJcbiAgICAgICAgZG9jLmFkZEltYWdlKGltZywgJ3BuZycsIDE1LCAyMCwgOTAsIDkwKTtcclxuICAgICAgICBkb2MuYWRkSW1hZ2UoaW1nMSwncG5nJywxMTAsMjAsOTAsOTApO1xyXG4gICAgICBcclxuICAgICAgZG9jLmF1dG9UYWJsZSh7XHJcbiAgICAgICAgaHRtbDogJyNzdGF0aWN0YWJsZScsXHJcbiAgICAgICAgXHJcbiAgICAgICAgbWFyZ2luOiB7dG9wOiAxMjB9LFxyXG4gICAgICAgIHBhZ2VCcmVhazogJ2F1dG8nLCAvLyAnYXV0bycsICdhdm9pZCcgb3IgJ2Fsd2F5cydcclxuICAgICAgICB0YWJsZVdpZHRoOiAnYXV0bycsIC8vICdhdXRvJywgJ3dyYXAnIG9yIGEgbnVtYmVyLFxyXG4gICAgICAgIHNob3dIZWFkZXI6ICdldmVyeVBhZ2UnLCAvLyAnZXZlcnlQYWdlJywgJ2ZpcnN0UGFnZScsICduZXZlcicsIFxyXG4gICAgICAgXHJcbiAgICB9KTtcclxuXHJcbiAgICAgICAgZG9jLnNldEZvbnRTaXplKDI1KTtcclxuICAgICAgICBkb2MudGV4dCgyMCwgMTUwLCAnQ29tbWVudHMnKTtcclxuICAgICAgICBkb2Muc2V0Rm9udFNpemUoMTApO1xyXG4gICAgICAgIGRvYy5zZXRGb250KFwiaGVsdmV0aWNhXCIpO1xyXG4gICAgICAgXHJcbiAgICAgICAgZG9jLnRleHQoMjAsIDE2MCwgJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvcicpO1xyXG4gICAgICAgIGRvYy50ZXh0KDIwLDE3MCwnaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbycpO1xyXG4gICAgICAgIC8vIGRvYy5hZGRIVE1MKCQoJyNwZGZpZDEnKVswXSwxNSwxNSwgb3B0aW9ucywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZG9jLnRleHQoMjAsMTgwLCcgbGFib3JpcyBuaXNpIHV0IGFsaXF1aXAgZXggZWEgY29tbW9kbyBjb25zZXF1YXQuJyk7XHJcbiAgICAgICAgLy8gICBkb2MuYXV0b1RhYmxlKHtcclxuICAgICAgICAvLyAgICAgaGVhZDogW1snTmFtZScsICdFbWFpbCcsICdDb3VudHJ5J11dLFxyXG4gICAgICAgIC8vICAgICBib2R5OiBbXHJcbiAgICAgICAgLy8gICAgICAgICBbJ0RhdmlkJywgJ2RhdmlkQGV4YW1wbGUuY29tJywgJ1N3ZWRlbiddLFxyXG4gICAgICAgIC8vICAgICAgICAgWydDYXN0aWxsZScsICdjYXN0aWxsZUBleGFtcGxlLmNvbScsICdOb3J3YXknXSxcclxuICAgICAgICAvLyAgICAgICAgIC8vIC4uLlxyXG4gICAgICAgIC8vICAgICBdXHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICBkb2Muc2F2ZShcImNvbHVtbjgucGRmXCIpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgXHJcbiAgICAgICAgICAvLyB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgIC8vICAgcGFnZXNwbGl0OiB0cnVlIC8vaW5jbHVkZSB0aGlzIGluIHlvdXIgY29kZVxyXG4gICAgICAgICAgLy8gfTtcclxuICAgICAgICAgIC8vIHZhciBkb2MgPSBuZXcganNQREYoJ3AnLCAncHQnLCAnYTQnKVxyXG4gICAgICAgICAgLy8gZG9jLmFkZEhUTUwoJCgnI3BkZmlkJyksb3B0aW9ucywge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgIC8vICAgJ2JhY2tncm91bmQnOiAnI2ZmZicsXHJcbiAgICAgICAgICAvLyB9LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vICAgZG9jLnNhdmUoJ3NhbXBsZS1maWxlLnBkZicpO1xyXG4gICAgICAgICAgLy8gfSk7XHJcbiAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogUHJvamVjdCBwaWNrZXIgbG9hZCBmdW5jdGlvbmFsaXR5ICovXHJcblxyXG4gICAgICAgICAgICBsZXQgZW5hYmxlZCA9IHRydWUsXHJcbiAgICAgICAgICAgIGNodW5rU2l6ZSA9IDU7XHJcbiAgICAgICAgICAgIHZtLmlzc3VlU2VhcmNoID0gXCJcIjtcclxuICAgICAgICAgICAgdm0uZW5hYmxlTGF6eUxvYWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdm0uc29ydFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgZmllbGQ6IFwiY3JlYXRlZFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBmYWxzZVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gJHNjb3BlLm9wZW5SZXBvcnRQaWNrID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAvLyAgIHZtLmVuYWJsZUxhenlMb2FkID0gdHJ1ZTtcclxuICAgICAgICAvLyAgIGFwaUZhY3RvcnlcclxuICAgICAgICAvLyAgICAgLmxpc3RBbGxJc3N1ZXMoe1xyXG4gICAgICAgIC8vICAgICAgIHNlYXJjaDogdm0uaXNzdWVTZWFyY2gsXHJcbiAgICAgICAgLy8gICAgICAgY2h1bms6IGNodW5rU2l6ZSxcclxuICAgICAgICAvLyAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgIC8vICAgICAgIHNvcnQ6IHZtLnNvcnRQYXJhbXMuZmllbGQsXHJcbiAgICAgICAgLy8gICAgICAgc29ydFR5cGU6IHZtLnNvcnRQYXJhbXMudHlwZVxyXG4gICAgICAgIC8vICAgICB9KVxyXG4gICAgICAgIC8vICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAvLyAgICAgICB2bS5pc3N1ZVBpY2tlckRhdGEgPSByZXNwLmRhdGEubGlzdDtcclxuICAgIFxyXG4gICAgICAgIC8vICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIC8vIE9wZW4gaW4gdGhlIG5leHQgZXZlbnQgbG9vcFxyXG4gICAgICAgIC8vICAgICAgICAgJChcIiNjaG9vc2VJc3N1ZU1vZGFsXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgICAvLyAgICAgICB9KTtcclxuICAgICAgICAvLyAgICAgfSlcclxuICAgICAgICAvLyAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIC8vICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIC8vICAgICB9KTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgIFxyXG4gICAgICAgICRzY29wZS5vcGVuUmVwb3J0UGlja2VyID0gZnVuY3Rpb24oKXtcclxuICAgICAgICBcclxuICAgICAgICAgIHZtLmVuYWJsZUxhenlMb2FkID0gdHJ1ZTtcclxuICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgLmxpc3RBbGxJc3N1ZXMoe1xyXG4gICAgICAgICAgICAgIHNlYXJjaDogdm0uaXNzdWVTZWFyY2gsXHJcbiAgICAgICAgICAgICAgY2h1bms6IGNodW5rU2l6ZSxcclxuICAgICAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgICAgIHNvcnQ6IHZtLnNvcnRQYXJhbXMuZmllbGQsXHJcbiAgICAgICAgICAgICAgc29ydFR5cGU6IHZtLnNvcnRQYXJhbXMudHlwZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIHZtLmlzc3VlUGlja2VyRGF0YT1bXTtcclxuICAgICAgICAgICAgICBpZigkc2NvcGUuaXNzdWVUb0FkZC5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNzdWVUb0FkZC5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgICAgIHJlc3AuZGF0YS5saXN0LmZvckVhY2goKHJlc2RhdGEsaW5kZXgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5faWQ9PXJlc2RhdGEuX2lkKXtcclxuICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVzcC5kYXRhLmxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZmFsc2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBPcGVuIGluIHRoZSBuZXh0IGV2ZW50IGxvb3BcclxuICAgICAgICAgICAgICAgIHZtLmlzc3VlUGlja2VyRGF0YSA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgICAgICAgJChcIiNsaXN0aXNzdWVzbW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgICAgICAgJChcIiNjaG9vc2VJc3N1ZU1vZGFsXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5FZGl0TW9kZT1mYWxzZTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgJChcIiNjaG9vc2VJc3N1ZU1vZGFsXCIpLm9uKFwiaGlkZS5icy5tb2RhbFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZtLmVuYWJsZUxhenlMb2FkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZtLmNsb3NlSXNzdWVQaWNrZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAkKFwiI2Nob29zZUlzc3VlTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgdm0uaXNzdWVTZWFyY2ggPSBcIlwiO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5hZGRNb3JlID0gKCkgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJjYWxsaW5nIGFkZCBtb3JlXCIpO1xyXG4gICAgICAgICAgaWYgKGVuYWJsZWQpIHtcclxuICAgICAgICAgICAgZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0sIDUwMCk7XHJcbiAgICAgICAgICAgIGNodW5rU2l6ZSArPSA1O1xyXG4gICAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgICAgLmxpc3RBbGxJc3N1ZXMoe1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoOiB2bS5pc3N1ZVNlYXJjaCxcclxuICAgICAgICAgICAgICAgIGNodW5rOiBjaHVua1NpemUsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgICAgICAgc29ydDogdm0uc29ydFBhcmFtcy5maWVsZCxcclxuICAgICAgICAgICAgICAgIHNvcnRUeXBlOiB2bS5zb3J0UGFyYW1zLnR5cGVcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIHZtLmlzc3VlUGlja2VyRGF0YSA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgdm0uaXNzdWVQaWNrZXJEYXRhPVtdO1xyXG4gICAgICAgICAgICAgIGlmKCRzY29wZS5pc3N1ZVRvQWRkLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNzdWVUb0FkZC5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICByZXNwLmRhdGEubGlzdC5mb3JFYWNoKChyZXNkYXRhLGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuX2lkPT1yZXNkYXRhLl9pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXNwLmRhdGEubGlzdC5zcGxpY2UoaW5kZXgsMSlcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICR0aW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIE9wZW4gaW4gdGhlIG5leHQgZXZlbnQgbG9vcFxyXG4gICAgICAgICAgICAgICAgdm0uaXNzdWVQaWNrZXJEYXRhID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgIC8qIEZ1bmN0aW9uIHRvIHNlYXJjaCBwcm9qZWN0cyAqL1xyXG4gICAgdm0uc2VhcmNoSXNzdWVzID0gdGV4dCA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwic2VyY2h0ZXh0XCIsIHRleHQpO1xyXG4gICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmxpc3RBbGxJc3N1ZXMoe1xyXG4gICAgICAgICAgc2VhcmNoOiB2bS5pc3N1ZVNlYXJjaCxcclxuICAgICAgICAgIGNodW5rOiBjaHVua1NpemUsXHJcbiAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgc29ydDogdm0uc29ydFBhcmFtcy5maWVsZCxcclxuICAgICAgICAgIHNvcnRUeXBlOiB2bS5zb3J0UGFyYW1zLnR5cGVcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgdm0uaXNzdWVQaWNrZXJEYXRhID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgIH07XHJcblxyXG5cclxuICAgICAgIC8vQWRkIHJlbWFyayBidXR0b24gaW4gcmVwb3J0LXJlbWFya3MgcGFnZSBmb3JtXHJcbiAgICAgICAkc2NvcGUucmVtYXJrRGF0YT1bXTtcclxuICAgICAgICRzY29wZS5hZGRSZW1hcmsgPSBmdW5jdGlvbih0aXRsZSx2YWx1ZSl7XHJcbiAgICAgICAgaWYodGl0bGUhPXVuZGVmaW5lZHx8dmFsdWUhPXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAkc2NvcGUucmVtYXJrRGF0YS5wdXNoKHtUaXRsZTp0aXRsZSwgVmFsdWU6dmFsdWV9KTtcclxuICAgICAgICAgICQoJyNyZW1hcmt0aXRsZScpLnZhbChcIlwiKTtcclxuICAgICAgICAgICQoJyNyZW1hcmt2YWx1ZScpLnZhbChcIlwiKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgIH0sXHJcblxyXG4gICAgICAgdm0uY2hvb3NlSXNzdWVzID0gZnVuY3Rpb24oaXNzdWUsaW5kZXgsYXJyYXkpe1xyXG4gICAgICAgIC8vJHNjb3BlLmN1cnJlbnRSZXBvcnQ9e307XHJcbiAgICAgICAgIGlmKGlzc3VlKXtcclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaVNTVUVcIixpc3N1ZSk7XHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImluZGV4XCIsaW5kZXgpO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJBUlJBWVwiLGFycmF5KTtcclxuICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAkc2NvcGUuaXNzdWVUb0FkZC5wdXNoKGlzc3VlKTtcclxuICAgICAgICAgICQoXCIjY2hvb3NlSXNzdWVNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAkKFwiI2xpc3Rpc3N1ZXNtb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJObyBzZWxlY3Rpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgfVxyXG5cclxuICAgICAgICBcclxuICAgICAgIHZtLmFkZFRvTGlzdElzc3VlUGlja2VyID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkKFwiI2Nob29zZUlzc3VlTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICQoXCIjbGlzdGlzc3Vlc21vZGFsXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgIH1cclxuXHJcbiAgICAgICAkc2NvcGUuc2VuZElzc3VlVG9QZGYgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICQoXCIjbGlzdGlzc3Vlc21vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAkc2NvcGUuc2h3Q29tbWVudFNlY3Rpb249dHJ1ZTtcclxuICAgICAgIH1cclxuICAgICAgLy8gdm0uY2hvb3NlSXNzdWVzID0gZnVuY3Rpb24oaXNzdWUpe1xyXG4gICAgICAvLyAgICRzY29wZS5jdXJyZW50UmVwb3J0PXt9O1xyXG4gICAgICAvLyAgIGlmKGlzc3VlKXtcclxuICAgICAgLy8gICAgIHZhciBwYXJlbnRFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnLnBhbmVsJyApICk7XHJcbiAgICAgIC8vICAgICB2YXIgdG9iZUNsb25lZEVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoICcuY2hpbGQnICkgKTtcclxuICAgICAgLy8gICAgIHBhcmVudEVsZW1lbnQuYXBwZW5kKHRvYmVDbG9uZWRFbGVtZW50LmNsb25lKCkpO1xyXG4gICAgICAvLyAgICAgJHNjb3BlLmlzc3VlVG9BZGQucHVzaChpc3N1ZSk7XHJcbiAgICAgIC8vICAgIC8vICQoXCIjY2hvb3NlSXNzdWVNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgIC8vICAgIGlmKCRzY29wZS5pc3N1ZVRvQWRkLmxlbmd0aD49MCl7XHJcbiAgICAgIC8vICAgICAkc2NvcGUuaXNzdWVUb0FkZC5mb3JFYWNoKG9uZWlzc3VlID0+IHtcclxuICAgICAgLy8gICAgICAgaWYoXy5pc0VxdWFsKG9uZWlzc3VlLCBpc3N1ZSkpe1xyXG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwiZXF1YWxcIik7XHJcbiAgICAgIC8vICAgICAgICAgJHNjb3BlLmN1cnJlbnRSZXBvcnQ9aXNzdWU7XHJcbiAgICAgIC8vICAgICAgIH1lbHNle1xyXG4gICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKFwibm90IGVxdWFsXCIpO1xyXG4gICAgICAvLyAgICAgICB9XHJcbiAgICAgIC8vICAgICB9KTtcclxuICAgICAgLy8gICAgfVxyXG4gICAgICAgICBcclxuICAgICAgLy8gICB9XHJcbiAgICAgIC8vICAgZWxzZXtcclxuICAgICAgLy8gICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIk5vIHNlbGVjdGlvblwiKTtcclxuICAgICAgLy8gICB9XHJcbiAgICAgICAgXHJcbiAgICAgIC8vICB9XHJcbiAgICAvL0xvYWQgTW9kYWxzXHJcbiAgICAgICRzY29wZS5jb3ZlclBhZ2VNb2RhbCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJChcIiNjb3ZlcnBhZ2Vtb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgIH1cclxuICAgICAgJHNjb3BlLmFib3V0VXNNb2RhbCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJChcIiNhYm91dHVzbW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICB9XHJcbiAgICAgICRzY29wZS5wcm9qZWN0TWV0YU1vZGFsID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAkKFwiI3Byb2plY3RtZXRhbW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICB9XHJcbiAgICAgICRzY29wZS5yZXBvcnRyZW1hcmtNb2RhbCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJChcIiNyZXBvcnRyZW1hcmttb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgIH1cclxuICAgICAgLy9uZXcgaXNzdWUgbGlzdGluZyBtb2RlbFxyXG4gICAgICAkc2NvcGUubGlzdElzc3VlTW9kZWxDbGljayA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgJChcIiNsaXN0aXNzdWVzbW9kYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL3NldCBvYmplY3QgZm9yIG1vZGFsc1xyXG4gICAgICAkc2NvcGUuc2V0UmVwb3J0T2JqID0gZnVuY3Rpb24ob2JqZWN0KXtcclxuICAgICAgICBjb25zb2xlLmxvZyhvYmplY3QpO1xyXG4gICAgICAgICRzY29wZS5SZXBvcnRJc3N1ZS50aXRsZSA9IG9iamVjdC50aXRsZTtcclxuICAgICAgICAkc2NvcGUuUmVwb3J0SXNzdWUuZGVzY3JpcHRpb24gPSBvYmplY3QuZGVzY3JpcHRpb247XHJcbiAgICAgICAgJHNjb3BlLlJlcG9ydElzc3VlLmNvbXBhbnlOYW1lID0gb2JqZWN0LmNvbXBhbnlOYW1lO1xyXG4gICAgICAgICRzY29wZS5SZXBvcnRJc3N1ZS5lbWFpbCA9IG9iamVjdC5lbWFpbDtcclxuICAgICAgICAkc2NvcGUuUmVwb3J0SXNzdWUud2Vic2l0ZSA9IG9iamVjdC53ZWJzaXRlO1xyXG4gICAgICAgICRzY29wZS5SZXBvcnRJc3N1ZS5waG9uZSA9IG9iamVjdC5waG9uZTtcclxuICAgICAgICAkc2NvcGUuUmVwb3J0SXNzdWUucHJvamVjdE5hbWUgPSBvYmplY3QucHJvamVjdE5hbWU7XHJcbiAgICAgICAgJHNjb3BlLlJlcG9ydElzc3VlLnNlcmlhbE5vID0gb2JqZWN0LnNlcmlhbE5vO1xyXG4gICAgICAgICRzY29wZS5SZXBvcnRJc3N1ZS5lbnRlcnByaXNlID0gb2JqZWN0LmVudGVycHJpc2U7XHJcbiAgICAgICAgaWYoJHNjb3BlLmlzc3VlVG9BZGQubGVuZ3RoPjApe1xyXG4gICAgICAgICAgJHNjb3BlLlJlcG9ydElzc3VlLmlzc3VlVG9BZGQgPSAkc2NvcGUuaXNzdWVUb0FkZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoJHNjb3BlLnJlbWFya0RhdGEubGVuZ3RoPjApe1xyXG4gICAgICAgICAgJHNjb3BlLlJlcG9ydElzc3VlLnJlbWFya0RhdGE9JHNjb3BlLnJlbWFya0RhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5SZXBvcnRJc3N1ZS5hdXRob3JOYW1lPW9iamVjdC5hdXRob3JOYW1lO1xyXG4gICAgICAgICRzY29wZS5SZXBvcnRJc3N1ZS5yZW1hcmtEYXRlPW9iamVjdC5yZW1hcmtEYXRlO1xyXG5cclxuICAgICAgICAkKFwiI2NvdmVycGFnZW1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAkKFwiI2Fib3V0dXNtb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgJChcIiNwcm9qZWN0bWV0YW1vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAkKFwiI3JlcG9ydHJlbWFya21vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICAkKFwiI2Nob29zZUlzc3VlTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpOyBcclxuICAgICAgfVxyXG5cclxuICAgICAgJHNjb3BlLkVkaXRNb2RlPWZhbHNlO1xyXG4gICAgICAkc2NvcGUuRWRpdElzc3VlRGF0YT1mdW5jdGlvbigpe1xyXG4gICAgICAgICRzY29wZS5FZGl0TW9kZT10cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkc2NvcGUucmVtb3ZlRnJvbUlzc3VlTGlzdD1mdW5jdGlvbihpbmRleCxhcnJheSl7XHJcbiAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuaXNzdWVUb0FkZCk7IFxyXG4gICAgICB9XHJcbiAgICAgXHJcbiAgICAgXHJcbiAgICAgXHJcbiAgICB9XHJcbn0pKCk7IiwiKCgpID0+IHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJyZXBvcnRzQ3RybFwiLCByZXBvcnRzQ3RybCk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVwb3J0c0N0cmwoXHJcbiAgICAgICAgJHNjb3BlLFxyXG4gICAgICAgICR0aW1lb3V0LFxyXG4gICAgICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgICAgICRzdGF0ZSxcclxuICAgICAgICBhcGlGYWN0b3J5LFxyXG4gICAgICAgIE5vdGlmaWNhdGlvbixcclxuICAgICAgICBOZ01hcCxcclxuICAgICAgICBnbG9iYWxzLFxyXG4gICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICAgXHJcbiAgICAgICAgaWYgKCFhdXRoRmFjdG9yeS5jaGVja1VzZXIoKSkge1xyXG4gICAgICAgICAgbG9nb3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KFwidXNlckRhdGFcIilcclxuICAgICAgICBcclxuICAgICAgICAkc2NvcGUucmVwb3J0Q2F0ZWdvcnkgPSBbJ2lzc3VlUmVwb3J0JywgJ3NhZmV0eVJlcG9ydCcsICdxYVJlcG9ydCddO1xyXG4gICAgICAgIGFwaUZhY3RvcnkubGlzdEFsbFVzZXJzKCkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLmFsbEFkbWluVXNlcnMgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgLmxpc3RBbGxQcm9qZWN0cygpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5wcm9qZWN0TGlzdCA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgIC8qIEluaXRpYWxseSBsb2FkIHRoZSBmaXJzdCBwcm9qZWN0IGFzIGRlZmF1bHQgKi9cclxuICAgICAgICAgXHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIChmdW5jdGlvbigkKSB7XHJcbiAgICAgICAgJCh3aW5kb3cpLm9uKFwibG9hZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICQoXCIjcmVwb3J0TW9kYWwgLm1vZGFsLWJvZHlcIikubUN1c3RvbVNjcm9sbGJhcih7XHJcbiAgICAgICAgICAgIHNldEhlaWdodDogMzQwLFxyXG4gICAgICAgICAgICB0aGVtZTogXCJtaW5pbWFsLWRhcmtcIlxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxufSkoKTsiLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJyZXBvcnRzTGlzdGluZ0N0cmxcIiwgcmVwb3J0c0xpc3RpbmdDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gcmVwb3J0c0xpc3RpbmdDdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICAkbG9jYXRpb24sXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgICRzdGF0ZSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBnbG9iYWxzXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7IGxvZ291dCgpOyB9O1xyXG5cclxuXHJcbiAgICB2YXIgdXJsID0gJGxvY2F0aW9uLnBhdGgoKTtcclxuICAgIFxyXG4gICAgaWYgKHVybCA9PSAnL3BheXJvbGwnKSB7XHJcbiAgICAgICQoJy5wYXlyb2xsTWVudScpLmNzcygnZGlzcGxheScsICdibG9jayAhaW1wb3J0YW50Jyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgJCgnLnBheXJvbGxMaXN0JykuRGF0YVRhYmxlKCk7XHJcbiAgICBcclxuICAgIFxyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwic2V0UGFzc3dvcmRDdHJsXCIsIHNldFBhc3N3b3JkQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIHNldFBhc3N3b3JkQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgJGxvY2F0aW9uLFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFsc1xyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgY29uc3QgeyB0b2tlbiB9ID0gJGxvY2F0aW9uLnNlYXJjaCgpO1xyXG5cclxuICAgIGlmICghdG9rZW4pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmlzVG9rZW5WYWxpZCh7IHRva2VuIH0pXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3AuZGF0YSk7XHJcbiAgICAgICAgaWYgKHJlc3AuZGF0YS50b2tlblZhbGlkKSB7XHJcbiAgICAgICAgICB2bS51c2VyID0gcmVzcC5kYXRhLnVzZXI7XHJcbiAgICAgICAgICAkKFwiLmZvcmdvdFBhc3NNb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICQoXCIudG9rZW5JbnZhbGlkXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgdm0ucmVzZXRQYXNzID0gKGlzVmFsaWQsIGRhdGEpID0+IHtcclxuICAgICAgJChcIi5mb3Jnb3RQYXNzTW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICBpZiAodm0ucmVzZXRQYXNzLnBhc3N3b3JkID09PSB2bS5yZXNldFBhc3MuY19wYXNzd29yZCkge1xyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgcGFzc3dvcmQ6IHZtLnJlc2V0UGFzcy5wYXNzd29yZCxcclxuICAgICAgICAgIHVzZXI6IHZtLnVzZXJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5zZXRQYXNzd29yZChkYXRhKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKFwicHJlTG9naW5cIik7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBhc3N3b3JkIE1pc21hdGNoLCBQbGVhc2UgZW50ZXIgc2FtZSBwYXNzd29yZFwiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZtLmJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICQoXCIudG9rZW5JbnZhbGlkXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgJHRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICRzdGF0ZS5nbyhcInByZUxvZ2luXCIpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJzZXR0aW5nQ3RybFwiLCBzZXR0aW5nQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIHNldHRpbmdDdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgICRzdGF0ZSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBnbG9iYWxzLFxyXG4gICAgVXBsb2FkXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG5cclxuICAgIGxldCB2bSA9IHRoaXM7XHJcbiAgICBjb25zdCB7IGxvZ291dCwgdXNlclN0b3JlLCBjb21wYW55U3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcbiAgICBpZiAoY29tcGFueVN0b3JlLmdldCgpKSB7XHJcbiAgICAgIHZtLmNvbXBhbnlEYXRhID0gY29tcGFueVN0b3JlLmdldCgpO1xyXG4gICAgICB2bS5wcml2aWxlZ2VzID0gdm0uY29tcGFueURhdGEucHJpdmlsZWdlcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuZ2V0Q29tcGFueUJ5SWQodm0udXNlckRhdGEuY29tcGFueUlkKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgdm0uY29tcGFueURhdGEgPSByZXNwLmRhdGE7XHJcbiAgICAgICAgICB2bS5wcml2aWxlZ2VzID0gdm0uY29tcGFueURhdGEucHJpdmlsZWdlcztcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZtLnN1Ym1pdFJvbGVTZXR0aW5ncyA9IGZvcm1EYXRhID0+IHtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC51cGRhdGVSb2xlQmFzZWRBY2Nlc3MoZm9ybURhdGEpXHJcbiAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhyZXNwLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgICBjb21wYW55U3RvcmUucmVmZXRjaCh2bS51c2VyRGF0YS5jb21wYW55SWQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIik7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdm0uZ29Ub0Rhc2hib2FyZCA9ICgpID0+IHtcclxuICAgICAgJHN0YXRlLmdvKFwiZGFzaGJvYXJkXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwic3ViY29udHJhY3RvckN0cmxcIiwgc3ViY29udHJhY3RvckN0cmwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1YmNvbnRyYWN0b3JDdHJsKFxyXG4gICAgICAgICRzY29wZSxcclxuICAgICAgICAkdGltZW91dCxcclxuICAgICAgICBhdXRoRmFjdG9yeSxcclxuICAgICAgICAkc3RhdGUsXHJcbiAgICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgICBOb3RpZmljYXRpb24sXHJcbiAgICAgICAgTmdNYXAsXHJcbiAgICAgICAgZ2xvYmFscyxcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICApIHtcclxuICAgICAgICBsZXQgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICB2bS5zZWxlY3RlZE1hdGVyaWFscz1bXTtcclxuICAgICAgICB2bS5tZW1iZXJzMj1bXTtcclxuICAgICAgICBjb25zdCB7IGxvZ291dCxkZWJvdW5jZSwgdXNlclN0b3JlIH0gPSBnbG9iYWxzO1xyXG4gICAgICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvKipHZXQgYWxsIHN1cHBsaWVyc2RhdGEgKi9cclxuICAgICAgICAgIHZtLmdldFN1YmNvbnRyYWN0b3JzID0gKHR5cGUpID0+IHtcclxuICAgICAgICAgICAgLyogRm9yIHRvZ2dsaW5nIGFzY2VuZGluZyBhbmQgZGVzY2VuZGluZyBvcmRlciAqL1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAuZ2V0QWxsU3ViY29udHJhY3RvcnMoe1xyXG4gICAgICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgIHNvcnQ6IHR5cGUsXHJcbiAgICAgICAgICAgICAgIC8vIHNlYXJjaDogdm0uc2VhcmNoVGV4dCxcclxuICAgICAgICAgICAgICAgLy8gc29ydFR5cGU6IHZtLnRvZ2dsZU9ialtyZXNvdXJjZV1bdHlwZV1cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gdm1bcmVzb3VyY2VdPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICAgIC8vIHZtW3Jlc291cmNlICsgXCJDb3VudFwiXSA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgICAgICAgIHZtLmFsbFN1YmNvbnRyYWN0b3IgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICAgIHZtLnN1YmNvbnRyYWN0b3JzQ291bnQgPSByZXNwLmRhdGEudG90YWw7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN1cHBsaWVycyBhcmU6XCIsdm0uYWxsU3ViY29udHJhY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNlYXJjaGluZ1RleHQ9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAkKFwiI3BhZ2luYXRpb25cIikucGFnaW5hdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHZtLnN1YmNvbnRyYWN0b3JzQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNPblBhZ2U6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgIGNzc1N0eWxlOiBcImxpZ2h0LXRoZW1lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZlRleHRQcmVmaXg6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogMSxcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIG9uUGFnZUNsaWNrOiBmdW5jdGlvbihwYWdlLCBldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldEFsbFN1YmNvbnRyYWN0b3JzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydDogdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzb3J0VHlwZTogdm0udG9nZ2xlT2JqW3R5cGVdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZtLmFsbFN1YmNvbnRyYWN0b3IgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICAvKiBJbml0aWFsbHkgc29ydCBpc3N1ZSBpbiBkZXNjZW5kaW5nIG9yZGVyICovXHJcbiAgICAgICAgIHZtLmdldFN1YmNvbnRyYWN0b3JzKFwiY3JlYXRlZFwiKTtcclxuXHJcbiAgICAgICAgIC8vZ2V0IGFsbCBsaXN0IG9mIHN5c3RlbSB0YWdzXHJcbiAgICAgICAgIHZtLmdldFRhZ3MgPWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAgICAgIC5nZXRBbGxTeXN0ZW1UYWdzKCkudGhlbihyZXNwPT57XHJcbiAgICAgICAgICAgICAgICAgIHZtLkFsbFRhZ3MgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codm0uQWxsVGFncyk7XHJcbiAgICAgICAgICAgICAgIH0pLmNhdGNoKGU9PntcclxuXHJcbiAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLmdldFRhZ3MoKTtcclxuXHJcbiAgICAgICAgIC8vbmV4dCBhbmQgcHJldmlvdXMgYnV0dG9uIGZ1bmN0aW9uc1xyXG4gICAgICAgICB2bS5hZGRTdWJjb250cmFjdG9yTmV4dCA9ICgpID0+IHtcclxuICAgICAgICAgIGlmKCQoJyNob21lJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJob21lXCIpO1xyXG4gICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI3Byb2ZpbGUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICQoJyNob21lJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICQoJyNob21lJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZigkKCcjcHJvZmlsZS10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2ZpbGVcIik7XHJcbiAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICQoJyNjb250YWN0LXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcjcHJvZmlsZScpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICQoJyNjb250YWN0JykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICAgICBcclxuXHJcbiAgICAgICAgdm0uYWRkU3ViY29udHJhY3RvclByZXZpb3VzPSgpPT57XHJcbiAgICAgICAgICBpZigkKCcjcHJvZmlsZS10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImhvbWVcIik7XHJcbiAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAkKCcjaG9tZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAkKCcjcHJvZmlsZScpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAkKCcjcHJvZmlsZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICB9ZWxzZSBcclxuICAgICAgICAgIGlmKCQoJyNjb250YWN0LXRhYicpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvZmlsZVwiKTtcclxuICAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJCgnI3Byb2ZpbGUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICQoJyNwcm9maWxlJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLm9wZW5Qb3B1cD0oKT0+e1xyXG4gICAgICAgICAgaWYoJCgnI3Byb2ZpbGUtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJob21lXCIpO1xyXG4gICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI2hvbWUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgJCgnI3Byb2ZpbGUtdGFiJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgfWVsc2UgXHJcbiAgICAgICAgICBpZigkKCcjY29udGFjdC10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2ZpbGVcIik7XHJcbiAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICQoJyNob21lLXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcjY29udGFjdC10YWInKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAkKCcjY29udGFjdCcpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vZGVsZXRlIG1hdGVyaWFsIGZyb20gbGlzdFxyXG4gICAgICAgICRzY29wZS5kZWxldGVNYXRlcmlhbCA9IGZ1bmN0aW9uKGluZGV4LGFycmF5KXtcclxuICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgICRzY29wZS5kZWxldGVTdGFmZiA9IGZ1bmN0aW9uKGluZGV4LGFycmF5KXtcclxuICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgICAvKipJbnNlcnQgZnVuY3Rpb25zICovXHJcbiAgICAgICAgIC8qKkluc2VydCBTdXBwbGllciBmdW5jdGlvbnMgKi9cclxuICAgICAgICAgJHNjb3BlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGZpbGVzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGlmKGZpbGVzWzBdID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgICAgJHNjb3BlLkZJTEVJTUcgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGVzWzBdKTtcclxuICAgICAgICAgICRzY29wZS5maWxlRXh0ID0gZmlsZXNbMF0ubmFtZS5zcGxpdChcIi5cIikucG9wKCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2xvYmFscy5nZXRDb3VudHJ5Q29kZSgpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5nZXRDb3VudHJ5Q29kZSA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgXHJcbiAgICAgICAgICB2bS5sb2FkQ291bnRyeUNvZGUgPSAkcXVlcnkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhcGlGYWN0b3J5Lmxpc3RBbGxNYXRlcmlhbHMoKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgdm0uYWxsTWF0ZXJpYWxzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdm0uYWRkTWVtYmVyID0gZnVuY3Rpb24obmFtZSxtYWlsLGNvZGUscGhubyl7XHJcbiAgICAgICAgICB2bS5tZW1iZXJzMi5wdXNoKHtuYW1lOm5hbWUsZW1haWw6bWFpbCxjb250YWN0OntkaWFsQ29kZTpjb2RlLHBob25lTnVtYmVyOnBobm99fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICBcclxuICAgICAgICB2bS5hZGRuZXd0YWdtb2RlbD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgJCgnI3N1Yi1jb250cmFjdG9yX21vZGFsJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICQoJyN0YWdhZGRfbW9kYWwnKS5tb2RhbCgnc2hvdycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcblxyXG4gICAgICAgICRzY29wZS5jcmVhdGVTdWJjb250cmFjdG9yID0gZnVuY3Rpb24oc3ViY29udHJhY3RvcixhdHRyaWJ1dGUpe1xyXG4gICAgICAgICAgc3ViY29udHJhY3Rvci5hdHRyaWJ1dGVzPVtdO1xyXG4gICAgICAgICAgc3ViY29udHJhY3Rvci5zdGFmZj1bXTtcclxuICAgICAgICAgIGlmKGF0dHJpYnV0ZS5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgICBzdWJjb250cmFjdG9yLmF0dHJpYnV0ZXMucHVzaChlbGVtZW50Ll9pZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYodm0ubWVtYmVyczIubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICB2bS5tZW1iZXJzMi5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgICBzdWJjb250cmFjdG9yLnN0YWZmLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJzdWJjb250cmFjdG9yXCIsc3ViY29udHJhY3Rvcik7XHJcbiAgICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAuY3JlYXRlTmV3U3ViY29udHJhY3RvcihzdWJjb250cmFjdG9yKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwiU3ViLWNvbnRyYWN0b3Igc2F2ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgICAgICB2bS5yZXNldEZpZWxkcygpO1xyXG4gICAgICAgICAgICB2bS5vcGVuUG9wdXAoKTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgc3ViY29udHJhY3Rvci5hdHRyaWJ1dGVzPVtdO1xyXG4gICAgICAgICAgICAkKCcjc3ViLWNvbnRyYWN0b3JfbW9kYWwnKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICB2bS5nZXRTdWJjb250cmFjdG9ycyhcImNyZWF0ZWRcIik7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwiU29tZXRoaW5nIHdlbnQgd3JvbmdcIik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdm0ucmVzZXRGaWVsZHM9KCk9PntcclxuICAgICAgICAgIHZtLnN1YmNvbnRyYWN0b3I9e307XHJcbiAgICAgICAgICBpZih2bS5tZW1iZXJzMi5sZW5ndGg+MCl7XHJcbiAgICAgICAgICB3aGlsZSh2bS5tZW1iZXJzMi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZtLm1lbWJlcnMyLnBvcCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgJCgnI3RhZ3NlbGVjdCcpLnZhbCgnJyk7XHJcbiAgICAgICAgICAkKCcjdGFnc2VsZWN0JykudHJpZ2dlcignY2hhbmdlJyk7XHJcbiAgICAgICAgICAkc2NvcGUuRklMRUlNRz11bmRlZmluZWQ7XHJcbiAgICAgICAgICAkKCcjdGFnc2VsZWN0JykudmFsKCdbXScpO1xyXG4gICAgICAgICAgJCgnI21lbWJlcm5hbWUnKS52YWwoJycpO1xyXG4gICAgICAgICAgJCgnI21lbWJlcmVtYWlsJykudmFsKCcnKTtcclxuICAgICAgICAgICQoJyNtZW1iZXJkaWFsQ29kZScpLnZhbCgnJyk7XHJcbiAgICAgICAgICAkKCcjbWVtYmVycGhvbmVOdW1iZXInKS52YWwoJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uY3JlYXRlU3lzdGVtVGFnPWZ1bmN0aW9uKHN5c3RlbVRhZyl7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhzeXN0ZW1UYWcpO1xyXG4gICAgICAgICBpZihzeXN0ZW1UYWc9PXVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcInBsZWFzZSBlbnRlciBUYWcgbmFtZVwiKTsgXHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgIGFwaUZhY3Rvcnkuc2F2ZVN5c3RlbVRhZyhzeXN0ZW1UYWcpXHJcbiAgICAgICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICAgICAgICQoJyN0YWdhZGRfbW9kYWwnKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgICQoJyNzdWItY29udHJhY3Rvcl9tb2RhbCcpLm1vZGFsKCdzaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgdm0uc3lzdGVtVGFnPXt9O1xyXG4gICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKFwibmV3IHN5c3RlbSB0YWcgYWRkZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgIHZtLmdldFRhZ3MoKTtcclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9KS5jYXRjaChlPT57XHJcbiAgICAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwic29tZXRoaW5nIHdlbnQgd3JvbmdcIik7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgIH1cclxuICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5jb250cmFjdHM9W1xyXG4gICAgICAgICAge3RpdGxlOidTdWJjb250cmFjdG9yIEEnLHRpbWU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxpbWc6J2Fzc2V0cy9pbWFnZXMvc3VwcGxpZXJzL3RyZWVfbG9nby5wbmcnfSxcclxuICAgICAgICAgIHt0aXRsZTonU3ViY29udHJhY3RvciBBJyx0aW1lOidTZXAgMjUsIDIwMTggYXQgNDowMCBQTScsaW1nOidhc3NldHMvaW1hZ2VzL3N1cHBsaWVycy90cmVlX2xvZ28ucG5nJ30sXHJcbiAgICAgICAgICB7dGl0bGU6J1N1YmNvbnRyYWN0b3IgQScsdGltZTonU2VwIDI1LCAyMDE4IGF0IDQ6MDAgUE0nLGltZzonYXNzZXRzL2ltYWdlcy9zdXBwbGllcnMvdHJlZV9sb2dvLnBuZyd9LFxyXG4gICAgICAgICAge3RpdGxlOidTdWJjb250cmFjdG9yIEEnLHRpbWU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxpbWc6J2Fzc2V0cy9pbWFnZXMvc3VwcGxpZXJzL3RyZWVfbG9nby5wbmcnfSxcclxuICAgICAgICAgIHt0aXRsZTonU3ViY29udHJhY3RvciBBJyx0aW1lOidTZXAgMjUsIDIwMTggYXQgNDowMCBQTScsaW1nOidhc3NldHMvaW1hZ2VzL3N1cHBsaWVycy90cmVlX2xvZ28ucG5nJ30sXHJcbiAgICAgICAgICB7dGl0bGU6J1N1YmNvbnRyYWN0b3IgQScsdGltZTonU2VwIDI1LCAyMDE4IGF0IDQ6MDAgUE0nLGltZzonYXNzZXRzL2ltYWdlcy9zdXBwbGllcnMvdHJlZV9sb2dvLnBuZyd9XHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5cclxuICAgIH0pKCk7IiwiKCgpID0+IHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJzdWJjb250cmFjdG9yRGV0YWlsQ3RybFwiLCBzdWJjb250cmFjdG9yRGV0YWlsQ3RybCk7XHJcblxyXG4gICAgZnVuY3Rpb24gc3ViY29udHJhY3RvckRldGFpbEN0cmwoXHJcbiAgICAgICAgJHNjb3BlLFxyXG4gICAgICAgICR0aW1lb3V0LFxyXG4gICAgICAgIGF1dGhGYWN0b3J5LFxyXG4gICAgICAgICRzdGF0ZSxcclxuICAgICAgICAkc3RhdGVQYXJhbXMsXHJcbiAgICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgICBOb3RpZmljYXRpb24sXHJcbiAgICAgICAgTmdNYXAsXHJcbiAgICAgICAgZ2xvYmFscyxcclxuICAgICAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlLFxyXG4gICAgICApIHtcclxuICAgICAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgICAgXHJcblxyXG4gICAgICAgIGNvbnN0IHsgbG9nb3V0LHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgICAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcblxyXG4gIFxyXG4gICAgICAgICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICB2bS5zdWJjb250cmFjdG9ySWQgPSAkc3RhdGVQYXJhbXMuaWQ7XHJcbiAgICAgICAgICAkc2NvcGUuZ2V0U3ViY29udHJhY3RvckRldGFpbCA9ICgpID0+IHtcclxuICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgIC5nZXRTdWJjb250cmFjdG9yQnlJZCh2bS5zdWJjb250cmFjdG9ySWQpXHJcbiAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bS5zdWJjb250cmFjdG9yRGF0YSA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5GSUxFSU1HPXZtLnN1YmNvbnRyYWN0b3JEYXRhLnByb2ZpbGVQaWM7XHJcbiAgICAgICAgICAgICAgICAvLyB2bS5lZGl0U3ViY29udHJhY3RvciA9IGFuZ3VsYXIuY29weSh2bS5zdWJjb250cmFjdG9yRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkKCcjZWRpdGRpYWwnKS5zZWxlY3QyKCdkYXRhJywge2lkOiB2bS5lZGl0U3ViY29udHJhY3Rvci5jb250YWN0LmRpYWxDb2RlfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2bS5zdWJjb250cmFjdG9yRGF0YSk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmdldFN1YmNvbnRyYWN0b3JEZXRhaWwoKTtcclxuXHJcbiAgICAgICAgICAgIHZtLmVkaXRTdWJjb250cmFjdG9yTmV4dCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICBpZigkKCcjaG9tZScpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImhvbWVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNwcm9maWxlLXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICQoJyNob21lJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjaG9tZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSBpZigkKCcjcHJvZmlsZS10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcm9maWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0LXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjcHJvZmlsZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjY29udGFjdCcpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgIFxyXG4gICAgXHJcbiAgICAgICAgICAgIHZtLmVkaXRTdWJjb250cmFjdG9yUHJldmlvdXM9KCk9PntcclxuICAgICAgICAgICAgICBpZigkKCcjcHJvZmlsZS10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJob21lXCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjbmF2aWdhdGlvbiB1bCBsaSBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjaG9tZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIH1lbHNlIFxyXG4gICAgICAgICAgICAgIGlmKCQoJyNjb250YWN0LXRhYicpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2ZpbGVcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjbmF2aWdhdGlvbiB1bCBsaSBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkKCcjY29udGFjdCcpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICQoJyNwcm9maWxlJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICAgICAgdm0ub3BlblBvcHVwPSgpPT57XHJcbiAgICAgICAgICAgICAgaWYoJCgnI3Byb2ZpbGUtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaG9tZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI2hvbWUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjcHJvZmlsZS10YWInKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgfWVsc2UgXHJcbiAgICAgICAgICAgICAgaWYoJCgnI2NvbnRhY3QtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvZmlsZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjaG9tZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0LXRhYicpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2dldCBhbGwgbGlzdCBvZiBzeXN0ZW0gdGFnc1xyXG4gICAgICAgICB2bS5nZXRUYWdzID1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAgICAuZ2V0QWxsU3lzdGVtVGFncygpLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICAgICAgICB2bS5BbGxUYWdzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLkFsbFRhZ3MpO1xyXG4gICAgICAgICAgICAgICB9KS5jYXRjaChlPT57XHJcblxyXG4gICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5nZXRUYWdzKCk7XHJcblxyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGdsb2JhbHMuZ2V0Q291bnRyeUNvZGUoKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgIHZtLmdldENvdW50cnlDb2RlID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgdm0ubG9hZENvdW50cnlDb2RlID0gJHF1ZXJ5ID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdm0uYWRkTWVtYmVyID0gZnVuY3Rpb24obmFtZSxtYWlsLGNvZGUscGhubyl7XHJcbiAgICAgICAgICAgICAgdm0uc3ViY29udHJhY3RvckRhdGEuc3RhZmYucHVzaCh7bmFtZTpuYW1lLGVtYWlsOm1haWwsY29udGFjdDp7ZGlhbENvZGU6Y29kZSxwaG9uZU51bWJlcjpwaG5vfX0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlU3RhZmYgPSBmdW5jdGlvbihpbmRleCxhcnJheSl7XHJcbiAgICAgICAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgJHNjb3BlLm9uQ2hhbmdlID0gZnVuY3Rpb24gKGZpbGVzKSB7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgICAgICBpZihmaWxlc1swXSA9PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAkc2NvcGUuRklMRUlNRyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZXNbMF0pO1xyXG4gICAgICAgICAgICAgICRzY29wZS5maWxlRXh0ID0gZmlsZXNbMF0ubmFtZS5zcGxpdChcIi5cIikucG9wKCk7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlU3ViY29udHJhY3RvciA9IGZ1bmN0aW9uKHN1YmNvbnRyYWN0b3IsYXR0cmlidXRlcyl7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coc3ViY29udHJhY3Rvcik7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIGlmKHR5cGVvZiBhdHRyaWJ1dGVzICE9PSBcInVuZGVmaW5lZFwiKXtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGlmKGF0dHJpYnV0ZXMubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICAgICAgaWYoc3ViY29udHJhY3Rvci5hdHRyaWJ1dGVzLmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5mb3JFYWNoKGVsZW1lbnQ9PntcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViY29udHJhY3Rvci5hdHRyaWJ1dGVzLnB1c2goZWxlbWVudC5faWQpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgIHN1YmNvbnRyYWN0b3IuYXR0cmlidXRlcz1bXTtcclxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgICAgICAgICBzdWJjb250cmFjdG9yLmF0dHJpYnV0ZXMucHVzaChlbGVtZW50Ll9pZCk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIGNoYW5nZTogXCIsc3ViY29udHJhY3Rvcik7XHJcblxyXG4gICAgICAgICAgICAgIGFwaUZhY3RvcnkudXBkYXRlU3ViY29udHJhY3RvcihzdWJjb250cmFjdG9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcInVwZGF0ZSBzdWNjZXNzZnVsbC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN1cGRhdGVfbW9kYWwnKS5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U3ViY29udHJhY3RvckRldGFpbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJDb3VsZG4ndCB1cGRhdGUgc3ViY29udHJhY3Rvci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICB9XHJcblxyXG4gICAgfSkoKTsiLCIoKCkgPT4ge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcInN1cHBsaWVyQ3RybFwiLCBzdXBwbGllckN0cmwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1cHBsaWVyQ3RybChcclxuICAgICAgJHNjb3BlLFxyXG4gICAgICAkcm9vdFNjb3BlLFxyXG4gICAgICAkdGltZW91dCxcclxuICAgICAgYXV0aEZhY3RvcnksXHJcbiAgICAgICRzdGF0ZSxcclxuICAgICAgYXBpRmFjdG9yeSxcclxuICAgICAgTm90aWZpY2F0aW9uLFxyXG4gICAgICBnbG9iYWxzLFxyXG4gICAgICBmaWxlTWFuYWdlckZhY3RvcnksXHJcbiAgICAgIFVwbG9hZCxcclxuICAgICAgbG9jYWxTdG9yYWdlU2VydmljZSxcclxuICAgICAgKSB7XHJcbiAgICAgICAgbGV0IHZtID0gdGhpcztcclxuICAgICAgICB2bS5zZWxlY3RlZE1hdGVyaWFscz1bXTtcclxuICAgICAgICB2bS5tZW1iZXJzMj1bXTtcclxuICAgICAgICBjb25zdCB7IGxvZ291dCxkZWJvdW5jZSwgdXNlclN0b3JlIH0gPSBnbG9iYWxzO1xyXG4gICAgICAgICRzY29wZS5hY3RpdmVKdXN0aWZpZWQgPSAwO1xyXG4gICAgIFxyXG4gICAgICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipHZXQgYWxsIHN1cHBsaWVyc2RhdGEgKi9cclxuICAgICAgICB2bS5nZXRTdXBwbGllcnMgPSAodHlwZSkgPT4ge1xyXG4gICAgICAgICAgLyogRm9yIHRvZ2dsaW5nIGFzY2VuZGluZyBhbmQgZGVzY2VuZGluZyBvcmRlciAqL1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAuZ2V0QWxsU3VwcGxpZXJzKHtcclxuICAgICAgICAgICAgICBwYWdlOiAxLFxyXG4gICAgICAgICAgICAgIGNodW5rOiAxMCxcclxuICAgICAgICAgICAgICBzb3J0OiB0eXBlLFxyXG4gICAgICAgICAgICAgLy8gc2VhcmNoOiB2bS5zZWFyY2hUZXh0LFxyXG4gICAgICAgICAgICAgLy8gc29ydFR5cGU6IHZtLnRvZ2dsZU9ialtyZXNvdXJjZV1bdHlwZV1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gdm1bcmVzb3VyY2VdPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgICAvLyB2bVtyZXNvdXJjZSArIFwiQ291bnRcIl0gPSByZXNwLmRhdGEudG90YWw7XHJcbiAgICAgICAgICAgICAgdm0uYWxsU3VwcGxpZXJzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgdm0uc3VwcGllcnNDb3VudCA9IHJlc3AuZGF0YS50b3RhbDtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInN1cHBsaWVycyBhcmU6XCIsdm0uYWxsU3VwcGxpZXJzKTtcclxuICAgICAgICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgIC8vICRzY29wZS5zZWFyY2hpbmdUZXh0PSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICQoXCIjcGFnaW5hdGlvblwiKS5wYWdpbmF0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgaXRlbXM6IHZtLnN1cHBpZXJzQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgIGl0ZW1zT25QYWdlOiAxMCxcclxuICAgICAgICAgICAgICAgICAgY3NzU3R5bGU6IFwibGlnaHQtdGhlbWVcIixcclxuICAgICAgICAgICAgICAgICAgaHJlZlRleHRQcmVmaXg6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICBvcmRlcmluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiAxLFxyXG4gICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICBvblBhZ2VDbGljazogZnVuY3Rpb24ocGFnZSwgZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAgICAgICAgIC5nZXRBbGxTdXBwbGllcnMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVuazogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvcnQ6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvcnRUeXBlOiB2bS50b2dnbGVPYmpbdHlwZV1cclxuICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYWxsU3VwcGxpZXJzID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qIEluaXRpYWxseSBzb3J0IGlzc3VlIGluIGRlc2NlbmRpbmcgb3JkZXIgKi9cclxuICAgICAgIHZtLmdldFN1cHBsaWVycyhcImNyZWF0ZWRcIik7XHJcblxyXG4gICAgICAgIC8qKkluc2VydCBTdXBwbGllciBmdW5jdGlvbnMgKi9cclxuICAgICAgICAkc2NvcGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoZmlsZXMpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoZmlsZXNbMF0gPT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgICAkc2NvcGUuRklMRUlNRyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZXNbMF0pO1xyXG4gICAgICAgICAgJHNjb3BlLmZpbGVFeHQgPSBmaWxlc1swXS5uYW1lLnNwbGl0KFwiLlwiKS5wb3AoKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnbG9iYWxzLmdldENvdW50cnlDb2RlKCkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLmdldENvdW50cnlDb2RlID0gcmVzcC5kYXRhO1xyXG4gICAgICAgICBcclxuICAgICAgICAgIHZtLmxvYWRDb3VudHJ5Q29kZSA9ICRxdWVyeSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwLmRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFwaUZhY3RvcnkubGlzdEFsbE1hdGVyaWFscygpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5hbGxNYXRlcmlhbHMgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2bS5hZGRNYXRlcmlhbCA9IGZ1bmN0aW9uKGl0ZW0pe1xyXG4gICAgICAgICAgdm0uc2VsZWN0ZWRNYXRlcmlhbHMucHVzaChpdGVtKTtcclxuICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLmFkZE1lbWJlciA9IGZ1bmN0aW9uKG5hbWUsbWFpbCxjb2RlLHBobm8pe1xyXG4gICAgICAgICAgdm0ubWVtYmVyczIucHVzaCh7bmFtZTpuYW1lLGVtYWlsOm1haWwsY29udGFjdDp7ZGlhbENvZGU6Y29kZSxwaG9uZU51bWJlcjpwaG5vfX0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICBcclxuXHJcbiAgICAgICAgdm0uYWRkU3VwcGxpZXJOZXh0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgaWYoJCgnI2hvbWUnKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImhvbWVcIik7XHJcbiAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAkKCcjcHJvZmlsZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgXHJcbiAgICAgICAgICAgJCgnI2hvbWUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgJCgnI2hvbWUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICQoJyNwcm9maWxlJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICQoJyNwcm9maWxlJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKCQoJyNwcm9maWxlLXRhYicpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvZmlsZVwiKTtcclxuICAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJCgnI2NvbnRhY3QtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAkKCcjcHJvZmlsZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcjY29udGFjdCcpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uYWRkU3VwcGxpZXJQcmV2aW91cz0oKT0+e1xyXG4gICAgICAgICAgaWYoJCgnI3Byb2ZpbGUtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJob21lXCIpO1xyXG4gICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI2hvbWUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgfWVsc2UgXHJcbiAgICAgICAgICBpZigkKCcjY29udGFjdC10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2ZpbGVcIik7XHJcbiAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICQoJyNwcm9maWxlLXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAkKCcjY29udGFjdCcpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5vcGVuUG9wdXA9KCk9PntcclxuICAgICAgICAgIGlmKCQoJyNwcm9maWxlLXRhYicpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaG9tZVwiKTtcclxuICAgICAgICAgICAkKCcjbmF2aWdhdGlvbiB1bCBsaSBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICQoJyNob21lLXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICQoJyNwcm9maWxlLXRhYicpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgIH1lbHNlIFxyXG4gICAgICAgICAgaWYoJCgnI2NvbnRhY3QtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcm9maWxlXCIpO1xyXG4gICAgICAgICAgICAkKCcjbmF2aWdhdGlvbiB1bCBsaSBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAkKCcjaG9tZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJCgnI2NvbnRhY3QtdGFiJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAkKCcjY29udGFjdCcpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIH1cclxuICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgIC8vZGVsZXRlIG1hdGVyaWFsIGZyb20gbGlzdFxyXG4gICAgICAgICAkc2NvcGUuZGVsZXRlTWF0ZXJpYWwgPSBmdW5jdGlvbihpbmRleCxhcnJheSl7XHJcbiAgICAgICAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgICRzY29wZS5kZWxldGVTdGFmZiA9IGZ1bmN0aW9uKGluZGV4LGFycmF5KXtcclxuICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjb3BlLmNyZWF0ZVN1cHBsaWVyID0gZnVuY3Rpb24oc3VwcGxpZXIsbWF0ZXJpYWxzKXtcclxuICAgICAgICAgIHN1cHBsaWVyLnN1cHBsaWVzPVtdO1xyXG4gICAgICAgICAgc3VwcGxpZXIuc3RhZmY9W107XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgaWYobWF0ZXJpYWxzLmxlbmd0aD4wKXtcclxuICAgICAgICAgIG1hdGVyaWFscy5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgICBzdXBwbGllci5zdXBwbGllcy5wdXNoKGVsZW1lbnQuX2lkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZih2bS5tZW1iZXJzMi5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgIHZtLm1lbWJlcnMyLmZvckVhY2goZWxlbWVudD0+e1xyXG4gICAgICAgICAgICAgIHN1cHBsaWVyLnN0YWZmLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgY29uc29sZS5sb2coXCJzdXBwbGllclwiLHN1cHBsaWVyKTtcclxuICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5jcmVhdGVOZXdTdXBwbGllcihzdXBwbGllcilcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIlN1cHBsaWVyIGhhcyBiZWVuIHNhdmVkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICAgICAgICAgICAgdm0ucmVzZXRGaWVsZHMoKTtcclxuICAgICAgICAgICAgdm0ub3BlblBvcHVwKCk7XHJcbiAgICAgICAgICAgIHN1cHBsaWVyLnN1cHBsaWVzPVtdO1xyXG4gICAgICAgICAgICBzdXBwbGllci5zdGFmZj1bXTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgJCgnI3N1cHBsaWVyX21vZGFsJykubW9kYWwoJ2hpZGUnKTtcclxuICAgICAgICAgICAgdm0uZ2V0U3VwcGxpZXJzKFwiY3JlYXRlZFwiKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5yZXNldEZpZWxkcz0oKT0+e1xyXG4gICAgICAgICAgdm0uc3VwcGxpZXI9e307XHJcbiAgICAgICAgICBpZih2bS5tZW1iZXJzMi5sZW5ndGg+MCl7XHJcbiAgICAgICAgICB3aGlsZSh2bS5tZW1iZXJzMi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZtLm1lbWJlcnMyLnBvcCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2bS5zZWxlY3RlZE1hdGVyaWFscz1bXTtcclxuICAgICAgICAkKCcjbWF0ZXJpYWxzZWxlY3QnKS52YWwoJycpO1xyXG4gICAgICAgICQoJyNtYXRlcmlhbHNlbGVjdCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgJHNjb3BlLkZJTEVJTUc9dW5kZWZpbmVkO1xyXG4gICAgICAgICAgJCgnI3RhZ3NlbGVjdCcpLnZhbCgnW10nKTtcclxuICAgICAgICAgICQoJyNtZW1iZXJuYW1lJykudmFsKCcnKTtcclxuICAgICAgICAgICQoJyNtZW1iZXJlbWFpbCcpLnZhbCgnJyk7XHJcbiAgICAgICAgICAkKCcjbWVtYmVyZGlhbENvZGUnKS52YWwoJycpO1xyXG4gICAgICAgICAgJCgnI21lbWJlcnBob25lTnVtYmVyJykudmFsKCcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgICRzY29wZS5jb250cmFjdHM9W1xyXG4gICAgICAgICAge3RpdGxlOidTdWJjb250cmFjdG9yIEEnLHRpbWU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxpbWc6J2Fzc2V0cy9pbWFnZXMvc3VwcGxpZXJzL3RyZWVfbG9nby5wbmcnfSxcclxuICAgICAgICAgIHt0aXRsZTonU3ViY29udHJhY3RvciBBJyx0aW1lOidTZXAgMjUsIDIwMTggYXQgNDowMCBQTScsaW1nOidhc3NldHMvaW1hZ2VzL3N1cHBsaWVycy90cmVlX2xvZ28ucG5nJ30sXHJcbiAgICAgICAgICB7dGl0bGU6J1N1YmNvbnRyYWN0b3IgQScsdGltZTonU2VwIDI1LCAyMDE4IGF0IDQ6MDAgUE0nLGltZzonYXNzZXRzL2ltYWdlcy9zdXBwbGllcnMvdHJlZV9sb2dvLnBuZyd9LFxyXG4gICAgICAgICAge3RpdGxlOidTdWJjb250cmFjdG9yIEEnLHRpbWU6J1NlcCAyNSwgMjAxOCBhdCA0OjAwIFBNJyxpbWc6J2Fzc2V0cy9pbWFnZXMvc3VwcGxpZXJzL3RyZWVfbG9nby5wbmcnfSxcclxuICAgICAgICAgIHt0aXRsZTonU3ViY29udHJhY3RvciBBJyx0aW1lOidTZXAgMjUsIDIwMTggYXQgNDowMCBQTScsaW1nOidhc3NldHMvaW1hZ2VzL3N1cHBsaWVycy90cmVlX2xvZ28ucG5nJ30sXHJcbiAgICAgICAgICB7dGl0bGU6J1N1YmNvbnRyYWN0b3IgQScsdGltZTonU2VwIDI1LCAyMDE4IGF0IDQ6MDAgUE0nLGltZzonYXNzZXRzL2ltYWdlcy9zdXBwbGllcnMvdHJlZV9sb2dvLnBuZyd9XHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5cclxuICAgIH0pKCk7IiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwic3VwcGxpZXJEZXRhaWxzQ3RybFwiLCBzdXBwbGllckRldGFpbHNDdHJsKTtcclxuICBcclxuICBmdW5jdGlvbiBzdXBwbGllckRldGFpbHNDdHJsKFxyXG4gICAgICAkc2NvcGUsXHJcbiAgICAgICR0aW1lb3V0LFxyXG4gICAgICBhdXRoRmFjdG9yeSxcclxuICAgICAgJHN0YXRlLFxyXG4gICAgICAkc3RhdGVQYXJhbXMsXHJcbiAgICAgIGFwaUZhY3RvcnksXHJcbiAgICAgIE5vdGlmaWNhdGlvbixcclxuICAgICAgTmdNYXAsXHJcbiAgICAgIGdsb2JhbHMsXHJcbiAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICAgICRsb2NhdGlvblxyXG4gICAgKSB7XHJcbiAgICAgIGxldCB2bSA9IHRoaXM7XHJcblxyXG4gICAgICBjb25zdCB7IGxvZ291dCx1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgICBsb2dvdXQoKTtcclxuICAgICAgfVxyXG4gICAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuXHJcbiAgICAgICRzY29wZS5hY3RpdmVDbGFzcyA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuICgkbG9jYXRpb24ucGF0aCgpID09PSBwYXRoKSA/ICdhY3RpdmUnIDogJyc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxvZ291dCgpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZtLnN1cHBsaWVySWQgPSAkc3RhdGVQYXJhbXMuaWQ7XHJcbiAgICAgICAgICAkc2NvcGUuZ2V0U3VwcGxpZXJEZXRhaWwgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAuZ2V0U3VwcGxpZXJCeUlkKHZtLnN1cHBsaWVySWQpXHJcbiAgICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bS5zdXBwbGllckRhdGEgPSByZXNwLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRklMRUlNRz12bS5zdXBwbGllckRhdGEucHJvZmlsZVBpYztcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZtLnN1cHBsaWVyRGF0YSk7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmdldFN1cHBsaWVyRGV0YWlsKCk7XHJcblxyXG5cclxuXHJcbiAgICAgICAgICAgIHZtLmFkZFN1cHBsaWVyTmV4dCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICBpZigkKCcjaG9tZScpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImhvbWVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNwcm9maWxlLXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICQoJyNob21lJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjaG9tZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSBpZigkKCcjcHJvZmlsZS10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcm9maWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0LXRhYicpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjcHJvZmlsZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjY29udGFjdCcpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgXHJcbiAgICAgICAgICAgIHZtLmFkZFN1cHBsaWVyUHJldmlvdXM9KCk9PntcclxuICAgICAgICAgICAgICBpZigkKCcjcHJvZmlsZS10YWInKS5oYXNDbGFzcygnYWN0aXZlJykpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJob21lXCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjbmF2aWdhdGlvbiB1bCBsaSBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjaG9tZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjaG9tZScpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgIH1lbHNlIFxyXG4gICAgICAgICAgICAgIGlmKCQoJyNjb250YWN0LXRhYicpLmhhc0NsYXNzKCdhY3RpdmUnKSl7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInByb2ZpbGVcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjbmF2aWdhdGlvbiB1bCBsaSBhLmFjdGl2ZScpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkKCcjY29udGFjdCcpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjcHJvZmlsZScpLmFkZENsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICQoJyNwcm9maWxlJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICAgICAgdm0ub3BlblBvcHVwPSgpPT57XHJcbiAgICAgICAgICAgICAgaWYoJCgnI3Byb2ZpbGUtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaG9tZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI25hdmlnYXRpb24gdWwgbGkgYS5hY3RpdmUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI2hvbWUtdGFiJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNwcm9maWxlJykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAkKCcjcHJvZmlsZS10YWInKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI3Byb2ZpbGUnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcInNob3dcIik7XHJcbiAgICAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgfWVsc2UgXHJcbiAgICAgICAgICAgICAgaWYoJCgnI2NvbnRhY3QtdGFiJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicHJvZmlsZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNuYXZpZ2F0aW9uIHVsIGxpIGEuYWN0aXZlJykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAkKCcjaG9tZS10YWInKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0LXRhYicpLnJlbW92ZUNsYXNzKFwic2hvd1wiKTtcclxuICAgICAgICAgICAgICAgICQoJyNjb250YWN0JykucmVtb3ZlQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2NvbnRhY3QnKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICQoJyNob21lJykuYWRkQ2xhc3MoXCJzaG93XCIpO1xyXG4gICAgICAgICAgICAgICAgJCgnI2hvbWUnKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZ2xvYmFscy5nZXRDb3VudHJ5Q29kZSgpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5nZXRDb3VudHJ5Q29kZSA9IHJlc3AuZGF0YTtcclxuICAgICAgICAgXHJcbiAgICAgICAgICB2bS5sb2FkQ291bnRyeUNvZGUgPSAkcXVlcnkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUocmVzcC5kYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2bS5hZGRNZW1iZXIgPSBmdW5jdGlvbihuYW1lLG1haWwsY29kZSxwaG5vKXtcclxuICAgICAgICAgIGlmKHZtLnN1cHBsaWVyRGF0YS5zdGFmZil7XHJcbiAgICAgICAgICAgIGlmKHZtLnN1cHBsaWVyRGF0YS5zdGFmZi5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgdm0uc3VwcGxpZXJEYXRhLnN0YWZmLnB1c2goe25hbWU6bmFtZSxlbWFpbDptYWlsLGNvbnRhY3Q6e2RpYWxDb2RlOmNvZGUscGhvbmVOdW1iZXI6cGhub319KTtcclxuICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgIHZtLnN1cHBsaWVyRGF0YS5zdGFmZj1bXTtcclxuICAgICAgICAgICAgICB2bS5zdXBwbGllckRhdGEuc3RhZmYucHVzaCh7bmFtZTpuYW1lLGVtYWlsOm1haWwsY29udGFjdDp7ZGlhbENvZGU6Y29kZSxwaG9uZU51bWJlcjpwaG5vfX0pO1xyXG4gIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICB2bS5zdXBwbGllckRhdGEuc3RhZmY9W107XHJcbiAgICAgICAgICAgIHZtLnN1cHBsaWVyRGF0YS5zdGFmZi5wdXNoKHtuYW1lOm5hbWUsZW1haWw6bWFpbCxjb250YWN0OntkaWFsQ29kZTpjb2RlLHBob25lTnVtYmVyOnBobm99fSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgJHNjb3BlLmRlbGV0ZVN0YWZmID0gZnVuY3Rpb24oaW5kZXgsYXJyYXkpe1xyXG4gICAgICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgIGFwaUZhY3RvcnkubGlzdEFsbE1hdGVyaWFscygpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICB2bS5hbGxNYXRlcmlhbHMgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUub25DaGFuZ2UgPSBmdW5jdGlvbiAoZmlsZXMsaWQpIHtcclxuICAgICAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoZmlsZXNbMF0gPT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgICAkc2NvcGUuRklMRUlNRyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZXNbMF0pO1xyXG4gICAgICAgICAgJHNjb3BlLmZpbGVFeHQgPSBmaWxlc1swXS5uYW1lLnNwbGl0KFwiLlwiKS5wb3AoKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnVwZGF0ZVN1cHBsaWVyID0gZnVuY3Rpb24oc3VwcGxpZXIsbWF0ZXJpYWxzKXtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHN1cHBsaWVyKTtcclxuICAgICAgICAgIGlmKHR5cGVvZiBtYXRlcmlhbHMgIT09IFwidW5kZWZpbmVkXCIpe1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKG1hdGVyaWFscy5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgICAgaWYoc3VwcGxpZXIuc3VwcGxpZXMubGVuZ3RoPjApe1xyXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxzLmZvckVhY2goZWxlbWVudD0+e1xyXG5cclxuICAgICAgICAgICAgICAgICAgc3VwcGxpZXIuc3VwcGxpZXMucHVzaChlbGVtZW50Ll9pZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHZtLnN1cHBsaWVyRGF0YS5zdXBwbGllcz1bXTtcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFscy5mb3JFYWNoKGVsZW1lbnQ9PntcclxuICAgICAgICAgICAgICAgICAgc3VwcGxpZXIuc3VwcGxpZXMucHVzaChlbGVtZW50Ll9pZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBhcGlGYWN0b3J5LnVwZGF0ZVN1cHBsaWVyKHN1cHBsaWVyKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcD0+e1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcInVwZGF0ZSBzdWNjZXNzZnVsbC5cIik7XHJcbiAgICAgICAgICAgICQoJyN1cGRhdGVzdXBwbGllcl9tb2RhbCcpLm1vZGFsKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICRzY29wZS5nZXRTdXBwbGllckRldGFpbCgpO1xyXG4gICAgICAgICAgfSkuY2F0Y2goZT0+e1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJDb3VsZG4ndCB1cGRhdGUgc3VwcGxpZXIuXCIpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICB9XHJcblxyXG4gICAgfSkoKTsiLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmNvbnRyb2xsZXIoXCJzeXN0ZW1UYWdzQ3RybFwiLCBzeXN0ZW1UYWdzQ3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIHN5c3RlbVRhZ3NDdHJsKFxyXG4gICAgJHNjb3BlLFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgICRzdGF0ZSxcclxuICAgICRzdGF0ZVBhcmFtcyxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBOZ01hcCxcclxuICAgIGdsb2JhbHMsXHJcbiAgICBsb2NhbFN0b3JhZ2VTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG5cclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUsIGNvbXBhbnlTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9XHJcbiAgICB2bS51c2VyRGF0YSA9IHVzZXJTdG9yZS5nZXQoKTtcclxuICAgIHZtLklEO1xyXG5cclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZtLmdldFRhZ3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5nZXRBbGxTeXN0ZW1UYWdzKClcclxuICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgIHZtLkFsbFRhZ3MgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHt9KTtcclxuICAgIH07XHJcbiAgICB2bS5nZXRUYWdzKCk7XHJcbiAgICB2bS5jcmVhdGVUYWcgPSBmdW5jdGlvbihzeXN0ZW1UYWcpIHtcclxuICAgICAgY29uc29sZS5sb2coc3lzdGVtVGFnKTtcclxuICAgICAgaWYgKHN5c3RlbVRhZyA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoXCJwbGVhc2UgZW50ZXIgVGFnIG5hbWVcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnNhdmVTeXN0ZW1UYWcoc3lzdGVtVGFnKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICQoXCIjdGFnc19tb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIHZtLnN5c3RlbVRhZyA9IHt9O1xyXG4gICAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIm5ldyBzeXN0ZW0gdGFnIGFkZGVkLlwiKTtcclxuICAgICAgICAgICAgdm0uZ2V0VGFncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgTm90aWZpY2F0aW9uLmVycm9yKFwic29tZXRoaW5nIHdlbnQgd3JvbmdcIik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2bS5kZWxldGVUYWcgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICB2bS5JRCA9IGlkO1xyXG4gICAgICAkKFwiI3RhZ2RlbGV0ZV9tb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcbiAgICB9O1xyXG4gICAgdm0uZGVsZXRlU3lzdGVtVGFnID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAuZGVsZXRlU3lzdGVtVGFnKHZtLklEKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgJChcIiN0YWdkZWxldGVfbW9kYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJzeXN0ZW0gdGFnIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcclxuICAgICAgICAgIHZtLmdldFRhZ3MoKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlNvbWV0aGluZyB3ZW50IHdyb25nXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBnbG9iYWxzLmdldEN1cnJlbmN5KCkudGhlbihyZXNwID0+IHtcclxuICAgICAgdm0uY3VycmVuY2llcyA9IHJlc3AuZGF0YTtcclxuICAgICAgdm0ubG9hZEN1cnJlbmNpZXMgPSAkcXVlcnkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3AuZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiBVcGRhdGUgY29tcGFueSBjdXJyZW5jeSAqL1xyXG5cclxuICAgIHZtLmNob3NlbkNvbXBhbnlDdXJyZW5jeSA9IGNvbXBhbnlTdG9yZS5nZXQoKS5jdXJyZW50Q3VycmVuY3kuY3VycmVuY3lDb2RlO1xyXG5cclxuICAgIHZtLmNoYW5nZUNvbXBhbnlDdXJyZW5jeSA9IGN1cnJlbmN5ID0+IHtcclxuICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgIC5zaG93Q29udmVyc2lvblJhdGUoe1xyXG4gICAgICAgICAgZnJvbTogY29tcGFueVN0b3JlLmdldCgpLmN1cnJlbnRDdXJyZW5jeS5jdXJyZW5jeUNvZGUsXHJcbiAgICAgICAgICB0bzogY3VycmVuY3lcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3AuZGF0YS5jb252ZXJzaW9uRmFjdG9yO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oY29udmVyc2lvbkZhY3RvciA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcclxuICAgICAgICAgICAgXCJDb21wYW55IGN1cnJlbmN5IGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5XCJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICByZXR1cm4gYXBpRmFjdG9yeS5jaGFuZ2VDb21wYW55Q3VycmVuY3koe1xyXG4gICAgICAgICAgICBjb252ZXJzaW9uRmFjdG9yLFxyXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGU6IGN1cnJlbmN5XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgbGV0IHVwZGF0ZWREYXRhID0gT2JqZWN0LmFzc2lnbihjb21wYW55U3RvcmUuZ2V0KCksIHtcclxuICAgICAgICAgICAgY3VycmVudEN1cnJlbmN5OiB7XHJcbiAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBjdXJyZW5jeVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbXBhbnlTdG9yZS5zZXQodXBkYXRlZERhdGEpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwidG9kb0N0cmxcIiwgdG9kb0N0cmwpO1xyXG5cclxuICBmdW5jdGlvbiB0b2RvQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIFVwbG9hZCxcclxuICAgIG1vbWVudFxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuXHJcbiAgICBsZXQgdm0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBsb2dvdXQsIHVzZXJTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgIGlmICghYXV0aEZhY3RvcnkuY2hlY2tVc2VyKCkpIHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZtLmxvZ291dCA9ICgpID0+IHtcclxuICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcbiAgICB2bS5kdW1teSA9IFtcclxuICAgICAgeyBuYW1lOiBcInNlbGVjdCAxLlwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJzZWxlY3QgMi5cIiB9LFxyXG4gICAgICB7IG5hbWU6IFwic2VsZWN0IDMuXCIgfSxcclxuICAgICAgeyBuYW1lOiBcInNlbGVjdCA0LlwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJzZWxlY3QgNS5cIiB9XHJcbiAgICBdO1xyXG5cclxuICAgIHZtLnRvZGF5RGF0ZSA9IG1vbWVudCgpXHJcbiAgICB2bS5kYXRlRm9ybWF0ID0gJ1lZWVkvTU0vREQgaGg6bW06c3MnO1xyXG4gICAgXHJcbiAgICB2bS5jcmVhdGVUb2RvTGlzdCA9IChmb3JtRGF0YSwgdmFsaWQpID0+IHtcclxuICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgJChcIiN0b2RvX21vZGFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgICB2YXIgZGF0YSA9IGZvcm1EYXRhO1xyXG4gICAgICAgIGRhdGEuZGF0ZSA9IG1vbWVudChkYXRhLmRhdGUpLmZvcm1hdCgnWVlZWS9NTS9ERCBoaDptbTpzcycpXHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLmNyZWF0ZVRvZG9MaXN0KGRhdGEpXHJcbiAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGFwaUZhY3RvcnkubGlzdEFsbFRvZG9MaXN0KCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLnRoZW4obGlzdFRvZG9zKVxyXG4gICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihcIlBsZWFzZSBmaWxsIGFsbCB0aGUgZGV0YWlsc1wiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgdm0udG9kYXlEYXRlID0gbmV3IERhdGUoKVxyXG5cclxuICAgIHZtLnJlc2V0Rm9ybSA9IChyZXMpPT57XHJcbiAgICAgIHZtLnRvZG9EYXRhID0ge307XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFwaUZhY3RvcnlcclxuICAgICAgLmdldEFsbE1lbWJlcnNJbkN1cnJlbnRDb21wYW55KHVzZXJTdG9yZS5nZXQoKS5jb21wYW55SWQpXHJcbiAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgIHZtLmNvbXBhbnlVc2VycyA9IHJlc3AuZGF0YS5kYXRhO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmNvbXBhbnlVc2Vycyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgYXBpRmFjdG9yeVxyXG4gICAgICAubGlzdEFsbFRvZG9MaXN0KClcclxuICAgICAgLnRoZW4obGlzdFRvZG9zKVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8qIExvYWQgdG9kb3MgKi9cclxuICAgIGZ1bmN0aW9uIGxpc3RUb2RvcyhyZXNwKSB7XHJcbiAgICAgICRzY29wZS50b2RvX2xpc3QgPSByZXNwLmRhdGEuZGF0YTtcclxuICAgIH1cclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwidG9kb1ZpZXdDdHJsXCIsIHRvZG9WaWV3Q3RybCk7XHJcblxyXG4gIGZ1bmN0aW9uIHRvZG9WaWV3Q3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgJHN0YXRlUGFyYW1zLFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIFVwbG9hZFxyXG4gICkge1xyXG4gICAgLyogUmVxdWlyaW5nIHZhcnMgKi9cclxuXHJcbiAgICAkc2NvcGUudG9kb19saXN0ID0gW1xyXG4gICAgICAgIHsgaW1nOiAnL2Fzc2V0cy9pbWFnZXMvVG8tRG8tSWNvbi5wbmcnLCBzdWJ0aXRsZTogJzEuJywgdGl0bGU6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCxjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LHNlZCBkbyBlaXVzbW9kIHRlbXBvci4nLCB3b3JrOiAnSW4gMSBIb3VyJywgY2xhc3NuYW1lOiAncmVkLWNvbG9yJyB9LFxyXG4gICAgICAgIHsgaW1nOiAnL2Fzc2V0cy9pbWFnZXMvVG8tRG8tSWNvbi5wbmcnLCBzdWJ0aXRsZTogJzIuJywgdGl0bGU6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCxjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LHNlZCBkbyBlaXVzbW9kIHRlbXBvci4nLCB3b3JrOiAnSW4gMSBEYXknLCBjbGFzc25hbWU6ICd5ZWxsb3ctY29sb3InIH0sXHJcbiAgICAgICAgeyBpbWc6ICcvYXNzZXRzL2ltYWdlcy9Uby1Eby1JY29uLnBuZycsIHN1YnRpdGxlOiAnMy4nLCB0aXRsZTogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsc2VkIGRvIGVpdXNtb2QgdGVtcG9yLicsIHdvcms6ICdJbiAxIFdlZWsnLCBjbGFzc25hbWU6ICdncmVlbi1jb2xvcicgfSxcclxuICAgICAgICB7IGltZzogJy9hc3NldHMvaW1hZ2VzL1RvLURvLUljb24ucG5nJywgc3VidGl0bGU6ICc0LicsIHRpdGxlOiAnTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdCxzZWQgZG8gZWl1c21vZCB0ZW1wb3IuJywgd29yazogJ0luIDIgV2Vla3MnLCBjbGFzc25hbWU6ICdncmF5LWNvbG9yJyB9LFxyXG4gICAgICAgIHsgaW1nOiAnL2Fzc2V0cy9pbWFnZXMvVG8tRG8tSWNvbi5wbmcnLCBzdWJ0aXRsZTogJzUuJywgdGl0bGU6ICdMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCxjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LHNlZCBkbyBlaXVzbW9kIHRlbXBvci4nLCB3b3JrOiAnSW4gMyBXZWVrcycsIGNsYXNzbmFtZTogJ2dyYXktY29sb3InIH0sXHJcbiAgICAgICAgeyBpbWc6ICcvYXNzZXRzL2ltYWdlcy9Uby1Eby1JY29uLnBuZycsIHN1YnRpdGxlOiAnNi4nLCB0aXRsZTogJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQsc2VkIGRvIGVpdXNtb2QgdGVtcG9yLicsIHdvcms6ICdJbiA0IFdlZWtzJywgY2xhc3NuYW1lOiAnZ3JheS1jb2xvcicgfVxyXG4gICAgXVxyXG5cclxuICAgIFxyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2bS5sb2dvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgbG9nb3V0KCk7XHJcbiAgICB9O1xyXG4gICAgLyogR2V0IHByb2plY3QgbGlzdCAqL1xyXG4gICAgdm0udXNlckRhdGEgPSB1c2VyU3RvcmUuZ2V0KCk7XHJcblxyXG4gICAgbGV0IHRvZG9MaXN0SWQgPSAkc3RhdGVQYXJhbXMuaWQ7XHJcbiAgICBhcGlGYWN0b3J5Lmxpc3RBbGxUb2RvTGlzdCh0b2RvTGlzdElkKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAkc2NvcGUudG9kbyAgPSByZXNwLmRhdGEuZGF0YTtcclxuICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgIE5vdGlmaWNhdGlvbi5lcnJvcihlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZtLnVwZGF0ZVRvZG8gPSAoZm9ybURhdGEpID0+IHtcclxuICAgICAgdmFyIGRhdGEgPSBmb3JtRGF0YTtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAudXBkYXRlVG9kb0xpc3QodG9kb0xpc3RJZCxkYXRhKVxyXG4gICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgJHNjb3BlLnRvZG8gID0gcmVzcC5kYXRhLmRhdGE7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uc3VjY2VzcyhcIlVwZGF0ZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBOb3RpZmljYXRpb24uZXJyb3IoZXJyLmRhdGEubWVzc2FnZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuY29udHJvbGxlcihcInZpc3VhbFBsYW5uZXJDdHJsXCIsIHZpc3VhbFBsYW5uZXJDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gdmlzdWFsUGxhbm5lckN0cmwoXHJcbiAgICAkc2NvcGUsXHJcbiAgICAkdGltZW91dCxcclxuICAgICRzdGF0ZSxcclxuICAgICRsb2NhdGlvbixcclxuICAgIGdsb2JhbHMsXHJcbiAgICBhdXRoRmFjdG9yeSxcclxuICAgIGFwaUZhY3RvcnksXHJcbiAgICBOb3RpZmljYXRpb24sXHJcbiAgICBjb21tb25WUEZhY3RvcnksXHJcbiAgICB0b29sc1ZQRmFjdG9yeSxcclxuICAgIHNoYXBlc1ZQRmFjdG9yeSxcclxuICAgIGxvY2FsU3RvcmFnZVNlcnZpY2UsXHJcbiAgICBldmVudHNWUEZhY3RvcnksXHJcbiAgICBsYXllcnNWUEZhY3RvcnlcclxuICApIHtcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICBpZiAoIWF1dGhGYWN0b3J5LmNoZWNrVXNlcigpKSB7XHJcbiAgICAgIGxvZ291dCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8kKFwiI2Nob29zZVJvb2ZNb2RhbFwiKS5tb2RhbChcInNob3dcIik7XHJcblxyXG4gICAgLyogRHJhZyBhbmQgZHJvcCAqL1xyXG4gICAgLy8gZHJhZ0VsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJteWRpdlwiKSk7XHJcbiAgICAkKFwiLmRyYWdfZWxlbWVudFwiKS5tb3VzZWRvd24oZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRyYWdFbGVtZW50KFxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgICAuY2xvc2VzdChcImRpdlwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImlkXCIpXHJcbiAgICAgICAgKVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhZ0VsZW1lbnQoZWxtbnQsIGUpIHtcclxuICAgICAgdmFyIHBvczEgPSAwLFxyXG4gICAgICAgIHBvczIgPSAwLFxyXG4gICAgICAgIHBvczMgPSAwLFxyXG4gICAgICAgIHBvczQgPSAwO1xyXG4gICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxtbnQuaWQgKyBcImhlYWRlclwiKSkge1xyXG4gICAgICAgIC8qIGlmIHByZXNlbnQsIHRoZSBoZWFkZXIgaXMgd2hlcmUgeW91IG1vdmUgdGhlIERJViBmcm9tOiovXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgICAgICBlbG1udC5pZCArIFwiaGVhZGVyXCJcclxuICAgICAgICApLm9ubW91c2Vkb3duID0gZHJhZ01vdXNlRG93bjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvKiBvdGhlcndpc2UsIG1vdmUgdGhlIERJViBmcm9tIGFueXdoZXJlIGluc2lkZSB0aGUgRElWOiovXHJcbiAgICAgICAgZWxtbnQub25tb3VzZWRvd24gPSBkcmFnTW91c2VEb3duO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBkcmFnTW91c2VEb3duKGUpIHtcclxuICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIC8vIGdldCB0aGUgbW91c2UgY3Vyc29yIHBvc2l0aW9uIGF0IHN0YXJ0dXA6XHJcbiAgICAgICAgcG9zMyA9IGUuY2xpZW50WDtcclxuICAgICAgICBwb3M0ID0gZS5jbGllbnRZO1xyXG4gICAgICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IGNsb3NlRHJhZ0VsZW1lbnQ7XHJcbiAgICAgICAgLy8gY2FsbCBhIGZ1bmN0aW9uIHdoZW5ldmVyIHRoZSBjdXJzb3IgbW92ZXM6XHJcbiAgICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBlbGVtZW50RHJhZztcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZWxlbWVudERyYWcoZSkge1xyXG4gICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBuZXcgY3Vyc29yIHBvc2l0aW9uOlxyXG4gICAgICAgIHBvczEgPSBwb3MzIC0gZS5jbGllbnRYO1xyXG4gICAgICAgIHBvczIgPSBwb3M0IC0gZS5jbGllbnRZO1xyXG4gICAgICAgIHBvczMgPSBlLmNsaWVudFg7XHJcbiAgICAgICAgcG9zNCA9IGUuY2xpZW50WTtcclxuICAgICAgICAvLyBzZXQgdGhlIGVsZW1lbnQncyBuZXcgcG9zaXRpb246XHJcbiAgICAgICAgZWxtbnQuc3R5bGUudG9wID0gZWxtbnQub2Zmc2V0VG9wIC0gcG9zMiArIFwicHhcIjtcclxuICAgICAgICBlbG1udC5zdHlsZS5sZWZ0ID0gZWxtbnQub2Zmc2V0TGVmdCAtIHBvczEgKyBcInB4XCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGNsb3NlRHJhZ0VsZW1lbnQoKSB7XHJcbiAgICAgICAgLyogc3RvcCBtb3Zpbmcgd2hlbiBtb3VzZSBidXR0b24gaXMgcmVsZWFzZWQ6Ki9cclxuICAgICAgICBkb2N1bWVudC5vbm1vdXNldXAgPSBudWxsO1xyXG4gICAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qIGRyYWcgYW5kIGRyb3AgLWVuZCAqL1xyXG5cclxuICAgIC8qIEF1dGhvcml6ZSB1c2VyICovXHJcbiAgICB2YXIgdXNlclByZXNlbnQgPSBhdXRoRmFjdG9yeS5jaGVja1VzZXIoKTtcclxuICAgIGlmICghdXNlclByZXNlbnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qICRtZERpYWxvZy5zaG93KHtcclxuICAgICAgICBjb250ZW50RWxlbWVudDogJyN2aXN1YWxQbGFubmVyRGlhbG9nJyxcclxuICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcclxuICAgICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiBmYWxzZSxcclxuICAgICAgICBlc2NhcGVUb0Nsb3NlOiBmYWxzZVxyXG4gICAgICB9KTsgKi9cclxuXHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgLy8gV2FpdCBmb3IgdGhlIGRvY3VtZW50IHRvIGxvYWQgYmVmb3JlIHNldHRpbmcgdXAgdGhlIGNhbnZhcyBzdGFnZVxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXHJcbiAgICAgICAgUHJlbG9hZCBmdW5jdGlvbmFsaXR5XHJcbiAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgdm0uaGlkZUluaXRNb2RhbCA9IGZhbHNlO1xyXG5cclxuICAgIHZtLnJvb2ZQbGFucyA9IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KFwicm9vZlBsYW5zXCIpO1xyXG5cclxuICAgIHZtLnNlbGVjdFBsYW4gPSBmdW5jdGlvbihwbGFuKSB7XHJcbiAgICAgIHZtLnNlbGVjdGVkUGxhbiA9IHBsYW4uX2lkO1xyXG4gICAgICBsb2FkUGxhbm5lcihwbGFuKTtcclxuICAgICAgdm0uaGlkZUluaXRNb2RhbCA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgdm0uc2VsZWN0UGxhbihsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcInNlbGVjdGVkUGxhblwiKSk7XHJcbiAgICAvLyB2bS5jaG9vc2VQbGFuID0gZnVuY3Rpb24ocGxhbklkKSB7XHJcbiAgICAvLyAgIHZhciBwbGFuID0gdm0ucm9vZlBsYW5zLmZpbHRlcihmdW5jdGlvbih4KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHguX2lkID09PSBwbGFuSWQ7XHJcbiAgICAvLyAgIH0pWzBdO1xyXG4gICAgLy8gICAkKFwiI2Nob29zZVJvb2ZNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAvLyAgIHZtLnNlbGVjdFBsYW4ocGxhbik7XHJcbiAgICAvLyB9O1xyXG5cclxuICAgIC8vIHZtLmNob29zZVBsYW4obG9jYWxTdG9yYWdlU2VydmljZS5nZXQoXCJzZWxlY3RlZFBsYW5cIikpO1xyXG5cclxuICAgIHZtLmNsb3NlVmlzdWFsUGxhbm5lciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAkKFwiI2Nob29zZVJvb2ZNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICRzdGF0ZS5nbyhcImRhc2hib2FyZFwiKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXHJcbiAgICAgICBFbmQgb2YgUHJlbG9hZCBmdW5jdGlvbmFsaXR5XHJcbiAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGxvYWRQbGFubmVyKHJvb2ZQbGFuKSB7XHJcbiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIFxyXG4gICAgICAgICAgRXNzZW50aWFsIHZhcnNcclxuICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgLyogSGVscGVyIHZhcnMgKi9cclxuXHJcbiAgICAgIHZhciBsb2FkRnJvbUpzb24gPSByb29mUGxhbi5wbGFubmVyRGF0YVxyXG4gICAgICAgID8gcm9vZlBsYW4ucGxhbm5lckRhdGEuaW5pdGlhbGl6ZWRcclxuICAgICAgICAgID8gdHJ1ZVxyXG4gICAgICAgICAgOiBmYWxzZVxyXG4gICAgICAgIDogZmFsc2U7XHJcblxyXG4gICAgICAvKiBFeHBvc2Ugc2hhcGUgc2VsZWN0aW9uIG1ldGhvZGRzICovXHJcblxyXG4gICAgICB2YXIgc2VsZWN0ZWRTaGFwZSA9IGNvbW1vblZQRmFjdG9yeS5zZWxlY3RlZFNoYXBlKCk7XHJcblxyXG4gICAgICAvKiBDb2xvciBwaWNrZXIgY29uZmlnICovXHJcblxyXG4gICAgICB2YXIgY29sb3JQaWNrZXIgPSB0b29sc1ZQRmFjdG9yeS5jb2xvclBpY2tlcigpO1xyXG4gICAgICAvKiBtYWtlIHRoaXMgb2JqZWN0IGF2YWlsYWJsZSB0byBzaGFwZSBmYWN0b3J5IHNvIGl0IGNhbiBmZXRjaCB0aGUgcHJvcHMgKi9cclxuICAgICAgc2hhcGVzVlBGYWN0b3J5LmdldFNoYXBlVG9vbHMoY29sb3JQaWNrZXIpO1xyXG5cclxuICAgICAgdm0uc2hhcGVQcm9wcyA9IHtcclxuICAgICAgICBjb2xvclR5cGU6IFwic3Ryb2tlQ29sb3JcIixcclxuICAgICAgICBzdHJva2VDb2xvcjogXCJyZ2JhKDAgLDAgLCAwICwgMSlcIixcclxuICAgICAgICBmaWxsQ29sb3I6IFwicmdiYSgyNTUsIDI1NSwgMjU1LCAwLjU3KVwiLFxyXG4gICAgICAgIHN0cm9rZVdpZHRoOiAxXHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvKiBDb2xvciBQaWNrZXIgT3B0aW9ucyAqL1xyXG5cclxuICAgICAgdm0uY3BPcHRpb25zID0ge1xyXG4gICAgICAgIHN3YXRjaDogdHJ1ZSxcclxuICAgICAgICBpbnB1dENsYXNzOiBcImgtMzBcIixcclxuICAgICAgICBmb3JtYXQ6IFwicmdiXCIsXHJcbiAgICAgICAgY2FzZTogXCJsb3dlclwiLFxyXG4gICAgICAgIGFscGhhOiB0cnVlXHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvKiBDb2xvciBQaWNrZXIgRXZlbnRzICovXHJcbiAgICAgIHZtLmNwRXZlbnRzID0ge1xyXG4gICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbihhcGksIGNvbG9yLCAkZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBvYmogPSB7fTtcclxuICAgICAgICAgIG9iai5zdHJva2UgPSB2bS5zaGFwZVByb3BzLnN0cm9rZUNvbG9yO1xyXG4gICAgICAgICAgb2JqLmZpbGwgPSB2bS5zaGFwZVByb3BzLmZpbGxDb2xvcjtcclxuICAgICAgICAgIGNvbG9yUGlja2VyLnNldChvYmopO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIGJvdW5kIHRvIG5nIGNoYW5nZSBvZiB0aGUgc2xpZGVyICovXHJcbiAgICAgIHZtLmNoYW5nZVN0cm9rZVdpZHRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY29sb3JQaWNrZXIuc2V0KHtcclxuICAgICAgICAgIHN0cm9rZVdpZHRoOiB2bS5zaGFwZVByb3BzLnN0cm9rZVdpZHRoXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvKiBFbmQgb2YgY29sb3IgcGlja2VyIGNvbmZpZyAqL1xyXG5cclxuICAgICAgLyogQ3JlYXRpbmcgdGhlIHN0YWdlICovXHJcblxyXG4gICAgICB2YXIgc3RhZ2UgPSBjb21tb25WUEZhY3RvcnkuY3JlYXRlU3RhZ2UoXHJcbiAgICAgICAgXCJzdGFnZVwiLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoXHJcbiAgICAgICAgfSxcclxuICAgICAgICByb29mUGxhbi5wbGFubmVyRGF0YVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLyogQ2hlY2sgaWYgcm9vZlBsYW5zIGhhcyBleGlzdGluZyBkcmF3aW5ncyAqL1xyXG5cclxuICAgICAgdmFyIHN0YWdlRXZlbnRzID0gZXZlbnRzVlBGYWN0b3J5LnN0YWdlRXZlbnRzKHN0YWdlKTtcclxuXHJcbiAgICAgIHN0YWdlRXZlbnRzLnJlZ2lzdGVyKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8qIHJlZ2lzdGVyIG1vdXNlIG1vdmUgZXZlbnQgZm9yIHN0YWdlICovXHJcbiAgICAgICAgdm0ucG9pbnRlclBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgeDogc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCkueCxcclxuICAgICAgICAgIHk6IHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKiBJbml0aWFsaXppbmcgZHJhdyBzdGF0ZSAqL1xyXG5cclxuICAgICAgdmFyIGRyYXdTdGF0ZSA9IGNvbW1vblZQRmFjdG9yeS5kcmF3U3RhdGUoKTtcclxuXHJcbiAgICAgICRzY29wZS4kb24oXCJkcmF3U3RhdGVDaGFuZ2VcIiwgZnVuY3Rpb24oZSwgZHJhd1N0YXRlcykge1xyXG4gICAgICAgIHZtLmN1cnJlbnREcmF3U3RhdGUgPSBkcmF3U3RhdGVzO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qIENyZWF0aW5nIHRoZSBiYXNlIGxheWVyICovXHJcbiAgICAgIHZhciBiYXNlTGF5ZXIgPSBsb2FkRnJvbUpzb25cclxuICAgICAgICA/IHN0YWdlLmdldENoaWxkcmVuKClbMF1cclxuICAgICAgICA6IGxheWVyc1ZQRmFjdG9yeS5jcmVhdGVMYXllcihzdGFnZSk7XHJcblxyXG4gICAgICB2YXIgcHJvY2Vzc1N0b3JlID0gbGF5ZXJzVlBGYWN0b3J5LmluaXRpYXRlUHJvY2VzcyhzdGFnZSwgYmFzZUxheWVyKTtcclxuXHJcbiAgICAgIHZhciBzZWxlY3Rpb25TdG9yZSA9IGNvbW1vblZQRmFjdG9yeS5zZWxlY3Rpb25TdG9yZSgpO1xyXG5cclxuICAgICAgLyogSW5pdGlhbGl6aW5nIHRyYW5zZm9ybWVyIHN0b3JlIGZvciBzaGFwZXMgKi9cclxuXHJcbiAgICAgIHZhciB0cmFuc2Zvcm1lclN0b3JlID0gY29tbW9uVlBGYWN0b3J5LnRyYW5zZm9ybWVycyhiYXNlTGF5ZXIpO1xyXG5cclxuICAgICAgLyogQWRkaW5nIHJvb2YgcGxhbiBpbWFnZSB0byB0aGUgYmFzZSBsYXllciAqL1xyXG5cclxuICAgICAgLyogIEluaXRpYWxpemluZyBjYWxpYnJhdG9yICovXHJcblxyXG4gICAgICB2YXIgY2FsaWJyYXRvciA9IHNoYXBlc1ZQRmFjdG9yeS5jYWxpYnJhdG9yKHN0YWdlLCBiYXNlTGF5ZXIpO1xyXG5cclxuICAgICAgdmFyIGNhbGlicmF0aW9uU3RhdGUgPSBjb21tb25WUEZhY3RvcnkuY2FsaWJyYXRpb25TdGF0ZSgpO1xyXG5cclxuICAgICAgLyogSW5pdGlhbGl6aW5nIG1ldHJpYyBmdW5jdGlvbiAqL1xyXG5cclxuICAgICAgdmFyIG1ldHJpY3MgPSB0b29sc1ZQRmFjdG9yeS5tZXRyaWNzKCk7XHJcblxyXG4gICAgICB2bS5zaG93UGFuZWwgPSBmYWxzZTtcclxuICAgICAgdm0uem9vbUxldmVsID0gMTAwO1xyXG4gICAgICB2bS5zaGFwZUluZm87XHJcblxyXG4gICAgICAvKiBTZXR0aW5nIHVwIHRoZSBjYWxpYnJhdGlvbiBhbmQgbGF5ZXJzIHZhbHVlIHRvIGJpbmQgaXQgaW4gdGhlIHZpZXcgKi9cclxuICAgICAgaWYgKGxvYWRGcm9tSnNvbikge1xyXG4gICAgICAgIGlmIChyb29mUGxhbi5wbGFubmVyRGF0YSAmJiByb29mUGxhbi5wbGFubmVyRGF0YS5jYWxpYnJhdGlvbikge1xyXG4gICAgICAgICAgY2FsaWJyYXRpb25TdGF0ZS5zZXQocm9vZlBsYW4ucGxhbm5lckRhdGEuY2FsaWJyYXRpb24pO1xyXG4gICAgICAgICAgLyogTG9hZCBQcm9jZXNzIGlmIGF2YWlsYWJsZSAqL1xyXG4gICAgICAgICAgdmFyIGxvYWRlZFByb2Nlc3NlcyA9IHN0YWdlXHJcbiAgICAgICAgICAgIC5nZXRDaGlsZHJlbigpWzBdXHJcbiAgICAgICAgICAgIC5nZXRDaGlsZHJlbigpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAvcHJvY2VzcyovLnRlc3QoeC5uYW1lKCkpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIGlmIChsb2FkZWRQcm9jZXNzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBwcm9jZXNzU3RvcmUubG9hZFByb2Nlc3Nlcyhsb2FkZWRQcm9jZXNzZXMpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcHJvY2Vzc1N0b3JlLmNyZWF0ZVByb2Nlc3MoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyb29mUGxhbi5wbGFubmVyRGF0YSAmJiByb29mUGxhbi5wbGFubmVyRGF0YS5jb3VudERhdGEpIHtcclxuICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5sb2FkU2hhcGVJZChyb29mUGxhbi5wbGFubmVyRGF0YS5jb3VudERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwcm9jZXNzU3RvcmUuY3JlYXRlUHJvY2VzcygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBCaW5kaW5nIGNhbGlicmF0aW9uIGRhdGEgdG8gdmlldyAqL1xyXG4gICAgICB2bS5jYWxpYnJhdGlvbkRhdGEgPSBjYWxpYnJhdGlvblN0YXRlLmdldCgpO1xyXG5cclxuICAgICAgdm0uZm9ybWF0Q2FsaWJyYXRpb24gPSBmdW5jdGlvbih2YWwpIHtcclxuICAgICAgICByZXR1cm4gdmFsLnRvRml4ZWQoMyk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvKiBCaW5kaW5nIHByb2Nlc3MgZGF0YSB0byB2aWV3ICovXHJcbiAgICAgIHZtLnByb2Nlc3NlcyA9IHByb2Nlc3NTdG9yZS5nZXRQcm9jZXNzZXMoKTtcclxuXHJcbiAgICAgIC8qIEluaXRpYWxpemluZyBhc3NvY2lhdGlvbnMgbW9kdWxlICovXHJcblxyXG4gICAgICB2bS5hc3NvY2lhdGlvbnMgPSBjb21tb25WUEZhY3RvcnkuYXNzb2NpYXRpb25zKCk7XHJcblxyXG4gICAgICAvKiBJbml0aWFsaXppbmcgcm9vZiBwbGFuIGltYWdlICovXHJcblxyXG4gICAgICB2YXIgaW1hZ2VPYmogPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgaW1hZ2VPYmouY3Jvc3NPcmlnaW4gPSBcIkFub255bW91c1wiO1xyXG5cclxuICAgICAgaWYgKHJvb2ZQbGFuLnBsYW5uZXJEYXRhICYmIHJvb2ZQbGFuLnBsYW5uZXJEYXRhLmpzb25TdHJpbmcpIHtcclxuICAgICAgICBpbWFnZU9iai5zcmMgPSByb29mUGxhbi5hc3NldE9iai51cmw7XHJcbiAgICAgICAgaW1hZ2VPYmoub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgaW1hZ2VDb250YWluZXIgPSBiYXNlTGF5ZXIuZ2V0KFwiI2JnSW1hZ2VcIilbMF07XHJcbiAgICAgICAgICBpbWFnZUNvbnRhaW5lci5pbWFnZShpbWFnZU9iaik7XHJcblxyXG4gICAgICAgICAgdm0uaW1hZ2VQcm9wcyA9IHtcclxuICAgICAgICAgICAgeDogTWF0aC5yb3VuZChpbWFnZUNvbnRhaW5lci53aWR0aCgpKSxcclxuICAgICAgICAgICAgeTogTWF0aC5yb3VuZChpbWFnZUNvbnRhaW5lci5oZWlnaHQoKSlcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBzdGFnZS5kcmF3KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbWFnZU9iai5zcmMgPSByb29mUGxhbi5hc3NldE9iai51cmw7XHJcblxyXG4gICAgICAgIGltYWdlT2JqLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgLyogU2V0dGluZyBpbWFnZSBwcm9wcyAqL1xyXG4gICAgICAgICAgdmFyIGltYWdlSGVpZ2h0ID0gTWF0aC5yb3VuZChzdGFnZS5oZWlnaHQoKSAtIDc1KTtcclxuICAgICAgICAgIHZhciBhc3BlY3RSYXRpbyA9IGltYWdlT2JqLmhlaWdodCAvIGltYWdlSGVpZ2h0O1xyXG4gICAgICAgICAgdmFyIGltYWdlV2lkdGggPSBNYXRoLnJvdW5kKGltYWdlT2JqLndpZHRoIC8gYXNwZWN0UmF0aW8pO1xyXG5cclxuICAgICAgICAgIHZtLmltYWdlUHJvcHMgPSB7XHJcbiAgICAgICAgICAgIHg6IGltYWdlV2lkdGgsXHJcbiAgICAgICAgICAgIHk6IGltYWdlSGVpZ2h0XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHZhciBiZ0ltYWdlID0gbmV3IEtvbnZhLkltYWdlKHtcclxuICAgICAgICAgICAgaW1hZ2U6IGltYWdlT2JqLFxyXG4gICAgICAgICAgICBuYW1lOiBcImJnSW1hZ2VcIixcclxuICAgICAgICAgICAgaWQ6IFwiYmdJbWFnZVwiLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGltYWdlSGVpZ2h0LFxyXG4gICAgICAgICAgICBzaGFkb3dPZmZzZXRYOiAxLFxyXG4gICAgICAgICAgICBzaGFkb3dPZmZzZXRZOiAxLFxyXG4gICAgICAgICAgICBzaGFkb3dPcGFjaXR5OiAwLjUsXHJcbiAgICAgICAgICAgIHg6IHN0YWdlLndpZHRoKCkgLyAyIC0gaW1hZ2VXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgIC8qIENlbnRlcmluZyB0aGUgaW1hZ2Ugb24gdGhlIHN0YWdlICovXHJcbiAgICAgICAgICAgIHk6IDIwLFxyXG4gICAgICAgICAgICB3aWR0aDogaW1hZ2VXaWR0aFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgYmdJbWFnZS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgLy8gYWRkIHRoZSBzaGFwZSB0byB0aGUgbGF5ZXJcclxuICAgICAgICAgIGJhc2VMYXllci5hZGQoYmdJbWFnZSk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgLy8gbW92ZSBCRyBsYXllciB0byBib3R0b21cclxuICAgICAgICAgIGJhc2VMYXllci5tb3ZlVG9Cb3R0b20oKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBJbml0aWF0aW5nIGFjdGlvbiBzdGF0ZXMgZm9yIHVuZG8gYW5kIHJlZG8gKi9cclxuICAgICAgdmFyIGFjdGlvblN0YXRlcyA9IGNvbW1vblZQRmFjdG9yeS5hY3Rpb25TdGF0ZXMoKTtcclxuXHJcbiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIFxyXG4gICAgICAgICAgRW5kIG9mIGVzc2VudGlhbCB2YXJzXHJcbiAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcclxuICAgICAgICAgIFJlZ2lzdGVyaW5nIGV2ZW50cyBcclxuICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgdmFyIHdpbmRvd0V2ZW50ID0gZXZlbnRzVlBGYWN0b3J5LndpbmRvd0V2ZW50cyh3aW5kb3cpO1xyXG4gICAgICB3aW5kb3dFdmVudC5yZWdpc3RlcihzdGFnZSk7XHJcbiAgICAgIHZtLmhpc3RvcnlQb3MgPSB7XHJcbiAgICAgICAgeDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHk6IHVuZGVmaW5lZFxyXG4gICAgICB9O1xyXG4gICAgICAvKiBFdmVudCBsaXN0ZW5lciBmb3Igem9vbSBmdW5jdGlvbmFsaXR5ICovXHJcblxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB2YXIgc2NhbGVCeSA9IDEuMTU7XHJcblxyXG4gICAgICAgIC8qIERpc2FibGUgc2Nyb2xsIG9ubHkgb24gdmlzdWFsIHBsYW5uZXIgc3RhdGUgKi9cclxuICAgICAgICAkc3RhdGUuJGN1cnJlbnQubmFtZSA9PT0gXCJ2aXN1YWxQbGFubmVyXCIgJiZcclxuICAgICAgICAgIC8qIEFsc28gYWxsb3cgc2Nyb2xsIGluc2lkZSBwb3AtdXBzICovXHJcbiAgICAgICAgICAhL21vZGFsLW9wZW4vLnRlc3QoXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXS5jbGFzc05hbWVcclxuICAgICAgICAgICkgJiZcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLyogQ2VudGVyIHBvc2l0aW9uICovXHJcblxyXG4gICAgICAgIHZhciBjZW50ZXJZID0gTWF0aC5yb3VuZChzdGFnZS5oZWlnaHQoKSAvIDIpLFxyXG4gICAgICAgICAgY2VudGVyWCA9IE1hdGgucm91bmQoc3RhZ2Uud2lkdGgoKSAvIDIpO1xyXG5cclxuICAgICAgICBpZiAoZS5jdHJsS2V5KSB7XHJcbiAgICAgICAgICB2YXIgb2xkU2NhbGUgPSBiYXNlTGF5ZXIuc2NhbGVYKCk7XHJcbiAgICAgICAgICB2YXIgbW91c2VQb2ludFRvID0ge1xyXG4gICAgICAgICAgICB4OlxyXG4gICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLnggLyBvbGRTY2FsZSAtXHJcbiAgICAgICAgICAgICAgYmFzZUxheWVyLngoKSAvIG9sZFNjYWxlLFxyXG4gICAgICAgICAgICB5OlxyXG4gICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLnkgLyBvbGRTY2FsZSAtIGJhc2VMYXllci55KCkgLyBvbGRTY2FsZVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB2YXIgbmV3U2NhbGUgPSBlLmRlbHRhWSA8IDAgPyBvbGRTY2FsZSAqIHNjYWxlQnkgOiBvbGRTY2FsZSAvIHNjYWxlQnk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoe1xyXG4gICAgICAgICAgICB4OiBuZXdTY2FsZSxcclxuICAgICAgICAgICAgeTogbmV3U2NhbGVcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHZhciBuZXdQb3MgPSB7XHJcbiAgICAgICAgICAgIHg6XHJcbiAgICAgICAgICAgICAgLShtb3VzZVBvaW50VG8ueCAtIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLnggLyBuZXdTY2FsZSkgKlxyXG4gICAgICAgICAgICAgIG5ld1NjYWxlLFxyXG4gICAgICAgICAgICB5OlxyXG4gICAgICAgICAgICAgIC0obW91c2VQb2ludFRvLnkgLSBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKS55IC8gbmV3U2NhbGUpICpcclxuICAgICAgICAgICAgICBuZXdTY2FsZVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAvKiBDaGFuZ2UgaW1hZ2UgcmVzb2x1dGlvbiB3aXRoIHNjYWxlICovXHJcbiAgICAgICAgICB2YXIgaW1hZ2VQcm9wcyA9IHtcclxuICAgICAgICAgICAgeTogTWF0aC5yb3VuZChiYXNlTGF5ZXIuZmluZChcIiNiZ0ltYWdlXCIpWzBdLmhlaWdodCgpICogbmV3U2NhbGUpLFxyXG4gICAgICAgICAgICB4OiBNYXRoLnJvdW5kKGJhc2VMYXllci5maW5kKFwiI2JnSW1hZ2VcIilbMF0ud2lkdGgoKSAqIG5ld1NjYWxlKVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZtLmltYWdlUHJvcHMgPSBpbWFnZVByb3BzO1xyXG5cclxuICAgICAgICAgIHZtLnpvb21MZXZlbCA9IE1hdGgucm91bmQoYmFzZUxheWVyLnNjYWxlKCkueCAqIDEwMCk7XHJcbiAgICAgICAgICB0b29sc1ZQRmFjdG9yeS5zY2FsZVRyYW5zZm9ybWVyQmFzZWRPblpvb20oYmFzZUxheWVyKTtcclxuXHJcbiAgICAgICAgICAvLyBhZGRpbmcgem9vbSBsZXZlbCBmb3IgZGlzcGxheVxyXG4gICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLnBvc2l0aW9uKG5ld1Bvcyk7XHJcbiAgICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT09IFwiQ0FOVkFTXCIpIHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5jYW5jZWxEcmF3aW5nKCk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgZHJhd1N0YXRlLnJlc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qIFpvb20gdXNpbmcgYnV0dG9uICovXHJcblxyXG4gICAgICB2bS56b29tQnV0dG9uID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIC8vIDAgLSBpbiAsIDEgLSBvdXRcclxuXHJcbiAgICAgICAgdmFyIGNlbnRlclkgPSBNYXRoLnJvdW5kKHN0YWdlLmhlaWdodCgpIC8gMiksXHJcbiAgICAgICAgICBjZW50ZXJYID0gTWF0aC5yb3VuZChzdGFnZS53aWR0aCgpIC8gMik7XHJcbiAgICAgICAgdmFyIHNjYWxlQnkgPSAxLjE1O1xyXG4gICAgICAgIHZhciBvbGRTY2FsZSA9IGJhc2VMYXllci5zY2FsZVgoKTtcclxuICAgICAgICB2YXIgbW91c2VQb2ludFRvID0ge1xyXG4gICAgICAgICAgeDogY2VudGVyWCAvIG9sZFNjYWxlIC0gYmFzZUxheWVyLngoKSAvIG9sZFNjYWxlLFxyXG4gICAgICAgICAgeTogY2VudGVyWSAvIG9sZFNjYWxlIC0gYmFzZUxheWVyLnkoKSAvIG9sZFNjYWxlXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbmV3U2NhbGUgPSB0eXBlID4gMCA/IG9sZFNjYWxlICogc2NhbGVCeSA6IG9sZFNjYWxlIC8gc2NhbGVCeTtcclxuICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoe1xyXG4gICAgICAgICAgeDogbmV3U2NhbGUsXHJcbiAgICAgICAgICB5OiBuZXdTY2FsZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBuZXdQb3MgPSB7XHJcbiAgICAgICAgICB4OiAtKG1vdXNlUG9pbnRUby54IC0gY2VudGVyWCAvIG5ld1NjYWxlKSAqIG5ld1NjYWxlLFxyXG4gICAgICAgICAgeTogLShtb3VzZVBvaW50VG8ueSAtIGNlbnRlclkgLyBuZXdTY2FsZSkgKiBuZXdTY2FsZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qIENoYW5nZSBpbWFnZSByZXNvbHV0aW9uIHdpdGggc2NhbGUgKi9cclxuICAgICAgICB2YXIgaW1hZ2VQcm9wcyA9IHtcclxuICAgICAgICAgIHk6IE1hdGgucm91bmQoYmFzZUxheWVyLmZpbmQoXCIjYmdJbWFnZVwiKVswXS5oZWlnaHQoKSAqIG5ld1NjYWxlKSxcclxuICAgICAgICAgIHg6IE1hdGgucm91bmQoYmFzZUxheWVyLmZpbmQoXCIjYmdJbWFnZVwiKVswXS53aWR0aCgpICogbmV3U2NhbGUpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5pbWFnZVByb3BzID0gaW1hZ2VQcm9wcztcclxuICAgICAgICB0b29sc1ZQRmFjdG9yeS5zY2FsZVRyYW5zZm9ybWVyQmFzZWRPblpvb20oYmFzZUxheWVyKTtcclxuICAgICAgICB2bS56b29tTGV2ZWwgPSBNYXRoLnJvdW5kKGJhc2VMYXllci5zY2FsZSgpLnggKiAxMDApO1xyXG5cclxuICAgICAgICBiYXNlTGF5ZXIucG9zaXRpb24obmV3UG9zKTtcclxuICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLnpvb21TbGlkZXIgPSBmdW5jdGlvbihwZXJjZW50YWdlKSB7XHJcbiAgICAgICAgdmFyIGNlbnRlclkgPSBNYXRoLnJvdW5kKHN0YWdlLmhlaWdodCgpIC8gMiksXHJcbiAgICAgICAgICBjZW50ZXJYID0gTWF0aC5yb3VuZChzdGFnZS53aWR0aCgpIC8gMik7XHJcblxyXG4gICAgICAgIHZhciBvbGRTY2FsZSA9IGJhc2VMYXllci5zY2FsZVgoKTtcclxuICAgICAgICB2YXIgbW91c2VQb2ludFRvID0ge1xyXG4gICAgICAgICAgeDogY2VudGVyWCAvIG9sZFNjYWxlIC0gYmFzZUxheWVyLngoKSAvIG9sZFNjYWxlLFxyXG4gICAgICAgICAgeTogY2VudGVyWSAvIG9sZFNjYWxlIC0gYmFzZUxheWVyLnkoKSAvIG9sZFNjYWxlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG5ld1NjYWxlID0gcGVyY2VudGFnZSAvIDEwMDtcclxuICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoe1xyXG4gICAgICAgICAgeDogbmV3U2NhbGUsXHJcbiAgICAgICAgICB5OiBuZXdTY2FsZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBuZXdQb3MgPSB7XHJcbiAgICAgICAgICB4OiAtKG1vdXNlUG9pbnRUby54IC0gY2VudGVyWCAvIG5ld1NjYWxlKSAqIG5ld1NjYWxlLFxyXG4gICAgICAgICAgeTogLShtb3VzZVBvaW50VG8ueSAtIGNlbnRlclkgLyBuZXdTY2FsZSkgKiBuZXdTY2FsZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8qIENoYW5nZSBpbWFnZSByZXNvbHV0aW9uIHdpdGggc2NhbGUgKi9cclxuICAgICAgICB2YXIgaW1hZ2VQcm9wcyA9IHtcclxuICAgICAgICAgIHk6IE1hdGgucm91bmQoYmFzZUxheWVyLmZpbmQoXCIjYmdJbWFnZVwiKVswXS5oZWlnaHQoKSAqIG5ld1NjYWxlKSxcclxuICAgICAgICAgIHg6IE1hdGgucm91bmQoYmFzZUxheWVyLmZpbmQoXCIjYmdJbWFnZVwiKVswXS53aWR0aCgpICogbmV3U2NhbGUpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5pbWFnZVByb3BzID0gaW1hZ2VQcm9wcztcclxuICAgICAgICB0b29sc1ZQRmFjdG9yeS5zY2FsZVRyYW5zZm9ybWVyQmFzZWRPblpvb20oYmFzZUxheWVyKTtcclxuICAgICAgICB2bS56b29tTGV2ZWwgPSBNYXRoLnJvdW5kKGJhc2VMYXllci5zY2FsZSgpLnggKiAxMDApO1xyXG5cclxuICAgICAgICBiYXNlTGF5ZXIucG9zaXRpb24obmV3UG9zKTtcclxuICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIGZ1bmN0aW9uIHRvIHJlc2V0IHpvb20gKi9cclxuXHJcbiAgICAgIHZtLnJlc2V0Wm9vbSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZtLnpvb21MZXZlbCA9IDEwMDtcclxuICAgICAgICBiYXNlTGF5ZXIucG9zaXRpb24oe1xyXG4gICAgICAgICAgeDogMCxcclxuICAgICAgICAgIHk6IDBcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoe1xyXG4gICAgICAgICAgeDogMSxcclxuICAgICAgICAgIHk6IDFcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdGFnZS5iYXRjaERyYXcoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBiYXNlTGF5ZXJFdmVudCA9IGV2ZW50c1ZQRmFjdG9yeS5sYXllckV2ZW50cyhiYXNlTGF5ZXIpO1xyXG5cclxuICAgICAgLyogRGVmYXVsdCBiYXNlbGF5ZXIgY2xpY2sgZXZlbnQgKi9cclxuICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTmFtZSA9PT0gXCJJbWFnZVwiKSB7XHJcbiAgICAgICAgICB0cmFuc2Zvcm1lclN0b3JlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgICAgdm0uY2xvc2VJbmZvV2lkZ2V0KCk7XHJcbiAgICAgICAgICB2bS5jbG9zZVRleHRJbmZvV2lkZ2V0KCk7XHJcbiAgICAgICAgICBzZWxlY3RlZFNoYXBlLnJlc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8qIEV2ZW50IHdyYXBwZXJzICovXHJcblxyXG4gICAgICBmdW5jdGlvbiByZWN0YW5nbGVFdmVudFdyYXBwZXIoc2hhcGVPYmplY3QsIHNoYXBlVHlwZSwgcHJvY2Vzcykge1xyXG4gICAgICAgIHZhciByZWN0YW5nbGVFdmVudCA9IGV2ZW50c1ZQRmFjdG9yeS5zaGFwZUV2ZW50cyhcclxuICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlXHJcbiAgICAgICAgKTsgLyogQ3JlYXRlIGFuIGV2ZW50IG9iaiBmb3IgdGhlIHNoYXBlICovXHJcbiAgICAgICAgaWYgKCFwcm9jZXNzKSB7XHJcbiAgICAgICAgICAvKiBEbyBub3QgY3JlYXRlIHByb2Nlc3MgaWYgaXQncyBhbHJlYWR5IGF2YWlsYWJsZSBmcm9tIGpzb24gKi9cclxuICAgICAgICAgIHZhciBjdXJyZW50UHJvY2VzcyA9IHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCk7XHJcbiAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5hZGQoc2hhcGVPYmplY3Quc2hhcGUpO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MubW92ZVRvVG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIGluaXRpYXRpbmcgY3VzdG9tIHRyYW5zZm9ybWVycyAqL1xyXG4gICAgICAgIHZhciBjdXN0b21UcmFuc2Zvcm1lciA9IHRvb2xzVlBGYWN0b3J5LmN1c3RvbVRyYW5zZm9ybWVyKFxyXG4gICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICBiYXNlTGF5ZXIsXHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5zaGFwZSxcclxuICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG4gICAgICAgIGN1c3RvbVRyYW5zZm9ybWVyLnNldChzaGFwZU9iamVjdC5zaGFwZS5wb2ludHMoKSk7XHJcbiAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5hZGQoY3VzdG9tVHJhbnNmb3JtZXIuZ2V0R3JvdXAoKSk7XHJcblxyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAgICBSZWdpc3RlcmluZyBhIGRyYWdtb3ZlIG1ldGhvZCB0byBiaW5kIGRyYWdtb3ZlIGFuZCBjbGljayBldmVudCB0byB0aGUgY3VzdG9tIHRyYW5zZm9ybWVyXHJcbiAgICAgICAgICAqL1xyXG4gICAgICAgIHJlY3RhbmdsZUV2ZW50LnJlZ2lzdGVyKFwiZHJhZ21vdmUuXCIgKyBzaGFwZVR5cGUsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIGN1c3RvbVRyYW5zZm9ybWVyLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IHNoYXBlT2JqZWN0LnNoYXBlLngoKSxcclxuICAgICAgICAgICAgeTogc2hhcGVPYmplY3Quc2hhcGUueSgpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogXHJcbiAgICAgICAgICAgIFJlZ2lzdGVyaW5nIGN1c3RvbSB0cmFuc2Zvcm1lciBldmVudCB0byB0aGUgY3JlYXRlZCBwb2x5Z29uXHJcbiAgICAgICAgICAqL1xyXG4gICAgICAgIHJlY3RhbmdsZUV2ZW50LnJlZ2lzdGVyKFwidHJhbnNmb3JtUG9seWdvblwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBzY2FsZSA9XHJcbiAgICAgICAgICAgIGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudmFsdWUgPT09IDBcclxuICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgIDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICBtZXRyaWNzLnNldFNoYXBlSW5mbyh7XHJcbiAgICAgICAgICAgIGFyZWE6IHRvb2xzVlBGYWN0b3J5LnBvbHlnb25BcmVhKHNoYXBlT2JqZWN0LnNoYXBlLnBvaW50cygpLCBzY2FsZSksXHJcbiAgICAgICAgICAgIHVuaXQ6IGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudW5pdFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICB2bS5zaGFwZUluZm8gPSBtZXRyaWNzLmdldFNoYXBlSW5mbygpO1xyXG5cclxuICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLnBvaW50cyhjdXN0b21UcmFuc2Zvcm1lci5nZXRQb2ludHMoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIEVuYWJsZSB0cmFuc2Zvcm1lciBvbiBzZWxlY3QgKi9cclxuICAgICAgICByZWN0YW5nbGVFdmVudC5yZWdpc3RlcihcImNsaWNrLlwiICsgc2hhcGVUeXBlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgICAgc2VsZWN0ZWRTaGFwZS5zZXQoc2hhcGVPYmplY3Quc2hhcGUpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIGN1c3RvbVRyYW5zZm9ybWVyLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IHNoYXBlT2JqZWN0LnNoYXBlLngoKSxcclxuICAgICAgICAgICAgeTogc2hhcGVPYmplY3Quc2hhcGUueSgpXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB2bS5vcGVuSW5mb1dpZGdldCgpO1xyXG4gICAgICAgICAgdmFyIHNjYWxlID1cclxuICAgICAgICAgICAgY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZSA9PT0gMFxyXG4gICAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgOiBjYWxpYnJhdGlvblN0YXRlLmdldCgpLnZhbHVlO1xyXG5cclxuICAgICAgICAgIG1ldHJpY3Muc2V0U2hhcGVJbmZvKHtcclxuICAgICAgICAgICAgYXJlYTogdG9vbHNWUEZhY3RvcnkucG9seWdvbkFyZWEoc2hhcGVPYmplY3Quc2hhcGUucG9pbnRzKCksIHNjYWxlKSxcclxuICAgICAgICAgICAgdW5pdDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS51bml0XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZtLnNoYXBlSW5mbyA9IG1ldHJpY3MuZ2V0U2hhcGVJbmZvKCk7XHJcbiAgICAgICAgICB2bS5zaG93UGFuZWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuYWRkKGN1c3RvbVRyYW5zZm9ybWVyLmdldEdyb3VwKCkpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogXHJcbiAgICAgICAgICAgIERyYWdzdGFydCBhbmQgZHJhZ2VuZCBtb3ZlbWVudHMgZm9yIHVuZG8vcmVkbyBzdGF0ZXNcclxuICAgICAgICAgICovXHJcbiAgICAgICAgdmFyIG1vdmVtZW50ID0gY29tbW9uVlBGYWN0b3J5Lm1vdmVtZW50KCk7XHJcblxyXG4gICAgICAgIHJlY3RhbmdsZUV2ZW50LnJlZ2lzdGVyKFwiZHJhZ3N0YXJ0LlwiICsgc2hhcGVUeXBlLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBtb3ZlbWVudC5hZGQoXHJcbiAgICAgICAgICAgIGUudGFyZ2V0LmdldFBvc2l0aW9uKClcclxuICAgICAgICAgICk7IC8qIEdyYWJiaW5nIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBtb3ZlbWVudCAqL1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlY3RhbmdsZUV2ZW50LnJlZ2lzdGVyKFwiZHJhZ2VuZC5cIiArIHNoYXBlVHlwZSwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgLyogcHVzaGluZyB0aGUgbW92ZW1lbnQgdG8gYWN0aW9uU3RhdGUgYWZ0ZXIgdGhlIGVuZCBwb3NpdGlvbiAqL1xyXG4gICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLFxyXG4gICAgICAgICAgICAgIHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCksXHJcbiAgICAgICAgICAgICAgXCJtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgbW92ZW1lbnQuYWRkKGUudGFyZ2V0LmdldFBvc2l0aW9uKCkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGVsbGlwc2VFdmVudFdyYXBwZXIoc2hhcGVPYmplY3QsIHNoYXBlVHlwZSwgcHJvY2Vzcykge1xyXG4gICAgICAgIHZhciBlbGxpcHNlRXZlbnQgPSBldmVudHNWUEZhY3Rvcnkuc2hhcGVFdmVudHMoXHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5zaGFwZVxyXG4gICAgICAgICk7IC8qIENyZWF0ZSBhbiBldmVudCBvYmogZm9yIHRoZSBlbGxpcHNlICovXHJcbiAgICAgICAgaWYgKCFwcm9jZXNzKSB7XHJcbiAgICAgICAgICAvKiBEbyBub3QgY3JlYXRlIHByb2Nlc3MgaWYgaXQncyBhbHJlYWR5IGF2YWlsYWJsZSBmcm9tIGpzb24gKi9cclxuICAgICAgICAgIHZhciBjdXJyZW50UHJvY2VzcyA9IHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCk7XHJcbiAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5hZGQoc2hhcGVPYmplY3Quc2hhcGUpO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MubW92ZVRvVG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBFbGxpcHNlIHRyYW5zZm9ybWVyIHNldHVwICovXHJcblxyXG4gICAgICAgIHZhciBlbGxpcHNlVHJhbnNmb21lciA9IHRvb2xzVlBGYWN0b3J5LmVsbGlwc2VUcmFuc2ZvbWVyKFxyXG4gICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICBiYXNlTGF5ZXIsXHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5zaGFwZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGVsbGlwc2VUcmFuc2ZvbWVyLnNldChzaGFwZU9iamVjdC5zaGFwZS5yYWRpdXMoKSk7XHJcbiAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5hZGQoZWxsaXBzZVRyYW5zZm9tZXIuZ2V0R3JvdXAoKSk7XHJcblxyXG4gICAgICAgIGVsbGlwc2VFdmVudC5yZWdpc3RlcihcImRyYWdtb3ZlLmVsbGlwc2VcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgZWxsaXBzZVRyYW5zZm9tZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgZWxsaXBzZVRyYW5zZm9tZXIgPSB0b29sc1ZQRmFjdG9yeS5lbGxpcHNlVHJhbnNmb21lcihcclxuICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgIGJhc2VMYXllcixcclxuICAgICAgICAgICAgc2hhcGVPYmplY3Quc2hhcGVcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBlbGxpcHNlVHJhbnNmb21lci5zZXQoc2hhcGVPYmplY3Quc2hhcGUucmFkaXVzKCkpO1xyXG4gICAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5hZGQoZWxsaXBzZVRyYW5zZm9tZXIuZ2V0R3JvdXAoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGVsbGlwc2VFdmVudC5yZWdpc3RlcihcImNsaWNrLmVsbGlwc2VcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgc2hhcGVPYmplY3Quc2hhcGUubW92ZVRvVG9wKCk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgLyogcmVtb3ZlIG90aGVyIHRyYW5zZm9ybWVycyAqL1xyXG4gICAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICAgIHNlbGVjdGVkU2hhcGUuc2V0KHNoYXBlT2JqZWN0LnNoYXBlKTtcclxuICAgICAgICAgIHZtLm9wZW5JbmZvV2lkZ2V0KCk7XHJcbiAgICAgICAgICAvKiBBcmVhIGNhbGN1bGF0aW9uICovXHJcbiAgICAgICAgICB2YXIgc2NhbGUgPVxyXG4gICAgICAgICAgICBjYWxpYnJhdGlvblN0YXRlLmdldCgpLnZhbHVlID09PSAwXHJcbiAgICAgICAgICAgICAgPyB1bmRlZmluZWRcclxuICAgICAgICAgICAgICA6IGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudmFsdWU7XHJcblxyXG4gICAgICAgICAgbWV0cmljcy5zZXRTaGFwZUluZm8oe1xyXG4gICAgICAgICAgICBhcmVhOiB0b29sc1ZQRmFjdG9yeS5lbGxpcHNlQXJlYShzaGFwZU9iamVjdC5zaGFwZS5yYWRpdXMoKSwgc2NhbGUpLFxyXG4gICAgICAgICAgICB1bml0OiBjYWxpYnJhdGlvblN0YXRlLmdldCgpLnVuaXRcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGVsbGlwc2VUcmFuc2ZvbWVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgIGVsbGlwc2VUcmFuc2ZvbWVyID0gdG9vbHNWUEZhY3RvcnkuZWxsaXBzZVRyYW5zZm9tZXIoXHJcbiAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICBiYXNlTGF5ZXIsXHJcbiAgICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgZWxsaXBzZVRyYW5zZm9tZXIuc2V0KHNoYXBlT2JqZWN0LnNoYXBlLnJhZGl1cygpKTtcclxuICAgICAgICAgIHRyYW5zZm9ybWVyU3RvcmUuYWRkKGVsbGlwc2VUcmFuc2ZvbWVyLmdldEdyb3VwKCkpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuXHJcbiAgICAgICAgICB2bS5zaGFwZUluZm8gPSBtZXRyaWNzLmdldFNoYXBlSW5mbygpO1xyXG4gICAgICAgICAgdm0uc2hvd1BhbmVsID0gdHJ1ZTtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWxsaXBzZUV2ZW50LnJlZ2lzdGVyKFwidHJhbnNmb3JtRWxsaXBzZVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAvKiBBcmVhIGNhbGN1bGF0aW9uICovXHJcblxyXG4gICAgICAgICAgdmFyIHNjYWxlID1cclxuICAgICAgICAgICAgY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZSA9PT0gMFxyXG4gICAgICAgICAgICAgID8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgOiBjYWxpYnJhdGlvblN0YXRlLmdldCgpLnZhbHVlO1xyXG5cclxuICAgICAgICAgIG1ldHJpY3Muc2V0U2hhcGVJbmZvKHtcclxuICAgICAgICAgICAgYXJlYTogdG9vbHNWUEZhY3RvcnkuZWxsaXBzZUFyZWEoc2hhcGVPYmplY3Quc2hhcGUucmFkaXVzKCksIHNjYWxlKSxcclxuICAgICAgICAgICAgdW5pdDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS51bml0XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB2bS5zaGFwZUluZm8gPSBtZXRyaWNzLmdldFNoYXBlSW5mbygpO1xyXG4gICAgICAgICAgdm0uc2hvd1BhbmVsID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgRHJhZ3N0YXJ0IGFuZCBkcmFnZW5kIG1vdmVtZW50cyBmb3IgdW5kby9yZWRvIHN0YXRlc1xyXG4gICAgICAgICAgKi9cclxuICAgICAgICB2YXIgbW92ZW1lbnQgPSBjb21tb25WUEZhY3RvcnkubW92ZW1lbnQoKTtcclxuXHJcbiAgICAgICAgZWxsaXBzZUV2ZW50LnJlZ2lzdGVyKFwiZHJhZ3N0YXJ0LmVsbGlwc2VcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgbW92ZW1lbnQuYWRkKFxyXG4gICAgICAgICAgICBlLnRhcmdldC5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgICApOyAvKiBHcmFiYmluZyBzdGFydCBwb3NpdGlvbiBvZiB0aGUgbW92ZW1lbnQgKi9cclxuICAgICAgICB9KTtcclxuICAgICAgICBlbGxpcHNlRXZlbnQucmVnaXN0ZXIoXCJkcmFnZW5kLmVsbGlwc2VcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgLyogcHVzaGluZyB0aGUgbW92ZW1lbnQgdG8gYWN0aW9uU3RhdGUgYWZ0ZXIgdGhlIGVuZCBwb3NpdGlvbiAqL1xyXG4gICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLFxyXG4gICAgICAgICAgICAgIHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCksXHJcbiAgICAgICAgICAgICAgXCJtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgbW92ZW1lbnQuYWRkKGUudGFyZ2V0LmdldFBvc2l0aW9uKCkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHBvbHlnb25FdmVudFdyYXBwZXIoc2hhcGVPYmplY3QsIHByb2Nlc3MpIHtcclxuICAgICAgICB2YXIgcG9seWdvbkV2ZW50ID0gZXZlbnRzVlBGYWN0b3J5LnNoYXBlRXZlbnRzKFxyXG4gICAgICAgICAgc2hhcGVPYmplY3QucG9seWdvblxyXG4gICAgICAgICk7IC8qIENyZWF0ZSBhbiBldmVudCBvYmogZm9yIHRoZSBwb2x5Z29uICovXHJcbiAgICAgICAgaWYgKCFwcm9jZXNzKSB7XHJcbiAgICAgICAgICAvKiBEbyBub3QgY3JlYXRlIHByb2Nlc3MgaWYgaXQncyBhbHJlYWR5IGF2YWlsYWJsZSBmcm9tIGpzb24gKi9cclxuICAgICAgICAgIHZhciBjdXJyZW50UHJvY2VzcyA9IHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCk7XHJcbiAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5hZGQoc2hhcGVPYmplY3QucG9seWdvbik7XHJcbiAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5tb3ZlVG9Ub3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyogaW5pdGlhdGluZyBjdXN0b20gdHJhbnNmb3JtZXJzICovXHJcbiAgICAgICAgdmFyIGN1c3RvbVRyYW5zZm9ybWVyID0gdG9vbHNWUEZhY3RvcnkuY3VzdG9tVHJhbnNmb3JtZXIoXHJcbiAgICAgICAgICBzdGFnZSxcclxuICAgICAgICAgIGJhc2VMYXllcixcclxuICAgICAgICAgIHNoYXBlT2JqZWN0LnBvbHlnb24sXHJcbiAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3VzdG9tVHJhbnNmb3JtZXIuc2V0KHNoYXBlT2JqZWN0LnBvbHlnb24ucG9pbnRzKCkpO1xyXG4gICAgICAgIHRyYW5zZm9ybWVyU3RvcmUuYWRkKGN1c3RvbVRyYW5zZm9ybWVyLmdldEdyb3VwKCkpO1xyXG5cclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgUmVnaXN0ZXJpbmcgYSBkcmFnbW92ZSBtZXRob2QgdG8gYmluZCBkcmFnbW92ZSBhbmQgY2xpY2sgZXZlbnQgdG8gdGhlIGN1c3RvbSB0cmFuc2Zvcm1lclxyXG4gICAgICAgICAgKi9cclxuICAgICAgICBwb2x5Z29uRXZlbnQucmVnaXN0ZXIoXCJkcmFnbW92ZS5wb2x5Z29uXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIGN1c3RvbVRyYW5zZm9ybWVyLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IHNoYXBlT2JqZWN0LnBvbHlnb24ueCgpLFxyXG4gICAgICAgICAgICB5OiBzaGFwZU9iamVjdC5wb2x5Z29uLnkoKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcG9seWdvbkV2ZW50LnJlZ2lzdGVyKFwiY2xpY2sucG9seWdvblwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBjdXN0b21UcmFuc2Zvcm1lci51cGRhdGUoe1xyXG4gICAgICAgICAgICB4OiBzaGFwZU9iamVjdC5wb2x5Z29uLngoKSxcclxuICAgICAgICAgICAgeTogc2hhcGVPYmplY3QucG9seWdvbi55KClcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgRHJhZ3N0YXJ0IGFuZCBkcmFnZW5kIG1vdmVtZW50cyBmb3IgdW5kby9yZWRvIHN0YXRlc1xyXG4gICAgICAgICAgKi9cclxuICAgICAgICB2YXIgbW92ZW1lbnQgPSBjb21tb25WUEZhY3RvcnkubW92ZW1lbnQoKTtcclxuXHJcbiAgICAgICAgcG9seWdvbkV2ZW50LnJlZ2lzdGVyKFwiZHJhZ3N0YXJ0LnBvbHlnb25cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgbW92ZW1lbnQuYWRkKFxyXG4gICAgICAgICAgICBlLnRhcmdldC5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgICApOyAvKiBHcmFiYmluZyBzdGFydCBwb3NpdGlvbiBvZiB0aGUgbW92ZW1lbnQgKi9cclxuICAgICAgICB9KTtcclxuICAgICAgICBwb2x5Z29uRXZlbnQucmVnaXN0ZXIoXCJkcmFnZW5kLnBvbHlnb25cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgLyogcHVzaGluZyB0aGUgbW92ZW1lbnQgdG8gYWN0aW9uU3RhdGUgYWZ0ZXIgdGhlIGVuZCBwb3NpdGlvbiAqL1xyXG4gICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnBvbHlnb24sXHJcbiAgICAgICAgICAgICAgcHJvY2Vzc1N0b3JlLmdldEN1cnJlbnQoKSxcclxuICAgICAgICAgICAgICBcIm1vdmVcIixcclxuICAgICAgICAgICAgICBtb3ZlbWVudC5hZGQoZS50YXJnZXQuZ2V0UG9zaXRpb24oKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgUmVnaXN0ZXJpbmcgY3VzdG9tIHRyYW5zZm9ybWVyIGV2ZW50IHRvIHRoZSBjcmVhdGVkIHBvbHlnb25cclxuICAgICAgICAgICovXHJcbiAgICAgICAgcG9seWdvbkV2ZW50LnJlZ2lzdGVyKFwidHJhbnNmb3JtUG9seWdvblwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBzY2FsZSA9XHJcbiAgICAgICAgICAgIGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudmFsdWUgPT09IDBcclxuICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgIDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICBtZXRyaWNzLnNldFNoYXBlSW5mbyh7XHJcbiAgICAgICAgICAgIGFyZWE6IHRvb2xzVlBGYWN0b3J5LnBvbHlnb25BcmVhKFxyXG4gICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnBvbHlnb24ucG9pbnRzKCksXHJcbiAgICAgICAgICAgICAgc2NhbGVcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgdW5pdDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS51bml0XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZtLnNoYXBlSW5mbyA9IG1ldHJpY3MuZ2V0U2hhcGVJbmZvKCk7XHJcblxyXG4gICAgICAgICAgc2hhcGVPYmplY3QucG9seWdvbi5wb2ludHMoY3VzdG9tVHJhbnNmb3JtZXIuZ2V0UG9pbnRzKCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBFbmFibGUgdHJhbnNmb3JtZXIgb24gc2VsZWN0ICovXHJcbiAgICAgICAgcG9seWdvbkV2ZW50LnJlZ2lzdGVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5wb2x5Z29uLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIHNlbGVjdGVkU2hhcGUuc2V0KHNoYXBlT2JqZWN0LnBvbHlnb24pO1xyXG4gICAgICAgICAgdm0ub3BlbkluZm9XaWRnZXQoKTtcclxuICAgICAgICAgIHZhciBzY2FsZSA9XHJcbiAgICAgICAgICAgIGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudmFsdWUgPT09IDBcclxuICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgIDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICBtZXRyaWNzLnNldFNoYXBlSW5mbyh7XHJcbiAgICAgICAgICAgIGFyZWE6IHRvb2xzVlBGYWN0b3J5LnBvbHlnb25BcmVhKFxyXG4gICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnBvbHlnb24ucG9pbnRzKCksXHJcbiAgICAgICAgICAgICAgc2NhbGVcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgdW5pdDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS51bml0XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgIHZtLnNoYXBlSW5mbyA9IG1ldHJpY3MuZ2V0U2hhcGVJbmZvKCk7XHJcbiAgICAgICAgICB2bS5zaG93UGFuZWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuYWRkKGN1c3RvbVRyYW5zZm9ybWVyLmdldEdyb3VwKCkpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZnJlZUhhbmRFdmVudFdyYXBwZXIoc2hhcGVPYmplY3QsIHByb2Nlc3MpIHtcclxuICAgICAgICB2YXIgZnJlZUhhbmRFdmVudCA9IGV2ZW50c1ZQRmFjdG9yeS5zaGFwZUV2ZW50cyhcclxuICAgICAgICAgIHNoYXBlT2JqZWN0LnBvbHlnb25cclxuICAgICAgICApOyAvKiBDcmVhdGUgYW4gZXZlbnQgb2JqIGZvciB0aGUgcG9seWdvbiAqL1xyXG4gICAgICAgIGlmICghcHJvY2Vzcykge1xyXG4gICAgICAgICAgLyogRG8gbm90IGNyZWF0ZSBwcm9jZXNzIGlmIGl0J3MgYWxyZWFkeSBhdmFpbGFibGUgZnJvbSBqc29uICovXHJcbiAgICAgICAgICB2YXIgY3VycmVudFByb2Nlc3MgPSBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MuYWRkKHNoYXBlT2JqZWN0LnBvbHlnb24pO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MubW92ZVRvVG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAgICBEcmFnc3RhcnQgYW5kIGRyYWdlbmQgbW92ZW1lbnRzIGZvciB1bmRvL3JlZG8gc3RhdGVzXHJcbiAgICAgICAgICAqL1xyXG4gICAgICAgIHZhciBtb3ZlbWVudCA9IGNvbW1vblZQRmFjdG9yeS5tb3ZlbWVudCgpO1xyXG5cclxuICAgICAgICBmcmVlSGFuZEV2ZW50LnJlZ2lzdGVyKFwiZHJhZ3N0YXJ0LnBvbHlnb25cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgbW92ZW1lbnQuYWRkKFxyXG4gICAgICAgICAgICBlLnRhcmdldC5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgICApOyAvKiBHcmFiYmluZyBzdGFydCBwb3NpdGlvbiBvZiB0aGUgbW92ZW1lbnQgKi9cclxuICAgICAgICB9KTtcclxuICAgICAgICBmcmVlSGFuZEV2ZW50LnJlZ2lzdGVyKFwiZHJhZ2VuZC5wb2x5Z29uXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIC8qIHB1c2hpbmcgdGhlIG1vdmVtZW50IHRvIGFjdGlvblN0YXRlIGFmdGVyIHRoZSBlbmQgcG9zaXRpb24gKi9cclxuICAgICAgICAgIGFjdGlvblN0YXRlcy5wdXNoKFxyXG4gICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICBzdGFnZSxcclxuICAgICAgICAgICAgICBzaGFwZU9iamVjdC5wb2x5Z29uLFxyXG4gICAgICAgICAgICAgIHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCksXHJcbiAgICAgICAgICAgICAgXCJtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgbW92ZW1lbnQuYWRkKGUudGFyZ2V0LmdldFBvc2l0aW9uKCkpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIEVuYWJsZSB0cmFuc2Zvcm1lciBvbiBzZWxlY3QgKi9cclxuICAgICAgICBmcmVlSGFuZEV2ZW50LnJlZ2lzdGVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5wb2x5Z29uLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIHNlbGVjdGVkU2hhcGUuc2V0KHNoYXBlT2JqZWN0LnBvbHlnb24pO1xyXG4gICAgICAgICAgdm0ub3BlbkluZm9XaWRnZXQoKTtcclxuICAgICAgICAgIHZhciBzY2FsZSA9XHJcbiAgICAgICAgICAgIGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudmFsdWUgPT09IDBcclxuICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgIDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZTtcclxuICAgICAgICAgIG1ldHJpY3Muc2V0U2hhcGVJbmZvKHtcclxuICAgICAgICAgICAgYXJlYTogdG9vbHNWUEZhY3RvcnkucG9seWdvbkFyZWEoXHJcbiAgICAgICAgICAgICAgc2hhcGVPYmplY3QucG9seWdvbi5wb2ludHMoKSxcclxuICAgICAgICAgICAgICBzY2FsZVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICB1bml0OiBjYWxpYnJhdGlvblN0YXRlLmdldCgpLnVuaXRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdm0uc2hhcGVJbmZvID0gbWV0cmljcy5nZXRTaGFwZUluZm8oKTtcclxuICAgICAgICAgIHZtLnNob3dQYW5lbCA9IHRydWU7XHJcbiAgICAgICAgICB0cmFuc2Zvcm1lclN0b3JlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbGluZUV2ZW50V3JhcHBlcihzaGFwZU9iamVjdCwgcHJvY2Vzcykge1xyXG4gICAgICAgIHZhciBsaW5lRXZlbnQgPSBldmVudHNWUEZhY3Rvcnkuc2hhcGVFdmVudHMoc2hhcGVPYmplY3QubGluZSk7XHJcblxyXG4gICAgICAgIGlmICghcHJvY2Vzcykge1xyXG4gICAgICAgICAgLyogRG8gbm90IGNyZWF0ZSBwcm9jZXNzIGlmIGl0J3MgYWxyZWFkeSBhdmFpbGFibGUgZnJvbSBqc29uICovXHJcbiAgICAgICAgICB2YXIgY3VycmVudFByb2Nlc3MgPSBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MuYWRkKHNoYXBlT2JqZWN0LmxpbmUpO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MubW92ZVRvVG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAgICBEcmFnc3RhcnQgYW5kIGRyYWdlbmQgbW92ZW1lbnRzIGZvciB1bmRvL3JlZG8gc3RhdGVzXHJcbiAgICAgICAgICAqL1xyXG4gICAgICAgIHZhciBtb3ZlbWVudCA9IGNvbW1vblZQRmFjdG9yeS5tb3ZlbWVudCgpO1xyXG5cclxuICAgICAgICBsaW5lRXZlbnQucmVnaXN0ZXIoXCJkcmFnc3RhcnQubGluZVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBtb3ZlbWVudC5hZGQoXHJcbiAgICAgICAgICAgIGUudGFyZ2V0LmdldFBvc2l0aW9uKClcclxuICAgICAgICAgICk7IC8qIEdyYWJiaW5nIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBtb3ZlbWVudCAqL1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxpbmVFdmVudC5yZWdpc3RlcihcImRyYWdlbmQubGluZVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAvKiBwdXNoaW5nIHRoZSBtb3ZlbWVudCB0byBhY3Rpb25TdGF0ZSBhZnRlciB0aGUgZW5kIHBvc2l0aW9uICovXHJcbiAgICAgICAgICBhY3Rpb25TdGF0ZXMucHVzaChcclxuICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmFjdGlvbkhhbmRsZXIoXHJcbiAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgc2hhcGVPYmplY3QubGluZSxcclxuICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgIFwibW92ZVwiLFxyXG4gICAgICAgICAgICAgIG1vdmVtZW50LmFkZChlLnRhcmdldC5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBFbmFibGUgdHJhbnNmb3JtZXIgb24gc2VsZWN0ICovXHJcbiAgICAgICAgbGluZUV2ZW50LnJlZ2lzdGVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5saW5lLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgICAgc2VsZWN0ZWRTaGFwZS5zZXQoc2hhcGVPYmplY3QubGluZSk7XHJcbiAgICAgICAgICB2bS5vcGVuSW5mb1dpZGdldCgpO1xyXG4gICAgICAgICAgLy92bS5zaG93UGFuZWwgPSB0cnVlO1xyXG4gICAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGZyZWVIYW5kTWFya2VyV3JhcHBlcihzaGFwZU9iamVjdCwgcHJvY2Vzcykge1xyXG4gICAgICAgIHZhciBmcmVlSGFuZEV2ZW50ID0gZXZlbnRzVlBGYWN0b3J5LnNoYXBlRXZlbnRzKFxyXG4gICAgICAgICAgc2hhcGVPYmplY3QucG9seWdvblxyXG4gICAgICAgICk7IC8qIENyZWF0ZSBhbiBldmVudCBvYmogZm9yIHRoZSBwb2x5Z29uICovXHJcbiAgICAgICAgaWYgKCFwcm9jZXNzKSB7XHJcbiAgICAgICAgICAvKiBEbyBub3QgY3JlYXRlIHByb2Nlc3MgaWYgaXQncyBhbHJlYWR5IGF2YWlsYWJsZSBmcm9tIGpzb24gKi9cclxuICAgICAgICAgIHZhciBjdXJyZW50UHJvY2VzcyA9IHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCk7XHJcbiAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5hZGQoc2hhcGVPYmplY3QucG9seWdvbik7XHJcbiAgICAgICAgICBjdXJyZW50UHJvY2Vzcy5tb3ZlVG9Ub3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyogXHJcbiAgICAgICAgICAgIERyYWdzdGFydCBhbmQgZHJhZ2VuZCBtb3ZlbWVudHMgZm9yIHVuZG8vcmVkbyBzdGF0ZXNcclxuICAgICAgICAgICovXHJcbiAgICAgICAgdmFyIG1vdmVtZW50ID0gY29tbW9uVlBGYWN0b3J5Lm1vdmVtZW50KCk7XHJcblxyXG4gICAgICAgIGZyZWVIYW5kRXZlbnQucmVnaXN0ZXIoXCJkcmFnc3RhcnQuZnJlZUhhbmRNYXJrZXJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgbW92ZW1lbnQuYWRkKFxyXG4gICAgICAgICAgICBlLnRhcmdldC5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgICApOyAvKiBHcmFiYmluZyBzdGFydCBwb3NpdGlvbiBvZiB0aGUgbW92ZW1lbnQgKi9cclxuICAgICAgICB9KTtcclxuICAgICAgICBmcmVlSGFuZEV2ZW50LnJlZ2lzdGVyKFwiZHJhZ2VuZC5mcmVlSGFuZE1hcmtlclwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAvKiBwdXNoaW5nIHRoZSBtb3ZlbWVudCB0byBhY3Rpb25TdGF0ZSBhZnRlciB0aGUgZW5kIHBvc2l0aW9uICovXHJcbiAgICAgICAgICBhY3Rpb25TdGF0ZXMucHVzaChcclxuICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmFjdGlvbkhhbmRsZXIoXHJcbiAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgc2hhcGVPYmplY3QucG9seWdvbixcclxuICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgIFwibW92ZVwiLFxyXG4gICAgICAgICAgICAgIG1vdmVtZW50LmFkZChlLnRhcmdldC5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBFbmFibGUgdHJhbnNmb3JtZXIgb24gc2VsZWN0ICovXHJcbiAgICAgICAgZnJlZUhhbmRFdmVudC5yZWdpc3RlcihcImNsaWNrLmZyZWVIYW5kTWFya2VyXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2hhcGVPYmplY3QucG9seWdvbi5tb3ZlVG9Ub3AoKTtcclxuICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcblxyXG4gICAgICAgICAgc2VsZWN0ZWRTaGFwZS5zZXQoc2hhcGVPYmplY3QucG9seWdvbik7XHJcbiAgICAgICAgICB2bS5vcGVuSW5mb1dpZGdldCgpO1xyXG5cclxuICAgICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBiZXppZXJFdmVudFdyYXBwZXIoc2hhcGVPYmplY3QsIHByb2Nlc3MpIHtcclxuICAgICAgICB2YXIgYmV6aWVyRXZlbnQgPSBldmVudHNWUEZhY3Rvcnkuc2hhcGVFdmVudHMoXHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5saW5lXHJcbiAgICAgICAgKTsgLyogQ3JlYXRlIGFuIGV2ZW50IG9iaiBmb3IgdGhlIHBvbHlnb24gKi9cclxuICAgICAgICBpZiAoIXByb2Nlc3MpIHtcclxuICAgICAgICAgIC8qIERvIG5vdCBjcmVhdGUgcHJvY2VzcyBpZiBpdCdzIGFscmVhZHkgYXZhaWxhYmxlIGZyb20ganNvbiAqL1xyXG4gICAgICAgICAgdmFyIGN1cnJlbnRQcm9jZXNzID0gcHJvY2Vzc1N0b3JlLmdldEN1cnJlbnQoKTtcclxuICAgICAgICAgIGN1cnJlbnRQcm9jZXNzLmFkZChzaGFwZU9iamVjdC5saW5lKTtcclxuICAgICAgICAgIGN1cnJlbnRQcm9jZXNzLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBpbml0aWF0aW5nIGN1c3RvbSB0cmFuc2Zvcm1lcnMgKi9cclxuICAgICAgICB2YXIgYmV6aWVyVHJhbnNmb3JtZXIgPSB0b29sc1ZQRmFjdG9yeS5iZXppZXJUcmFuc2Zvcm1lcihcclxuICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgYmFzZUxheWVyLFxyXG4gICAgICAgICAgc2hhcGVPYmplY3QubGluZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYmV6aWVyVHJhbnNmb3JtZXIuc2V0KHNoYXBlT2JqZWN0LmxpbmUucG9pbnRzKCkpO1xyXG4gICAgICAgIHRyYW5zZm9ybWVyU3RvcmUuYWRkKGJlemllclRyYW5zZm9ybWVyLmdldEdyb3VwKCkpO1xyXG5cclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgUmVnaXN0ZXJpbmcgYSBkcmFnbW92ZSBtZXRob2QgdG8gYmluZCBkcmFnbW92ZSBhbmQgY2xpY2sgZXZlbnQgdG8gdGhlIGN1c3RvbSB0cmFuc2Zvcm1lclxyXG4gICAgICAgICAgKi9cclxuICAgICAgICBiZXppZXJFdmVudC5yZWdpc3RlcihcImRyYWdtb3ZlLnBvbHlnb25cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgYmV6aWVyVHJhbnNmb3JtZXIudXBkYXRlKHtcclxuICAgICAgICAgICAgeDogc2hhcGVPYmplY3QubGluZS54KCksXHJcbiAgICAgICAgICAgIHk6IHNoYXBlT2JqZWN0LmxpbmUueSgpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBiZXppZXJFdmVudC5yZWdpc3RlcihcImNsaWNrLnBvbHlnb25cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgYmV6aWVyVHJhbnNmb3JtZXIudXBkYXRlKHtcclxuICAgICAgICAgICAgeDogc2hhcGVPYmplY3QubGluZS54KCksXHJcbiAgICAgICAgICAgIHk6IHNoYXBlT2JqZWN0LmxpbmUueSgpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogXHJcbiAgICAgICAgICAgIERyYWdzdGFydCBhbmQgZHJhZ2VuZCBtb3ZlbWVudHMgZm9yIHVuZG8vcmVkbyBzdGF0ZXNcclxuICAgICAgICAgICovXHJcbiAgICAgICAgdmFyIG1vdmVtZW50ID0gY29tbW9uVlBGYWN0b3J5Lm1vdmVtZW50KCk7XHJcblxyXG4gICAgICAgIGJlemllckV2ZW50LnJlZ2lzdGVyKFwiZHJhZ3N0YXJ0LnBvbHlnb25cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgbW92ZW1lbnQuYWRkKFxyXG4gICAgICAgICAgICBlLnRhcmdldC5nZXRQb3NpdGlvbigpXHJcbiAgICAgICAgICApOyAvKiBHcmFiYmluZyBzdGFydCBwb3NpdGlvbiBvZiB0aGUgbW92ZW1lbnQgKi9cclxuICAgICAgICB9KTtcclxuICAgICAgICBiZXppZXJFdmVudC5yZWdpc3RlcihcImRyYWdlbmQucG9seWdvblwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAvKiBwdXNoaW5nIHRoZSBtb3ZlbWVudCB0byBhY3Rpb25TdGF0ZSBhZnRlciB0aGUgZW5kIHBvc2l0aW9uICovXHJcbiAgICAgICAgICBhY3Rpb25TdGF0ZXMucHVzaChcclxuICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmFjdGlvbkhhbmRsZXIoXHJcbiAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgc2hhcGVPYmplY3QubGluZSxcclxuICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgIFwibW92ZVwiLFxyXG4gICAgICAgICAgICAgIG1vdmVtZW50LmFkZChlLnRhcmdldC5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8qIFxyXG4gICAgICAgICAgICBSZWdpc3RlcmluZyBjdXN0b20gdHJhbnNmb3JtZXIgZXZlbnQgdG8gdGhlIGNyZWF0ZWQgcG9seWdvblxyXG4gICAgICAgICAgKi9cclxuICAgICAgICBiZXppZXJFdmVudC5yZWdpc3RlcihcInRyYW5zZm9ybUJlemllclwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNoYXBlT2JqZWN0LmxpbmUucG9pbnRzKGJlemllclRyYW5zZm9ybWVyLmdldFBvaW50cygpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLyogRW5hYmxlIHRyYW5zZm9ybWVyIG9uIHNlbGVjdCAqL1xyXG4gICAgICAgIGJlemllckV2ZW50LnJlZ2lzdGVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzaGFwZU9iamVjdC5saW5lLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIHNlbGVjdGVkU2hhcGUuc2V0KHNoYXBlT2JqZWN0LmxpbmUpO1xyXG4gICAgICAgICAgdm0ub3BlbkluZm9XaWRnZXQoKTtcclxuICAgICAgICAgIHZhciBzY2FsZSA9XHJcbiAgICAgICAgICAgIGNhbGlicmF0aW9uU3RhdGUuZ2V0KCkudmFsdWUgPT09IDBcclxuICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgIDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICBtZXRyaWNzLnNldFNoYXBlSW5mbyh7XHJcbiAgICAgICAgICAgIGFyZWE6IHRvb2xzVlBGYWN0b3J5LnBvbHlnb25BcmVhKHNoYXBlT2JqZWN0LmxpbmUucG9pbnRzKCksIHNjYWxlKSxcclxuICAgICAgICAgICAgdW5pdDogY2FsaWJyYXRpb25TdGF0ZS5nZXQoKS51bml0XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZtLnNoYXBlSW5mbyA9IG1ldHJpY3MuZ2V0U2hhcGVJbmZvKCk7XHJcbiAgICAgICAgICB2bS5zaG93UGFuZWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuYWRkKGJlemllclRyYW5zZm9ybWVyLmdldEdyb3VwKCkpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gdGV4dEV2ZW50V3JhcHBlcihncm91cCwgcHJvY2Vzcykge1xyXG4gICAgICAgIHZhciB0ZXh0RXZlbnQgPSBldmVudHNWUEZhY3Rvcnkuc2hhcGVFdmVudHMoXHJcbiAgICAgICAgICBncm91cFxyXG4gICAgICAgICk7IC8qIENyZWF0ZSBhbiBldmVudCBvYmogZm9yIHRoZSBzaGFwZSAqL1xyXG4gICAgICAgIGlmICghcHJvY2Vzcykge1xyXG4gICAgICAgICAgLyogRG8gbm90IGNyZWF0ZSBwcm9jZXNzIGlmIGl0J3MgYWxyZWFkeSBhdmFpbGFibGUgZnJvbSBqc29uICovXHJcbiAgICAgICAgICB2YXIgY3VycmVudFByb2Nlc3MgPSBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpO1xyXG4gICAgICAgICAgY3VycmVudFByb2Nlc3MuYWRkKGdyb3VwKTtcclxuICAgICAgICAgIGN1cnJlbnRQcm9jZXNzLm1vdmVUb1RvcCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaW5pdGlhdGluZyBjdXN0b20gdHJhbnNmb3JtZXJzICovXHJcbiAgICAgICAgdmFyIGN1c3RvbVRyYW5zZm9ybWVyID0gdG9vbHNWUEZhY3RvcnkuY3VzdG9tVHJhbnNmb3JtZXIoXHJcbiAgICAgICAgICBzdGFnZSxcclxuICAgICAgICAgIGJhc2VMYXllcixcclxuICAgICAgICAgIGdyb3VwLFxyXG4gICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBncm91cC5nZXRDaGlsZHJlbigpWzBdO1xyXG4gICAgICAgIHZhciB0ZXh0ID0gZ3JvdXAuZ2V0Q2hpbGRyZW4oKVsxXTtcclxuXHJcbiAgICAgICAgY3VzdG9tVHJhbnNmb3JtZXIuc2V0KHdyYXBwZXIucG9pbnRzKCkpO1xyXG4gICAgICAgIHRyYW5zZm9ybWVyU3RvcmUuYWRkKGN1c3RvbVRyYW5zZm9ybWVyLmdldEdyb3VwKCkpO1xyXG5cclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgUmVnaXN0ZXJpbmcgYSBkcmFnbW92ZSBtZXRob2QgdG8gYmluZCBkcmFnbW92ZSBhbmQgY2xpY2sgZXZlbnQgdG8gdGhlIGN1c3RvbSB0cmFuc2Zvcm1lclxyXG4gICAgICAgICAgKi9cclxuICAgICAgICB0ZXh0RXZlbnQucmVnaXN0ZXIoXCJkcmFnbW92ZS50ZXh0R3JvdXBcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgY3VzdG9tVHJhbnNmb3JtZXIudXBkYXRlKHtcclxuICAgICAgICAgICAgeDogZ3JvdXAueCgpLFxyXG4gICAgICAgICAgICB5OiBncm91cC55KClcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBcclxuICAgICAgICAgICAgUmVnaXN0ZXJpbmcgY3VzdG9tIHRyYW5zZm9ybWVyIGV2ZW50IHRvIHRoZSBjcmVhdGVkIHBvbHlnb25cclxuICAgICAgICAgICovXHJcbiAgICAgICAgdGV4dEV2ZW50LnJlZ2lzdGVyKFwidHJhbnNmb3JtUG9seWdvblwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHdyYXBwZXIucG9pbnRzKGN1c3RvbVRyYW5zZm9ybWVyLmdldFBvaW50cygpKTtcclxuXHJcbiAgICAgICAgICB2YXIgdXBkYXRlZFBvaW50cyA9IHdyYXBwZXIucG9pbnRzKCk7XHJcblxyXG4gICAgICAgICAgdGV4dC53aWR0aChNYXRoLmFicyh1cGRhdGVkUG9pbnRzWzBdIC0gdXBkYXRlZFBvaW50c1syXSkgLSAxMCk7XHJcbiAgICAgICAgICB0ZXh0LnBvc2l0aW9uKHtcclxuICAgICAgICAgICAgeDogdXBkYXRlZFBvaW50c1swXSArIDUsXHJcbiAgICAgICAgICAgIHk6IHVwZGF0ZWRQb2ludHNbMV0gKyA1XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIEVuYWJsZSB0cmFuc2Zvcm1lciBvbiBzZWxlY3QgKi9cclxuICAgICAgICB0ZXh0RXZlbnQucmVnaXN0ZXIoXCJjbGljay50ZXh0R3JvdXBcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBncm91cC5tb3ZlVG9Ub3AoKTtcclxuICAgICAgICAgIHNlbGVjdGVkU2hhcGUuc2V0KHRleHQpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIGN1c3RvbVRyYW5zZm9ybWVyLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgIHg6IGdyb3VwLngoKSxcclxuICAgICAgICAgICAgeTogZ3JvdXAueSgpXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICAgIGJhc2VMYXllci5hZGQoY3VzdG9tVHJhbnNmb3JtZXIuZ2V0R3JvdXAoKSk7XHJcbiAgICAgICAgICB3cmFwcGVyLnN0cm9rZShcImdyZXlcIik7XHJcbiAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgdm0ub3BlblRleHRJbmZvV2lkZ2V0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qICBcclxuICAgICAgICAgICAgRHJhZ3N0YXJ0IGFuZCBkcmFnZW5kIG1vdmVtZW50cyBmb3IgdW5kby9yZWRvIHN0YXRlc1xyXG4gICAgICAgICAgKi9cclxuICAgICAgICB2YXIgbW92ZW1lbnQgPSBjb21tb25WUEZhY3RvcnkubW92ZW1lbnQoKTtcclxuXHJcbiAgICAgICAgdGV4dEV2ZW50LnJlZ2lzdGVyKFwiZHJhZ3N0YXJ0LnRleHRHcm91cFwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBtb3ZlbWVudC5hZGQoXHJcbiAgICAgICAgICAgIGUudGFyZ2V0LmdldFBvc2l0aW9uKClcclxuICAgICAgICAgICk7IC8qIEdyYWJiaW5nIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBtb3ZlbWVudCAqL1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRleHRFdmVudC5yZWdpc3RlcihcImRyYWdlbmQudGV4dEdyb3VwXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIC8qIHB1c2hpbmcgdGhlIG1vdmVtZW50IHRvIGFjdGlvblN0YXRlIGFmdGVyIHRoZSBlbmQgcG9zaXRpb24gKi9cclxuICAgICAgICAgIGFjdGlvblN0YXRlcy5wdXNoKFxyXG4gICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICBzdGFnZSxcclxuICAgICAgICAgICAgICBncm91cCxcclxuICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgIFwibW92ZVwiLFxyXG4gICAgICAgICAgICAgIG1vdmVtZW50LmFkZChlLnRhcmdldC5nZXRQb3NpdGlvbigpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBBdHRhY2ggZXZlbnRzIHdoZW4gc2hhcGVzIGFyZSBsb2FkZWQgZnJvbSBqc29uICovXHJcbiAgICAgIChmdW5jdGlvbihsb2FkVHlwZSkge1xyXG4gICAgICAgIGlmIChsb2FkVHlwZSkge1xyXG4gICAgICAgICAgLyogU2VhcmNoIGZvciBncm91cHMgd2l0aCB0aGUgbmFtZSBwcm9jZXNzIGFuZCBmZXRjaCB0aGUgc2hhcGVzICovXHJcbiAgICAgICAgICBhbmd1bGFyLmZvckVhY2goYmFzZUxheWVyLmdldENoaWxkcmVuKCksIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgaWYgKC9wcm9jZXNzKi8udGVzdCh4Lm5hbWUoKSkpIHtcclxuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goeC5nZXRDaGlsZHJlbigpLCBmdW5jdGlvbihjaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgLyogRm9yIGNpcmNsZSBhbmQgZWxsaXBzZSAqL1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5jbGFzc05hbWUgPT09IFwiRWxsaXBzZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsbGlwc2VFdmVudFdyYXBwZXIoXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBcImVsbGlwc2VcIixcclxuICAgICAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAvKiBGb3IgbGluZXMgYW5kIHBvbHlnb25zICovXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgICBjaGlsZC5jbGFzc05hbWUgPT09IFwiTGluZVwiIHx8XHJcbiAgICAgICAgICAgICAgICAgIGNoaWxkLmNsYXNzTmFtZSA9PT0gXCJBcnJvd1wiXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgLyogQ2hlY2sgaWYgZ2l2ZW4gc2hhcGUgaXMgYSByZWN0YW5nbGUgb3IgYSBwb2x5Z29uICovXHJcbiAgICAgICAgICAgICAgICAgIHZhciBzaGFwZU5hbWUgPSBjaGlsZC5uYW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgIGlmICgvUmVjdCovLnRlc3Qoc2hhcGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlY3RhbmdsZUV2ZW50V3JhcHBlcihcclxuICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgXCJyZWN0YW5nbGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC9wb2x5Z29uKi8udGVzdChzaGFwZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9seWdvbkV2ZW50V3JhcHBlcihcclxuICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbjogY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvbGluZSovLnRlc3Qoc2hhcGVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVFdmVudFdyYXBwZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL2ZyZWVIYW5kKi8udGVzdChzaGFwZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlZUhhbmRFdmVudFdyYXBwZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb246IGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL21hcmtlckZyZWVIYW5kKi8udGVzdChzaGFwZU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlZUhhbmRNYXJrZXJXcmFwcGVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2x5Z29uOiBjaGlsZFxyXG4gICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAvKiBGb3IgdGV4dCAqL1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvdGV4dEdyb3VwKi8udGVzdChjaGlsZC5uYW1lKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgIHRleHRFdmVudFdyYXBwZXIoY2hpbGQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB0cmFuc2Zvcm1lclN0b3JlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH0pKGxvYWRGcm9tSnNvbik7XHJcblxyXG4gICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcclxuICAgICAgICAgIEVuZCBvZiBldmVudHNcclxuICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIFxyXG4gICAgICAgICAgVmlldyBmdW5jdGlvbnNcclxuICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICAgIC8qIEZ1bmN0aW9uIHRvIGRyYXcgcmVjdGFuZ2xlL3NxdWFyZSAqL1xyXG4gICAgICB2bS5yZWN0YW5nbGUgPSBmdW5jdGlvbihzcXVhcmUpIHtcclxuICAgICAgICB2YXIgc2hhcGVUeXBlID0gc3F1YXJlID8gXCJzcXVhcmVcIiA6IFwicmVjdGFuZ2xlXCI7XHJcbiAgICAgICAgZHJhd1N0YXRlLnNldChcInNoYXBlcy5cIiArIHNoYXBlVHlwZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImNyb3NzaGFpclwiO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZtLmN1cnJlbnREcmF3U3RhdGUuc2hhcGVzLnNxdWFyZSk7XHJcbiAgICAgICAgLyogRXZlbnQgY29uZmlndXJhdGlvbiAqL1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwiY2xpY2suXCIgKyBzaGFwZVR5cGUsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGRyYXdTdGF0ZS5jaGVjayhcInNoYXBlcy5cIiArIHNoYXBlVHlwZSkpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlT2JqZWN0ID0gc2hhcGVzVlBGYWN0b3J5LmNyZWF0ZVNoYXBlKFxyXG4gICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2hhcGVPYmplY3Quc3RhcnQpIHtcclxuICAgICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHNoYXBlT2JqZWN0LnNoYXBlKTtcclxuICAgICAgICAgICAgICAvKiBBZGRpbmcgYWN0aW9uIGhhbmRsZXJzIGZvciB1bmRvIHJlZG8gKi9cclxuXHJcbiAgICAgICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLFxyXG4gICAgICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8qIEFkZCByZWN0YW5nbGUgdHJhbnNmb3JtZXJzICovXHJcbiAgICAgICAgICAgICAgcmVjdGFuZ2xlRXZlbnRXcmFwcGVyKHNoYXBlT2JqZWN0LCBzaGFwZVR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAgICAgICAgIGRyYXdTdGF0ZS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kZXN0cm95U2hhcGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwibW91c2Vtb3ZlLlwiICsgc2hhcGVUeXBlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJzaGFwZXMuXCIgKyBzaGFwZVR5cGUpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3U2hhcGUoXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgIHNxdWFyZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLyogRnVuY3Rpb24gdG8gZHJhdyBlbGxpcHNlL2NpcmNsZSAqL1xyXG4gICAgICB2bS5lbGxpcHNlID0gZnVuY3Rpb24oY2lyY2xlKSB7XHJcbiAgICAgICAgdmFyIHNoYXBlVHlwZSA9IGNpcmNsZSA/IFwiY2lyY2xlXCIgOiBcImVsbGlwc2VcIjtcclxuICAgICAgICBkcmF3U3RhdGUuc2V0KFwic2hhcGVzLlwiICsgc2hhcGVUeXBlKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiY3Jvc3NoYWlyXCI7XHJcblxyXG4gICAgICAgIC8qIEV2ZW50IGNvbmZpZ3VyYXRpb24gKi9cclxuXHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJjbGljay5cIiArIHNoYXBlVHlwZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoZHJhd1N0YXRlLmNoZWNrKFwic2hhcGVzLlwiICsgc2hhcGVUeXBlKSkge1xyXG4gICAgICAgICAgICB2YXIgc2hhcGVPYmplY3QgPSBzaGFwZXNWUEZhY3RvcnkuY3JlYXRlU2hhcGUoXHJcbiAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuZHJhZ09mZnNldChcclxuICAgICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmdldFBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoKVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKHNoYXBlT2JqZWN0LnN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgYmFzZUxheWVyLmFkZChzaGFwZU9iamVjdC5zaGFwZSk7XHJcbiAgICAgICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLFxyXG4gICAgICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcblxyXG4gICAgICAgICAgICAgIGVsbGlwc2VFdmVudFdyYXBwZXIoc2hhcGVPYmplY3QsIHNoYXBlVHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgIGRyYXdTdGF0ZS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kZXN0cm95U2hhcGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwibW91c2Vtb3ZlLlwiICsgc2hhcGVUeXBlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJzaGFwZXMuXCIgKyBzaGFwZVR5cGUpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3U2hhcGUoXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgIGNpcmNsZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLyogRnVuY3Rpb24gdG8gZHJhdyBwb2x5Z29uICovXHJcbiAgICAgIHZtLnBvbHlnb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBkcmF3U3RhdGUuc2V0KFwic2hhcGVzLnBvbHlnb25cIik7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImNyb3NzaGFpclwiO1xyXG5cclxuICAgICAgICAvKiBFdmVudCBjb25maWd1cmF0aW9uICovXHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJjbGljay5wb2x5Z29uXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGRyYXdTdGF0ZS5jaGVjayhcInNoYXBlcy5wb2x5Z29uXCIpKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFwZU9iamVjdCA9IHNoYXBlc1ZQRmFjdG9yeS5jcmVhdGVQb2x5Z29uKFxyXG4gICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5kcmFnT2Zmc2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuZ2V0UG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5zY2FsZSgpXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoc2hhcGVPYmplY3QpIHtcclxuICAgICAgICAgICAgICBpZiAoc2hhcGVPYmplY3Quc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvblN0YXRlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICAgICAgICBzdGFnZSxcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZU9iamVjdC5wb2x5Z29uLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVcIlxyXG4gICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmFkZChzaGFwZU9iamVjdC5wb2x5Z29uKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLyogUG9seWdvbiBmaW5pc2ggYmxvY2sgKi9cclxuXHJcbiAgICAgICAgICAgICAgICBwb2x5Z29uRXZlbnRXcmFwcGVyKHNoYXBlT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAgICAgICAgICAgZHJhd1N0YXRlLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICBzaGFwZXNWUEZhY3RvcnkuZGVzdHJveVNoYXBlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwibW91c2Vtb3ZlLnBvbHlnb25cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoZHJhd1N0YXRlLmNoZWNrKFwic2hhcGVzLnBvbHlnb25cIikpIHtcclxuICAgICAgICAgICAgc2hhcGVzVlBGYWN0b3J5LmRyYXdQb2x5Z29uKFxyXG4gICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5kcmFnT2Zmc2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuZ2V0UG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5zY2FsZSgpXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLyogRnVuY3Rpb24gdG8gZHJhdyBhIGZyZWVoYW5kIHNoYXBlICovXHJcbiAgICAgIHZtLmZyZWVIYW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZHJhd1N0YXRlLnNldChcIm1lYXN1cmVtZW50LmZyZWVIYW5kXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJjcm9zc2hhaXJcIjtcclxuXHJcbiAgICAgICAgLyogRXZlbnQgY29uZmlndXJhdGlvbiAqL1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwibW91c2Vkb3duLmZyZWVoYW5kXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGRyYXdTdGF0ZS5jaGVjayhcIm1lYXN1cmVtZW50LmZyZWVIYW5kXCIpKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFwZU9iamVjdCA9IHNoYXBlc1ZQRmFjdG9yeS5jcmVhdGVQb2x5Z29uKFxyXG4gICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5kcmFnT2Zmc2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuZ2V0UG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5zY2FsZSgpXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChzaGFwZU9iamVjdCkge1xyXG4gICAgICAgICAgICAgIGlmIChzaGFwZU9iamVjdC5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnBvbHlnb24sXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1N0b3JlLmdldEN1cnJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHNoYXBlT2JqZWN0LnBvbHlnb24pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvKiBQb2x5Z29uIGZpbmlzaCBibG9jayAqL1xyXG5cclxuICAgICAgICAgICAgICAgIGZyZWVIYW5kRXZlbnRXcmFwcGVyKHNoYXBlT2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAgICAgICAgICAgZHJhd1N0YXRlLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICBzaGFwZXNWUEZhY3RvcnkuZGVzdHJveVNoYXBlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwibW91c2Vtb3ZlLmZyZWVoYW5kXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGRyYXdTdGF0ZS5jaGVjayhcIm1lYXN1cmVtZW50LmZyZWVIYW5kXCIpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3UG9seWdvbihcclxuICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuZHJhZ09mZnNldChcclxuICAgICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmdldFBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoKVxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLyogTWFya2VyIGZ1bmN0aW9ucyAqL1xyXG4gICAgICB2bS5zaW1wbGVMaW5lID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIGRyYXdTdGF0ZS5zZXQoXCJtYXJraW5ncy5cIiArIHR5cGUpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJjcm9zc2hhaXJcIjtcclxuXHJcbiAgICAgICAgLyogRXZlbnQgY29uZmlndXJhdGlvbiAqL1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwiY2xpY2suXCIgKyB0eXBlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJtYXJraW5ncy5cIiArIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFwZU9iamVjdCA9IHNoYXBlc1ZQRmFjdG9yeS5jcmVhdGVMaW5lKFxyXG4gICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5kcmFnT2Zmc2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuZ2V0UG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5zY2FsZSgpXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICB0eXBlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChzaGFwZU9iamVjdCkge1xyXG4gICAgICAgICAgICAgIGlmIChzaGFwZU9iamVjdC5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlT2JqZWN0LmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1N0b3JlLmdldEN1cnJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHNoYXBlT2JqZWN0LmxpbmUpO1xyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLyogUG9seWdvbiBmaW5pc2ggYmxvY2sgKi9cclxuICAgICAgICAgICAgICAgIGxpbmVFdmVudFdyYXBwZXIoc2hhcGVPYmplY3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgICAgICAgICAgICBkcmF3U3RhdGUucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kZXN0cm95U2hhcGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJtb3VzZW1vdmUuXCIgKyB0eXBlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJtYXJraW5ncy5cIiArIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3TGluZShcclxuICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuZHJhZ09mZnNldChcclxuICAgICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmdldFBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoKVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLmJlemllckxpbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBkcmF3U3RhdGUuc2V0KFwibWFya2luZ3MuYmV6aWVyXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJjcm9zc2hhaXJcIjtcclxuICAgICAgICBiYXNlTGF5ZXJFdmVudC5yZWdpc3RlcihcImNsaWNrLmJlemllclwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJtYXJraW5ncy5iZXppZXJcIikpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlT2JqZWN0ID0gc2hhcGVzVlBGYWN0b3J5LmNyZWF0ZUJlemllckxpbmUoXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChzaGFwZU9iamVjdCkge1xyXG4gICAgICAgICAgICAgIGlmIChzaGFwZU9iamVjdC5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlT2JqZWN0LmxpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc1N0b3JlLmdldEN1cnJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiXHJcbiAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHNoYXBlT2JqZWN0LmxpbmUpO1xyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLyogUG9seWdvbiBmaW5pc2ggYmxvY2sgKi9cclxuICAgICAgICAgICAgICAgIGJlemllckV2ZW50V3JhcHBlcihzaGFwZU9iamVjdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcclxuICAgICAgICAgICAgICAgIGRyYXdTdGF0ZS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgc2hhcGVzVlBGYWN0b3J5LmRlc3Ryb3lTaGFwZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBiYXNlTGF5ZXJFdmVudC5yZWdpc3RlcihcIm1vdXNlbW92ZS5iZXppZXJcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoZHJhd1N0YXRlLmNoZWNrKFwibWFya2luZ3MuYmV6aWVyXCIpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3QmV6aWVyTGluZShcclxuICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuZHJhZ09mZnNldChcclxuICAgICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmdldFBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoKVxyXG4gICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIEZyZWUgaGFuZCBtYXJrZXIgZnVuY3Rpb25zICovXHJcbiAgICAgIHZtLmZyZWVoYW5kTWFya2VyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZHJhd1N0YXRlLnNldChcInNoYXBlcy5mcmVlSGFuZFwiKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiY3Jvc3NoYWlyXCI7XHJcblxyXG4gICAgICAgIC8qIEV2ZW50IGNvbmZpZ3VyYXRpb24gKi9cclxuICAgICAgICBiYXNlTGF5ZXJFdmVudC5yZWdpc3RlcihcIm1vdXNlZG93bi5mcmVlaGFuZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJzaGFwZXMuZnJlZUhhbmRcIikpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlT2JqZWN0ID0gc2hhcGVzVlBGYWN0b3J5LmNyZWF0ZVBvbHlnb24oXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoc2hhcGVPYmplY3QpIHtcclxuICAgICAgICAgICAgICBpZiAoc2hhcGVPYmplY3Quc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIGFjdGlvblN0YXRlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICAgICAgICBzdGFnZSxcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZU9iamVjdC5wb2x5Z29uLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVcIlxyXG4gICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmFkZChzaGFwZU9iamVjdC5wb2x5Z29uKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZnJlZUhhbmRNYXJrZXJXcmFwcGVyKHNoYXBlT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgICAgICAgICAgICBkcmF3U3RhdGUucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kZXN0cm95U2hhcGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJtb3VzZW1vdmUuZnJlZWhhbmRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoZHJhd1N0YXRlLmNoZWNrKFwic2hhcGVzLmZyZWVIYW5kXCIpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3UG9seWdvbihcclxuICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuZHJhZ09mZnNldChcclxuICAgICAgICAgICAgICAgIHN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLmdldFBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuc2NhbGUoKVxyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0udGV4dFdpZGdldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRyYXdTdGF0ZS5zZXQoXCJzaGFwZXMudGV4dFwiKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiY3Jvc3NoYWlyXCI7XHJcbiAgICAgICAgLyogRXZlbnQgY29uZmlndXJhdGlvbiAqL1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwiY2xpY2sudGV4dFdyYXBwZXJcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoZHJhd1N0YXRlLmNoZWNrKFwic2hhcGVzLnRleHRcIikpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlT2JqZWN0ID0gc2hhcGVzVlBGYWN0b3J5LmNyZWF0ZVNoYXBlKFxyXG4gICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2hhcGVPYmplY3Quc3RhcnQpIHtcclxuICAgICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHNoYXBlT2JqZWN0LnNoYXBlKTtcclxuICAgICAgICAgICAgICAvKiBBZGRpbmcgYWN0aW9uIGhhbmRsZXJzIGZvciB1bmRvIHJlZG8gKi9cclxuXHJcbiAgICAgICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICBjb21tb25WUEZhY3RvcnkuYWN0aW9uSGFuZGxlcihcclxuICAgICAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgICAgIHNoYXBlT2JqZWN0LnNoYXBlLFxyXG4gICAgICAgICAgICAgICAgICBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLFxyXG4gICAgICAgICAgICAgICAgICBcImNyZWF0ZVwiXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgZ3JvdXAgZm9yIHRleHRcclxuXHJcbiAgICAgICAgICAgICAgdmFyIHRleHRHcm91cCA9IHNoYXBlc1ZQRmFjdG9yeS5jcmVhdGVUZXh0R3JvdXAoKTtcclxuXHJcbiAgICAgICAgICAgICAgdGV4dEdyb3VwLmFkZChzaGFwZU9iamVjdC5zaGFwZSk7XHJcblxyXG4gICAgICAgICAgICAgIC8qIEFkZCBwcm9wZXJ0aWVzICovXHJcbiAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IHNoYXBlT2JqZWN0LnNoYXBlLnBvaW50cygpO1xyXG4gICAgICAgICAgICAgIHZhciB0ZXh0UHJvcHMgPSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICB4OiBwb2ludHNbMF0gKyAxMCxcclxuICAgICAgICAgICAgICAgICAgeTogcG9pbnRzWzFdICsgMTBcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogTWF0aC5hYnMocG9pbnRzWzBdIC0gcG9pbnRzWzJdKSAtIDEwXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB2YXIgdGV4dE9iaiA9IHNoYXBlc1ZQRmFjdG9yeS5jcmVhdGVUZXh0KHRleHRQcm9wcyk7XHJcbiAgICAgICAgICAgICAgdGV4dEdyb3VwLmFkZCh0ZXh0T2JqKTtcclxuXHJcbiAgICAgICAgICAgICAgdGV4dEV2ZW50V3JhcHBlcih0ZXh0R3JvdXApO1xyXG5cclxuICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAgICAgICAgIGRyYXdTdGF0ZS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kZXN0cm95U2hhcGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwibW91c2Vtb3ZlLnRleHRXcmFwcGVyXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGRyYXdTdGF0ZS5jaGVjayhcInNoYXBlcy50ZXh0XCIpKSB7XHJcbiAgICAgICAgICAgIHNoYXBlc1ZQRmFjdG9yeS5kcmF3U2hhcGUoXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgIFwid3JhcHBlclwiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5tYW51YWxTZWxlY3Rpb24gPSBmdW5jdGlvbihzaGFwZU9iaikge1xyXG4gICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgc2VsZWN0ZWRTaGFwZS5yZXNldCgpO1xyXG4gICAgICAgIHZhciBzaGFwZSA9IHNlbGVjdGVkU2hhcGUuc2V0KHNoYXBlT2JqKTtcclxuICAgICAgICBzaGFwZU9iai5maXJlKFwiY2xpY2tcIik7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5kcmFnU2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZHJhd1N0YXRlLnNldChcIm1hcmtpbmdzLnNlbGVjdGlvblwiKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImNyb3NzaGFpclwiO1xyXG4gICAgICAgIC8qIEV2ZW50IGNvbmZpZ3VyYXRpb24gKi9cclxuICAgICAgICBiYXNlTGF5ZXJFdmVudC5yZWdpc3RlcihcIm1vdXNlZG93bi5zZWxlY3Rpb25cIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoZHJhd1N0YXRlLmNoZWNrKFwibWFya2luZ3Muc2VsZWN0aW9uXCIpKSB7XHJcbiAgICAgICAgICAgIHZtLnNlbGVjdEFsbFNoYXBlcyhmYWxzZSk7XHJcbiAgICAgICAgICAgIHZhciBzaGFwZU9iamVjdCA9IHNoYXBlc1ZQRmFjdG9yeS5jcmVhdGVTaGFwZShcclxuICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5kcmFnT2Zmc2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuZ2V0UG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5zY2FsZSgpXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuYWRkKHNoYXBlT2JqZWN0LnNoYXBlKTtcclxuICAgICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJtb3VzZXVwLnNlbGVjdGlvblwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJtYXJraW5ncy5zZWxlY3Rpb25cIikpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcclxuICAgICAgICAgICAgZHJhd1N0YXRlLnJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICAvKiBTZWxlY3Rpb24gbG9naWMgKi9cclxuICAgICAgICAgICAgdmFyIHNlbGVjdGlvblBvaW50cyA9IHNoYXBlc1ZQRmFjdG9yeS5jYW5jZWxEcmF3aW5nKCk7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFNoYXBlcyA9IHNoYXBlc1ZQRmFjdG9yeS5zZWxlY3RTaGFwZXMoXHJcbiAgICAgICAgICAgICAgYmFzZUxheWVyLFxyXG4gICAgICAgICAgICAgIHNlbGVjdGlvblBvaW50c1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRTaGFwZU5hbWVzID0gc2VsZWN0ZWRTaGFwZXMubWFwKGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgICByZXR1cm4geC5uYW1lKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2VsZWN0aW9uU3RvcmUuc3RvcmUoc2VsZWN0ZWRTaGFwZXMpO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godm0ucHJvY2Vzc2VzLCBmdW5jdGlvbihwcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHByb2Nlc3MuZ2V0Q2hpbGRyZW4oKSwgZnVuY3Rpb24oY2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZFNoYXBlTmFtZXMuaW5kZXhPZihjaGlsZC5uYW1lKCkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgY2hpbGQuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJtb3VzZW1vdmUuc2VsZWN0aW9uXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGRyYXdTdGF0ZS5jaGVjayhcIm1hcmtpbmdzLnNlbGVjdGlvblwiKSkge1xyXG4gICAgICAgICAgICBzaGFwZXNWUEZhY3RvcnkuZHJhd1NoYXBlKFxyXG4gICAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5kcmFnT2Zmc2V0KFxyXG4gICAgICAgICAgICAgICAgc3RhZ2UuZ2V0UG9pbnRlclBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBiYXNlTGF5ZXIuZ2V0UG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5zY2FsZSgpXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgICAgICBcImdyYWJiZXJcIlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0uc2VsZWN0QWxsU2hhcGVzID0gZnVuY3Rpb24odG9nZ2xlVmFsdWUpIHtcclxuICAgICAgICB2YXIgYWxsU2hhcGVzID0gc2hhcGVzVlBGYWN0b3J5LmV4dHJhY3RBbGxTaGFwZXMoYmFzZUxheWVyKTtcclxuICAgICAgICBpZiAodG9nZ2xlVmFsdWUpIHtcclxuICAgICAgICAgIHNlbGVjdGlvblN0b3JlLnN0b3JlKGFsbFNoYXBlcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGVjdGlvblN0b3JlLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbGxTaGFwZXMsIGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgIHguc2VsZWN0ZWQgPSB0b2dnbGVWYWx1ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLnRvZ2dsZVNoYXBlVmlzaWJpbGl0eSA9IGZ1bmN0aW9uKHNoYXBlKSB7XHJcbiAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICBzaGFwZS52aXNpYmxlKCFzaGFwZS52aXNpYmxlKCkpO1xyXG4gICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5jYWxpYnJhdG9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZHJhd1N0YXRlLnNldChcIm1lYXN1cmVtZW50LmNhbGlicmF0b3JcIik7XHJcbiAgICAgICAgY2FsaWJyYXRvciA9IHNoYXBlc1ZQRmFjdG9yeS5jYWxpYnJhdG9yKHN0YWdlLCBiYXNlTGF5ZXIpO1xyXG4gICAgICAgIGJhc2VMYXllckV2ZW50LnJlZ2lzdGVyKFwiY2xpY2suY2FsaWJyYXRvclwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJtZWFzdXJlbWVudC5jYWxpYnJhdG9yXCIpKSB7XHJcbiAgICAgICAgICAgIGNhbGlicmF0b3IoXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYmFzZUxheWVyRXZlbnQucmVnaXN0ZXIoXCJtb3VzZW1vdmUuY2FsaWJyYXRvclwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGlmIChkcmF3U3RhdGUuY2hlY2soXCJtZWFzdXJlbWVudC5jYWxpYnJhdG9yXCIpKSB7XHJcbiAgICAgICAgICAgIGNhbGlicmF0b3IoXHJcbiAgICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmRyYWdPZmZzZXQoXHJcbiAgICAgICAgICAgICAgICBzdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgIGJhc2VMYXllci5nZXRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgYmFzZUxheWVyLnNjYWxlKClcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAvKiBDYWxpYnJhdGlvbiBoYW5kbGluZyAqL1xyXG5cclxuICAgICAgJHNjb3BlLiRvbihcImNhbGlicmF0ZWRcIiwgZnVuY3Rpb24oZSwgY2FsaWJyYXRlZExpbmUpIHtcclxuICAgICAgICAvLyB2YXIgdmFsdWUgPSB3aW5kb3cucHJvbXB0KCdQbGVhc2UgZW50ZXIgYSBzY2FsZScpO1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICAkKFwiI2NhbGlicmF0ZU1vZGFsXCIpLm1vZGFsKFwic2hvd1wiKTtcclxuXHJcbiAgICAgICAgLyogRGlzdGFuY2Ugb2YgdGhlIGxpbmUgKi9cclxuICAgICAgICB2YXIgcG9pbnRzID0gY2FsaWJyYXRlZExpbmUucG9pbnRzKCk7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KFxyXG4gICAgICAgICAgTWF0aC5wb3cocG9pbnRzWzBdIC0gcG9pbnRzWzJdLCAyKSArXHJcbiAgICAgICAgICAgIE1hdGgucG93KHBvaW50c1sxXSAtIHBvaW50c1szXSwgMilcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB2bS5jYWxpYnJhdGlvbkRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgdm0uc2F2ZUNhbGlicmF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgdmFsdWUgPSB2bS5jYWxpYnJhdGlvblNjYWxlLnZhbHVlO1xyXG5cclxuICAgICAgICAgIHZhciBzY2FsZTtcclxuXHJcbiAgICAgICAgICBzY2FsZSA9IHBhcnNlSW50KHZhbHVlKSAvIGRpc3RhbmNlO1xyXG5cclxuICAgICAgICAgIC8qIFNldHRpbmcgY2FsaWJyYXRpb24gdmFsdWUgdG8gdGhhdCBpdCBjYW4gYmUgZmV0Y2hlZCBnbG9iYWxseSAqL1xyXG4gICAgICAgICAgY2FsaWJyYXRpb25TdGF0ZS5zZXQoe1xyXG4gICAgICAgICAgICB2YWx1ZTogc2NhbGUsXHJcbiAgICAgICAgICAgIHVuaXQ6IHZtLmNhbGlicmF0aW9uU2NhbGUudW5pdFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdm0uY2FsaWJyYXRpb25EYXRhID0gY2FsaWJyYXRpb25TdGF0ZS5nZXQoKTtcclxuXHJcbiAgICAgICAgICB2bS5zaG93UGFuZWwgPSB0cnVlO1xyXG4gICAgICAgICAgdm0uc2hhcGVJbmZvID0gbWV0cmljcy5nZXRTaGFwZUluZm8oKTtcclxuICAgICAgICAgIGNhbGlicmF0ZWRMaW5lLmRlc3Ryb3koKTtcclxuICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcblxyXG4gICAgICAgICAgJChcIiNjYWxpYnJhdGVNb2RhbFwiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJChcIiNjYWxpYnJhdGVNb2RhbFwiKS5vbihcImhpZGUuYnMubW9kYWxcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgY2FsaWJyYXRlZExpbmUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2bS5kZWxldGVTaGFwZSA9IGZ1bmN0aW9uKHNoYXBlT2JqKSB7XHJcbiAgICAgICAgdmFyIHNoYXBlID0gc2hhcGVPYmogPyBzaGFwZU9iaiA6IHNlbGVjdGVkU2hhcGUuZ2V0KCk7XHJcbiAgICAgICAgaWYgKHNoYXBlKSB7XHJcbiAgICAgICAgICB0cmFuc2Zvcm1lclN0b3JlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgIHNoYXBlLFxyXG4gICAgICAgICAgICAgIHNoYXBlLmdldFBhcmVudCgpLFxyXG4gICAgICAgICAgICAgIFwiZGVsZXRlXCJcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHNoYXBlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICAgIHZtLmNsb3NlSW5mb1dpZGdldCgpO1xyXG4gICAgICAgICAgdm0uY2xvc2VUZXh0SW5mb1dpZGdldCgpO1xyXG4gICAgICAgICAgc2VsZWN0ZWRTaGFwZS5yZXNldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLm9wZW5JbmZvV2lkZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNoYXBlID0gc2VsZWN0ZWRTaGFwZS5nZXQoKTtcclxuICAgICAgICB2bS5pbmZvV2lkZ2V0UHJvcHMgPSB7XHJcbiAgICAgICAgICBuYW1lOiBzaGFwZS5uYW1lKCksXHJcbiAgICAgICAgICBjb2xvclR5cGU6IFwic3Ryb2tlXCIsXHJcbiAgICAgICAgICBzdHJva2U6IHNoYXBlLnN0cm9rZSgpLFxyXG4gICAgICAgICAgZmlsbDogc2hhcGUuZmlsbCgpLFxyXG4gICAgICAgICAgc3Ryb2tlV2lkdGg6IHNoYXBlLnN0cm9rZVdpZHRoKClcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZtLnNoYXBlSW5mb1dpZGdldCA9IHRydWU7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5jb2xvclR5cGVzID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHR5cGU6IFwiU3Ryb2tlXCIsXHJcbiAgICAgICAgICB2YWx1ZTogXCJzdHJva2VcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdHlwZTogXCJGaWxsXCIsXHJcbiAgICAgICAgICB2YWx1ZTogXCJmaWxsXCJcclxuICAgICAgICB9XHJcbiAgICAgIF07XHJcblxyXG4gICAgICB2bS50ZXh0Q29sb3JUeXBlcyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0eXBlOiBcIkJhY2tncm91bmRcIixcclxuICAgICAgICAgIHZhbHVlOiBcInN0cm9rZVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0eXBlOiBcIkZvbnRcIixcclxuICAgICAgICAgIHZhbHVlOiBcImZpbGxcIlxyXG4gICAgICAgIH1cclxuICAgICAgXTtcclxuXHJcbiAgICAgIHZtLmZvbnRTdHlsZXMgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdHlwZTogXCJOb3JtYWxcIixcclxuICAgICAgICAgIHZhbHVlOiBcIm5vcm1hbFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0eXBlOiBcIkJvbGRcIixcclxuICAgICAgICAgIHZhbHVlOiBcImJvbGRcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdHlwZTogXCJJdGFsaWNcIixcclxuICAgICAgICAgIHZhbHVlOiBcIml0YWxpY1wiXHJcbiAgICAgICAgfVxyXG4gICAgICBdO1xyXG5cclxuICAgICAgdm0ud2ViU2FmZUZvbnRzID0gW1xyXG4gICAgICAgIFwiQXJpYWxcIixcclxuICAgICAgICBcIkNhbGlicmlcIixcclxuICAgICAgICBcIkhlbHZldGljYVwiLFxyXG4gICAgICAgIFwiVGltZXMgTmV3IFJvbWFuXCIsXHJcbiAgICAgICAgXCJUaW1lc1wiLFxyXG4gICAgICAgIFwiQ291cmllciBOZXdcIixcclxuICAgICAgICBcIkNvdXJpZXJcIixcclxuICAgICAgICBcIlZlcmRhbmFcIixcclxuICAgICAgICBcIkdlb3JnaWFcIixcclxuICAgICAgICBcIlBhbGF0aW5vXCIsXHJcbiAgICAgICAgXCJHYXJhbW9uZFwiLFxyXG4gICAgICAgIFwiQm9va21hblwiLFxyXG4gICAgICAgIFwiQ29taWMgU2FucyBNU1wiLFxyXG4gICAgICAgIFwiVHJlYnVjaGV0IE1TXCIsXHJcbiAgICAgICAgXCJBcmlhbCBCbGFja1wiLFxyXG4gICAgICAgIFwiSW1wYWN0XCJcclxuICAgICAgXTtcclxuXHJcbiAgICAgIHZtLm9wZW5UZXh0SW5mb1dpZGdldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzaGFwZSA9IHNlbGVjdGVkU2hhcGUuZ2V0KCk7XHJcbiAgICAgICAgdm0udGV4dEluZm9XaWRnZXRQcm9wcyA9IHtcclxuICAgICAgICAgIGNvbG9yVHlwZTogXCJzdHJva2VcIixcclxuICAgICAgICAgIHRleHQ6IHNoYXBlLnRleHQoKSxcclxuICAgICAgICAgIGZvbnRTaXplOiBzaGFwZS5mb250U2l6ZSgpLFxyXG4gICAgICAgICAgZm9udFN0eWxlOiBzaGFwZS5mb250U3R5bGUoKSxcclxuICAgICAgICAgIGZvbnRGYW1pbHk6IHNoYXBlLmZvbnRGYW1pbHkoKSxcclxuICAgICAgICAgIHN0cm9rZTogc2hhcGUuc3Ryb2tlKCksXHJcbiAgICAgICAgICBmaWxsOiBzaGFwZS5maWxsKCksXHJcbiAgICAgICAgICBzdHJva2VXaWR0aDogc2hhcGUuc3Ryb2tlV2lkdGgoKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0udGV4dEluZm9XaWRnZXQgPSB0cnVlO1xyXG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLmNoYW5nZVRleHRJbmZvID0gZnVuY3Rpb24ocHJvcCwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgc2hhcGUgPSBzZWxlY3RlZFNoYXBlLmdldCgpO1xyXG4gICAgICAgIHNoYXBlW3Byb3BdKHZhbHVlKTtcclxuICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0uaW5mb1dpZGdldFN0cm9rZSA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gICAgICAgIHZhciBzaGFwZSA9IHNlbGVjdGVkU2hhcGUuZ2V0KCk7XHJcbiAgICAgICAgLy8gdmFyIHN0cm9rZUhpc3RvcnkgPSBjb21tb25WUEZhY3Rvcnkuc2hhcGVQcm9wZXJ0eUhpc3RvcnkoKVxyXG4gICAgICAgIC8vIHZhciBwcm9wcyA9IHtcclxuICAgICAgICAvLyAgIHN0cm9rZTogc2hhcGUuc3Ryb2tlKCksXHJcbiAgICAgICAgLy8gICBmaWxsOiBzaGFwZS5maWxsKCksXHJcbiAgICAgICAgLy8gICBzdHJva2VXaWR0aDogc2hhcGUuc3Ryb2tlV2lkdGgoKVxyXG4gICAgICAgIC8vIH07XHJcbiAgICAgICAgLy8gc3Ryb2tlSGlzdG9yeS5hZGQocHJvcHMpO1xyXG4gICAgICAgIC8vIHZhciBkb25lID0gZmFsc2U7XHJcbiAgICAgICAgLy8gJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vICAgaWYoZG9uZSkge1xyXG4gICAgICAgIC8vICAgICByZXR1cm47XHJcbiAgICAgICAgLy8gICB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgICB2YXIgZW5kUHJvcHMgPSB7XHJcbiAgICAgICAgLy8gICAgICAgc3Ryb2tlOiBzaGFwZS5zdHJva2UoKSxcclxuICAgICAgICAvLyAgICAgICBmaWxsOiBzaGFwZS5maWxsKCksXHJcbiAgICAgICAgLy8gICAgICAgc3Ryb2tlV2lkdGg6IHNoYXBlLnN0cm9rZVdpZHRoKClcclxuICAgICAgICAvLyAgICAgfTtcclxuICAgICAgICAvLyAgICAgYWN0aW9uU3RhdGVzLnB1c2goY29tbW9uVlBGYWN0b3J5LmFjdGlvbkhhbmRsZXIoc3RhZ2UsIHNoYXBlLCBwcm9jZXNzU3RvcmUuZ2V0Q3VycmVudCgpLCAnc2hhcGVQcm9wcycsIHN0cm9rZUhpc3RvcnkuYWRkKGVuZFByb3BzKSkpO1xyXG4gICAgICAgIC8vICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgICAvLyAgIH1cclxuICAgICAgICAvLyB9LCAxMDAwKTtcclxuXHJcbiAgICAgICAgc2hhcGUuc3Ryb2tlV2lkdGgodmFsKTtcclxuICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIHNoYXBlUHJvcEhpc3RvcnkgPSBjb21tb25WUEZhY3Rvcnkuc2hhcGVQcm9wZXJ0eUhpc3RvcnkoKTtcclxuXHJcbiAgICAgIHZtLmluZm9XaWRnZXRFdmVudHMgPSB7XHJcbiAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKGFwaSwgY29sb3IsICRldmVudCkge1xyXG4gICAgICAgICAgdmFyIHNoYXBlID0gc2VsZWN0ZWRTaGFwZS5nZXQoKTtcclxuICAgICAgICAgIGlmICh2bS5pbmZvV2lkZ2V0UHJvcHMuY29sb3JUeXBlID09PSBcImZpbGxcIikge1xyXG4gICAgICAgICAgICBzaGFwZS5maWxsKGNvbG9yKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodm0uaW5mb1dpZGdldFByb3BzLmNvbG9yVHlwZSA9PT0gXCJzdHJva2VcIikge1xyXG4gICAgICAgICAgICBzaGFwZS5zdHJva2UoY29sb3IpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qIGZvciBzaGFwZSB1bmRvIGFuZCByZWRvICovXHJcbiAgICAgICAgb25PcGVuOiBmdW5jdGlvbihhcGksIGNvbG9yLCAkZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBzaGFwZSA9IHNlbGVjdGVkU2hhcGUuZ2V0KCk7XHJcbiAgICAgICAgICB2YXIgcHJvcHMgPSB7XHJcbiAgICAgICAgICAgIHN0cm9rZTogc2hhcGUuc3Ryb2tlKCksXHJcbiAgICAgICAgICAgIGZpbGw6IHNoYXBlLmZpbGwoKSxcclxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHNoYXBlLnN0cm9rZVdpZHRoKClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBzaGFwZVByb3BIaXN0b3J5LmFkZChwcm9wcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsb3NlOiBmdW5jdGlvbihhcGksIGNvbG9yLCAkZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBzaGFwZSA9IHNlbGVjdGVkU2hhcGUuZ2V0KCk7XHJcbiAgICAgICAgICB2YXIgcHJvcHMgPSB7XHJcbiAgICAgICAgICAgIHN0cm9rZTogc2hhcGUuc3Ryb2tlKCksXHJcbiAgICAgICAgICAgIGZpbGw6IHNoYXBlLmZpbGwoKSxcclxuICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IHNoYXBlLnN0cm9rZVdpZHRoKClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBhY3Rpb25TdGF0ZXMucHVzaChcclxuICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmFjdGlvbkhhbmRsZXIoXHJcbiAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgc2hhcGUsXHJcbiAgICAgICAgICAgICAgcHJvY2Vzc1N0b3JlLmdldEN1cnJlbnQoKSxcclxuICAgICAgICAgICAgICBcInNoYXBlUHJvcHNcIixcclxuICAgICAgICAgICAgICBzaGFwZVByb3BIaXN0b3J5LmFkZChwcm9wcylcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIC8qIFJlc2V0IHNoYXBlIHByb3BzIGhpc3RvcnkgKi9cclxuICAgICAgICAgIHNoYXBlUHJvcEhpc3RvcnkgPSBjb21tb25WUEZhY3Rvcnkuc2hhcGVQcm9wZXJ0eUhpc3RvcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS50ZXh0SW5mb1dpZGdldEV2ZW50cyA9IHtcclxuICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24oYXBpLCBjb2xvciwgJGV2ZW50KSB7XHJcbiAgICAgICAgICB2YXIgc2hhcGUgPSBzZWxlY3RlZFNoYXBlLmdldCgpO1xyXG4gICAgICAgICAgaWYgKHZtLnRleHRJbmZvV2lkZ2V0UHJvcHMuY29sb3JUeXBlID09PSBcImZpbGxcIikge1xyXG4gICAgICAgICAgICBzaGFwZS5maWxsKGNvbG9yKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodm0udGV4dEluZm9XaWRnZXRQcm9wcy5jb2xvclR5cGUgPT09IFwic3Ryb2tlXCIpIHtcclxuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBzaGFwZS5nZXRQYXJlbnQoKS5maW5kKFwiTGluZVwiKTtcclxuICAgICAgICAgICAgd3JhcHBlci5maWxsKGNvbG9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKiBmb3Igc2hhcGUgdW5kbyBhbmQgcmVkbyAqL1xyXG4gICAgICAgIG9uT3BlbjogZnVuY3Rpb24oYXBpLCBjb2xvciwgJGV2ZW50KSB7XHJcbiAgICAgICAgICB2YXIgc2hhcGUgPSBzZWxlY3RlZFNoYXBlLmdldCgpO1xyXG4gICAgICAgICAgdmFyIHByb3BzID0ge1xyXG4gICAgICAgICAgICBzdHJva2U6IHNoYXBlLnN0cm9rZSgpLFxyXG4gICAgICAgICAgICBmaWxsOiBzaGFwZS5maWxsKCksXHJcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzaGFwZS5zdHJva2VXaWR0aCgpXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgc2hhcGVQcm9wSGlzdG9yeS5hZGQocHJvcHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbG9zZTogZnVuY3Rpb24oYXBpLCBjb2xvciwgJGV2ZW50KSB7XHJcbiAgICAgICAgICB2YXIgc2hhcGUgPSBzZWxlY3RlZFNoYXBlLmdldCgpO1xyXG4gICAgICAgICAgdmFyIHByb3BzID0ge1xyXG4gICAgICAgICAgICBzdHJva2U6IHNoYXBlLnN0cm9rZSgpLFxyXG4gICAgICAgICAgICBmaWxsOiBzaGFwZS5maWxsKCksXHJcbiAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBzaGFwZS5zdHJva2VXaWR0aCgpXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgYWN0aW9uU3RhdGVzLnB1c2goXHJcbiAgICAgICAgICAgIGNvbW1vblZQRmFjdG9yeS5hY3Rpb25IYW5kbGVyKFxyXG4gICAgICAgICAgICAgIHN0YWdlLFxyXG4gICAgICAgICAgICAgIHNoYXBlLFxyXG4gICAgICAgICAgICAgIHByb2Nlc3NTdG9yZS5nZXRDdXJyZW50KCksXHJcbiAgICAgICAgICAgICAgXCJzaGFwZVByb3BzXCIsXHJcbiAgICAgICAgICAgICAgc2hhcGVQcm9wSGlzdG9yeS5hZGQocHJvcHMpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICAvKiBSZXNldCBzaGFwZSBwcm9wcyBoaXN0b3J5ICovXHJcbiAgICAgICAgICBzaGFwZVByb3BIaXN0b3J5ID0gY29tbW9uVlBGYWN0b3J5LnNoYXBlUHJvcGVydHlIaXN0b3J5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0uY2xvc2VJbmZvV2lkZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uc2hhcGVJbmZvV2lkZ2V0ID0gZmFsc2U7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5jbG9zZVRleHRJbmZvV2lkZ2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHRleHQgPSBzZWxlY3RlZFNoYXBlLmdldCgpO1xyXG4gICAgICAgIGlmICh0ZXh0ICYmIHRleHQubmFtZSgpID09PSBcInRleHRcIikge1xyXG4gICAgICAgICAgdmFyIGdyb3VwID0gdGV4dC5nZXRQYXJlbnQoKTtcclxuICAgICAgICAgIHZhciB3cmFwcGVyID0gZ3JvdXAuZmluZChcIkxpbmVcIilbMF07XHJcbiAgICAgICAgICB3cmFwcGVyLnN0cm9rZShudWxsKTtcclxuICAgICAgICAgIGJhc2VMYXllci5kcmF3KCk7XHJcbiAgICAgICAgICB0cmFuc2Zvcm1lclN0b3JlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2bS50ZXh0SW5mb1dpZGdldCA9IGZhbHNlO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLyogRW5kIG9mIHNoYXBlIGV2ZW50cyAqL1xyXG5cclxuICAgICAgLyogUGFuIGltYWdlICovXHJcbiAgICAgIHZtLmN1cnJlbnRQYW5TdGF0ZSA9IHRydWU7XHJcbiAgICAgIHZtLnBhbkltYWdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdm0uY3VycmVudFBhblN0YXRlID0gYmFzZUxheWVyLmRyYWdnYWJsZSgpO1xyXG4gICAgICAgIHZtLmN1cnJlbnRQYW5TdGF0ZVxyXG4gICAgICAgICAgPyAoZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIilcclxuICAgICAgICAgIDogKGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJtb3ZlXCIpO1xyXG4gICAgICAgIGJhc2VMYXllci5kcmFnZ2FibGUoIXZtLmN1cnJlbnRQYW5TdGF0ZSk7XHJcbiAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIFVuZG8vUmVkbyAqL1xyXG5cclxuICAgICAgdm0udW5kb09yUmVkbyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAvKiB0eXBlIDAgLSB1bmRvICwgMSAtIHJlZG8gKi9cclxuICAgICAgICB0cmFuc2Zvcm1lclN0b3JlLnJlbW92ZUFsbCgpO1xyXG4gICAgICAgIHR5cGUgPT09IDEgPyBhY3Rpb25TdGF0ZXMucmVkbygpIDogYWN0aW9uU3RhdGVzLnVuZG8oKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIERvd25sb2FkcyAqL1xyXG5cclxuICAgICAgdm0uZG93bmxvYWRJbWFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkYXRhVVJMID0gc3RhZ2UudG9EYXRhVVJMKCk7XHJcbiAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgICAgICBsaW5rLmRvd25sb2FkID0gXCJyb29mcGxhbl9pbWFnZV9cIiArIERhdGUubm93KCk7XHJcbiAgICAgICAgbGluay5ocmVmID0gZGF0YVVSTDtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgICAgIGxpbmsuY2xpY2soKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0uZG93bmxvYWRGaWxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGpzb24gPSBzdGFnZS50b0pTT04oKTtcclxuICAgICAgICB2YXIgZmlsZSA9IG5ldyBCbG9iKFtqc29uXSwge1xyXG4gICAgICAgICAgdHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgIGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XHJcbiAgICAgICAgbGluay5kb3dubG9hZCA9IFwicm9vZnBsYW5fanNvbl9cIiArIERhdGUubm93KCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuICAgICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLnNhdmVSb29mUGxhbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgdmFyIGpzb24gPSBzdGFnZS50b0pTT04oKTtcclxuXHJcbiAgICAgICAgLyogR2V0IGFzc29jaWF0aW9ucyBhbmQgcHJvY2VzcyB0aGVtIGJlZm9yZSBzYXZpbmcgKi9cclxuXHJcbiAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgLnNhdmVSb29mUGxhbihyb29mUGxhbi5faWQsIHtcclxuICAgICAgICAgICAganNvblN0cmluZzoganNvbixcclxuICAgICAgICAgICAgY2FsaWJyYXRpb246IGNhbGlicmF0aW9uU3RhdGUuZ2V0KCksXHJcbiAgICAgICAgICAgIGNvdW50RGF0YTogc2hhcGVzVlBGYWN0b3J5LmdldFNoYXBlSWQoKSxcclxuICAgICAgICAgICAgYXNzb2NpYXRpb25zOiB2bS5hc3NvY2lhdGlvbnMuZ2V0QXNzb2NpYXRpb25zRm9yU2F2ZSgpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHJlc3AuZGF0YS5tZXNzYWdlKTtcclxuXHJcbiAgICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgICAuZ2V0UHJvamVjdFJvb2ZQbGFucyhsb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldChcInJvb2ZQbGFuUHJvamVjdFwiKSlcclxuICAgICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KFwicm9vZlBsYW5zXCIsIHJlc3AuZGF0YS5kYXRhKTtcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIFByb2Nlc3MgbWV0aG9kcyAqL1xyXG5cclxuICAgICAgdm0uaGlkZVByb2Nlc3MgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgIHRyYW5zZm9ybWVyU3RvcmUucmVtb3ZlQWxsKCk7XHJcbiAgICAgICAgcHJvY2Vzc1N0b3JlLmhpZGVQcm9jZXNzKGluZGV4KTtcclxuICAgICAgfTtcclxuICAgICAgdm0uc2hvd1Byb2Nlc3MgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgIHByb2Nlc3NTdG9yZS5zaG93UHJvY2VzcyhpbmRleCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5hZGRQcm9jZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcHJvY2Vzc1N0b3JlLmNyZWF0ZVByb2Nlc3MoKTtcclxuICAgICAgICB2bS5wcm9jZXNzZXMgPSBwcm9jZXNzU3RvcmUuZ2V0UHJvY2Vzc2VzKCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2bS5zZWxlY3RMYXllciA9IGZ1bmN0aW9uKGkpIHtcclxuICAgICAgICB2bS5zZWxlY3RlZEluZGV4ID0gaTtcclxuICAgICAgICBwcm9jZXNzU3RvcmUuc2V0Q3VycmVudChpKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8qIEluaXRpYWxseSBsb2FkIDFzdCBsYXllciAqL1xyXG4gICAgICB2bS5zZWxlY3RMYXllcigwKTtcclxuXHJcbiAgICAgIHZtLnNlbGVjdE9yVW5zZWxlY3QgPSBmdW5jdGlvbihzaGFwZSkge1xyXG4gICAgICAgIHNoYXBlLnNlbGVjdGVkXHJcbiAgICAgICAgICA/IHNlbGVjdGlvblN0b3JlLnB1c2goc2hhcGUpXHJcbiAgICAgICAgICA6IHNlbGVjdGlvblN0b3JlLnB1bGwoc2hhcGUubmFtZSgpKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLmxheWVySWNvbk5hbWUgPSBmdW5jdGlvbihzaGFwZU5hbWUpIHtcclxuICAgICAgICBpZiAoL1JlY3QqLy50ZXN0KHNoYXBlTmFtZSkpIHtcclxuICAgICAgICAgIHJldHVybiBcInNxdWFyZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoL0VsbGlwc2UqLy50ZXN0KHNoYXBlTmFtZSkpIHtcclxuICAgICAgICAgIHJldHVybiBcImNpcmNsZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoL3BvbHlnb24qLy50ZXN0KHNoYXBlTmFtZSkpIHtcclxuICAgICAgICAgIHJldHVybiBcInBvbHlnb25cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9saW5lKi8udGVzdChzaGFwZU5hbWUpKSB7XHJcbiAgICAgICAgICByZXR1cm4gXCJsaW5lXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvdGV4dEdyb3VwKi8udGVzdChzaGFwZU5hbWUpKSB7XHJcbiAgICAgICAgICByZXR1cm4gXCJ0ZXh0XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvZnJlZUhhbmQqLy50ZXN0KHNoYXBlTmFtZSkpIHtcclxuICAgICAgICAgIHJldHVybiBcInBlbmNpbFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLmhpZGVTZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZWN0ZWRTaGFwZXMgPSBzZWxlY3Rpb25TdG9yZS5nZXQoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZFNoYXBlcyk7XHJcbiAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZWN0ZWRTaGFwZXMsIGZ1bmN0aW9uKHNoYXBlKSB7XHJcbiAgICAgICAgICBzaGFwZS52aXNpYmxlKGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYXNlTGF5ZXIuZHJhdygpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0uZGVsZXRlU2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdGVkU2hhcGVzID0gc2VsZWN0aW9uU3RvcmUuZ2V0KCk7XHJcbiAgICAgICAgdHJhbnNmb3JtZXJTdG9yZS5yZW1vdmVBbGwoKTtcclxuICAgICAgICBhbmd1bGFyLmZvckVhY2goc2VsZWN0ZWRTaGFwZXMsIGZ1bmN0aW9uKHNoYXBlKSB7XHJcbiAgICAgICAgICBhY3Rpb25TdGF0ZXMucHVzaChcclxuICAgICAgICAgICAgY29tbW9uVlBGYWN0b3J5LmFjdGlvbkhhbmRsZXIoXHJcbiAgICAgICAgICAgICAgc3RhZ2UsXHJcbiAgICAgICAgICAgICAgc2hhcGUsXHJcbiAgICAgICAgICAgICAgc2hhcGUuZ2V0UGFyZW50KCksXHJcbiAgICAgICAgICAgICAgXCJkZWxldGVcIlxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgc2hhcGUucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmFzZUxheWVyLmRyYXcoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZtLmxvYWRNYXRlcmlhbCA9IHNoYXBlUHJvcCA9PiB7XHJcbiAgICAgICAgJChcIiNsb2FkTWF0ZXJpYWxcIikubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdm0uY3JlYXRlQXNzb2NpYXRpb24gPSAoc2hhcGVJZCwgZW50aXR5SWQsIHR5cGUpID0+IHtcclxuICAgICAgICB2bS5hc3NvY2lhdGlvbnMuY3JlYXRlQXNzb2NpYXRpb24oc2hhcGVJZCwgZW50aXR5SWQsIHR5cGUpO1xyXG4gICAgICAgICQoXCIjbG9hZE1hdGVyaWFsXCIpLm1vZGFsKFwiaGlkZVwiKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgICRzY29wZS4kb24oXCJzZWxlY3RlZE1hdGVyaWFsXCIsIChlLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJzZWxlY3RlZE1hdGVyaWFsLS0tLVwiLCBkYXRhKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBcclxuICAgICAgICAgIEVuZCBvZiB2aWV3IGZ1bmN0aW9uc1xyXG4gICAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgfVxyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5jb250cm9sbGVyKFwid29ya2luZ0hvdXJzQ3RybFwiLCB3b3JraW5nSG91cnNDdHJsKTtcclxuXHJcbiAgZnVuY3Rpb24gd29ya2luZ0hvdXJzQ3RybChcclxuICAgICRzY29wZSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgYXV0aEZhY3RvcnksXHJcbiAgICAkc3RhdGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgTm90aWZpY2F0aW9uLFxyXG4gICAgZ2xvYmFscyxcclxuICAgIE5nTWFwLFxyXG4gICAgVXBsb2FkLFxyXG4gICAgbW9tZW50LFxyXG4gICAgJGxvY2F0aW9uXHJcbiAgKSB7XHJcbiAgICAvKiBSZXF1aXJpbmcgdmFycyAqL1xyXG4gICAgbGV0IHZtID0gdGhpcztcclxuICAgIGNvbnN0IHsgbG9nb3V0LCB1c2VyU3RvcmUsIGRlYm91bmNlIH0gPSBnbG9iYWxzO1xyXG4gICAgaWYgKCFhdXRoRmFjdG9yeS5jaGVja1VzZXIoKSkge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEdldCBwcm9qZWN0IGxpc3QgKi9cclxuICAgIHZtLnVzZXJEYXRhID0gdXNlclN0b3JlLmdldCgpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKHZtLnVzZXJEYXRhKVxyXG4gICAgdm0ubG9nb3V0ID0gKCkgPT4ge1xyXG4gICAgICBsb2dvdXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmFjdGl2ZUNsYXNzID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuICAgICAgcmV0dXJuICgkbG9jYXRpb24ucGF0aCgpID09PSBwYXRoKSA/ICdhY3RpdmUnIDogJyc7XHJcbiAgICB9XHJcblxyXG4gIH1cclxufSkoKTtcclxuIiwiKCgpID0+IHtcclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5kaXJlY3RpdmUoXCJjYW52YXNQZGZcIiwgY2FudmFzUGRmKTtcclxuXHJcbiAgZnVuY3Rpb24gY2FudmFzUGRmKCRyb290U2NvcGUsIGFwaUZhY3RvcnksICR0aW1lb3V0LCBnbG9iYWxzLCBOb3RpZmljYXRpb24pIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiBcIkFcIixcclxuICAgICAgc2NvcGU6IHtcclxuICAgICAgICBjdXJyZW50OiBcIj1cIlxyXG4gICAgICB9LFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW0sIGF0dHJzKSB7XHJcbiAgICAgICAgZ2xvYmFscy5yZW5kZXJQYWdlKCRzY29wZS5jdXJyZW50LCBlbGVtWzBdKTtcclxuICAgICAgICAkdGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmRpcmVjdGl2ZShcImNoYXRNZXNzYWdlXCIsIGNoYXRNZXNzYWdlKTtcclxuXHJcbiAgZnVuY3Rpb24gY2hhdE1lc3NhZ2UoXHJcbiAgICAkcm9vdFNjb3BlLFxyXG4gICAgYXBpRmFjdG9yeSxcclxuICAgICR0aW1lb3V0LFxyXG4gICAgZ2xvYmFscyxcclxuICAgIE5vdGlmaWNhdGlvblxyXG4gICkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIG06IFwiPVwiLFxyXG4gICAgICAgIHR5cGU6IFwiQFwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHRlbXBsYXRlOiAnPG5nLWluY2x1ZGUgc3JjPVwidHlwZVwiPjwvbmctaW5jbHVkZT4nLFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsIGVsZW0sIGF0dHJzKSB7XHJcbiAgICAgICAgY29uc3QgeyBwcm9qZWN0U3RvcmUgfSA9IGdsb2JhbHM7XHJcbiAgICAgICAgJHNjb3BlLnNob3dQcmV2aWV3ID0gZm9ybWF0ID0+IHtcclxuICAgICAgICAgIHJldHVybiAvcG5nfGpwZWd8Z2lmfGpwZy8udGVzdChmb3JtYXQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmRpcmVjdGl2ZShcImZpbGVQaWNrZXJcIiwgZmlsZVBpY2tlcik7XHJcblxyXG4gIGZ1bmN0aW9uIGZpbGVQaWNrZXIoJHJvb3RTY29wZSwgYXBpRmFjdG9yeSwgJHRpbWVvdXQsIGdsb2JhbHMsIE5vdGlmaWNhdGlvbikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogXCIvcGFydGlhbHMvZmlsZVBpY2tlci5odG1sXCIsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgZm9sZGVyczogXCI9XCIsXHJcbiAgICAgICAgb3B0aW9uczogXCI9XCIsXHJcbiAgICAgICAgc291cmNlOiBcIj1cIixcclxuICAgICAgICBzb3VyY2VmaWxlOiBcIj1cIixcclxuICAgICAgICBzb3VyY2VkaXI6IFwiPVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgZWxlbSwgYXR0cnMpIHtcclxuICAgICAgICBsZXQgZm9sZGVyUGF0aHMgPSBbXTtcclxuICAgICAgICBjb25zdCB7IHByb2plY3RTdG9yZSB9ID0gZ2xvYmFscztcclxuICAgICAgICAkc2NvcGUuZmlsZXMgPSBbXTtcclxuICAgICAgICAkc2NvcGUuZm9sZGVyTmFtZSA9IFwiUm9vdCBGb2xkZXJcIjtcclxuICAgICAgICAkc2NvcGUuY3VycmVudEZvbGRlciA9IFwiXCI7XHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkRm9sZGVyID0gbnVsbDtcclxuICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnZpZXdGb2xkZXIgPSBmb2xkZXIgPT4ge1xyXG4gICAgICAgICAgbGV0IG5hbWUgPSBmb2xkZXIubmFtZTtcclxuICAgICAgICAgIGZvbGRlclBhdGhzLnB1c2goZm9sZGVyKTtcclxuICAgICAgICAgICRzY29wZS5zZWxlY3RlZEZvbGRlcjtcclxuICAgICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgICAgLnZpZXdIaWVyYXJjaHkoZm9sZGVyLl9pZClcclxuICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRm9sZGVyID0gZm9sZGVyO1xyXG4gICAgICAgICAgICAgICRzY29wZS5jdXJyZW50Rm9sZGVyID0gZm9sZGVyLm5hbWU7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmZvbGRlcnMgPSByZXNwLmRhdGEuZm9sZGVycztcclxuICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMgPSByZXNwLmRhdGEuZmlsZXM7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmJyZWFkQ3J1bWJzID0gcmVzcC5kYXRhLmJyZWFkY3J1bWJzO1xyXG4gICAgICAgICAgICAgICRzY29wZS5mb2xkZXJOYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZvbGRlck5hbWUgPT0gXCJSb290IEZvbGRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLnNlbGVjdEZpbGUgPSAoZmlsZSwgYnJlYWRDcnVtYnMpID0+IHtcclxuICAgICAgICAgIGZpbGUuYnJlYWRDcnVtYnMgPSBicmVhZENydW1icztcclxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcImxvYWRlclwiLCB0cnVlKTtcclxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcInNlbGVjdGVkUm9vZlBsYW5Eb2NcIiwgZmlsZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLmJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICBmb2xkZXJQYXRocy5wb3AoKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IGZvbGRlclBhdGhzW2ZvbGRlclBhdGhzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgY29uc3QgYXBpTmFtZSA9IHByZXZpb3VzID8gXCJ2aWV3SGllcmFyY2h5XCIgOiBcImdldEhpZXJhcmNoeVwiO1xyXG4gICAgICAgICAgY29uc3QgcGFyYW0gPSBwcmV2aW91cyA/IHByZXZpb3VzLl9pZCA6IHByb2plY3RTdG9yZS5nZXQoKS5faWQ7XHJcblxyXG4gICAgICAgICAgYXBpRmFjdG9yeVthcGlOYW1lXShwYXJhbSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkRm9sZGVyID0gcHJldmlvdXMgfHwgbnVsbDtcclxuICAgICAgICAgICAgICAkc2NvcGUuY3VycmVudEZvbGRlciA9IHByZXZpb3VzID8gcHJldmlvdXMubmFtZSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLmZvbGRlcnMgPSBwcmV2aW91c1xyXG4gICAgICAgICAgICAgICAgPyByZXNwLmRhdGEuZm9sZGVyc1xyXG4gICAgICAgICAgICAgICAgOiByZXNwLmRhdGEuZGF0YS5oaWVyYXJjaGllcztcclxuICAgICAgICAgICAgICAkc2NvcGUuZmlsZXMgPSBwcmV2aW91cyA/IHJlc3AuZGF0YS5maWxlcyA6IFtdO1xyXG4gICAgICAgICAgICAgICRzY29wZS5mb2xkZXJOYW1lID0gcHJldmlvdXMgPyBwcmV2aW91cy5uYW1lIDogXCJSb290IEZvbGRlclwiO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZvbGRlck5hbWUgPT0gXCJSb290IEZvbGRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYmFja0J0blZpZXcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJHNjb3BlLm1vdmVUbyA9IChmb2xkZXIsIHNvdXJjZSkgPT4ge1xyXG4gICAgICAgICAgaWYgKCFmb2xkZXIpIHtcclxuICAgICAgICAgICAgLyogcmV0dXJuIGlmIG5vIGZvbGRlciBpcyBzZWxlY3RlZCAqL1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbGV0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgIGFzc2V0SWQ6ICRzY29wZS5zb3VyY2VmaWxlLl9pZCxcclxuICAgICAgICAgICAgc291cmNlSWQ6IHNvdXJjZS4kbW9kZWxWYWx1ZS5faWQsXHJcbiAgICAgICAgICAgIGRlc3RJZDogZm9sZGVyLl9pZFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIC8qIFN0ZXAgMTogTW92ZSBhc3NldCAqL1xyXG4gICAgICAgICAgYXBpRmFjdG9yeVxyXG4gICAgICAgICAgICAubW92ZUFzc2V0cyhwYXlsb2FkKVxyXG4gICAgICAgICAgICAudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAvKiBTdGVwIDI6IHJlbW92ZSBmaWxlIGZyb20gdGhlIHNvdXJjZSBkaXIgaWYgc3VjY2Vzc2Z1bCAqL1xyXG4gICAgICAgICAgICAgIGlmICgkc2NvcGUuc291cmNlZGlyKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc291cmNlZGlyID0gJHNjb3BlLnNvdXJjZWRpci5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAgIHggPT4geC5faWQgIT09ICRzY29wZS5zb3VyY2VmaWxlLl9pZFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3MoXCJGaWxlIE1vdmVkIFN1Y2Nlc3NmdWxseVwiKTtcclxuICAgICAgICAgICAgICAkKFwiI21vdmVUb1wiKS5tb2RhbChcImhpZGVcIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn0pKCk7XHJcbiIsIigoKSA9PiB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZGlyZWN0aXZlKCdhdXRvQ29tcGxldGUnLCBmdW5jdGlvbigkdGltZW91dCkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHtcclxuICAgICAgICAgICAgICBpRWxlbWVudC5hdXRvY29tcGxldGUoe1xyXG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHNjb3BlW2lBdHRycy51aUl0ZW1zXSxcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpRWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH0pKCk7XHJcbiAgXHJcbiAgKCgpID0+IHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5kaXJlY3RpdmUoJ2VyclNyYycsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgZWxlbWVudC5iaW5kKCdlcnJvcicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGF0dHJzLnNyYyAhPSBhdHRycy5lcnJTcmMpIHtcclxuICAgICAgICAgICAgYXR0cnMuJHNldCgnc3JjJywgYXR0cnMuZXJyU3JjKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIFxyXG59KSgpOyIsIigoKSA9PiB7XHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZGlyZWN0aXZlKFwibWF0ZXJpYWxQaWNrZXJcIiwgbWF0ZXJpYWxQaWNrZXIpO1xyXG5cclxuICBmdW5jdGlvbiBtYXRlcmlhbFBpY2tlcihcclxuICAgICRyb290U2NvcGUsXHJcbiAgICBhcGlGYWN0b3J5LFxyXG4gICAgJHRpbWVvdXQsXHJcbiAgICBnbG9iYWxzLFxyXG4gICAgTm90aWZpY2F0aW9uXHJcbiAgKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogXCJFXCIsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcIi9wYXJ0aWFscy9tYXRlcmlhbFBpY2tlci5odG1sXCIsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgbWF0ZXJpYWxUeXBlOiBcIj1cIixcclxuICAgICAgICBzZWxlY3RlZE1hdGVyaWFsOiBcIj1cIixcclxuICAgICAgICBjdXJyZW50U2hhcGU6IFwiPVwiLFxyXG4gICAgICAgIGFzc29jaWF0aW9uczogXCI9XCJcclxuICAgICAgfSxcclxuICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCBlbGVtLCBhdHRycykge1xyXG4gICAgICAgIC8vIGxldCBtYXRlcmlhbFR5cGUgPSBhbmd1bGFyLmNvcHkobWF0ZXJpYWxUeXBlLnR5cGUpO1xyXG5cclxuICAgICAgICAvKiAkc2NvcGUuJHdhdGNoKCdtYXRlcmlhbFR5cGUnLChuZXdWYWwsIG9sZFZhbCkgPT4ge1xyXG4gICAgICAgICAgaWYob2xkVmFsLnR5cGUgPT09IG5ld1ZhbC50eXBlKSByZXR1cm47XHJcbiAgICAgICAgICAvLyBnZXQgTWF0ZXJpYWwgTGlzdFxyXG4gICAgICAgICAgaWYgKG5ld1ZhbC50eXBlID09ICdtYXRlcmlhbCcpIHtcclxuICAgICAgICAgICAgJHNjb3BlLm1hdGVyaWFsTGlzdCA9IFtdXHJcbiAgICAgICAgICAgIGFwaUZhY3RvcnkubGlzdEFsbE1hdGVyaWFscygpLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLm1hdGVyaWFsTGlzdCA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgICB9KS5jYXRjaChlID0+IHsgfSk7XHJcblxyXG4gICAgICAgICAgfSBlbHNlIGlmIChuZXdWYWwudHlwZSA9PSAnRENQJykge1xyXG4gICAgICAgICAgICAkc2NvcGUubWF0ZXJpYWxMaXN0ID0gW11cclxuICAgICAgICAgICAgYXBpRmFjdG9yeS5saXN0QWxsQ29tYm9NYXRlcmlhbHMoKS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAgICRzY29wZS5tYXRlcmlhbExpc3QgPSByZXNwLmRhdGEubGlzdDtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZSA9PiB7IH0pO1xyXG5cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5tYXRlcmlhbExpc3QgPSBbXVxyXG4gICAgICAgICAgICBhcGlGYWN0b3J5Lmxpc3RBbGxFcXVpcG1lbnRzKCkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICAkc2NvcGUubWF0ZXJpYWxMaXN0ID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4geyB9KTtcclxuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdHJ1ZSkgKi9cclxuXHJcbiAgICAgICAgLy8gZ2V0IE1hdGVyaWFsIExpc3RcclxuICAgICAgICAkc2NvcGUubWF0ZXJpYWxMaXN0ID0gW107XHJcbiAgICAgICAgJHNjb3BlLmVudGl0eVR5cGUgPSAxO1xyXG4gICAgICAgIGFwaUZhY3RvcnlcclxuICAgICAgICAgIC5saXN0QWxsTWF0ZXJpYWxzKClcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAkc2NvcGUubWF0ZXJpYWxMaXN0ID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1hdGVyaWFsID0gYW5ndWxhci5jb3B5KCRzY29wZS5tYXRlcmlhbExpc3RbMF0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHt9KTtcclxuXHJcbiAgICAgICAgLy8gZ2V0IERDUCBMaXN0XHJcbiAgICAgICAgJHNjb3BlLmRjcExpc3QgPSBbXTtcclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAubGlzdEFsbENvbWJvTWF0ZXJpYWxzKClcclxuICAgICAgICAgIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICAkc2NvcGUuZGNwTGlzdCA9IHJlc3AuZGF0YS5saXN0O1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaChlID0+IHt9KTtcclxuXHJcbiAgICAgICAgLy8gZ2V0IEVxdWlvbWVudCBMaXN0XHJcbiAgICAgICAgJHNjb3BlLmVxdWlwbWVudExpc3QgPSBbXTtcclxuICAgICAgICBhcGlGYWN0b3J5XHJcbiAgICAgICAgICAubGlzdEFsbEVxdWlwbWVudHMoKVxyXG4gICAgICAgICAgLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICAgICRzY29wZS5lcXVpcG1lbnRMaXN0ID0gcmVzcC5kYXRhLmxpc3Q7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKGUgPT4ge30pO1xyXG5cclxuICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNYXRlcmlhbEluZm8gPSBtYXRlcmlhbCA9PiB7XHJcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoXCJzZWxlY3RlZE1hdGVyaWFsXCIsIG1hdGVyaWFsKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKG1hdGVyaWFsKTtcclxuICAgICAgICAgICRzY29wZS5tYXRlcmlhbEltYWdlcyA9IG1hdGVyaWFsO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5tYXRlcmlhbFNlbGVjdGlvbiA9IGl0ZW0gPT4ge1xyXG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTWF0ZXJpYWwgPSBpdGVtO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5yZXNldFNlbGVjdGVkTWF0ZXJpYWwgPSB2YWwgPT4ge1xyXG4gICAgICAgICAgaWYgKCEkc2NvcGUuc2VsZWN0ZWRNYXRlcmlhbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUuY3VycmVudFNoYXBlKTtcclxuICAgICAgICAgIGlmICh2YWwgPT0gMCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNYXRlcmlhbCA9IGFuZ3VsYXIuY29weSgkc2NvcGUubWF0ZXJpYWxMaXN0WzBdKTtcclxuICAgICAgICAgICAgJHNjb3BlLmVudGl0eVR5cGUgPSB2YWwgKyAxO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh2YWwgPT0gMSkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNYXRlcmlhbCA9IGFuZ3VsYXIuY29weSgkc2NvcGUuZGNwTGlzdFswXSk7XHJcbiAgICAgICAgICAgICRzY29wZS5lbnRpdHlUeXBlID0gdmFsICsgMTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1hdGVyaWFsID0gYW5ndWxhci5jb3B5KCRzY29wZS5lcXVpcG1lbnRMaXN0WzBdKTtcclxuICAgICAgICAgICAgJHNjb3BlLmVudGl0eVR5cGUgPSB2YWwgKyAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5hc3NpZ25NYXRlcmlhbCA9IChzaGFwZUlkLCBlbnRpdHlJZCwgdHlwZSkgPT4ge1xyXG4gICAgICAgICAgJChcIiNsb2FkTWF0ZXJpYWxcIikubW9kYWwoXCJoaWRlXCIpO1xyXG4gICAgICAgICAgJHNjb3BlLmFzc29jaWF0aW9ucy5jcmVhdGVBc3NvY2lhdGlvbihzaGFwZUlkLCBlbnRpdHlJZCwgdHlwZSk7XHJcbiAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoKCkgPT4ge1xyXG4gIC8qIEN1cnJlbnR5IGNvbnZlcnRvciAqL1xyXG4gIGFuZ3VsYXIubW9kdWxlKFwiYXBwXCIpLmZpbHRlcihcImNvbnZlcnRDdXJyZW5jeVwiLCBjb252ZXJ0Q3VycmVuY3kpO1xyXG5cclxuICBmdW5jdGlvbiBjb252ZXJ0Q3VycmVuY3koKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGNvbnZlcnNpb25SYXRlKSB7XHJcbiAgICAgIGlmICghaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gaW5wdXQgKiBjb252ZXJzaW9uUmF0ZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qIFJvdW5kIG51bWJlciAqL1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5maWx0ZXIoXCJyb3VuZE51bVwiLCByb3VuZE51bSk7XHJcblxyXG4gIGZ1bmN0aW9uIHJvdW5kTnVtKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBwbGFjZSkge1xyXG4gICAgICBpZiAoIWlucHV0KSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcihpbnB1dCkudG9GaXhlZChwbGFjZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKiBGZXRjaCB0aHVtYm5haWwgKi9cclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoXCJhcHBcIikuZmlsdGVyKFwiZmV0Y2hUaHVtYm5haWxcIiwgZmV0Y2hUaHVtYm5haWwpO1xyXG5cclxuICBmdW5jdGlvbiBmZXRjaFRodW1ibmFpbCgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICBpZiAoIWlucHV0KSByZXR1cm47XHJcbiAgICAgIHJldHVybiAvY2xvdWRpbmFyeS8udGVzdChpbnB1dC5zZWN1cmVfdXJsKVxyXG4gICAgICAgID8gaW5wdXQuc2VjdXJlX3VybC5yZXBsYWNlKC9cXC5wZGYvLCBcIi5wbmdcIilcclxuICAgICAgICA6IGlucHV0LnRodW1ibmFpbDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKiBQYXJzZSB0eXBpbmcgbWVtYmVycyAqL1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZShcImFwcFwiKS5maWx0ZXIoXCJwYXJzZVR5cGluZ01lbWJlcnNcIiwgcGFyc2VUeXBpbmdNZW1iZXJzKTtcclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VUeXBpbmdNZW1iZXJzKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgIGlmICghaW5wdXQgfHwgIWlucHV0Lmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaW5wdXQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHJldHVybiBgJHtpbnB1dC5sZW5ndGh9IHBlb3BsZSBhcmUgdHlwaW5nLi5gO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgJHtpbnB1dFswXS5uaWNrbmFtZX0gaXMgdHlwaW5nLi5gO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufSkoKTtcclxuIl19
