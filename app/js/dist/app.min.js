"use strict";function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var app=angular.module("app",["ui.router","routesModule","LocalStorageModule","uiGmapgoogle-maps","ngProgress","ui-notification","ngMap","ui.select","ui.select2","ngSanitize","color.picker","ui.bootstrap","datatables","ngTagsInput","ngFileUpload","infinite-scroll","ui.tree","angularMoment","btorfs.multiselect","htmlToPdfSave","dndLists","angular.chips","ui.bootstrap.contextMenu","cloudinary","FileSaver"]);function config(NotificationProvider,uiGmapGoogleMapApiProvider,treeConfig,cloudinaryProvider){uiGmapGoogleMapApiProvider.configure({key:"AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",v:"3.exp",libraries:"places,weather,geometry,visualization"}),NotificationProvider.setOptions({delay:3e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"top"}),treeConfig.defaultCollapsed=!0,cloudinaryProvider.set("cloud_name","dktnhmsjx").set("upload_preset","cloudes_frontend")}function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("preLogin",{url:"/",templateUrl:"/partials/preLogin.html",controller:"preLoginCtrl as vm"}),$stateProvider.state("dashboard",{url:"/dashboard",templateUrl:"/partials/dashboard.html",controller:"dashboardCtrl as vm"}),$stateProvider.state("createProject",{url:"/create_project",templateUrl:"/partials/createProject.html",controller:"createProjectCtrl as vm"}),$stateProvider.state("visualPlanner",{url:"/visual_planner",templateUrl:"/partials/visualPlanner.html",controller:"visualPlannerCtrl as vm"}),$stateProvider.state("projects",{url:"/projects",templateUrl:"/partials/projects.html",controller:"projectCtrl as vm"}),$stateProvider.state("materials",{url:"/materials",templateUrl:"/partials/materials.html",controller:"materialCtrl as vm"}),$stateProvider.state("materialView",{url:"/material/:id",templateUrl:"/partials/materialView.html",controller:"materialViewCtrl as vm"}),$stateProvider.state("comboMaterialView",{url:"/combo_material/:id",templateUrl:"/partials/comboMaterialView.html",controller:"comboMaterialViewCtrl as vm"}),$stateProvider.state("equipments",{url:"/equipments",templateUrl:"/partials/equipments.html",controller:"equipmentCtrl as vm"}),$stateProvider.state("equipmentView",{url:"/equipmentView/:id",templateUrl:"/partials/equipmentView.html",controller:"equipmentViewCtrl as vm"}),$stateProvider.state("fileManager",{url:"/file_manager",templateUrl:"/partials/fileManager.html",controller:"fileManagerCtrl as vm"}),$stateProvider.state("payroll",{url:"/payroll",templateUrl:"/partials/payroll.html",controller:"payrollCtrl as vm"}),$stateProvider.state("calculation",{url:"/calculation",templateUrl:"/partials/calculation.html",controller:"calculationCtrl as vm"}),$stateProvider.state("report",{url:"/report",templateUrl:"/partials/reports.html",controller:"reportsCtrl as vm"}),$stateProvider.state("issues",{url:"/issues",templateUrl:"/partials/issues.html",controller:"issuesCtrl as vm"}),$stateProvider.state("issuesDetail",{url:"/issues_details/:id",templateUrl:"/partials/issues_details.html",controller:"issueDetailCtrl as vm"}),$stateProvider.state("reportsDetail",{url:"/reports_details/:id",templateUrl:"/partials/reportsdetails.html",controller:"reportDetailCtrl as vm"}),$stateProvider.state("billingArchive",{url:"/billing_archive",templateUrl:"/partials/billingArchive.html",controller:"billingArchiveCtrl as vm"}),$stateProvider.state("reportsListing",{url:"/reports_listing",templateUrl:"/partials/reportsListing.html",controller:"reportsListingCtrl as vm"}),$stateProvider.state("3dDashboard",{url:"/3d_dashboard",templateUrl:"/partials/3d-dashboard.html",controller:"_3dDashboardCtrl as vm"}),$stateProvider.state("setPassword",{url:"/set_password",templateUrl:"/partials/set_password.html",controller:"setPasswordCtrl as vm"}),$stateProvider.state("setting",{url:"/setting",templateUrl:"/partials/setting.html",controller:"settingCtrl as vm"}),$stateProvider.state("employees",{url:"/employees",templateUrl:"/partials/employee.html",controller:"employeesCtrl as vm"}),$stateProvider.state("3dviewer",{url:"/3dviewer",templateUrl:"/partials/3d-viewer.html",controller:"_3dviewerCtrl as vm"}),$stateProvider.state("clients",{url:"/clients",templateUrl:"/partials/clients.html",controller:"clientsCtrl as vm"}),$stateProvider.state("supplier",{url:"/supplier",templateUrl:"/partials/supplier.html",controller:"supplierCtrl as vm"}),$stateProvider.state("supplierDetail",{url:"/supplier_details/:id",templateUrl:"/partials/supplierdetails.html",controller:"supplierDetailCtrl as vm"}),$stateProvider.state("subcontractor",{url:"/subcontractor",templateUrl:"/partials/subcontractor.html",controller:"subcontractorCtrl as vm"}),$stateProvider.state("subcontractorDetail",{url:"/subcontractor_details/:id",templateUrl:"/partials/subcontractordetails.html",controller:"subcontractorDetailCtrl as vm"}),$stateProvider.state("meetingroom",{url:"/meetingroom",templateUrl:"/partials/meetingRoom.html",controller:"meetingRoomCtrl as vm"}),$stateProvider.state("calender",{url:"/calender",templateUrl:"/partials/calender.html",controller:"calenderCtrl as vm"}),$stateProvider.state("todo",{url:"/todo",templateUrl:"/partials/todo.html",controller:"todoCtrl as vm"}),$stateProvider.state("todoView",{url:"/todoView/:id",templateUrl:"/partials/todoView.html",controller:"todoViewCtrl as vm"})}app.config(config),angular.module("routesModule",[]).config(routeConfig),function(){angular.module("app").factory("apiFactory",function($http,$state,$location,localStorageService,globals,Upload,Notification,$q){var _ref,url="https://api.staging.cloudes.eu",headers=function(method,token){return{"Content-Type":"GET"===method?void 0:"application/json","x-access-token":token?localStorageService.get("access-token"):void 0,platform:JSON.stringify({source:"web"})}},progress=globals.progress,logout=(globals.userStore,globals.logout);return _defineProperty(_ref={login:function(payload){var promise=this.progressify($http({url:url+"/authenticate",method:"POST",headers:headers("POST"),data:payload}));return promise},forgotPassword:function(payload){var promise=this.progressify($http({url:url+"/forgetPassword",method:"POST",headers:headers("POST"),data:payload}));return promise},registration:function(payload){var promise=this.progressify($http({url:url+"/dashboardRegistration",method:"POST",headers:headers("POST"),data:payload}));return promise},subscribe:function(payload){var promise=this.progressify($http({url:url+"/subscribe",method:"POST",headers:headers("POST"),data:payload}));return promise},getCompanyById:function(companyId){var promise=this.progressify($http({url:url+"/api/getCompanyById/"+companyId,method:"GET",headers:headers("GET",!0)}));return promise},listAllUsers:function(){var promise=this.progressify($http({url:url+"/api/getadminusers",method:"GET",headers:headers("GET",!0)}));return promise},listAllProjects:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllProjects"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllClients:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllClients"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllRoofers:function(){var promise=this.progressify($http({url:url+"/api/listAllRoofers",method:"GET",headers:headers("GET",!0)}));return promise},createProject:function(payload){var promise=this.progressify($http({url:url+"/api/createProject",method:"POST",headers:headers("POST",!0),data:payload}));return promise},createIssue:function(issueobj){console.log("in create issue api",issueobj);var promise=this.progressify(Upload.upload({url:url+"/api/createIssue",method:"POST",data:issueobj,headers:headers("POST",!0)}));return promise},createIssueS3Upload:function(issueobj){var promise=this.progressify(Upload.upload({url:url+"/api/createIssueForS3",method:"POST",data:issueobj,headers:headers("POST",!0)}));return promise},getIssueById:function(issueID){var promise=this.progressify($http({url:url+"/api/getIssueById/"+issueID,method:"GET",headers:headers("GET",!0)}));return promise},updateIssue:function(issueobj,id){var promise=this.progressify(Upload.upload({url:url+"/api/updateIssue/"+id,method:"PUT",data:issueobj,headers:headers("PUT",!0)}));return promise},getProjectRoofPlans:function(projectId){var promise=this.progressify($http({url:url+"/api/getProjectRoofPlans/"+projectId,method:"GET",headers:headers("GET",!0)}));return promise},saveRoofPlan:function(roofPlanId,payload){var promise=this.progressify($http({url:url+"/api/saveRoofPlan/"+roofPlanId,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},createMaterials:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createMaterial",data:payload,headers:headers("POST",!0)}));return promise},createEquipment:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createEquipment",data:payload,headers:headers("POST",!0)}));return promise},listAllMaterials:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllMaterials"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllComboMaterials:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listComboMaterials"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllEquipments:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllEquipments"+query,method:"GET",headers:headers("GET",!0)}));return promise},updateMaterialById:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateMaterialById/"+id,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},getMaterialById:function(materialID){var promise=this.progressify($http({url:url+"/api/getMaterialById/"+materialID,method:"GET",headers:headers("GET",!0)}));return promise},getComboMaterialById:function(comboId){var promise=this.progressify($http({url:url+"/api/getComboMaterialById/"+comboId,method:"GET",headers:headers("GET",!0)}));return promise},getEquipmentById:function(id){var promise=this.progressify($http({url:url+"/api/getEquipmentById/"+id,method:"GET",headers:headers("GET",!0)}));return promise},createComboMaterial:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createComboMaterial",method:"POST",headers:headers("POST",!0),data:payload}));return promise},updateComboMaterialList:function(id,payload){var promise=this.progressify($http({url:url+"/api/updateComboMaterialList/"+id,method:"PUT",headers:headers("POST",!0),data:payload}));return promise},updateComboMaterial:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateComboMaterial/"+id,method:"PUT",headers:headers("POST",!0),data:payload}));return promise},showConversionRate:function(payload){var promise=this.progressify($http({url:url+"/api/showConversionRate",method:"POST",headers:headers("POST",!0),data:payload}));return promise}},"getMaterialById",function(id){var promise=this.progressify($http({url:url+"/api/getMaterialById/"+id,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"progressify",function(promise){return new Promise(function(resolve,reject){progress.start(),promise.then(function(resp){progress.complete(),resolve(resp)}).catch(function(err){progress.complete(),401===err.status&&logout(),reject(err)})})}),_defineProperty(_ref,"listAllIssues",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllIssues"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getIssuesList",function(){var promise=this.progressify($http({url:url+"/api/allIssues",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"isTokenValid",function(payload){var promise=this.progressify($http({url:url+"/isTokenValid",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"setPassword",function(payload){var promise=this.progressify($http({url:url+"/resetPasswordAdmin",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"updateRoleBasedAccess",function(payload){var promise=this.progressify($http({url:url+"/api/updateRoleBasedAccess",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"addHierarchy",function(payload){var promise=this.progressify($http({url:url+"/api/addHierarchy",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"getHierarchyChildren",function(hierarchyId){var promise=this.progressify($http({url:url+"/api/getHierarchyChildren/"+hierarchyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getHierarchy",function(projectId){var promise=this.progressify($http({url:url+"/api/getHierarchy/"+projectId+"?depth=2",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"viewProjectAssets",function(projectId){var promise=this.progressify($http({url:url+"/api/viewProjectAssets/"+projectId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"addFileToHierarchy",function(payload){var promise=this.progressify($http({url:url+"/api/addFileToHierarchy",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"viewHierarchy",function(hierarchyId){var promise=this.progressify($http({url:url+"/api/viewHierarchy/"+hierarchyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"cloneAssets",function(payload){var promise=this.progressify($http({url:url+"/api/cloneAssets",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"uploadFileInFileManager",function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/uploadFileInFileManager",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"dragMoveNodes",function(payload){var promise=this.progressify($http({url:url+"/api/dragMoveNodes",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"moveAssets",function(payload){var promise=this.progressify($http({url:url+"/api/moveAssets",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"deleteAssets",function(payload){var promise=this.progressify($http({url:url+"/api/deleteAssets",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"get3DPage",function(){var token=localStorageService.get("access-token"),Data3D={"x-access-token":token,projectId:"5b697c030a7e97056835a94a"},promise=this.progressify($http({url:"https://cloudes-3d.com",method:"POST",data:Data3D}));return promise}),_defineProperty(_ref,"createClient",function(client){console.log("client in api factory",client);var promise=this.progressify($http({url:url+"/api/createClient",method:"POST",headers:headers("POST",!0),data:client}));return promise}),_defineProperty(_ref,"saveHierarchyTree",function(projectId,name){var promise=this.progressify($http({url:url+"/api/saveHierarchyTree/"+projectId,method:"PUT",headers:headers("POST",!0),data:name}));return promise}),_defineProperty(_ref,"getSystemTag",function(){var promise=this.progressify($http({url:url+"/api/getComboSystemTag",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"bookMarkProject",function(id,added){var promise=this.progressify($http({url:url+"/api/bookMarkProject",method:"PUT",data:{projectId:id,added:added},headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getBookmarks",function(){var promise=this.progressify($http({url:url+"/api/getBookmarks",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getHierarchyTemplate",function(){var promise=this.progressify($http({url:url+"/api/getHierarchyTemplate",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"loadHierarchyTree",function(payload){var promise=this.progressify($http({url:url+"/api/loadHierarchyTree",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"newFileUpload",function(payload){var promise=this.progressify($http({url:url+"/api/newFileUpload",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"showProjectFiles",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/showProjectFiles"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"changeProjectTemplate",function(payload){var promise=this.progressify($http({url:url+"/api/changeProjectTemplate",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"showProjectFiles",function(id,limit){var promise=this.progressify($http({url:url+"/api/showProjectFiles/"+id+"?limit="+limit,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getProjectById",function(id){var promise=this.progressify($http({url:url+"/api/getProjectById/"+id,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"checkAssetDuplicate",function(payload){var promise=this.progressify($http({url:url+"/api/checkAssetDuplicate",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"createNewSupplier",function(supplier){var promise=this.progressify(Upload.upload({url:url+"/api/addsupplier",method:"POST",data:supplier,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getAllSuppliers",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listallsuppliers"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getAllSubcontractors",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listallsubcontractor"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"addProjectRoofPlan",function(payload,projectId){var promise=this.progressify($http({url:url+"/api/addProjectRoofPlan",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"generateRoofPlans",function(payload){var promise=this.progressify($http({url:url+"/api/generateRoofPlans",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"addRoofPlansFromAsset",function(payload){var promise=this.progressify($http({url:url+"/api/addRoofPlansFromAsset",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"getSupplierById",function(supplierID){var promise=this.progressify($http({url:url+"/api/getsupplier/"+supplierID,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"createNewSubcontractor",function(subcontractor){var promise=this.progressify(Upload.upload({url:url+"/api/addsubcontractor",method:"POST",data:subcontractor,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getSubcontractorById",function(supplierID){var promise=this.progressify($http({url:url+"/api/getsubcontractor/"+supplierID,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"issueImage",function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/issueImage",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"newIssues3FileUpload",function(payload){console.log("IN S3 ISSUE FUNCTION");var promise=this.progressify($http({url:url+"/api/newIssues3FileUpload",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"postCommentForIssue",function(id,comment){console.log("Comment: ",comment);var promise=this.progressify($http({url:url+"/api/addcomment/"+id,method:"PUT",data:comment,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"saveLocalIssueAsset",function(files){var promise=this.progressify(Upload.upload({url:url+"/api/localFileImages",method:"POST",headers:headers("POST",!0),data:files}));return promise}),_defineProperty(_ref,"postMarkImg",function(dt){console.log("data: ",dt);var promise=this.progressify(Upload.upload({url:url+"/api/postmarkings",method:"POST",headers:headers("POST",!0),data:dt}));return promise}),_defineProperty(_ref,"reOpenIssueStatusUpdate",function(id){var promise=this.progressify($http({url:url+"/api/reopenStatus/"+id,method:"PUT",data:{completionStatus:"OPEN"},headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"getAllAtOnce",function(){var deferred=$q.defer(),infoPromise=$http({url:url+"/api/getadminusers",method:"GET",headers:headers("GET",!0)}),detailsPromise=$http({url:url+"/api/listAllRoofers",method:"GET",headers:headers("GET",!0)});$q.all([infoPromise,detailsPromise]).then(function(data){return deferred.resolve({fruitInfo:data[0],fruitDetails:data[1]}),deferred.promise})}),_defineProperty(_ref,"saveIssueAsComplete",function(id,object){console.log(object);var promise=this.progressify(Upload.upload({url:url+"/api/markissueascomplete/"+id,method:"PUT",data:object,headers:headers("PUT",!0)}));return promise}),_defineProperty(_ref,"getAccessMeetingRoomToken",function(){var promise=$http({url:url+"/api/getAccessMeetingRoomToken",method:"GET",headers:headers("GET",!0)});return promise}),_ref})}(),function(){angular.module("app").factory("authFactory",function($http,$location,localStorageService){return{checkUser:function(){var token=localStorageService.get("access-token");return!(!token||""==token)},checkPrivilege:function(type,subType){var _localStorageService$=localStorageService.get("userData"),privilege=_localStorageService$.privilege,_localStorageService$2=localStorageService.get("companyData"),privileges=_localStorageService$2.privileges;return privilege<=privileges[type][subType]}}})}(),function(){angular.module("app").factory("fileManagerFactory",function(apiFactory,Notification){return{clipBoard:(items={type:0,data:[],source:null},{copy:function(item){items.source=null,items.type=0,items.data=[item]},cut:function(item,source){items.source=source,items.type=1,items.data=[item]},paste:function(destId){return new Promise(function(resolve,reject){if(items.data.length<1)return Notification.warning("Clipboard is empty"),void resolve(!1);var apiType=0===items.type?"cloneAssets":"moveAssets",payload={assetId:items.data.map(function(x){return x._id}),sourceId:0===items.type?void 0:items.source,destId:0===items.type?void 0:destId,hierarchyId:0===items.type?destId:void 0};apiFactory[apiType](payload).then(function(resp){Notification.success(resp.data.message),items={type:0,data:[],source:null},resolve(!0)}).catch(function(e){console.log(e),reject(!1)})})}}),navigationStack:function(){var stack=[],head=stack.length-1;return{push:function(item){stack.splice(head+1,stack.length,item),head=stack.length-1},forward:function(){if(stack.length&&head!==stack.length-1)return stack[++head]?(stack[head].toggle(),stack[head]):void 0},backward:function(){if(stack.length&&!(head<0))return stack[head]?(stack[head].toggle(),stack[--head]):void 0}}},breadCrumb:function(){var breadCrumbs=[];return{set:function(val){breadCrumbs.push(val)},get:function(){return breadCrumbs}}},splitDestination:function(filesArray){return filesArray.reduce(function(acc,x){return x.size<5e7&&("application/pdf"===x.type||/image*/.test(x.type))?acc.cloudinary.push(x):acc.s3.push(x),acc},{s3:[],cloudinary:[]})},resolveDestType:function(file){return file.size<5e7&&("application/pdf"===file.type||/image*/.test(file.type))?2:1},checkUploadCompletion:function(files){var bool=!0;return files.s3.forEach(function(x){x.completed||x.aborted||!bool||(bool=!1)}),files.cloudinary.forEach(function(x){x.completed||x.aborted||!bool||(bool=!1)}),bool},checkDuplicateFiles:function(files,destId){return new Promise(function(resolve,reject){apiFactory.checkAssetDuplicate({assetNames:files.map(function(x){return x.name}),destId:destId}).then(function(resp){var duplicateFiles=files.map(function(x){return x.action="rename",x.assetName=x.name,x}).reduce(function(acc,x){return-1===resp.data.duplicates.indexOf(x.name)?acc.uploadFiles.push(x):acc.duplicates.push(x),acc},{duplicates:[],uploadFiles:[]});resolve(duplicateFiles)}).catch(function(e){reject(e)})})},checkNameChange:function(files){return files.filter(function(x){return"rename"===x.action}).reduce(function(acc,x){return acc=acc||x.assetName===x.name},!1)},generateVersion:function(fileName){return fileName+" (v"+Date.now()+")"},generateThumbnail:function(file){var reader=new FileReader;reader.onload=function(){pdfjsLib.getDocument({url:reader.result}).then(function(doc){doc.getPage(1).then(function(page){console.log("page!!!",page);var viewport=page.getViewport(1),canvas=document.createElement("canvas"),context=canvas.getContext("2d");canvas.height=viewport.height,canvas.width=viewport.width;var task=page.render({canvasContext:context,viewport:viewport});task.promise.then(function(){var dataURL=canvas.toDataURL("image/png"),link=document.createElement("a");link.download="roofplan_image_"+Date.now(),link.href=dataURL,document.body.appendChild(link),link.click(),document.body.removeChild(link)})})})},reader.readAsDataURL(file)},splitFileDest:function(filesArray){return filesArray.reduce(function(acc,x){return x.file.size<5e7&&("application/pdf"===x.file.type||/image*/.test(x.file.type))?acc.cloudinary.push(x):acc.s3.push(x),acc},{s3:[],cloudinary:[]})}};var items})}(),function(){angular.module("app").factory("globals",function($http,$state,$location,ngProgressFactory,Notification,localStorageService){var throttler=(enabled=!0,function(fn){enabled&&(enabled=!1,setTimeout(function(){enabled=!0}),fn())});var enabled;return{progress:(progressbar=ngProgressFactory.createInstance(),progressbar),logout:function(){localStorageService.remove("access-token"),localStorageService.remove("userData"),localStorageService.remove("companyData"),localStorageService.set("currentProject",null),localStorageService.remove("inventoryState"),$state.go("preLogin"),throttler(function(){return Notification.error("Please login")})},userStore:(userData=localStorageService.get("userData")||{},{set:function(data){return data.privilege=["admin","manager","sub_contractor","team_leader","worker"].indexOf(data.designation),localStorageService.set("userData",data),userData=data},get:function(){return userData},reset:function(){localStorageService.remove("userData"),userData={}}}),companyStore:(companyData=localStorageService.get("companyData")||null,{set:function(data){return localStorageService.set("companyData",data),companyData=data},get:function(){return companyData},refetch:function(id){$http({method:"GET",headers:{"x-access-token":localStorageService.get("access-token"),platform:JSON.stringify({source:"web"})},url:"https://api.staging.cloudes.eu/api/getCompanyById/"+id}).then(function(resp){localStorageService.set("companyData",resp.data)}).catch(function(e){console.log(e)})},reset:function(){localStorageService.remove("companyData"),companyData={}}}),projectStore:function(){localStorageService.get("currentProject");return{set:function(data){return localStorageService.set("currentProject",data),data},get:function(){return localStorageService.get("currentProject")},reset:function(){localStorageService.remove("currentProject"),null}}}(),inventoryState:function(){var state=localStorageService.get("inventoryState")||{tab:0,searchText:"",page:{material:1,combo:1}};return{setPage:function(type,value){state.page[type]=value,localStorageService.set("inventoryState",state)},setTab:function(val){state.tab=val,localStorageService.set("inventoryState",state)},text:function(_text){_text&&(state.searchText=_text,localStorageService.set("inventoryState",state))},get:function(){return state}}},mUnits:[{name:"mt",value:"mt"},{name:"sq.mt",value:"sq.mt"},{value:"cu.mt",name:"cu.mt"},{name:"ft",value:"ft"},{name:"sq.ft",value:"sq.ft"},{value:"cu.ft",name:"cu.ft"},{value:"unit",name:"unit"}],getCurrency:function(){return $http.get("/data/currencies.json")},getCountryCode:function(){return $http.get("/data/CountryCode.json")},getIndustry:function(){return $http.get("/data/industry.json")},debounce:function(rate){var timer=void 0;return function(fn,args){clearTimeout(timer),timer=setTimeout(function(){fn.apply(null,args)},rate)}},genericStore:function(){var item=void 0;return{store:function(val){item=val},get:function(){return item}}},extractPagesFromPdf:function(pdfLink,pageCount){return[].concat(_toConsumableArray(Array(pageCount).keys())).reduce(function(acc,_,i){var pageObj={pageNo:i,url:pdfLink.replace("/upload/","/upload/pg_"+(i+1)+"/").replace(/\.pdf$/,".png"),title:"title_"+Date.now(),selected:!1,description:""};return acc.push(pageObj),acc},[])},createPagesFromPdf:function(pdf){return new Promise(function(resolve,reject){pdfjsLib.getDocument(pdf.secure_url).promise.then(function(doc){Promise.all([].concat(_toConsumableArray(Array(doc.numPages).keys())).map(function(_,i){return doc.getPage(i+1)})).then(function(pages){resolve(pages.map(function(x,i){return x.pageNo=i,x.title="title_"+Date.now(),x.selected=!1,x.description="",x}))}).catch(function(e){reject(e)})}).catch(function(e){console.log(e),reject(e)})})},renderPage:function(page,canvas){var viewport=page.getViewport(canvas.width/page.getViewport(1).width),context=canvas.getContext("2d");canvas.height=viewport.height;page.render({canvasContext:context,viewport:viewport})}};var companyData;var userData;var progressbar})}(),function(){angular.module("app").factory("issuecreateFactory",function($http,$state,$location,localStorageService,globals,Upload,Notification,$q,apiFactory,uploadFactory,fileManagerFactory){var _globals,vm=this,s3FileObjets=[];return headers=function(method,token){return{"Content-Type":"GET"===method?void 0:"application/json","x-access-token":token?localStorageService.get("access-token"):void 0,platform:JSON.stringify({source:"web"})}},_globals=globals,progress=_globals.progress,userStore=_globals.userStore,logout=_globals.logout,{getAllAtOnce:function(object,filesarray){if(console.log("OBJECT: ",object),console.log("ARRAY OF FILES: ",filesarray),console.log("ARRAY OF FILES s3: ",filesarray.s3),console.log("ARRAY OF FILES cloudinary: ",filesarray.cloudinary),$q.defer(),filesarray.s3.length&&filesarray.s3.forEach(function(x,i,array){console.log(x,i),uploadFactory.start(function(evaporate){x.file.pause=uploadFactory.pause.bind(evaporate,x),x.file.resume=uploadFactory.resume.bind(evaporate,x),x.file.abort=uploadFactory.abort.bind(evaporate,x);var addConfig={name:x.file.name,file:x.file,progress:function(p,stats){x.file.progress=x.file.progress>Math.round(100*p)?x.file.progress:Math.round(100*p),vm.completedAll=fileManagerFactory.checkUploadCompletion(filesarray)},complete:function(_xhr,awsKey){x.file.completed=!0,console.log("Complete!")}};evaporate.add(addConfig).then(function(awsObjectKey){console.log(x);var payload={type:fileManagerFactory.resolveDestType(x.file),assetData:{assetName:x.file.name,assetdescription:x.comment,bucket:"3dfilesdata",key:"test/"+x.file.name,mimetype:x.file.type,bytes:x.file.size}};$http({url:url+"/api/newIssues3FileUpload",method:"POST",data:payload,headers:headers("POST",!0)}).then(function(resp){console.log("s3 resp: ",resp),s3FileObjets.push(resp),i==filesarray.s3.length-1&&(alert("alerts called"),console.log(i),console.log("array:",x))}).catch(function(e){console.log(e)})},function(reason){x.aborted=!0,vm.completedAll=fileManagerFactory.checkUploadCompletion(filesarray)})})}),filesarray.cloudinary.length){var cloudinaryPayload={files:filesarray.cloudinary};Upload.upload({url:url+"/api/issueImage",method:"POST",data:cloudinaryPayload,headers:headers("POST",!0)}).then(function(resp){console.log("response of cloudinary: ",resp),vm.completedAll=fileManagerFactory.checkUploadCompletion(filesarray)}).catch(function(e){console.log(e)})}},sendData:function(object,files){console.log(object),console.log(files)}}})}(),function(){angular.module("app").factory("uploadFactory",function($http,$location,localStorageService,apiFactory,Upload,cloudinary,Notification){var config={signerUrl:"https://api.staging.cloudes.eu/signv4_auth",aws_key:"AKIAJMO3YJTPKYV5DN5A",bucket:"3dfilesdata/test",awsRegion:"ap-south-1",computeContentMd5:!0,allowS3ExistenceOptimization:!0,cryptoMd5Method:function(data){return AWS.util.crypto.md5(data,"base64")},cryptoHexEncodedHash256:function(data){return AWS.util.crypto.sha256(data,"hex")}};return{init:function(){return Evaporate.create(config)},start:function(handler){var fileUpload=this.init();fileUpload.then(handler).catch(function(e){console.log(e)})},pause:function(file){this.pause("3dfilesdata/test/"+file.name,{force:!0}).then(function(){file.isPaused=!0,console.log("Paused!")}).catch(function(e){console.log(e)})},resume:function(file){this.resume("3dfilesdata/test/"+file.name).then(function(){file.isPaused=!1,console.log("Resumed!")}).catch(function(e){console.log(e)})},abort:function(file){this.cancel("3dfilesdata/test/"+file.name).then(function(){console.log("Canceled!")}).catch(function(e){console.log(e)})}}})}(),function(){angular.module("app").factory("SBchannel",function($http,$location,localStorageService,SBcommon,Notification){var sb=SBcommon.getInstance();return{createChannel:function(channelName,id){return new Promise(function(resolve,reject){var params=new sb.GroupChannelParams;params.isPublic=!1,params.isEphemeral=!1,params.isDistinct=!1,params.addUserIds([id]),params.operators=[id],params.name=channelName,sb.GroupChannel.createChannel(params,function(groupChannel,error){error?reject(err):resolve(groupChannel)})})},createParams:function(){},listChannels:function(){return new Promise(function(resolve,reject){var channelListQuery=sb.GroupChannel.createMyGroupChannelListQuery();channelListQuery.includeEmpty=!0,channelListQuery.hasNext&&channelListQuery.next(function(channelList,error){error?reject(err):resolve(channelList)})})}}})}(),function(){angular.module("app").factory("SBcommon",function($http,$location,localStorageService,Notification){var sb=new SendBird({appId:"C83D94E0-F82E-4F22-A7AD-F9922569AAB4"});return{getInstance:function(){return sb},connect:function(id,token){return new Promise(function(resolve,reject){sb.connect(id,token,function(user,err){err?(console.log(err),reject(err)):resolve(user)})})},disconnect:function(){return new Promise(function(resolve,reject){sb.disconnect(function(){resolve("Disconnected successfully")})})},error:function(e){Notification.error("Something went wrong"),console.log(e)}}})}(),function(){angular.module("app").factory("commonVPFactory",function($rootScope){return{createStage:function(divId,initialSize,plannerData){var stage;plannerData&&plannerData.jsonString?((stage=Konva.Node.create(plannerData.jsonString,"stage")).width(initialSize.width),stage.height(initialSize.height)):stage=new Konva.Stage({container:divId,x:1,y:1,width:initialSize.width,height:initialSize.height});var getStageSize=this.getStageSize;return stage.on("windowResized",function(){var dimensions=getStageSize(divId);stage.width(dimensions.width),stage.height(dimensions.height),stage.draw()}),stage},getStageSize:function(divId){var el=document.getElementById(divId);return{height:el.clientHeight,width:el.clientWidth}},shapeId:function(){var defaultCount={shapes:{rectangle:0,square:0,circle:0,ellipse:0,calibrator:0,freeHand:0,polygon:0},markings:{line:0,singleArrow:0,doubleArrow:0,bezier:0,freehand:0,text:0,selection:0},measurement:{rectangle:0,square:0,circle:0,ellipse:0,calibrator:0,polygon:0,freeHand:0}},currentCount=defaultCount;return{load:function(count){currentCount=count},getCount:function(type,shape){return currentCount[type][shape]++,currentCount[type][shape]},get:function(){return currentCount},reset:function(){currentCount=defaultCount}}},drawState:function(){var initialDrawStates={shapes:{rectangle:!1,square:!1,circle:!1,ellipse:!1,calibrator:!1,polygon:!1},markings:{line:!1,singleArrow:!1,doubleArrow:!1,bezier:!1,freehand:!1,text:!1,selection:!1},measurement:{rectangle:!1,square:!1,circle:!1,ellipse:!1,calibrator:!1,polygon:!1,freeHand:!1}},drawStates=angular.copy(initialDrawStates);return{set:function(type){var keys=type.split(".");this.reset(),drawStates[keys[0]][keys[1]]=!0,$rootScope.$broadcast("drawStateChange",drawStates)},check:function(type){var keys=type?type.split("."):"";return type?drawStates[keys[0]][keys[1]]:drawStates},reset:function(){drawStates=angular.copy(initialDrawStates),$rootScope.$broadcast("drawStateChange",drawStates)}}},calibrationState:function(){var state={value:1,unit:"units"};return{set:function(obj){state=obj},get:function(){return state}}},actionStates:function(actions){var stack=actions||[],head=stack.length-1;return{push:function(val){stack.splice(head+1,stack.length,val),head=stack.length-1},show:function(){return stack},peek:function(){return stack[head]},undo:function(){head>-1&&(stack[head].delete(),head-=1)},redo:function(){head<stack.length&&(head=head===stack.length-1?head:head+1,stack[head].restore())}}},actionHandler:function(stage,entity,process,actionType,props){var entity=entity,stage=stage,process=process,props=props,handlers={create:{delete:function(){entity.remove(),stage.batchDraw()},restore:function(){process.add(entity),stage.batchDraw()}},move:{delete:function(){entity.position(props.start),stage.batchDraw()},restore:function(){entity.position(props.end),stage.batchDraw()}},delete:{delete:function(){process.add(entity),stage.batchDraw()},restore:function(){entity.remove(),stage.batchDraw()}},shapeProps:{delete:function(){for(var key in props.start)entity[key](props.start[key]);stage.batchDraw()},restore:function(){for(var key in props.end)entity[key](props.end[key]);stage.batchDraw()}}};return{entity:entity,restore:handlers[actionType].restore,delete:handlers[actionType].delete}},movement:function(){var start;return{add:function(position){if(start)return{start:start,end:position};start=position}}},shapePropertyHistory:function(){var start;return{add:function(props){if(start)return{start:start,end:props};start=props}}},transformers:function(layer){var layer=layer,transformers=[];return{add:function(transformer){transformers.push(transformer)},removeAll:function(){angular.forEach(transformers,function(x){x.remove()}),layer.draw()}}},dragOffset:function(stagePosition,layerOffset,stageScale){return{x:(stagePosition.x-layerOffset.x)/stageScale.x,y:(stagePosition.y-layerOffset.y)/stageScale.y}},selectedShape:function(shape){return{get:function(){return shape},set:function(val){shape=val},reset:function(){shape=void 0}}},selectionStore:function(){var selections=[];return{store:function(shapes){selections=shapes},get:function(){return selections},pull:function(shapeName){selections=selections.filter(function(shape){return shape.name()!==shapeName})},push:function(shape){var shapeNames=selections.map(function(shape){return shape.name()});shapeNames.indexOf(shape.name())>-1||selections.push(shape)},clear:function(){selections=[]}}},associations:function(){var associations={},methods={createAssociation:function(shapeId,entityId,type){var key=shapeId+"-"+entityId+"-"+Date.now();return associations[key]={shapeId:shapeId,entityId:entityId,type:type},key},getAssociations:function(key){return key?associations[key]:associations},getAssociationsForSave:function(){return Object.keys(associations).reduce(function(acc,x){var obj={shapeId:associations[x].shapeId,type:associations[x].type};switch(associations[x].type){case 1:obj.materialId=associations[x].entityId;break;case 2:obj.comboId=associations[x].entityId;break;case 3:obj.equipmentId=associations[x].entityId}return acc.push(obj),acc},[])},removeAssociation:function(key){associations[key]=void 0},reset:function(){associations={}}};return Object.freeze(methods)}}})}(),function(){angular.module("app").factory("eventsVPFactory",function($rootScope){return{windowEvents:function(windowObject){var entities=[];return windowObject.addEventListener("resize",function(ev){angular.forEach(entities,function(v){v.fire("windowResized")})}),{register:function(entity){entities.push(entity)},show:function(){}}},stageEvents:function(stage){var stage=stage,events=[];return{register:function(event,handler){stage&&(events.push(event),stage.on(event,handler))}}},shapeEvents:function(shape){var shape=shape,events=[];return{register:function(event,handler){events.indexOf(event)>-1||(events.push(event),shape.on(event,handler))}}},layerEvents:function(layer){var layer=layer,events=[];return{register:function(event,handler){events.indexOf(event)>-1||(events.push(event),layer.on(event,handler))}}}}})}(),function(){angular.module("app").factory("layersVPFactory",function($rootScope){return{createLayer:function(stage){var layer=new Konva.Layer;return stage.add(layer),layer},initiateProcess:function(stage,baseLayer){var head,processes=[];return{createProcess:function(){var group=new Konva.Group({name:"process-"+Date.now()});processes.push(group),head=processes.length-1,baseLayer.add(group)},getProcesses:function(){return processes},getCurrent:function(){return processes[head]},setCurrent:function(index){head=index},showProcess:function(index){void 0!==index?baseLayer.add(processes[index]):angular.forEach(processes,function(x){baseLayer.add(x)}),baseLayer.draw()},hideProcess:function(index){void 0!==index?processes[index].remove():angular.forEach(processes,function(x){x.remove()}),baseLayer.draw()},loadProcesses:function(processesFromJson){head=(processes=processesFromJson).length-1}}}}})}(),function(){angular.module("app").factory("shapesVPFactory",function($rootScope,eventsVPFactory,commonVPFactory,toolsVPFactory){var createdShape,shapeTools,shapeId=commonVPFactory.shapeId(),polygonOptions={init:!1,points:[],pointSet:!0};return{getShapeTools:function(obj){shapeTools=obj},loadShapeId:function(obj){shapeId.load(obj)},getShapeId:function(){return shapeId.get()},createShape:function(type,position){if(createdShape)return{start:!1,shape:createdShape};var shape,shapeProps=shapeTools.get();switch(type){case 0:shape=new Konva.Line({points:[position.x,position.y,position.x,position.y,position.x,position.y,position.x,position.y,position.x,position.y],stroke:shapeProps.stroke||"black",name:"Rect"+shapeId.getCount("shapes","rectangle"),strokeWidth:shapeProps.strokeWidth||1,fill:shapeProps.fill,draggable:!0,closed:!0});break;case 1:shape=new Konva.Ellipse({x:position.x,y:position.y,radius:{x:1,y:1},stroke:shapeProps.stroke||"black",name:"Ellipse"+shapeId.getCount("shapes","ellipse"),strokeWidth:shapeProps.strokeWidth||1,fill:shapeProps.fill,draggable:!0})}return{start:!0,shape:createdShape=shape}},drawShape:function(position,shapeLock,misc){if(createdShape)switch(createdShape.className){case"Line":this.drawRectangle(position,createdShape,shapeLock,misc);break;case"Ellipse":createdShape.radius({x:Math.abs(position.x-createdShape.x()),y:Math.abs(shapeLock?position.x-createdShape.x():position.y-createdShape.y())})}},drawRectangle:function(position,shape,shapelock,misc){var points=shape.points();switch(points[4]=position.x,points[5]=shapelock?Math.abs(points[1]+(position.x-points[0])):position.y,points[7]=shapelock?Math.abs(points[1]+(position.x-points[0])):position.y,points[2]=position.x,misc){case"grabber":shape.dash([10,10]);break;case"wrapper":shape.stroke("grey"),shape.draggable(!1)}shape.points(points)},destroyShape:function(){createdShape=void 0,polygonOptions={init:!1,points:[],pointSet:!0}},cancelDrawing:function(selection){var selectionPoints=createdShape.points();return document.body.style.cursor="default",createdShape&&createdShape.remove(),createdShape=void 0,polygonOptions={init:!1,points:[],pointSet:!0},selectionPoints},createPolygon:function(position,freeHand,freeHandMarker){if(!polygonOptions.init&&!createdShape){var shapeProps=shapeTools.get();return polygonOptions.points=[position.x,position.y],createdShape=freeHandMarker?new Konva.Line({name:"markerFreeHand"+shapeId.getCount("markings","freehand"),points:polygonOptions.points,fill:shapeProps.fill,stroke:shapeProps.stroke||"black",strokeWidth:shapeProps.strokeWidth||1}):new Konva.Line({name:freeHand?"freeHand"+shapeId.getCount("shapes","freeHand"):"polygon"+shapeId.getCount("shapes","polygon"),points:polygonOptions.points,fill:shapeProps.fill,stroke:shapeProps.stroke||"black",strokeWidth:shapeProps.strokeWidth||1}),polygonOptions.init=!0,{start:!0,polygon:createdShape}}return freeHandMarker?(polygonOptions.pointSet=!0,createdShape.draggable(!0),{start:!1,polygon:createdShape}):this.checkThreshold(position)?(polygonOptions.points.splice(-2),polygonOptions.points.push(polygonOptions.points[0],polygonOptions.points[1]),createdShape.points(polygonOptions.points),polygonOptions.pointSet=!0,createdShape.closed(!0),createdShape.draggable(!0),{start:!1,polygon:createdShape}):(polygonOptions.points.splice(-2),polygonOptions.points.push(position.x,position.y),createdShape.points(polygonOptions.points),void(polygonOptions.pointSet=!0))},drawPolygon:function(position,freeHand){createdShape&&(freeHand?(polygonOptions.points.push(position.x,position.y),createdShape.points(polygonOptions.points)):polygonOptions.pointSet?(polygonOptions.points.push(position.x,position.y),polygonOptions.pointSet=!1,createdShape.points(polygonOptions.points)):(polygonOptions.points[polygonOptions.points.length-2]=position.x,polygonOptions.points[polygonOptions.points.length-1]=position.y,createdShape.points(polygonOptions.points)))},createLine:function(position,type){if(createdShape)return{start:!1,line:createdShape};var line,shapeProps=shapeTools.get();switch(type){case"line":line=new Konva.Line({name:"lineSimple"+shapeId.getCount("markings","line"),points:[position.x,position.y],strokeWidth:shapeProps.strokeWidth||1,stroke:shapeProps.stroke||"black",draggable:!0});break;case"singleArrow":line=new Konva.Arrow({name:"lineArrow"+shapeId.getCount("markings","singleArrow"),points:[position.x,position.y],strokeWidth:1,stroke:shapeProps.stroke||"black",fill:shapeProps.fill||"black",draggable:!0,pointerLength:10,pointerWidth:10});break;case"doubleArrow":line=new Konva.Arrow({name:"lineArrowDouble"+shapeId.getCount("markings","doubleArrow"),points:[position.x,position.y],strokeWidth:shapeProps.strokeWidth||1,stroke:shapeProps.stroke||"black",fill:shapeProps.fill||"black",draggable:!0,pointerLength:10,pointerWidth:10,pointerAtBeginning:!0})}return{start:!0,line:createdShape=line}},drawLine:function(position){if(createdShape){var points=createdShape.points();points[2]=position.x,points[3]=position.y,createdShape.points(points)}},createBezierLine:function(position){if(createdShape){var createdPoints=createdShape.points(),q=[.5*(createdPoints[2]-createdPoints[0])+createdPoints[0],.5*(createdPoints[3]-createdPoints[1])+createdPoints[1]];createdPoints[2],createdPoints[0],createdPoints[0],createdPoints[3],createdPoints[1],createdPoints[1],createdPoints[2],createdPoints[0],createdPoints[0],createdPoints[3],createdPoints[1],createdPoints[1];return createdPoints.push(q[0],q[1]),createdShape.points(createdPoints),createdShape.tension(1.1),{start:!1,line:createdShape}}var shapeProps=shapeTools.get(),bezier=new Konva.Line({name:"bezier"+shapeId.getCount("markings","bezier"),lineJoin:"round",points:[position.x,position.y],strokeWidth:shapeProps.strokeWidth||1,stroke:shapeProps.stroke||"black",draggable:!0});return{start:!0,line:createdShape=bezier}},drawBezierLine:function(position){if(createdShape){var points=createdShape.points();points[2]=position.x,points[3]=position.y,createdShape.points(points)}},createText:function(props){var textShape=new Konva.Text({x:props.position.x,y:props.position.y,name:"text",text:"Placeholder text",width:props.width,fontSize:16,fontFamily:"Calibri",fill:"black"});return textShape},createTextGroup:function(){var textGroup=new Konva.Group({name:"textGroup"+shapeId.getCount("markings","text"),draggable:!0});return textGroup},calibrator:function(stage,layer){var line,points=[],isDone=!1,init=!0;return function(position,set,kill){if(kill)return line.destroy(),void layer.draw();position={x:position.x/stage.scale().x,y:position.y/stage.scale().y},isDone||(init&&set?(points.push(position.x,position.y),line=new Konva.Line({points:points,fill:"grey",stroke:"black",strokeWidth:1,dash:[5,1]}),init=!1,layer.add(line)):init||(set?(points[2]=position.x,points[3]=position.y,line.points(points),isDone=!0,$rootScope.$broadcast("calibrated",line)):(points[2]=position.x,points[3]=position.y,line.points(points)))),layer.draw()}},checkThreshold:function(position){var xUpperThreshold=polygonOptions.points[0]+10,yUpperThreshold=polygonOptions.points[1]+10,xLowerThreshold=polygonOptions.points[0]-10,yLowerThreshold=polygonOptions.points[1]-10;return xUpperThreshold>position.x&&xLowerThreshold<position.x&&yUpperThreshold>position.y&&yLowerThreshold<position.y},extractAllShapes:function(layer){var allShapes=layer.find("Group").reduce(function(acc,x){return/process*/.test(x.name())&&angular.forEach(x.getChildren(),function(child){acc.push(child)}),acc},[]);return allShapes},selectShapes:function(layer,points){var allShapes=this.extractAllShapes(layer),min=(points[0],points[1],points[4],points[5],{x:points[0]>points[4]?points[4]:points[0],y:points[1]>points[5]?points[5]:points[1]}),max={x:points[0]<points[4]?points[4]:points[0],y:points[1]<points[5]?points[5]:points[1]},checkSelection=this.checkSelection,selectedShapes=allShapes.filter(function(x){var shapeName=x.name();if(/Rect*/.test(shapeName)||/polygon*/.test(shapeName)||/freeHand*/.test(shapeName)||/markerFreeHand/.test(shapeName)){for(var points=x.points(),positionOffset=x.position(),vertices=[],i=0;i<points.length-2;i+=2)vertices.push([points[i]+positionOffset.x,points[i+1]+positionOffset.y]);return checkSelection({min:min,max:max},vertices,"rectangle")}if(/line*/.test(shapeName)){for(var points=x.points(),positionOffset=x.position(),vertices=[],i=0;i<points.length;i+=2)vertices.push([points[i]+positionOffset.x,points[i+1]+positionOffset.y]);return checkSelection({min:min,max:max},vertices,"rectangle")}return!!/Ellipse*/.test(shapeName)&&checkSelection({min:min,max:max},x.position(),"ellipse")});return selectedShapes},checkSelection:function(range,prop,type){if("rectangle"===type){for(var i=0;i<prop.length;i++)if(prop[i][0]>=range.min.x&&prop[i][0]<=range.max.x&&prop[i][1]>=range.min.y&&prop[i][1]<=range.max.y)return!0;return!1}if("ellipse"===type)return prop.x>=range.min.x&&prop.x<=range.max.x&&prop.y>=range.min.y&&prop.y<=range.max.y}}})}(),function(){angular.module("app").factory("toolsVPFactory",function($rootScope,eventsVPFactory){return{polygonArea:function(points,scale){for(var result,det=0,chunkedArray=[],chunk=[],i=0;i<points.length;i++)chunk.length<2?chunk.push(points[i]):(chunkedArray.push({x:chunk[0],y:chunk[1]}),(chunk=[]).push(points[i]));var l=chunkedArray.length;chunkedArray[0]!=chunkedArray[chunkedArray.length-1]&&(chunkedArray=chunkedArray.concat(chunkedArray[0]));for(var i=0;i<l;i++)det+=chunkedArray[i].x*chunkedArray[i+1].y-chunkedArray[i].y*chunkedArray[i+1].x;return result=scale?Math.abs(det)/2*scale:Math.abs(det)/2,Number.parseFloat(result).toFixed(2)},rectangleArea:function(height,width,scale){var area=height*width*scale;return area},ellipseArea:function(radii,scale){var area=Math.PI*radii.x*radii.y,result=scale?area*scale:area;return Number.parseFloat(result).toFixed(2)},ellipseTransfomer:function(stage,layer,ellipse){var vertices=[],group=new Konva.Group({name:"transformers"});return{set:function(radius){var ellipsePosition=ellipse.position();vertices.push([ellipsePosition.x-radius.x,ellipsePosition.y],[ellipsePosition.x+radius.x,ellipsePosition.y],[ellipsePosition.x,ellipsePosition.y+radius.y],[ellipsePosition.x,ellipsePosition.y-radius.y]);var inc=0;return angular.forEach(vertices,function(x,$index){var circle=new Konva.Circle({x:x[0],y:x[1],radius:5/layer.scaleX(),name:($index+inc).toString()+","+($index+inc+1).toString(),fill:"white",stroke:"black",strokeWidth:3/layer.scaleX(),dragBoundFunc:function(pos){return{x:$index>1?this.getAbsolutePosition().x:pos.x,y:$index<=1?this.getAbsolutePosition().y:pos.y}},draggable:!0});inc++;var circleEvent=eventsVPFactory.shapeEvents(circle);circleEvent.register("dragmove.transformer",function(){var previousRadius=ellipse.radius(),selectedVertex=circle.name(),isNegative=!1;switch(selectedVertex){case"0,1":isNegative=ellipse.position().x-circle.x()<0,ellipse.radius({x:Math.abs(ellipse.position().x-circle.x()),y:previousRadius.y}),angular.forEach(group.children,function(z){"2,3"===z.name()&&(isNegative?z.x(ellipse.position().x-ellipse.radius().x):z.x(ellipse.position().x+ellipse.radius().x))});break;case"2,3":isNegative=ellipse.position().x-circle.x()<0,ellipse.radius({x:Math.abs(ellipse.position().x-circle.x()),y:previousRadius.y}),angular.forEach(group.children,function(z){"0,1"===z.name()&&(isNegative?z.x(ellipse.position().x-ellipse.radius().x):z.x(ellipse.position().x+ellipse.radius().x))});break;case"4,5":isNegative=ellipse.position().y-circle.y()<0,ellipse.radius({x:previousRadius.x,y:Math.abs(ellipse.position().y-circle.y())}),angular.forEach(group.children,function(z){"6,7"===z.name()&&(isNegative?z.y(ellipse.position().y-ellipse.radius().y):z.y(ellipse.position().y+ellipse.radius().y))});break;case"6,7":isNegative=ellipse.position().y-circle.y()<0,ellipse.radius({x:previousRadius.x,y:Math.abs(ellipse.position().y-circle.y())}),angular.forEach(group.children,function(z){"4,5"===z.name()&&(isNegative?z.y(ellipse.position().y-ellipse.radius().y):z.y(ellipse.position().y+ellipse.radius().y))})}layer.draw(),ellipse.fire("transformEllipse")}),circleEvent.register("scaleOnZoom",function(e){e.target.radius(5/layer.scaleX()),e.target.strokeWidth(3/layer.scaleX()),layer.draw()}),circleEvent.register("mouseenter",function(e){document.body.style.cursor="move"}),circleEvent.register("mouseleave",function(e){document.body.style.cursor="default"}),group.add(circle)}),ellipse.fire("transformEllipse"),!0,layer.add(group),group},getGroup:function(){return group},destroy:function(){group.destroy()}}},customTransformer:function(stage,layer,polygon,isRectangle){var vertices=[],group=new Konva.Group({name:"transformers"}),polygon=polygon;return{set:function(points){for(var i=0;i<points.length-2;i+=2)vertices.push([points[i],points[i+1]]);var inc=0;return angular.forEach(vertices,function(x,$index){var circle=new Konva.Circle({x:x[0],y:x[1],radius:5/layer.scaleX(),name:($index+inc).toString()+","+($index+inc+1).toString(),fill:"white",stroke:"black",strokeWidth:3/layer.scaleX(),draggable:!0});inc++;var circleEvent=eventsVPFactory.shapeEvents(circle);circleEvent.register("dragmove.transformer",function(e){if(isRectangle){var selectedVertex=circle.name();switch(selectedVertex){case"0,1":vertices[0]=[circle.x(),circle.y()],vertices[1][1]=circle.y(),vertices[3][0]=circle.x(),angular.forEach(group.children,function(z){"6,7"===z.name()&&z.x(circle.x()),"2,3"===z.name()&&z.y(circle.y())});break;case"2,3":vertices[1]=[circle.x(),circle.y()],vertices[0][1]=circle.y(),vertices[2][0]=circle.x(),angular.forEach(group.children,function(z){"4,5"===z.name()&&z.x(circle.x()),"0,1"===z.name()&&z.y(circle.y())});break;case"4,5":vertices[2]=[circle.x(),circle.y()],vertices[3][1]=circle.y(),vertices[1][0]=circle.x(),angular.forEach(group.children,function(z){"2,3"===z.name()&&z.x(circle.x()),"6,7"===z.name()&&z.y(circle.y())});break;case"6,7":vertices[3]=[circle.x(),circle.y()],vertices[2][1]=circle.y(),vertices[0][0]=circle.x(),angular.forEach(group.children,function(z){"0,1"===z.name()&&z.x(circle.x()),"4,5"===z.name()&&z.y(circle.y())})}}else{var temp=[];angular.forEach(group.children,function(x){temp.push([x.x(),x.y()])}),vertices=angular.copy(temp)}polygon.fire("transformPolygon")}),circleEvent.register("scaleOnZoom",function(e){e.target.radius(5/layer.scaleX()),e.target.strokeWidth(3/layer.scaleX()),layer.draw()}),circleEvent.register("mouseenter",function(e){document.body.style.cursor="move"}),circleEvent.register("mouseleave",function(e){document.body.style.cursor="default"}),group.add(circle)}),!0,layer.add(group),group},update:function(offset){group.x(offset.x),group.y(offset.y),layer.draw()},getPoints:function(){return vertices.reduce(function(acc,x,i){return acc.push(x[0],x[1]),i===vertices.length-1&&acc.push(vertices[0],vertices[1]),acc},[])},getGroup:function(){return group}}},bezierTransformer:function(stage,layer,bezier){var vertices=[],group=new Konva.Group({name:"transformers"}),bezier=bezier;return{set:function(points){for(var i=0;i<points.length;i+=2)vertices.push([points[i],points[i+1]]);var inc=0;return angular.forEach(vertices,function(x,$index){var circle=new Konva.Circle({x:x[0],y:x[1],radius:5/layer.scaleX(),name:($index+inc).toString()+","+($index+inc+1).toString(),fill:"white",stroke:"black",strokeWidth:3/layer.scaleX(),draggable:!0});inc++;var circleEvent=eventsVPFactory.shapeEvents(circle);circleEvent.register("dragmove.transformer",function(e){var temp=[];angular.forEach(group.children,function(x){temp.push([x.x(),x.y()])}),vertices=angular.copy(temp),bezier.fire("transformBezier")}),circleEvent.register("scaleOnZoom",function(e){e.target.radius(5/layer.scaleX()),e.target.strokeWidth(3/layer.scaleX()),layer.draw()}),circleEvent.register("mouseenter",function(e){document.body.style.cursor="move"}),circleEvent.register("mouseleave",function(e){document.body.style.cursor="default"}),group.add(circle)}),!0,layer.add(group),group},update:function(offset){group.x(offset.x),group.y(offset.y),layer.draw()},getPoints:function(){return vertices.reduce(function(acc,x,i){return acc.push(x[0],x[1]),i===vertices.length-1&&acc.push(vertices[0],vertices[1]),acc},[])},getGroup:function(){return group}}},scaleTransformerBasedOnZoom:function(baseLayer){var transformerGroup=baseLayer.find(".transformers");transformerGroup.length&&angular.forEach(transformerGroup[0].getChildren(),function(child){child.fire("scaleOnZoom")})},metrics:function(){var shapeInfo;return{setShapeInfo:function(info){shapeInfo=info},getShapeInfo:function(){return shapeInfo}}},colorPicker:function(){var props={stroke:"black",opacity:1,fill:"rgba(255, 255, 255, 0)",strokeWidth:1};return{set:function(obj){props=Object.assign(props,obj)},get:function(prop){return prop?props[prop]:props}}}}})}(),function(){angular.module("app").controller("_3dDashboardCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,localStorageService,globals,NgMap){this.loggedIn=!0;var logout=globals.logout;globals.userStore,globals.throttler;if(!authFactory.checkUser())return logout(),void(this.loggedIn=!1);this.logout=function(){logout()}})}(),function(){angular.module("app").controller("_3dviewerCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var logout=globals.logout;authFactory.checkUser()||logout();this.logout=function(){logout()}})}(),function(){angular.module("app").controller("billingArchiveCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()},"/payroll"==$location.path()&&$(".payrollMenu").css("display","block !important");$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("calculationCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()},$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("calenderCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload){$scope.invitees=[{id:"1",img:"/assets/images/user_pic2.png",name:"Lisa Guerrero",lb:!0,status:!1},{id:"2",img:"/assets/images/user_pic3.png",name:"Peter Gregor",lb:!1,status:!1},{id:"3",img:"/assets/images/user_pic2.png",name:"Lisa Guerrero",lb:!1,status:!1},{id:"4",img:"/assets/images/user_pic3.png",name:"Peter Gregor",lb:!1,status:!1}];var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.logout=function(){logout()},this.userData=userStore.get()})}(),function(){angular.module("app").controller("clientsCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,debounce=globals.debounce,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},$scope.$watch("vm.clientData.clientContact.dialCode",function(value){$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3")}),$(".clientsList").DataTable(),$scope.activeJustified=0,vm.currentPage=1,vm.toggleObj={toggleClient:{clientName:!1,phoneNo:!1,email:!1,primaryAdd:!1,created:!0}},vm.searchText="",vm.sortclients=function(type,resource){void 0===vm.toggleObj[resource][type]?vm.toggleObj[resource][type]=!0:vm.toggleObj[resource][type]=!vm.toggleObj[resource][type],apiFactory.listAllClients({page:1,chunk:10,sort:type,search:vm.searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allClients=resp.data.list,vm.clientCount=resp.data.total,$timeout(function(){$("#pagination").pagination({items:vm.clientCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllClients({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.allClients=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.searchText="";var searchDebounce=debounce(250);vm.searchClients=function(text){searchDebounce(function(){apiFactory.listAllClients({page:1,chunk:10,search:text,sort:"created",sortType:!1}).then(function(resp){vm.allClients=resp.data.list,vm.clientCount=resp.data.total,$timeout(function(){$("#pagination").pagination({items:vm.clientCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllClients({page:page,chunk:10,sort:type,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allClients=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},[text])},vm.sortclients("created","toggleClient"),vm.dtOptions={paging:!1,info:!1,ordering:!1,searching:!1},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),globals.getIndustry().then(function(resp){vm.getIndustries=resp.data,vm.loadIndustry=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),globals.getCurrency().then(function(resp){vm.getCurrencies=resp.data,vm.loadCurrency=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.addNewClient=function(valid,clientdata){var client={},industries=[];null==clientdata&&Notification.error("Cannot save empty record"),void 0===clientdata.clientName?Notification.error("Please enter name of client"):client.clientName=clientdata.clientName,void 0===clientdata.clientContact?Notification.error("Please enter phone details"):client.clientContact={dialCode:clientdata.clientContact.dialCode[0].dialCode,phoneNumber:clientdata.clientContact.phoneNumber},null!=clientdata.description&&(client.description=clientdata.description),null!=clientdata.yearFounded&&(client.yearFounded=clientdata.yearFounded),null!=clientdata.clientWebsite&&(client.clientWebsite=clientdata.clientWebsite),null!=clientdata.email&&(client.email=clientdata.email),null!=clientdata.industry&&(clientdata.industry.forEach(function(element){industries.push(element.type)}),client.industry=industries),null!=clientdata.clientContactPerson&&(clientdata.clientContactPerson.dialCode?(console.log("dial code exist"),client.clientContactPerson={firstName:clientdata.clientContactPerson.firstName,middleName:clientdata.clientContactPerson.middleName,lastName:clientdata.clientContactPerson.lastName,email:clientdata.clientContactPerson.email,mobile:{dialCode:clientdata.clientContactPerson.dialCode[0].dialCode,phoneNumber:clientdata.clientContactPerson.phoneNumber}}):client.clientContactPerson={firstName:clientdata.clientContactPerson.firstName,middleName:clientdata.clientContactPerson.middleName,lastName:clientdata.clientContactPerson.lastName,email:clientdata.clientContactPerson.email,mobile:{phoneNumber:clientdata.clientContactPerson.phoneNumber}}),null!=clientdata.annualRevenue&&(clientdata.annualRevenue.currencyCode?client.annualRevenue={value:clientdata.annualRevenue.value,currencyCode:clientdata.annualRevenue.currencyCode[0].cc}:client.annualRevenue={value:clientdata.annualRevenue.value}),null!=clientdata.address2&&(clientdata.address2.countryCode?client.address2={line1:clientdata.address2.line1,line2:clientdata.address2.line2,line3:clientdata.address2.line3,city:clientdata.address2.city,postalCode:clientdata.address2.postalCode,countryCode:clientdata.address2.countryCode[0].code}:client.address2={line1:clientdata.address2.line1,line2:clientdata.address2.line2,line3:clientdata.address2.line3,city:clientdata.address2.city,postalCode:clientdata.address2.postalCode}),null!=clientdata.address1&&(clientdata.address1.countryCode?client.address1={line1:clientdata.address1.line1,line2:clientdata.address1.line2,line3:clientdata.address1.line3,city:clientdata.address1.city,postalCode:clientdata.address1.postalCode,countryCode:clientdata.address1.countryCode[0].code}:client.address1={line1:clientdata.address1.line1,line2:clientdata.address1.line2,line3:clientdata.address1.line3,city:clientdata.address1.city,postalCode:clientdata.address1.postalCode}),apiFactory.createClient(client).then(function(resp){Notification.success("Issue has been saved successfully"),vm.clientData={},$("#addClient").modal("hide"),vm.sortclients("created","toggleClient")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})}})}(),function(){angular.module("app").controller("comboMaterialViewCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,globals,$location,Upload){var vm=this,logout=globals.logout;globals.userStore;if(!authFactory.checkUser())return void logout();function getComboMatDetail(){apiFactory.getComboMaterialById(vm.comboId).then(function(resp){vm.comboData=resp.data.data,vm.comboMmatrialName=vm.comboData.name,vm.description=vm.comboData.description,vm.uom=vm.comboData.unit,console.log(vm.comboData),angular.forEach(vm.comboData.comboMaterialList,function(item){vm.materialCost=item.materialId.currentRate.materialCost.value*item.quantity,vm.materialTotal=vm.materialTotal+vm.materialCost,vm.rooferCost=item.materialId.currentRate.rooferCost.value*item.quantity,vm.rooferTotal=vm.rooferTotal+vm.rooferCost}),console.log(vm.comboData),$timeout(imgSlider,1500)}).catch(function(e){console.log(e)})}function imgSlider(){$("#comboCarousel").flexslider({animation:"slide",controlNav:!1,animationLoop:!1,slideshow:!1,itemWidth:75,itemMargin:5,asNavFor:"#comboSlider"}),$("#comboSlider").flexslider({animation:"slide",controlNav:!1,animationLoop:!1,slideshow:!1,sync:"#comboCarousel"})}vm.editFlag=!1,vm.comboId=$stateParams.id,vm.mUnits=globals.mUnits,vm.removedFiles=[],vm.comboMaterialList=[],vm.materialTotal=0,vm.rooferTotal=0,getComboMatDetail(),vm.removeImg=function(img){vm.removedFiles.push(vm.matrialData.files[img]._id),vm.matrialData.files.splice(img,1)},vm.editComboMaterialList=function(item){vm.materialList=vm.comboData.comboMaterialList[item],vm.materialQty=vm.materialList.quantity,vm.selectedMaterialCost=vm.materialQty*vm.materialList.materialId.currentRate.materialCost.value,vm.selectedMaterialRooferCost=vm.materialQty*vm.materialList.materialId.currentRate.rooferCost.value,0!=vm.materialList.percentageAdditions.length&&null!=vm.materialList.percentageAdditions.length?vm.percentageAddition=vm.materialList.percentageAdditions:vm.percentageAddition=[],vm.materialIndex=item,$("#editComboMaterial").modal("show"),"new"==item?$("#editComboMaterial .modal-header h5").text("Add Combo Material Details"):$("#editComboMaterial .modal-header h5").text("Update Combo Material Details")},vm.addPercentageValue=function(){vm.percentageAddition.push({percentageType:"",value:""})},vm.removePercentageAddition=function(index){vm.percentageAddition.splice(index,1)},vm.fileUpdated=function(files,event){var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name})},vm.tabChange=function(val,flag){function nextPrevTab(val){$(".dcp_modal .nav-tabs li .nav-link").removeClass("active"),$(".dcp_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("active")}1==val?vm.editComboMaterial.name?vm.selectedUnit?nextPrevTab(val):Notification.error("Please select material unit"):Notification.error("Please enter material name"):2==val&&0==vm.comboMaterialList.length&&0==vm.editComboMaterial.comboMaterialList.length?Notification.error("Please add Combination list"):nextPrevTab(val)},vm.editCombo=function(val){if(1==val)vm.editFlag=!0,vm.editComboMaterial=angular.copy(vm.comboData),vm.selectedUnit=vm.editComboMaterial.unit,$("#todo_modal.dcp_modal").modal("show");else if(2==val){$(".materialDetail textarea, .materialDetail input, .materialDetail select").attr("disabled",!0),vm.editFlag=!1;var comboListData={comboListArray:vm.comboData.comboMaterialList},comboMaterialData={name:vm.comboMmatrialName,description:vm.description,unit:vm.uom,files:vm.inputFiles};console.log(comboListData),apiFactory.updateComboMaterialList(vm.comboData._id,comboListData).then(function(resp){console.log(resp),apiFactory.updateComboMaterial(vm.comboData._id,comboMaterialData).then(function(resp){console.log(resp),Notification.success(resp.data.message),getComboMatDetail(),vm.fileNames=[],$timeout(imgSlider,1e3)}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})}},vm.updateCombo=function(item,data){vm.comboData.comboMaterialList[item].quantity=vm.materialQty,vm.comboData.comboMaterialList[item].percentageAdditions=data,console.log(vm.comboData.comboMaterialList[item].percentageAdditions),$("#editComboMaterial").modal("hide")},apiFactory.listAllMaterials().then(function(resp){vm.allmaterilaList=resp.data.list,vm.comboList={quantity:1,materialCost:0,rooferCost:0}}).catch(function(e){console.log(e)}),vm.getMaterialInfo=function(material){var materialInfo=JSON.parse(material);material&&(vm.comboList.materialCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.rooferCost.value*100)/100),$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3"))},vm.removeMateril=function(item,flag){"new"==flag?vm.comboMaterialList.splice(item,1):vm.editComboMaterial.comboMaterialList.splice(item,1)}})}(),function(){angular.module("app").controller("createProjectCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals){var vm=this,logout=globals.logout;globals.userStore,globals.companyStore;authFactory.checkUser()||logout();if(!authFactory.checkPrivilege("project","createProject"))return Notification.warning("Insufficient permissions"),void $state.go("dashboard");vm.clients=[],$scope.$watch("vm.projectData.client",function(value){$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3")}),Promise.all([apiFactory.listAllClients(),apiFactory.getHierarchyTemplate()]).then(function(resp){vm.clients=resp[0].data.list,vm.templateList=resp[1].data.data;vm.templateList.filter(function(item){return"5b8910fbdd6fa81a20bfe745"==item._id});vm.filemanagerTemplate="5b8910fbdd6fa81a20bfe745"}).catch(function(e){console.log(e)}),vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU&libraries=places",markers:[],styles:[],center:"41,-87",zoom:3},vm.projectData={address:{}},$scope.select2Options={allowClear:!0},vm.placeMarker=function(map){var placeData=this.getPlace().geometry.location;vm.gmap.markers=[[placeData.lat(),placeData.lng()]],vm.gmap.zoom=15,vm.gmap.center=placeData.lat()+","+placeData.lng(),vm.projectData.address.loc={coordinates:[placeData.lat(),placeData.lng()]}},vm.addProject=function(formData){formData.client=formData.client._id,apiFactory.createProject(formData).then(function(resp){Notification.success("Project has been created successfully");var payload={projectId:resp.data._id,templateId:resp.data._id&&vm.filemanagerTemplate&&"false"!=vm.filemanagerTemplate?vm.filemanagerTemplate:"5b8910fbdd6fa81a20bfe745"};apiFactory.loadHierarchyTree(payload).then(function(resp){console.log(resp.data.message)}).catch(function(e){console.log(e)}),console.log("projectid",resp.data._id),$state.go("dashboard")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})},vm.updateMarker=function(){var pos=this.getPosition();vm.projectData.address.loc={coordinates:[pos.lat(),pos.lng()]}},NgMap.getMap().then(function(map){vm.map=map,map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoomControl:!0,zoom:1,center:{lat:0,lng:0}})}),vm.logout=function(){logout()},vm.assignTemplate=function(){vm.filemanagerTemplate=vm.selectedTemplate._id,$("#assignTemplateModal").modal("hide")}})}(),function(){angular.module("app").controller("dashboardCtrl",function($scope,$timeout,authFactory,$state,$window,$location,apiFactory,Notification,localStorageService,globals,NgMap){var vm=this;vm.loggedIn=!0;var logout=globals.logout,userStore=globals.userStore,companyStore=globals.companyStore,projectStore=globals.projectStore;globals.throttler;if(!authFactory.checkUser())return logout(),void(vm.loggedIn=!1);vm.loader=!1,vm.userData=userStore.get(),vm.clientUrl="https://res.cloudinary.com/dktnhmsjx/image/upload/v1486129234/default/company.png",vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",styles:[{elementType:"geometry",stylers:[{color:"#212121"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{elementType:"labels.text.stroke",stylers:[{color:"#212121"}]},{featureType:"administrative",elementType:"geometry",stylers:[{color:"#757575"}]},{featureType:"administrative.country",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"administrative.land_parcel",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#181818"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"poi.park",elementType:"labels.text.stroke",stylers:[{color:"#1b1b1b"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{color:"#2c2c2c"}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#8a8a8a"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#373737"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#3c3c3c"}]},{featureType:"road.highway.controlled_access",elementType:"geometry",stylers:[{color:"#4e4e4e"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"transit",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#000000"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#3d3d3d"}]}],markers:[]},Promise.all([apiFactory.getCompanyById(vm.userData.companyId),apiFactory.listAllProjects(),apiFactory.listAllClients()]).then(function(data){var projectList,mxLat,mxLng,mnLat,mnLng,markers;companyStore.set(data[0].data),vm.gmap.markers=(projectList=data[1].data.list,mxLat=0,mxLng=0,mnLat=0,mnLng=0,markers=[],projectList.forEach(function(element){if(element.address&&(0!=element.address.loc.coordinates[0]||0!=element.address.loc.coordinates[1])){var mrkr={id:element._id,latitude:element.address.loc.coordinates[1],longitude:element.address.loc.coordinates[0]};mxLat=mxLat>mrkr.latitude?mrkr.latitude:mxLat,mnLat=mnLat<mrkr.latitude?mrkr.latitude:mnLat,mxLng=mxLng>mrkr.longitude?mrkr.longitude:mxLng,mnLng=mnLng<mrkr.longitude?mrkr.longitude:mnLng,markers.push([mrkr.latitude,mrkr.longitude])}}),markers),vm.dashboardData={company:data[0].data,projects:data[1].data.list,clients:data[2].data.list}}).catch(function(e){console.log(e)}),NgMap.getMap().then(function(map){map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoom:1,center:{lat:0,lng:0}})});var enabled=!0,chunkSize=5;if(vm.projectSearch="",vm.enableLazyLoad=!1,vm.sortParams={field:"created",type:!1},vm.projectName="PROJECT",$scope.getBookmarkedProject=function(){apiFactory.getBookmarks().then(function(resp){vm.bookmarkedProject=resp.data.bookmarks,vm.bookmarkedProjectList=angular.copy(vm.bookmarkedProject),vm.bookmarkedProjectList.push({_id:"others",projectName:"All Project List"})}).catch(function(e){console.log(e)})},$scope.getBookmarkedProject(),vm.loadProjectFiles=function(id){apiFactory.showProjectFiles(id,5).then(function(resp){vm.projectFiles=resp.data.data})},vm.bookmarkFlag=!1,vm.selectedProject=function(project){"others"==project._id?apiFactory.listAllProjects().then(function(resp){vm.projectPickerData=resp.data.list,$("#chooseProject").modal("show")}).catch(function(e){console.log(e)}):(vm.bookmarkFlag=!1,angular.forEach(vm.bookmarkedProject,function(x){if(x._id==project._id)return vm.bookmarkFlag=!0}),vm.projectName=project.projectName,projectStore.set(project),vm.loadProjectFiles(project._id))},vm.chooseProject=function(project){var index=vm.bookmarkedProjectList.findIndex(function(x){return"others"==x._id});vm.bookmarkedProjectList.splice(index,1);var alreadyExist=!0;angular.forEach(vm.bookmarkedProject,function(x){x._id==project._id&&(alreadyExist=!1)}),alreadyExist&&vm.bookmarkedProjectList.push(project),vm.bookmarkedProjectList.push({_id:"others",projectName:"All Project List"}),vm.project=project,vm.projectName=project.projectName,vm.bookmarkFlag=!1,projectStore.set(project),$("#chooseProject").modal("hide")},localStorageService.get("currentProject")){var currentProject=localStorageService.get("currentProject");vm.project=currentProject,vm.projectName=currentProject.projectName,vm.loadProjectFiles(vm.project._id);var alreadyBookmarked=!1;angular.forEach(vm.bookmarkedProject,function(x){if(x._id==currentProject._id)return alreadyBookmarked=!0}),alreadyBookmarked||$timeout(function(){var index=vm.bookmarkedProjectList.findIndex(function(x){return"others"==x._id});vm.bookmarkedProjectList.splice(index,1),vm.bookmarkedProjectList.push(currentProject),vm.bookmarkedProjectList.push({_id:"others",projectName:"All Project List"})},1500)}$("#chooseProject").on("hide.bs.modal",function(){vm.enableLazyLoad=!1}),vm.closeProjectPicker=function(){$("#chooseProject").modal("hide"),vm.project=null,projectStore.set("")},vm.checkBookmark=function(data){var bookmark=!0,alreadyBookmarked=!1;angular.forEach(vm.bookmarkedProject,function(x){if(x._id==data._id)return alreadyBookmarked=!0}),bookmark=!alreadyBookmarked,apiFactory.bookMarkProject(projectStore.get()._id,bookmark).then(function(resp){if(bookmark)Notification.success("Project successfully bookmarked"),vm.bookmarkedProject.push(data),vm.bookmarkFlag=!0;else{Notification.success("Project successfully removed from bookmark list");var index=vm.bookmarkedProject.findIndex(function(x){return x._id==data._id});vm.bookmarkedProject.splice(index,1),vm.bookmarkFlag=!1}}).catch(function(err){console.log(err)})},vm.addMore=function(){enabled&&(enabled=!1,$timeout(function(){enabled=!0},500),chunkSize+=5,apiFactory.listAllProjects({search:vm.projectSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.projectPickerData=resp.data.list}).catch(function(e){console.log(e)}))},vm.filePickerOptions={filter:"pdf"},vm.searchProjects=function(text){apiFactory.listAllProjects({search:vm.projectSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.projectPickerData=resp.data.list}).catch(function(e){console.log(e)})},vm.sort=function(field){vm.sortParams.field===field?vm.sortParams.type=!vm.sortParams.type:(vm.sortParams.field=field,vm.sortParams.type=!0),apiFactory.listAllProjects({search:vm.projectSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.projectPickerData=resp.data.list}).catch(function(e){console.log(e)})},vm.logout=function(){logout()},$scope.redirectTo3D=function(){console.log("rediection called"),apiFactory.get3DPage().then(function(response){console.log("response:",response)})},vm.goToFileManager=function(){console.log("project",projectStore.get()),projectStore.get()?$state.go("fileManager"):(Notification.warning("Please select a project"),$("html, body").animate({scrollTop:$(".project").offset().top},500,function(){$("#selectProject").focus().addClass("blink"),setTimeout(function(){$("#selectProject").removeClass("blink")},1e3)}))},vm.planPickerPlans=[],vm.rootFolders=[],vm.openPlanPicker=function(){projectStore.get()?(apiFactory.getProjectRoofPlans(projectStore.get()._id).then(function(resp){var roofPlans=resp.data.data;localStorageService.set("roofPlanProject",projectStore.get()._id),localStorageService.set("roofPlans",roofPlans),vm.planPickerPlans=roofPlans,$("#chooseRoofModal").modal("show")}).catch(function(e){console.log(e)}),apiFactory.getHierarchy(projectStore.get()._id).then(function(resp){vm.showTree=!0,vm.rootFolders=resp.data.data.hierarchies}).catch(function(e){console.log(e)})):Notification.warning("No project selected")},vm.choosePlan=function(plan){$("#chooseRoofModal").modal("hide"),localStorageService.set("selectedPlan",plan),$state.go("visualPlanner")},vm.allModalClose=function(){$("#chooseFile, #selectFileCanvas, #selectFile, #chooseRoofModal").modal("hide")},vm.fileChoose=function(){vm.pickerFolders=angular.copy(vm.rootFolders),$("#chooseFile").modal("show"),$("#chooseFile").css("display","block"),$("#chooseFile .modal-dialog").css({"-webkit-box-shadow":"0px 0px 47px 6px rgba(0, 0, 0, 0.75)","-moz-box-shadow":"0px 0px 47px 6px rgba(0, 0, 0, 0.75)","box-shadow":"0px 0px 47px 6px rgba(0, 0, 0, 0.75)"}),$(".rootFolder").show(),$(".childFolder").hide(),vm.moveto="move To",$scope.folderName="Root Folder","Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1},$scope.$on("loader",function(e,data){vm.loader=data,vm.loader?$("body").addClass("modal-open"):$("body").removeClass("modal-open")}),$scope.$on("selectedRoofPlanDoc",function(e,data){vm.selectedAssetForPlan=data,vm.roofplanBreadCrumb=data.breadCrumbs.reduce(function(acc,x){return acc+=x.name+" > "},"")+data.assetName,/cloudinary/.test(data.secure_url)?(vm.fileArray=globals.extractPagesFromPdf(data.secure_url,data.pages),vm.loader=!1,$("#chooseRoofModal").css("visibility","hidden"),$("#selectFile").modal("show"),$("#selectFile").css("display","block"),vm.pdfFiles=angular.copy(vm.fileArray),console.log(vm.fileArray)):data.planDocument?($timeout(function(){$scope.$apply()}),vm.pdfPagesData=vm.pdfFiles=data.planImages.map(function(x,i){var obj={pageNo:i,title:"title_"+Date.now(),url:x,selected:!1,description:""};return obj}),vm.loader=!1,$("#chooseRoofModal").css("visibility","hidden"),$("#selectFile").modal("show"),$("#selectFile").css("display","block")):globals.createPagesFromPdf(data).then(function(pages){$timeout(function(){$scope.$apply()}),vm.pdfPagesData=pages,vm.pdfFiles=pages,vm.loader=!1,$("#chooseRoofModal").css("visibility","hidden"),$("#selectFileCanvas").modal("show"),$("#selectFileCanvas").css("display","block")})}),vm.hideSelectFile=function(){$("#chooseRoofModal").css("visibility","visible"),$("#selectFile").css("display","none")},vm.selectedFileList=function(val,type,asset){if("submit"==val)if($("#chooseFile, #selectFile, #selectFileCanvas").css("display","none"),$("#chooseRoofModal").css("visibility","visible"),vm.selectedFiles=[],angular.forEach(vm.pdfFiles,function(x){x.selected&&vm.selectedFiles.push(x)}),1===type){var endpoint=!asset.planDocument&&/cloudinary/.test(asset.secure_url)?"addProjectRoofPlan":"addRoofPlansFromAsset",payload={assetId:asset._id,projectId:projectStore.get()._id,pages:vm.selectedFiles};apiFactory[endpoint](payload).then(function(resp){Notification.success(resp.data.message),apiFactory.getProjectRoofPlans(projectStore.get()._id).then(function(resp){var roofPlans=resp.data.data;localStorageService.set("roofPlanProject",projectStore.get()._id),localStorageService.set("roofPlans",roofPlans),vm.planPickerPlans=roofPlans}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})}else{var _payload={assetId:asset._id,pdfUrl:asset.secure_url,projectId:projectStore.get()._id,pages:vm.selectedFiles.reduce(function(acc,x){var obj={title:x.title,description:x.description,pageNo:x.pageNo};return acc.push(obj),acc},[])};apiFactory.generateRoofPlans(_payload).then(function(resp){Notification.success(resp.data.message),apiFactory.getProjectRoofPlans(projectStore.get()._id).then(function(resp){var roofPlans=resp.data.data;localStorageService.set("roofPlanProject",projectStore.get()._id),localStorageService.set("roofPlans",roofPlans),vm.planPickerPlans=roofPlans}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})}else"close"==val&&($("#chooseFile, #selectFile, #selectFileCanvas").css("display","none"),$("#chooseRoofModal").css("visibility","visible"))}})}(),function(){angular.module("app").controller("employeesCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var logout=globals.logout;authFactory.checkUser()||logout();this.logout=function(){logout()}})}(),function(){angular.module("app").controller("equipmentCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload){$scope.equipment=[{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Car",tag:"NR. 99"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Car",tag:"NR. 99"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Car",tag:"NR. 99"},{img:"/assets/images/equipment.png",title:"Equipment ABC",subtitle:"EQ - 1234",work:"Worker ID",tag:"NNS1 - Kim Mosegaard"}],$scope.img_upload=[{img:"/assets/images/equipment3.png"},{img:"/assets/images/equipment3.png"},{img:"/assets/images/equipment3.png"}],$scope.equipdocuments=[{img:"/assets/images/pdf.png",type:"Document_1.pdf"},{img:"/assets/images/pdf.png",type:"Document_2.pdf"},{img:"/assets/images/pdf.png",type:"Document_3.pdf"}];var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();$(".payrollMenu").hide(),vm.userData=userStore.get(),vm.logout=function(){logout()},$(".materialList").DataTable(),apiFactory.listAllEquipments().then(function(resp){vm.equipment=resp.data.list}).catch(function(e){console.log(e)}),vm.dtOptions={paging:!1,info:!1,ordering:!1},$(".equipmentList").DataTable(),$scope.activeJustified=0,vm.currentPage=1,vm.toggleObj={systemTag:!0,materialCost:!1,rooferCost:!1,createdAt:!1,name:!1},vm.searchText="",vm.sortEquipment=function(type){void 0===vm.toggleObj[type]?vm.toggleObj[type]=!0:vm.toggleObj[type]=!vm.toggleObj[type],apiFactory.listAllEquipments({page:1,chunk:10,sort:type,search:vm.searchText,sortType:vm.toggleObj[type]}).then(function(resp){vm.equipment=resp.data.list,vm.equipmentCount=resp.data.total,$timeout(function(){$("#equipmentPagination").pagination({items:vm.equipmentCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllEquipments({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.equipment=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.searchEquipment=function(text){apiFactory.listAllEquipments({page:1,chunk:10,search:text,sort:"createdDate",sortType:!1}).then(function(resp){vm.equipment=resp.data.list,vm.equipmentCount=resp.data.total,$timeout(function(){$("#equipmentPagination").pagination({items:vm.equipmentCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllEquipments({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.equipment=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.sortEquipment("createdAt"),vm.addMaterial={conversionFactor:1},vm.tabSettings={disable:!0},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.addMaterial.currency=vm.companyData.currentCurrency.currencyCode}).then(function(e){console.log(e)}),vm.showConversionRate=function(from,to){var currencyData={from:from,to:to};apiFactory.showConversionRate(currencyData).then(function(resp){vm.addMaterial.conversionFactor=resp.data.conversionFactor}).catch(function(e){console.log(e)})},vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data}),vm.tabStyle=function(){void 0!==vm.addMaterial.materialName&&" "!==vm.addMaterial.materialName&&void 0!==vm.addMaterial.materialUnit&&" "!==vm.addMaterial.materialUnit&&void 0!==vm.addMaterial.currency&&""!==vm.addMaterial.currency&&void 0!==vm.addMaterial.conversionFactor&&""!==vm.addMaterial.conversionFactor?($("uib-tab-heading.info i.fa").attr("style","display: inline-block !important; color: #3cbdaa"),$("uib-tab-heading.info .number").hide(),$(".btn-success.next").attr("disabled",!1)):($("uib-tab-heading.info i.fa").attr("style","display: none !important; color: #3cbdaa"),$("uib-tab-heading.info .number").show(),$(".btn-success.next").attr("disabled",!0))},vm.addMaterialNext=function(){null!=vm.addMaterial.materialName&&" "!=vm.addMaterial.materialName?null!=vm.addMaterial.materialUnit&&" "!=vm.addMaterial.materialUnit?null!=vm.addMaterial.currency&&" "!=vm.addMaterial.currency?$scope.activeJustified=1:Notification.error("Please select Currency"):Notification.error("Please select material Unit"):Notification.error("Please enter material name")},vm.changeCost=function(cost,conversionRate){return cost*conversionRate},vm.addMaterialDetails=function(){var formData={name:vm.addMaterial.materialName,unit:vm.addMaterial.materialUnit,equipmentCosts:{value:vm.changeCost(vm.addMaterial.equipmentCostValue,vm.addMaterial.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},rooferCost:{value:vm.changeCost(vm.addMaterial.rooferCostValue,vm.addMaterial.conversionFactor),currencyCode:vm.companyData.currentCurrency.currencyCode},files:vm.inputFiles};apiFactory.createEquipment(formData).then(function(resp){$("#addEquipments").modal("hide"),Notification.success(resp.data.message),vm.sortEquipment("createdAt"),vm.addMaterial={conversionFactor:1}}).catch(function(e){console.log(e)})}})}(),function(){angular.module("app").controller("equipmentViewCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,$stateParams,Upload){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.logout=function(){logout()},this.userData=userStore.get(),this.equipmentId=$stateParams.id,apiFactory.getEquipmentById(this.equipmentId).then(function(resp){console.log(resp)}).catch(function(e){console.log(e)}),$scope.slider2=[{img:"/assets/images/equipment2.jpg"},{img:"/assets/images/equipment2.jpg"},{img:"/assets/images/equipment2.jpg"}],$scope.equip_table=[{unit:"Currency",mt:"Danish Krone"},{unit:"Conversion Factor",mt:"1"},{unit:"Equipment Cost (DKK)",mt:"---"},{unit:"Worker Cost (DKK)",mt:"---"},{unit:"Worker ID",mt:"NNS1 - Kim Mosegaard"}]})}(),function(){angular.module("app").controller("fileManagerCtrl",function($scope,$http,$window,$timeout,authFactory,$state,apiFactory,Notification,globals,fileManagerFactory,uploadFactory){var vm=this,logout=globals.logout,userStore=globals.userStore,projectStore=globals.projectStore,genericStore=globals.genericStore,clipBoard=(globals.breakcrumbStore,fileManagerFactory.clipBoard);if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},apiFactory.listAllProjects().then(function(resp){vm.projectList=resp.data;var selectedProject=projectStore.get();vm.selectedProject=selectedProject._id,vm.getPrimaryFolders(selectedProject)}).catch(function(e){console.log(e)}),vm.rootFolders=[],vm.backupFolders=projectStore.get().backupFolders,vm.windowItems={folderData:"",folders:[],files:[]},vm.resolveAssetIcon=function(assetObj){var assetFormat=assetObj.format.trim(),icon=void 0;return/jp*g/.test(assetFormat)?icon="jpg":/png/.test(assetFormat)?icon="png":/pdf/.test(assetFormat)&&(icon="pdf"),icon},vm.showTree=!1,vm.getPrimaryFolders=function(selectedProject,list){list?projectStore.set(list.filter(function(x){return x._id===selectedProject})[0]):projectStore.set(selectedProject),vm.backupFolders=projectStore.get().backupFolders,Promise.all([apiFactory.getHierarchy(projectStore.get()._id),apiFactory.viewProjectAssets(projectStore.get()._id)]).then(function(resp){vm.showTree=!0,vm.rootFolders=resp[0].data.data.hierarchies,vm.projectFiles=resp[1].data.data,vm.loadFilesToAutoComplete=function($query){return new Promise(function(resolve,reject){resolve(vm.projectFiles)})}}).catch(function(e){console.log(e)})},vm.getFolder=function(id){apiFactory.getHierarchyChildren(id).then(function(resp){console.log(resp.data)}).catch(function(e){console.log(e)})};var fileDestination=genericStore();vm.treeOptions={accept:function(source,dest,destIndex){return!source.file||(fileDestination.store(dest),!1)},dragStop:function(event){var source=event.source;event.dest;if(source.nodeScope.file){var destination=fileDestination.get();if(!destination.$nodeScope)return;var payload={assetId:source.nodeScope.file._id,sourceId:source.nodeScope.$parent.$nodeScope.$modelValue._id,destId:destination.$nodeScope.$modelValue._id};apiFactory.moveAssets(payload).then(function(resp){Notification.success(resp.data.message)}).catch(function(e){console.log(e)}),destination.$nodeScope.$modelValue.files?destination.$nodeScope.$modelValue.files.push(source.nodeScope.file):destination.$nodeScope.$modelValue.files=[source.nodeScope.file],source.nodeScope.$parent.$nodeScope.$modelValue.files=source.nodeScope.$parent.$nodeScope.$modelValue.files.filter(function(x){return x._id!==source.nodeScope.file._id})}},dropped:function(event){var source=event.source,dest=event.dest,payload=void 0;null===dest.nodesScope.$nodeScope&&null===source.nodeScope.$parentNodeScope||(payload=null===dest.nodesScope.$nodeScope&&null!==source.nodeScope.$parentNodeScope?{type:1,hierarchyId:source.nodeScope.$modelValue._id,parentId:source.nodeScope.$parentNodeScope.$modelValue._id,projectId:projectStore.get()._id}:null!==dest.nodesScope.$nodeScope&&null===source.nodeScope.$parentNodeScope?{type:2,hierarchyId:source.nodeScope.$modelValue._id,projectId:projectStore.get()._id,destId:dest.nodesScope.$nodeScope.$modelValue._id}:{type:3,hierarchyId:source.nodeScope.$modelValue._id,parentId:source.nodeScope.$parentNodeScope.$modelValue._id,destId:dest.nodesScope.$nodeScope.$modelValue._id},apiFactory.dragMoveNodes(payload).then(function(resp){Notification.success(resp.data.message)}).catch(function(e){console.log(e)}))}};var rootFolderStore=genericStore();vm.setRootFolder=function(obj){rootFolderStore.store(obj)},vm.addModalActiveTab=0,$("#addModal").on("hide.bs.modal",function(){vm.fileNames=[],vm.addModalActiveTab=0}),vm.addPrimaryFolder=function(name,projectId){var payload={name:name,isParent:!0,projectId:projectId},nodeObj=rootFolderStore.get();$("#addModal").modal("hide"),apiFactory.addHierarchy(payload).then(function(resp){nodeObj.$nodesScope.$modelValue.push(resp.data.data),Notification.success(resp.data.message),console.log("rootfolder",rootFolderStore.get())}).catch(function(e){console.log(e)})},vm.openAddModal=function(source,obj){vm.addModalSource=source,vm.nodeObj=obj,$("#addModal").modal("show")},vm.showLoader=!1,vm.toggleFolder=function(folder,icon,node){folder.$modelValue.backup||($(folder.$treeScope.$element[0]).find(".folder-open").removeClass("folder-open"),$(folder.$element[0]).find(".row").first().addClass("folder-open"),vm.showLoader=!0,apiFactory.viewHierarchy(folder.$modelValue._id).then(function(resp){vm.windowItems={folderData:folder,folders:folder.$modelValue.children,files:resp.data.files},vm.breadCrumbList=resp.data.breadcrumbs,vm.showLoader=!1,folder.$modelValue.files=resp.data.files,navigationStack.push(folder)}).catch(function(e){console.log(e)}),folder.collapsed?folder.toggle():icon&&navigationStack.push(folder))};var navigationStack=fileManagerFactory.navigationStack();vm.navigate=function(forward){var folder=forward?navigationStack.forward():navigationStack.backward();folder&&(vm.showLoader=!0,apiFactory.viewHierarchy(folder.$modelValue._id).then(function(resp){vm.windowItems={folderData:folder,folders:folder.$modelValue.children,files:resp.data.files},vm.showLoader=!1,folder.$modelValue.files=resp.data.files}).catch(function(e){console.log(e)}))},vm.openFolder=function(id){var folderData=vm.windowItems.folderData.childNodes().reduce(function(acc,x){return x.$modelValue._id===id&&(acc=x),acc},null);vm.showLoader=!0,apiFactory.viewHierarchy(id).then(function(resp){navigationStack.push(folderData),vm.windowItems={folderData:folderData,folders:resp.data.folders,files:resp.data.files},vm.breadCrumbList=resp.data.breadcrumbs,vm.showLoader=!1}).catch(function(e){console.log(e)})},vm.addFolder=function(name,folder){$("#addModal").modal("hide");var payload={name:name,isParent:!1,parent:folder};apiFactory.addHierarchy(payload).then(function(resp){folder.children.push(resp.data.data),Notification.success(resp.data.message)}).catch(function(e){console.log(e)})},vm.addFileToHierarchy=function(assets,folder){$("#addModal").modal("hide");var assetId=assets.map(function(x){return x._id}),hierarchyId=folder._id;apiFactory.addFileToHierarchy({assetId:assetId,hierarchyId:hierarchyId}).then(function(resp){console.log(resp),Notification.success(resp.data.message)}).catch(function(e){console.log(e)})},vm.deleteFile=function(id,folderData){$("#fileView").modal("hide"),apiFactory.deleteAssets({assetId:id}).then(function(resp){vm.showLoader=!0,apiFactory.viewHierarchy(folderData.$modelValue._id).then(function(resp){vm.windowItems={folderData:folderData,folders:folderData.$modelValue.children,files:resp.data.files},vm.showLoader=!1,folderData.$modelValue.files=resp.data.files}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})},vm.uploadState=!1,vm.completedAll=!1,vm.fileUpdated=function(files,event){var fileObj=event.target.files;vm.uploadState=!1,vm.completedAll=!1,vm.fileNames=Object.keys(fileObj).map(function(x){var val=fileObj[x];return val.progress=0,val.isPaused=!1,val.completed=!1,val.aborted=!1,val.plan=!1,val})},vm.toggleUploadViewMaximize=function(val){vm.uploadViewMaximize=!val},vm.preUpload=function(files,folder){console.log(files),$("#addModal").modal("hide"),fileManagerFactory.checkDuplicateFiles(files,folder._id).then(function(processed){processed.duplicates.length?(vm.preUploadFiles=processed,console.log(vm.preUploadFiles),$("#versioningModal").modal("show")):(console.log(processed),vm.uploadFile(processed,projectStore.get()._id,folder))}).catch(function(e){console.log(e)})},vm.processDuplicateFileName=function(file){"version"===file.action?file.assetName=fileManagerFactory.generateVersion(file.name):file.assetName=file.name},vm.uploadFile=function(files,projectId,folder){if(fileManagerFactory.checkNameChange(files.duplicates))Notification.warning("File names can't be the same");else if($("#versioningModal").modal("hide"),files=[].concat(_toConsumableArray(files.duplicates),_toConsumableArray(files.uploadFiles)),vm.uploadState=!0,$("#addModal").modal("hide"),vm.uploadViewFiles=fileManagerFactory.splitDestination(files),angular.forEach(vm.uploadViewFiles.s3,function(x){uploadFactory.start(function(evaporate){x.pause=uploadFactory.pause.bind(evaporate,x),x.resume=uploadFactory.resume.bind(evaporate,x),x.abort=uploadFactory.abort.bind(evaporate,x);var addConfig={name:x.name,file:x,progress:function(p,stats){x.progress=x.progress>Math.round(100*p)?x.progress:Math.round(100*p),vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()})},complete:function(_xhr,awsKey){x.completed=!0,$timeout(function(){$scope.$apply()}),console.log("Complete!")}};evaporate.add(addConfig).then(function(awsObjectKey){var payload={type:fileManagerFactory.resolveDestType(x),projectId:projectStore.get()._id,folderId:folder._id,assetData:{assetName:x.assetName,bucket:"3dfilesdata",key:"test/"+x.name,mimetype:x.type,bytes:x.size,planDocument:x.plan}};apiFactory.newFileUpload(payload).then(function(resp){folder&&folder.files.push(resp.data.data)}).catch(function(e){console.log(e)}),Notification.success("File successfully uploaded"),console.log("File successfully uploaded to:",awsObjectKey)},function(reason){x.aborted=!0,vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()}),console.log("File did not upload sucessfully:",reason)})})}),vm.uploadViewFiles.cloudinary.length){var cloudinaryPayload={files:vm.uploadViewFiles.cloudinary,assetNames:vm.uploadViewFiles.cloudinary.map(function(x){return x.assetName}),projectId:projectId,hierarchyId:folder._id};apiFactory.uploadFileInFileManager(cloudinaryPayload).then(function(resp){vm.uploadViewFiles.cloudinary=vm.uploadViewFiles.cloudinary.map(function(x){return x.completed=!0,x}),vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()}),folder&&resp.data.data.forEach(function(x){folder.files.push(x)}),Notification.success(resp.data.message)}).catch(function(e){console.log(e)})}},vm.closeUploadView=function(){vm.uploadState=!1},vm.fileView=function(file){$("#fileView").modal("show"),vm.previewData=file,vm.previewData.customUrl="pdf"===file.format?file.secure_url.replace(/\.pdf/,".png"):file.secure_url},vm.editEnabled=!1,vm.toggleEdit=function(bool){vm.editEnabled=bool},$scope.backBtnView=!1,vm.contextMenuOptions={explorer:[{text:"Paste item(s)",click:function($itemScope,$event,modelValue,text,$li){vm.windowItems.folderData?clipBoard.paste(vm.windowItems.folderData.$modelValue._id).then(function(resp){resp&&apiFactory.viewHierarchy(vm.windowItems.folderData.$modelValue._id).then(function(resp){vm.windowItems={folderData:vm.windowItems.folderData,folders:resp.data.folders,files:resp.data.files}}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)}):Notification.warning("Cannot paste file in root location")}}],file:[{text:"Copy",click:function($itemScope,$event,modelValue,text,$li){clipBoard.copy($itemScope.file)}},{text:"Cut",click:function($itemScope,$event,modelValue,text,$li){clipBoard.cut($itemScope.file,vm.windowItems.folderData.$modelValue._id)}},{text:"Move to",click:function($itemScope){vm.pdfonly=!1,vm.pickerFolders=angular.copy(vm.rootFolders),vm.moveToSourceFile=$itemScope.file,$("#moveTo").modal("show"),$(".rootFolder").show(),$(".childFolder").hide(),vm.moveto="move To",$scope.folderName="Root Folder","Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1}}]},vm.childFolderView=function(val){vm.childFolders=val.children,vm.moveto=val.name,$(".rootFolder").hide(),$(".childFolder").show()},$scope.backBtnView=!1,"Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1;vm.saveHierarchyTree=function(name){if(name){$("#saveTemplateModal").modal("hide");var data={name:name};apiFactory.saveHierarchyTree(projectStore.get()._id,data).then(function(resp){Notification.success(resp.data.message)}).console.log(function(e){console.log(e)})}else Notification.error("Please enter template name")},vm.selectedTemplate="",apiFactory.getHierarchyTemplate().then(function(resp){vm.templateList=resp.data.data}).catch(function(e){console.log(e)}),vm.assignTemplate=function(){var data={projectId:projectStore.get()._id,templateId:vm.selectedTemplate._id};$("#assignTemplateModal").modal("hide"),apiFactory.changeProjectTemplate(data).then(function(resp){Notification.success(resp.data.message),vm.getPrimaryFolders(projectStore.get()),apiFactory.getProjectById(projectStore.get()._id).then(function(resp){projectStore.set(resp.data),vm.backupFolders=projectStore.get().backupFolders}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})},vm.showBackupFiles=!1,vm.showRecentFiles=!1,vm.toggleBookmarks=function(val,key){vm[key]=!val},vm.loadProjectFiles=function(id){apiFactory.showProjectFiles(id,5).then(function(response){vm.projectFiles=response.data.data})},vm.loadProjectFiles(projectStore.get()._id)})}(),function(){angular.module("app").controller("issueDetailCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService,FileSaver){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.issueId=$stateParams.id,vm.ImageAssets=[],vm.DocumentAssets=[],$scope.currentPage=1,$scope.itemsPerPage=3,vm.getIssueDetail=function(){apiFactory.getIssueById(vm.issueId).then(function(resp){vm.issueData=resp.data,console.log("issuedata: ",vm.issueData),vm.totalItems=vm.issueData.comments.length,$scope.ArrayComments=vm.issueData.comments.reverse(),$scope.ArrayActivities=vm.issueData.issueActivity.reverse(),vm.allComments=$scope.ArrayComments.slice(0,3),vm.allActivities=$scope.ArrayActivities.slice(0,6),$timeout(function(){$("#pagination").pagination({items:vm.totalItems,itemsOnPage:$scope.itemsPerPage,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),function(page){var pagedData=vm.issueData.comments.slice((page-1)*$scope.itemsPerPage,page*$scope.itemsPerPage);vm.allComments=pagedData,$scope.$apply()}(page)}}),$("#paginationActivity").pagination({items:vm.issueData.issueActivity.length,itemsOnPage:7,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),function(page){var pagedData=vm.issueData.issueActivity.slice(7*(page-1),7*page);vm.allActivities=pagedData,$scope.$apply()}(page)}})}),vm.issueData.listAssets.map(function(x){"image/png"==x.mimetype||"image/jpg"==x.mimetype?vm.ImageAssets.push(x):vm.DocumentAssets.push(x)})})},vm.getIssueDetail(),vm.postComment=function(comment){console.log("comment: ",comment);var comment1=comment.replace(/\n\r?/g,"<br />");if(console.log("comment: ",comment1),null==comment)Notification.error("Please add comment.");else{var commentobj={comment:comment};apiFactory.postCommentForIssue(vm.issueId,commentobj).then(function(resp){console.log("esp:",resp),vm.getIssueDetail(),$("#commentarea").val(""),Notification.success("Comment added successfully..")}).catch(function(e){Notification.error("Couldn't update comment")})}},$scope.changeCompletionStatus=function(){alert("completion")},vm.downloadFile=function(docs){console.log("docs",docs);var blob=new Blob([docs],{type:docs.mimetype});console.log("blob",blob),saveAs(blob,docs.origionalname)},$scope.reOpenIssue=function(){apiFactory.reOpenIssueStatusUpdate(vm.issueId).then(function(resp){vm.getIssueDetail(),$("#confirmmodal").modal("hide"),Notification.success("Issue status is now open")}).catch(function(e){Notification.error("could not update Status")})},$scope.markIssueAsComplete=function(comment,imageFiles){console.log(comment),console.log(imageFiles);var editObject={comment:comment,Images:imageFiles};apiFactory.saveIssueAsComplete(vm.issueId,editObject).then(function(resp){vm.getIssueDetail(),$("#completionstatusmodal").modal("hide"),Notification.success("Issue is been marked as completed")}).catch(function(e){Notification.error("Something wrong happened. couldent update changes")})}})}(),function(){angular.module("app").controller("issuesCtrl",function($scope,$rootScope,$timeout,authFactory,$state,$q,apiFactory,Notification,globals,fileManagerFactory,Upload,localStorageService,uploadFactory){var vm=this;vm.backImg;var logout=globals.logout,userStore=globals.userStore,debounce=globals.debounce;if($scope.UploadedFiles=[],vm.issueData={},$scope.issueModel={},$scope.file,$scope.comment="",$scope.inputFiles=[],$scope.openEdit=!1,$scope.filesToRemove=[],$scope.isSelectedBtn=!1,$scope.updateform=!1,$scope.UndoArray=[],$scope.redoArray=[],vm.planToMark=[],vm.LocalImgs=[],$scope.searchingText=!1,$scope.openFillColor=!1,$scope.colorpick="#0000ff",$scope.colorWell,$scope.fillWell,$scope.fillColor="transparent",$scope.textForm=!1,vm.errorImage="assets/images/enduserissue.png",$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},$(".issuesList").DataTable(),$scope.activeJustified=0,vm.currentPage=1,vm.toggleObj={toggleIssue:{systemTag:!1,title:!1,description:!1,projectName:!1,created:!0}},vm.searchText="",vm.sortissues=function(type,resource){void 0===vm.toggleObj[resource][type]?vm.toggleObj[resource][type]=!0:vm.toggleObj[resource][type]=!vm.toggleObj[resource][type],apiFactory.listAllIssues({page:1,chunk:10,sort:type,search:vm.searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allIssues=resp.data.list,vm.issueCount=resp.data.total,$timeout(function(){$scope.searchingText=!1,$("#pagination").pagination({items:vm.issueCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllIssues({page:page,chunk:10,sort:type,sortType:vm.toggleObj[type]}).then(function(resp){vm.allIssues=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})};var searchDebounce=debounce(250);function dragStartLine(e){$scope.isLine=!0,$scope.dragging=!0;var x=Math.floor((e.clientX-$scope.rect.left)/($scope.rect.right-$scope.rect.left)*$scope.canvas.width),y=Math.floor((e.clientY-$scope.rect.top)/($scope.rect.bottom-$scope.rect.top)*$scope.canvas.height);$scope.dragStartLocation={X:x,Y:y},$scope.snapshot=$scope.context1.getImageData(0,0,$scope.canvas.width,$scope.canvas.height)}function dragLine(e){var position,x=Math.floor((e.clientX-$scope.rect.left)/($scope.rect.right-$scope.rect.left)*$scope.canvas.width),y=Math.floor((e.clientY-$scope.rect.top)/($scope.rect.bottom-$scope.rect.top)*$scope.canvas.height);!0===$scope.dragging&&($scope.context1.putImageData($scope.snapshot,0,0),position={X:x,Y:y},$scope.context1.beginPath(),$scope.context1.moveTo($scope.dragStartLocation.X,$scope.dragStartLocation.Y),$scope.context1.lineTo(position.X,position.Y),$scope.context1.strokeStyle=$scope.colorpick,$scope.context1.lineWidth=2,$scope.context1.lineCap="round",$scope.context1.stroke())}function dragStopLine(e){var position;$scope.dragging=!1,$scope.context1.putImageData($scope.snapshot,0,0);var x=Math.floor((e.clientX-$scope.rect.left)/($scope.rect.right-$scope.rect.left)*$scope.canvas.width),y=Math.floor((e.clientY-$scope.rect.top)/($scope.rect.bottom-$scope.rect.top)*$scope.canvas.height);position={X:x,Y:y},$scope.context1.beginPath(),$scope.context1.moveTo($scope.dragStartLocation.X,$scope.dragStartLocation.Y),$scope.context1.lineTo(position.X,position.Y),$scope.context1.strokeStyle=$scope.colorpick,$scope.context1.lineWidth=2,$scope.context1.lineCap="round",$scope.context1.stroke();var imageData=$scope.context1.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData),console.log("undoArray: ",$scope.UndoArray)}function dragStart(e){$scope.isCircle=!0,$scope.last_mousex=parseInt((e.clientX-$scope.rect1.left)/($scope.rect1.right-$scope.rect1.left)*$scope.canvas.width),$scope.last_mousey=parseInt((e.clientY-$scope.rect1.top)/($scope.rect1.bottom-$scope.rect1.top)*$scope.canvas.height),$scope.mousedown=!0,$scope.snapshotCircle=$scope.ctx.getImageData(0,0,$scope.canvas.width,$scope.canvas.height)}function drag(e){if($scope.mousex=parseInt((e.clientX-$scope.rect1.left)/($scope.rect1.right-$scope.rect1.left)*$scope.canvas.width),$scope.mousey=parseInt((e.clientY-$scope.rect1.top)/($scope.rect1.bottom-$scope.rect1.top)*$scope.canvas.height),$scope.mousedown){$scope.ctx.save(),$scope.ctx.putImageData($scope.snapshotCircle,0,0),$scope.ctx.beginPath();var scalex=($scope.mousex-$scope.last_mousex)/2*1,scaley=($scope.mousey-$scope.last_mousey)/2*1;$scope.ctx.scale(scalex,scaley),$scope.centerx=$scope.last_mousex/scalex+1,$scope.centery=$scope.last_mousey/scaley+1,$scope.ctx.arc($scope.centerx,$scope.centery,1,0,2*Math.PI),$scope.ctx.restore(),$scope.ctx.strokeStyle=$scope.colorpick,$scope.ctx.fillStyle=$scope.fillColor,$scope.ctx.fill(),$scope.ctx.lineWidth=2,$scope.ctx.stroke()}}function dragStop(e){$scope.mousedown=!1;var imageData=$scope.ctx.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData)}function MarkWrite(e){$scope.isMarker=!0;var mousex=parseInt((e.clientX-$scope.rectmarker.left)/($scope.rectmarker.right-$scope.rectmarker.left)*$scope.canvas.width),mousey=parseInt((e.clientY-$scope.rectmarker.top)/($scope.rectmarker.bottom-$scope.rectmarker.top)*$scope.canvas.height);$scope.markercontext.beginPath(),$scope.markercontext.arc(mousex,mousey,8,0,2*Math.PI),$scope.markercontext.strokeStyle=$scope.colorpick,$scope.markercontext.fillStyle="blue",$scope.markercontext.fill(),$scope.markercontext.stroke();var imageData=$scope.markercontext.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData)}function TextWrite(e){$scope.isText=!0,$scope.cntxt=$scope.canvas.getContext("2d");var coords=$scope.canvas.getBoundingClientRect(),mousex=parseInt((e.clientX-coords.left)/(coords.right-coords.left)*$scope.canvas.width),mousey=parseInt((e.clientY-coords.top)/(coords.bottom-coords.top)*$scope.canvas.height);$scope.cntxt.font="15px Times New Roman",$scope.cntxt.fillStyle=$scope.colorpick,$scope.cntxt.strokeText($scope.placeDataAtPixel,mousex,mousey);var imageData=$scope.cntxt.getImageData(0,0,$scope.canvas.width,$scope.canvas.height);$scope.UndoArray.push(imageData),$scope.placeDataAtPixel=""}vm.searchIssues=function(text){searchDebounce(function(){apiFactory.listAllIssues({page:1,chunk:10,search:text,sort:"created",sortType:!1}).then(function(resp){vm.allIssues=resp.data.list,vm.issueCount=resp.data.total,$timeout(function(){$scope.searchingText=!0,$("#paging").pagination({items:vm.issueCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.listAllIssues({page:page,chunk:10,sort:type,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.allIssues=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},[text])},vm.sortissues("created","toggleIssue"),vm.dtOptions={paging:!1,info:!1,ordering:!1,searching:!1},$scope.issueCategory=["Safety","Quality","Issue"],apiFactory.listAllUsers().then(function(resp){vm.allUsers=resp.data.list}),apiFactory.listAllRoofers().then(function(resp){vm.allRoofers=resp.data.list}),apiFactory.listAllProjects().then(function(resp){vm.allProjects=resp.data.list}),apiFactory.getIssuesList().then(function(resp){vm.listOfIssue=resp.data.list}),$scope.readImg=function(fileImg){var output=document.getElementById("blah");output.src=URL.createObjectURL(fileImg)},$scope.addFile=function(file,comment){$scope.inputFiles.push({file:file,comment:comment,source:"NS"}),console.log("input:",$scope.inputFiles)},$scope.deleteImg=function(index,array){array.splice(index,1)},$scope.fileUpEvent=function(file){$scope.thumbnail="",console.log("file event",file),null!==file&&file.length>0&&file.forEach(function(onefile){if("image/png"==onefile.type||"image/jpg"==onefile.type||"image/jpeg"==onefile.type){var SRC=URL.createObjectURL(onefile);$scope.thumbnail=SRC}else"application/pdf"==onefile.type?$scope.thumbnail="assets/images/file_icon/pdficon.jpg":"application/vnd.openxmlformats-officedocument.wordprocessingml.document"==onefile.type?$scope.thumbnail="assets/images/file_icon/msword.png":"application/vnd.ms-excel"==onefile.type||"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"==onefile.type?$scope.thumbnail="assets/images/file_icon/excel.jpg":"application/x-zip-compressed"==onefile.type?$scope.thumbnail="assets/images/file_icon/zip.png":$scope.thumbnail="assets/images/file_icon/anytype.jpg";$scope.inputFiles.push({file:onefile,image:$scope.thumbnail})})},$scope.getDescription=function(index,array,coment){array[index].comment=coment},vm.files3Update=function(array,issuedata){console.log("in s3 function",issuedata),array.forEach(function(x,i,array){uploadFactory.start(function(evaporate){Notification.info(x.file.name+" is uploading ..."),x.file.pause=uploadFactory.pause.bind(evaporate,x),x.file.resume=uploadFactory.resume.bind(evaporate,x),x.file.abort=uploadFactory.abort.bind(evaporate,x);var addConfig={name:x.file.name,file:x.file,progress:function(p,stats){x.file.progress=x.file.progress>Math.round(100*p)?x.file.progress:Math.round(100*p),vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()})},complete:function(_xhr,awsKey){x.file.completed=!0,$timeout(function(){$scope.$apply()}),console.log("Complete!")}};evaporate.add(addConfig).then(function(awsObjectKey){console.log(x);var payload={type:fileManagerFactory.resolveDestType(x.file),assetData:{assetName:x.file.name,assetdescription:x.comment,bucket:"3dfilesdata",key:"test/"+x.file.name,mimetype:x.file.type,bytes:x.file.size,issueId:issuedata.data._id}};console.log("INDEX:  ",i),apiFactory.newIssues3FileUpload(payload).then(function(resp){i===array.length-1&&($scope.inputFiles=[],vm.issueData={},$("#issue_modal").modal("hide"),$("#issue_marker").modal("show"),vm.sortissues("created","toggleIssue"),Notification.success("Asset saved successfully"))}).catch(function(e){console.log(e),Notification.error("Could not save asset object")})},function(reason){x.aborted=!0,vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()})})})})},vm.filescloudinaryUpdate=function(array){array.length?($scope.cloudinaryPayload={files:array},apiFactory.issueImage($scope.cloudinaryPayload).then(function(resp){return console.log("response of cloudinary: ",resp.data),vm.completedAll=fileManagerFactory.checkUploadCompletion(vm.uploadViewFiles),$timeout(function(){$scope.$apply()}),Notification.success(resp.data.message),"response from cloudinary"}).catch(function(e){console.log(e)})):console.log("No file found to save n cloudinary")},vm.saveIssueDetail=function(issueData){var issueObject={};issueObject.title=issueData.title,issueObject.description=issueData.description,issueObject.project=issueData.project._id,issueObject.issueCategory=issueData.category,issueObject.ownerId=issueData.owner._id,issueObject.deadLine=issueData.deadLine,issueObject.dependencyOn&&(issueObject.dependencyOn=issueData.dependencyOn._id),issueObject.issueStatus=issueData.issueStatus,console.log("issueObj:",issueData),apiFactory.createIssue(issueObject).then(function(resp){return Notification.success("Issue has been saved successfully"),$scope.inputFiles=[],$scope.updateform=!1,vm.sortissues("created","toggleIssue"),resp}).catch(function(e){console.log(e)})},vm.ADDISSUE=function(issueData){$("#issue_modal").modal("hide"),$("#issue_marker").modal("show")},vm.localFiles=[],$scope.getFilesFromLocal=function(files){if(console.log("local files: ",files),files){files.forEach(function(onefile){var SRC=URL.createObjectURL(onefile);vm.planToMark.push({url:SRC})}),console.log("after src called"),$("#issue_marker").modal("hide");vm.planToMark.slice(-1);$("#carousellist").carousel("pause").removeData(),$("#carousellist").carousel(vm.planToMark)}else Notification.error("No Files selected.")},$("#issue_marker").on("hidden.bs.modal",function(e){$(this).removeData("bs.modal"),$("#chooseIssueRoofModal").is(":visible")?console.log("Modal is open"):(console.log("Modal is closed"),$(this).modal("show"))}),$scope.getImagesInCarosel=function(){apiFactory.getProjectRoofPlans("58eb9d2ec921d67036787832").then(function(resp){var ProjectPlans=resp.data.data;vm.planPickerPlans=ProjectPlans,console.log("planpicker: ",vm.planPickerPlans),$("#issue_marker").modal("hide"),$("#chooseIssueRoofModal").modal("show")}).catch(function(e){console.log(e)})},vm.choosePlanData=function(plan){vm.planToMark.push(plan.assetObj)},vm.choosePlanData1=function(plan){vm.planToMark.push(plan)},$scope.addToDetails=function(imgarray){$("#chooseIssueRoofModal").modal("hide"),$("#issue_marker").modal("show"),console.log("vm.plan to mrk:",vm.planToMark);imgarray.slice(-1);$("#carousellist").carousel("pause").removeData(),$("#carousellist").carousel(vm.planToMark)},$scope.getDetail=function(issue){$("#issuedetail").modal(),$scope.issueModel=issue,$scope.Title=$scope.issueModel.title,$scope.Description=$scope.issueModel.description,$scope.DeadLineDate=new Date($scope.issueModel.deadLine),document.getElementById("deadline").defaultValue=$scope.DeadLineDate,$scope.day=$scope.DeadLineDate.getDate()-1,$scope.month=$scope.DeadLineDate.getMonth()+1,$scope.year=$scope.DeadLineDate.getFullYear(),$scope.deadLineDate=$scope.month+"/"+$scope.day+"/"+$scope.year,$scope.Status=$scope.issueModel.issueStatus},$scope.addFileToUpdate=function(file,comment){$scope.inputFiles.push({file:file,comment:comment}),console.log($scope.inputFiles),$scope.file="",$scope.comment=""},$scope.updateRequest=function(updateobj){console.log("to update data",updateobj),$scope.updateform=!0,$scope.openEdit=!1},$scope.removeFiles=function(index,array,imageId){array.splice(index,1),console.log("removing files","index",index,"imageId",imageId),$scope.filesToRemove.push(imageId),console.log("removing files",$scope.filesToRemove)},vm.closeUpdteModel=function(){$scope.updateform=!1},$scope.openEditDate=function(){$scope.openEdit=!0},$scope.closeEditDate=function(){$scope.openEdit=!1},vm.updateIssueDetails=function(formData){var issueObject={};null==vm.updateIssue?(console.log("update issue is undefined"),issueObject.Title=$scope.issueModel.title,issueObject.description=$scope.issueModel.description,issueObject.deadLine=$scope.issueModel.deadLine,issueObject.issueStatus=$scope.issueModel.issueStatus):(console.log("update isuue is not undfined so in esle case"),null==vm.updateIssue.title?issueObject.Title=$scope.issueModel.title:issueObject.Title=vm.updateIssue.title,null==vm.updateIssue.description?issueObject.description=$scope.issueModel.description:issueObject.description=vm.updateIssue.description,null==vm.updateIssue.deadLine?issueObject.deadLine=$scope.issueModel.deadLine:issueObject.deadLine=vm.updateIssue.deadLine,null==vm.updateIssue.issueStatus?issueObject.issueStatus=$scope.issueModel.issueStatus:issueObject.issueStatus=vm.updateIssue.issueStatus),$scope.inputFiles.length>0&&(issueObject.files=$scope.inputFiles),$scope.filesToRemove.length>0&&(console.log("files to remove",$scope.filesToRemove),issueObject.removedFiles=$scope.filesToRemove),console.log("ISUUEOBJECT",issueObject),apiFactory.updateIssue(issueObject,$scope.issueModel._id).then(function(resp){Notification.success("Issue has been updated successfully"),$scope.inputFiles=[],$scope.filesToRemove=[],$scope.updateform=!1,$("#issuedetail").modal("hide"),vm.sortissues("created","toggleIssue")}).catch(function(e){console.log(e),$scope.inputFiles=[],$scope.filesToRemove=[],$scope.updateform=!1,Notification.error("Something went wrong")})},$scope.imageTempUrl="../assets/images/rooftestimages/image1.jpg",$scope.rooftestDemo=function(string){console.log("string",string),$scope.imageTempUrl=".."+string},$scope.canvas=document.getElementById("slideCanvas"),$("#issue_marker").on("shown.bs.modal",function(e){$("#carousellist").flexslider({animation:"slide",controlNav:!1,animationLoop:!1,slideshow:!1,itemWidth:200,itemMargin:3})}),$scope.openSliderImage=function(url,index){$scope.context=$scope.canvas.getContext("2d");var base_image=new Image;base_image.src=url,base_image.crossOrigin="Anonymous",console.log(base_image.width),console.log($scope.canvas.width),console.log($scope.canvas.height),console.log(base_image.height);var canvas=$scope.canvas,hRatio=$scope.canvas.width/base_image.width,vRatio=canvas.height/base_image.height,ratio=Math.min(hRatio,vRatio),centerShift_x=($scope.canvas.width-base_image.width*ratio)/2,centerShift_y=($scope.canvas.height-base_image.height*ratio)/2;$scope.context.clearRect(0,0,$scope.canvas.width,$scope.canvas.height),$scope.context.drawImage(base_image,0,0,base_image.width,base_image.height,centerShift_x,centerShift_y,base_image.width*ratio,base_image.height*ratio)},$scope.isLine=!1,$scope.isCircle=!1,$scope.isMarker=!1,$scope.isText=!1,$scope.drawLineOnCanvas=function(){$scope.openFillColor=!1,$scope.snapshot,$scope.textForm=!1,$scope.dragging=!1,$scope.dragStartLocation,$("#gpsbtn").css("background-color","#D3D3D3"),$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/linewhite.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",$("#txtbtn").css("background-color","#D3D3D3"),$("#circlebtn").css("background-color","#D3D3D3"),$("#linebutton").css("background-color","#009ACD"),$scope.context1=$scope.canvas.getContext("2d"),$scope.rect=$scope.canvas.getBoundingClientRect(),1!=$scope.isCircle&&1!=$scope.isMarker&&1!=$scope.isText||($scope.canvas.removeEventListener("mousedown",dragStart),$scope.canvas.removeEventListener("mousemove",drag),$scope.canvas.removeEventListener("mouseup",dragStop),$scope.canvas.removeEventListener("mousedown",MarkWrite),$scope.canvas.removeEventListener("mousedown",TextWrite)),$scope.canvas.addEventListener("mousedown",dragStartLine),$scope.canvas.addEventListener("mousemove",dragLine),$scope.canvas.addEventListener("mouseup",dragStopLine)},$scope.drawCircleOnCanvas=function(){$scope.openFillColor=!0,$scope.textForm=!1,$("#gpsbtn").css("background-color","#D3D3D3"),$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circlewhite.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",$("#linebutton").css("background-color","#D3D3D3"),$("#txtbtn").css("background-color","#D3D3D3"),$("#circlebtn").css("background-color","#009ACD"),$("#circlebtn").css("color","#ffffff"),$scope.ctx=$scope.canvas.getContext("2d"),$scope.canvasx=$($scope.canvas).offset().left,$scope.canvasy=$($scope.canvas).offset().top,$scope.last_mousey,$scope.mousey,$scope.last_mousex=$scope.last_mousey=0,$scope.mousex=$scope.mousey=0,$scope.mousedown=!1,$scope.rect1=$scope.canvas.getBoundingClientRect(),1!=$scope.isLine&&1!=$scope.isMarker||($scope.canvas.removeEventListener("mousedown",dragStartLine),$scope.canvas.removeEventListener("mousemove",dragLine),$scope.canvas.removeEventListener("mouseup",dragStopLine),$scope.canvas.removeEventListener("mousedown",MarkWrite),$scope.canvas.removeEventListener("mousedown",TextWrite)),$scope.canvas.addEventListener("mousedown",dragStart),$scope.canvas.addEventListener("mousemove",drag),$scope.canvas.addEventListener("mouseup",dragStop)},$scope.drawmarkerOnCanvas=function(){$scope.openFillColor=!0,$scope.textForm=!1,$scope.markercontext=$scope.canvas.getContext("2d"),1!=$scope.isCircle&&1!=$scope.isLine&&1!=$scope.isText||($scope.canvas.removeEventListener("mousedown",dragStart),$scope.canvas.removeEventListener("mousemove",drag),$scope.canvas.removeEventListener("mouseup",dragStop),$scope.canvas.removeEventListener("mousedown",dragStartLine),$scope.canvas.removeEventListener("mousemove",dragLine),$scope.canvas.removeEventListener("mouseup",dragStopLine),$scope.canvas.removeEventListener("mousedown",TextWrite)),$("#gpsbtn").css("background-color","#009ACD"),$scope.btnMarker="../assets/images/gpswhite.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/text-option-interface-symbol.png",$("#txtbtn").css("background-color","#D3D3D3"),$("#circlebtn").css("background-color","#D3D3D3"),$("#linebutton").css("background-color","#D3D3D3"),$scope.rectmarker=$scope.canvas.getBoundingClientRect(),$scope.canvas.addEventListener("mousedown",MarkWrite)},$scope.fillTextOnCanvas=function(){$scope.openFillColor=!1,$scope.textForm=!0,$("#gpsbtn").css("background-color","#D3D3D3"),$scope.btnMarker="../assets/images/gps.png",$scope.btnCircle="../assets/images/circle-shape-outline.png",$scope.btnLine="../assets/images/lineicon.png",$scope.btnText="../assets/images/textwhite.png",$("#txtbtn").css("background-color","#009ACD"),$("#circlebtn").css("background-color","#D3D3D3"),$("#linebutton").css("background-color","#D3D3D3"),1!=$scope.isCircle&&1!=$scope.isLine&&1!=$scope.isMarker||($scope.canvas.removeEventListener("mousedown",dragStart),$scope.canvas.removeEventListener("mousemove",drag),$scope.canvas.removeEventListener("mouseup",dragStop),$scope.canvas.removeEventListener("mousedown",dragStartLine),$scope.canvas.removeEventListener("mousemove",dragLine),$scope.canvas.removeEventListener("mouseup",dragStopLine),$scope.canvas.removeEventListener("mousedown",MarkWrite)),$scope.canvas.addEventListener("mousedown",TextWrite)},$scope.UndoDrawing=function(){if($scope.UndoArray.length>0){var undoCtx=$scope.canvas.getContext("2d");undoCtx.clearRect(0,0,$scope.canvas.width,$scope.canvas.height);var imgdata=$scope.UndoArray.pop();$scope.redoArray.push(imgdata),$scope.UndoArray.forEach(function(element){undoCtx.putImageData(element,0,0)})}},$scope.RedoDrawing=function(){var undoCtx=$scope.canvas.getContext("2d");if($scope.redoArray.length>0){var redo=$scope.redoArray.pop();undoCtx.putImageData(redo,0,0)}},vm.saveMarkInfo=function(){var dataImage=$scope.canvas.toDataURL("image/png");console.log(dataImage),console.log(vm.backImg);var link=document.getElementById("link");link.setAttribute("download","MintyPaper.png");link.setAttribute("href",$scope.canvas.toDataURL("image/jpg").replace("image/jpg","image/octet-stream"));link.click()}})}(),function(){angular.module("app").controller("materialCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap,Upload,moment){var _this=this,vm=this,logout=globals.logout,userStore=globals.userStore,debounce=globals.debounce;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.inputImg=[],vm.inputFiles=[],vm.dtOptions={retrieve:!0,paging:!1,info:!1,ordering:!1};var inventoryState=globals.inventoryState();vm.activeTab=inventoryState.get().tab,$(".tab-content .tab-pane").eq(inventoryState.get().tab).addClass("show"),vm.currentPage=1,vm.toggleTab=function(val){inventoryState.setTab(val)},vm.toggleObj={material:{systemTag:!0,materialCost:!1,rooferCost:!1,createdAt:!0,name:!1},combo:{systemTag:!0,materialCost:!1,rooferCost:!1,createdAt:!0,name:!1}},apiFactory.getAllSuppliers().then(function(resp){vm.suppliers=resp.data.list}).catch(function(e){console.log(e)}),vm.searchText=inventoryState.get().searchText,$scope.$watch("vm.searchText",function(text){inventoryState.text(text)},!0),vm.unitSelect=function(data){vm.selectedUnit=data.name},vm.sortDisplay=function(type,resource){if(type&&resource)return"Sorted By: "+type+" - "+(vm.toggleObj[resource][type]?"ASC":"DSC")},vm.sortMaterials=function(type,resource){void 0===vm.toggleObj[resource][type]?vm.toggleObj[resource][type]=!0:vm.toggleObj[resource][type]=!vm.toggleObj[resource][type];var apiName="material"===resource?"listAllMaterials":"listAllComboMaterials";apiFactory[apiName]({page:inventoryState.get().page[resource],chunk:10,sort:type,search:inventoryState.get().searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm[resource]=resp.data.list,vm[resource+"Count"]=resp.data.total,$timeout(function(){$("#"+resource+"Pagination").pagination({items:vm[resource+"Count"],itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:inventoryState.get().page[resource],onPageClick:function(page,event){event.preventDefault(),inventoryState.setPage(resource,page),apiFactory[apiName]({page:page,chunk:10,sort:type,search:inventoryState.get().searchText,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm[resource]=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})};var searchDebounce=debounce(250);vm.searchMaterials=function(text,resource){searchDebounce(function(){var apiName="material"===resource?"listAllMaterials":"listAllComboMaterials";apiFactory[apiName]({page:1,chunk:10,search:text,sort:"createdDate",sortType:!1}).then(function(resp){vm[resource]=resp.data.list,vm[resource+"Count"]=resp.data.total,$timeout(function(){$("#"+resource+"Pagination").pagination({items:vm[resource+"Count"],itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory[apiName]({page:page,chunk:10,sort:type,sortType:vm.toggleObj[resource][type]}).then(function(resp){vm.materials=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},[text,resource])},vm.sortMaterials("createdAt","material"),vm.sortMaterials("createdAt","combo");vm.addMaterial={conversionFactor:1,maintenancePeriod:90,maintenanceDate:moment().add(90,"days").format()},vm.changeMaintenancePeriod=function(days){vm.addMaterial.maintenanceDate=moment().add(days,"days").format()},vm.tabSettings={disable:!0},vm.tabChange=function(val,flag){if("combo"==flag){var tabChangeFun=function(val){$(".dcp_modal .nav-tabs li .nav-link").removeClass("active"),$(".dcp_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("active"),$(".dcp_modal .tab-content .tab-pane").removeClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".dcp_modal .tab-content .tab-pane").eq(val).addClass("active")};if(0==val)tabChangeFun(val);else if(1==val){if(!vm.addComboMaterialForm.name||!vm.editComboMaterial.name)return void Notification.error("Please enter combo material name");if(!vm.selectedUnit)return void Notification.error("Please select unit");if(!vm.addComboMaterialForm.description||!vm.editComboMaterial.description)return void Notification.error("Please enter combo description");tabChangeFun(val)}else if(2==val){if(0==vm.comboMaterialList.length)return void Notification.error("Please add Combination list");vm.TotalMC=0,vm.TotalRC=0,angular.forEach(vm.comboMaterialList,function(value){vm.TotalMC=parseFloat(vm.TotalMC)+parseFloat(value.materialCost),vm.TotalRC=parseFloat(vm.TotalRC)+parseFloat(value.rooferCost)}),vm.TotalMC=parseFloat(Math.round(100*vm.TotalMC)/100),vm.TotalRC=parseFloat(Math.round(100*vm.TotalRC)/100),tabChangeFun(val)}}else if(0==val&&($(".material_modal .nav-tabs li .nav-link").removeClass("active"),$(".material_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("active")),1==val){if(!vm.addMaterial.materialName)return void Notification.error("Please enter material name");if(!vm.selectedUnit)return void Notification.error("Please select material unit");$(".material_modal .nav-tabs li .nav-link").removeClass("active"),$(".material_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("active")}},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.addMaterial.currency=angular.copy(vm.companyData.currentCurrency.currencyCode)}).then(function(e){console.log(e)}),$scope.$watch("vm.addMaterial.currency",function(value){$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3")}),vm.showConversionRate=function(from,to){$(".loader").show();var currencyData={from:from,to:to};apiFactory.showConversionRate(currencyData).then(function(resp){vm.addMaterial.conversionFactor=resp.data.conversionFactor,$timeout(function(){$(".loader").hide()},500)}).catch(function(e){console.log(e)})},vm.addMaterialNext=function(){console.log(vm.addMaterial.materialUnit),null!=vm.addMaterial.materialName||""!=vm.addMaterial.materialName?vm.addMaterial.materialUnit||""!=vm.addMaterial.materialUnit?null!=vm.addMaterial.currency||""!=vm.addMaterial.currency?$scope.activeJustified=1:Notification.error("Please select Currency"):Notification.error("Please select material Unit"):Notification.error("Please enter material name")},vm.changeCost=function(cost,conversionRate){return cost*conversionRate},vm.deleteFile=function(indexVal,type){"image"==type?vm.inputImg.splice(indexVal,1):vm.inputFiles.splice(indexVal,1)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"image"==$scope.fileType?vm.inputImg[index].description=data:vm.inputFiles[index].description=data,$(_this).closest(".popover").addClass("Mohamed")},vm.clearData=function(val){"dcp"==val?(vm.addComboMaterialForm={},vm.inputImg=[],vm.inputFiles=[],vm.selectedUnit=""):(vm.addMaterial={conversionFactor:1,maintenancePeriod:90,currency:angular.copy(vm.companyData.currentCurrency.currencyCode)},console.log(vm.addMaterial),vm.inputImg=[],vm.inputFiles=[],vm.selectedUnit="",$("#profile-tab, #dcp1").removeClass("active"),$("#home-tab, #material1").addClass("active"),$("#material1").addClass("show"),vm.changeMaintenancePeriod(vm.addMaterial.maintenancePeriod))},vm.addMaterialDetails=function(){if(vm.selectedUnit)if(vm.addMaterial.materialCostValue)if(vm.addMaterial.rooferCostValue){$scope.uploadFiles=[].concat(vm.inputImg,vm.inputFiles),console.log($scope.uploadFiles);var formData={name:vm.addMaterial.materialName,unit:vm.selectedUnit,materialCost:{value:vm.changeCost(vm.addMaterial.materialCostValue,vm.addMaterial.conversionFactor),currencyCode:vm.addMaterial.currency},rooferCost:{value:vm.changeCost(vm.addMaterial.rooferCostValue,vm.addMaterial.conversionFactor),currencyCode:vm.addMaterial.currency},suppliers:vm.addMaterial.suppliers,files:$scope.uploadFiles,assetObj:$scope.uploadFiles.map(function(x,i){return{assetDescription:x.description}})};apiFactory.createMaterials(formData).then(function(resp){$scope.tab=1,Notification.success(resp.data.message),$("#todo_modal").modal("hide"),$("#profile-tab, #dcp1").removeClass("active"),$("#home-tab, #material1").addClass("active"),$("#material1").addClass("show"),vm.inputImg=[],vm.inputFiles=[],vm.selectedUnit="",vm.toggleObj.material.createdAt=!0,vm.sortMaterials("createdAt","material"),vm.addMaterial={conversionFactor:1}}).catch(function(e){console.log(e)})}else Notification.error("Please Select roofer cost value");else Notification.error("Please Select material cost value");else Notification.error("Please Select Unit")},vm.getMaterialById=function(id){apiFactory.getMaterialById(id).then(function(resp){console.log(resp)}).catch(function(e){console.log(e)})},$("#addMaterial").on("hide.bs.modal",function(){$scope.activeJustified=0,vm.addMaterial={conversionFactor:1}}),vm.comboMaterialList=[],vm.addComboMaterialForm={},vm.percentageAddition=[],vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data,vm.loadCurrencies=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),apiFactory.listAllMaterials().then(function(resp){vm.allmaterilaList=resp.data.list}).catch(function(e){console.log(e)}),vm.comboList={quantity:1,materialCost:0,rooferCost:0},vm.getMaterialInfo=function(material){var materialInfo=JSON.parse(material);material&&(vm.comboList.materialCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(vm.comboList.quantity*materialInfo.currentRate.rooferCost.value*100)/100),$("a.item-selected span").removeClass("glyphicon glyphicon-remove"),$("a.item-selected span").addClass("fas fa-times mr-3"))},vm.QtyChange=function(val,data){var material=JSON.parse(data);""==val||0==val?(vm.comboList.quantity=1,val=1,vm.comboList.materialCost=parseFloat(Math.round(val*material.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(val*material.currentRate.rooferCost.value*100)/100)):(vm.comboList.materialCost=parseFloat(Math.round(val*material.currentRate.materialCost.value*100)/100),vm.comboList.rooferCost=parseFloat(Math.round(val*material.currentRate.rooferCost.value*100)/100))},vm.addPercentageValue=function(){vm.percentageAddition.push({percentageType:"",percentageValue:""})},vm.removePercentageAddition=function(index){vm.percentageAddition.splice(index,1)},vm.materialCombination=function(material){var data=JSON.parse(material);console.log("material--",data),""!=data&&(vm.comboMaterialList.push({materialId:data._id,name:data.name,quantity:vm.comboList.quantity,materialCost:vm.comboList.materialCost,rooferCost:vm.comboList.rooferCost,percentageAdditions:vm.percentageAddition}),vm.percentageAddition=[],vm.comboList={quantity:1,materialCost:0,rooferCost:0},vm.addComboMaterialForm.comboMaterial="",$(".select2-choice .select2-chosen").text(""))},vm.fileUpdated=function(files,event,model){var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){x.description=""})},vm.createComboMaterialList=function(){var cmList=[];vm.comboMaterialList.forEach(function(x){var perAdditions={};0!==x.percentageAdditions.length&&x.percentageAdditions.forEach(function(x){perAdditions[x.percentageType]=Number(x.percentageValue)}),cmList.push({materialId:x.materialId,quantity:x.quantity,percentageAdditions:perAdditions})});var data={name:vm.addComboMaterialForm.name,unit:vm.selectedUnit,comboMaterialList:cmList,files:vm.inputImg};apiFactory.getSystemTag().then(function(resp){data.systemTag=resp.data.comboTag,apiFactory.createComboMaterial(data).then(function(resp){Notification.success(resp.data.message),$("#addComboMaterial").modal("hide")}).catch(function(e){Notification.error(e.data.message)})}).catch(function(e){Notification.error(e.data.message)})},vm.removeMateril=function(item){vm.comboMaterialList.splice(item,1)}})}(),function(){angular.module("app").controller("materialViewCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,globals,$location,Upload){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.inputImg=[],vm.inputFiles=[],vm.clearData=function(){vm.inputImg=[],vm.inputFiles=[],vm.selectedUnit=""},apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data}).then(function(e){console.log(e)}),vm.materialId=$stateParams.id,vm.mUnits=globals.mUnits,globals.getCurrency().then(function(resp){vm.currencies=resp.data,vm.loadCurrencies=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),vm.showConversionRate=function(from,to){$(".loader").show();var currencyData={from:from,to:to};from&&apiFactory.showConversionRate(currencyData).then(function(resp){vm.editMaterial.conversionFactor=resp.data.conversionFactor,$timeout(function(){$(".loader").hide()},500)}).catch(function(e){console.log(e)})},vm.tabChange=function(val){0==val||1==val&&(vm.editMaterial.name?vm.selectedUnit?($(".material_modal .nav-tabs li .nav-link").removeClass("active"),$(".material_modal .nav-tabs li .nav-link").eq(val).addClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("active"),$(".material_modal .tab-content .tab-pane").removeClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("show"),$(".material_modal .tab-content .tab-pane").eq(val).addClass("active")):Notification.error("Please select material unit"):Notification.error("Please enter material name"))},apiFactory.getAllSuppliers().then(function(resp){vm.suppliers=resp.data.list}).catch(function(e){console.log(e)}),vm.editFlag=!1,vm.removedFiles=[],$scope.getMatDetail=function(){apiFactory.getMaterialById(vm.materialId).then(function(resp){vm.matrialData=resp.data,console.log(vm.matrialData),vm.matrialName=vm.matrialData.name,vm.matrialUnit=vm.matrialData.unit,vm.matrialCost=Number(vm.matrialData.currentRate.materialCost.value).toFixed(2),vm.matrialCurrencyCode=vm.matrialData.currentRate.materialCost.currencyCode,vm.matrialRooferCost=Number(vm.matrialData.currentRate.rooferCost.value).toFixed(2),vm.matrialRooferCurrencyCode=vm.matrialData.currentRate.rooferCost.currencyCode,vm.matrialCreatedBy=vm.matrialData.providerData.updatedBy.name,vm.matrialCreatedAt=vm.matrialData.createdAt,vm.matrialUpdatedAt=vm.matrialData.createdAt,$scope.gray_box=[{img:"/assets/images/Unit-Icon.png",title:"Unit",value:vm.matrialUnit},{img:"/assets/images/Dollar-Icon.png",title:"Material Cost",value:vm.matrialCost,currencyCode:vm.matrialCurrencyCode},{img:"/assets/images/Dollar-Icon.png",title:"Roofer Cost",value:vm.matrialRooferCost,currencyCode:vm.matrialRooferCurrencyCode}],$scope.nextMaintanceDateCalc(vm.matrialData.createdAt,vm.matrialData.maintenancePeriod)}).catch(function(e){console.log(e)})},$scope.getMatDetail(),$scope.nextMaintanceDateCalc=function(createdAt,maintenancePeriod){var createdDate=moment(createdAt).format("X"),nextMaintanceDate=moment(createdAt).add(maintenancePeriod,"days").format("X");if(createdDate<nextMaintanceDate)vm.nextMaintenanceDate=moment(createdAt).add(maintenancePeriod,"days").format("MMM DD, YYYY");else{alert();var createdDate1=moment.utc(createdAt).add(maintenancePeriod,"days").format();$scope.nextMaintanceDateCalc(createdDate1,maintenancePeriod)}},vm.removeImg=function(indexVal,type){"materialImg"==type?(vm.removedFiles.push(vm.matrialData.files.images[indexVal]._id),vm.materialImg.splice(indexVal,1)):"image"==type?vm.inputImg.splice(indexVal,1):"materialDocument"==type?(vm.removedFiles.push(vm.matrialData.files.docs[indexVal]._id),vm.materialFiles.splice(indexVal,1)):"document"==type&&vm.inputFiles.splice(indexVal,1)},vm.descriptionPopover=function(indexVal,type){$scope.fileType=type,$scope.fileIndex=indexVal},vm.addDescription=function(index,data){"materialImg"==$scope.fileType?(vm.materialImg[index].description=data,vm.materialImg[index].assetDescription=data):"image"==$scope.fileType?vm.inputImg[index].description=data:"materialDocument"==$scope.fileType?(vm.materialFiles[index].description=data,vm.materialFiles[index].assetDescription=data):"document"==$scope.fileType&&(vm.inputFiles[index].description=data)},vm.changeMaintenancePeriod=function(days){vm.editMaterial.maintenanceDate=moment(vm.editMaterial.createdAt).add(days,"days").format()},vm.editMaterialFunction=function(val){if(1==val)vm.editFlag=!0,vm.editMaterial=angular.copy(vm.matrialData),vm.changeMaintenancePeriod(vm.matrialData.maintenancePeriod),vm.selectedUnit=vm.editMaterial.unit,vm.currentCurrency=vm.editMaterial.currentRate.rooferCost.currencyCode,vm.editMaterial.currency=vm.editMaterial.currentRate.rooferCost.currencyCode,vm.materialImg=vm.editMaterial.files.images,vm.materialFiles=vm.editMaterial.files.docs,vm.materialCostValue=vm.editMaterial.currentRate.materialCost.value,vm.rooferCostValue=vm.editMaterial.currentRate.rooferCost.value,vm.showConversionRate(vm.currentCurrency,vm.editMaterial.currency),angular.forEach(vm.materialImg,function(x,index){x.description=""}),angular.forEach(vm.materialFiles,function(x,index){x.description=""}),console.log(vm.editMaterial),$("#todo_modal.material_modal").modal("show");else if(2==val){console.log(vm.inputImg,vm.inputFiles),$scope.uploadFiles=[].concat(vm.inputImg,vm.inputFiles),$scope.uploadallFiles=[].concat(vm.inputImg,vm.inputFiles,vm.materialImg,vm.materialFiles),console.log($scope.uploadallFiles),vm.editFlag=!1;var description="";(vm.inputImg.length>0||vm.inputFiles.length>0)&&(description=$scope.uploadallFiles.map(function(x,i){return{assetDescription:x.description}}));var materialupdatedata={name:vm.editMaterial.name,unit:vm.selectedUnit,removedFiles:vm.removedFiles,suppliers:vm.editMaterial.suppliers,currentRate:{materialCost:{value:vm.materialCostValue,currencyCode:vm.editMaterial.currency},rooferCost:{value:vm.rooferCostValue,currencyCode:vm.editMaterial.currency}},files:$scope.uploadFiles,assetObj:description};apiFactory.updateMaterialById(vm.materialId,materialupdatedata).then(function(resp){Notification.success(resp.data.message),$("#todo_modal.material_modal").modal("hide"),$scope.getMatDetail(),vm.fileNames=[]}).catch(function(e){console.log(e)})}},vm.fileUpdated=function(files,event){var fileObj=event.target.files;vm.fileNames=Object.keys(fileObj).map(function(x){return fileObj[x].name}),angular.forEach(files,function(x,index){x.description=""})}})}(),function(){angular.module("app").controller("meetingRoomCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload,SBcommon,SBchannel){var vm=this,logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get();var room=SBcommon;apiFactory.getAccessMeetingRoomToken().then(function(resp){return resp.data.accessToken}).then(function(token){if(!token)throw new Error("Token unavailable");return room.connect(userStore.get().email,token)}).then(function(connectedUser){return Notification.success("Connected to meeting room"),SBchannel.listChannels()}).then(function(channelList){vm.newMeeting={},console.log("channeldata",channelList),vm.channelList=channelList}).catch(room.error),vm.createChannel=function(formData){SBchannel.createChannel(formData.name,"leo@askpundit.com").then(function(channel){console.log("CreatedChannel",channel),SBchannel.listChannels().then(function(channelList){vm.channelList=channelList})}).catch(room.error)},vm.logout=function(){logout()}})}(),function(){angular.module("app").controller("payrollCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()};$location.path();$(".payrollMenu").css("display","block !important"),$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("preLoginCtrl",function($scope,$timeout,$state,authFactory,apiFactory,globals,localStorageService,Notification,NgMap){var vm=this,userStore=(globals.progress,globals.logout,globals.userStore);if(vm.loggedIn=!1,authFactory.checkUser())return $state.go("dashboard"),void(vm.loggedIn=!0);vm.gmap={url:"https://maps.googleapis.com/maps/api/js?key=AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",styles:[{elementType:"geometry",stylers:[{color:"#212121"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{elementType:"labels.text.stroke",stylers:[{color:"#212121"}]},{featureType:"administrative",elementType:"geometry",stylers:[{color:"#757575"}]},{featureType:"administrative.country",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"administrative.land_parcel",stylers:[{visibility:"off"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#181818"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"poi.park",elementType:"labels.text.stroke",stylers:[{color:"#1b1b1b"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{color:"#2c2c2c"}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#8a8a8a"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#373737"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#3c3c3c"}]},{featureType:"road.highway.controlled_access",elementType:"geometry",stylers:[{color:"#4e4e4e"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"transit",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#000000"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#3d3d3d"}]}],markers:[[28.7041,77.1025],[13.0827,80.2707]]},NgMap.getMap().then(function(map){map.setOptions({styles:vm.gmap.styles,disableDefaultUI:!0,zoom:2,center:{lat:28.7041,lng:77.1025}})}),vm.regsiterModal=function(){$("#loginModal, #forgotPassModal").modal("hide"),$("#registerModal").modal("show")},vm.loginModal=function(){$("#registerModal, #forgotPassModal").modal("hide"),$("#loginModal").modal("show")},vm.forgotPassModal=function(){$("#loginModal").modal("hide"),$("#forgotPassModal").modal("show")},vm.login=function(isValid,formData){console.log(formData),apiFactory.login(formData).then(function(resp){$("#loginModal").modal("hide"),$("body").removeClass("modal-open"),$(".modal-backdrop").hide(),localStorageService.set("access-token",resp.data.token),userStore.set(resp.data.user),$state.go("dashboard"),Notification.success("Login success")}).catch(function(err){Notification.error(err.data.message)})},vm.forgotPass=function(isValid,formData){if(null==formData)Notification.error("please Valid mail Id");else{var data=formData;apiFactory.forgotPassword(data).then(function(resp){$("#forgotPassModal").modal("hide"),Notification.success(resp.data.message)}).catch(function(err){Notification.error(err.data.message)})}},vm.register=function(isValid,formData){apiFactory.registration(formData).then(function(resp){$("#registerModal").modal("hide"),Notification.success(resp.data.message)}).catch(function(err){$("#registerModal").modal("hide"),Notification.error(err.data.message)})},vm.subscribe=function(email){/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)?apiFactory.subscribe({email:email}).then(function(resp){vm.subscribeEmail="",Notification.success(resp.data.message)}).catch(function(err){Notification.error(err.data.message)}):Notification.error("Invalid email")}})}(),function(){angular.module("app").controller("projectCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,NgMap){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),apiFactory.listAllProjects().then(function(resp){console.log(resp.data)}).catch(function(e){console.log(e)}),this.logout=function(){logout()}})}(),function(){angular.module("app").controller("reportDetailCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this;$scope.image1="../assets/images/reportimgs/rep.jpg",$scope.image2="../assets/images/reportimgs/file.jpg";var logout=globals.logout;$scope.reportObj={},$scope.shwCommentSection=!1,$scope.ReportIssue={},$scope.issueToAdd=[],$scope.models={selected:null},authFactory.checkUser()||logout();vm.logout=function(){logout()},$scope.exportToPdf=function(){var img=new Image;img.src="../assets/images/reportimgs/rep.jpg";var img1=new Image;img1.src="../assets/images/reportimgs/file.jpg";var doc=new jsPDF("p");doc.addImage(img,"png",15,20,90,90),doc.addImage(img1,"png",110,20,90,90),doc.autoTable({html:"#statictable",margin:{top:120},pageBreak:"auto",tableWidth:"auto",showHeader:"everyPage"}),doc.setFontSize(25),doc.text(20,150,"Comments"),doc.setFontSize(10),doc.setFont("helvetica"),doc.text(20,160,"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor"),doc.text(20,170,"incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco"),doc.text(20,180," laboris nisi ut aliquip ex ea commodo consequat."),doc.save("column8.pdf")};var enabled=!0,chunkSize=5;vm.issueSearch="",vm.enableLazyLoad=!1,vm.sortParams={field:"created",type:!1},$scope.openReportPicker=function(){vm.enableLazyLoad=!0,apiFactory.listAllIssues({search:vm.issueSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.issuePickerData=[],$scope.issueToAdd.length>0&&$scope.issueToAdd.forEach(function(element){resp.data.list.forEach(function(resdata,index){element._id==resdata._id?resp.data.list.splice(index,1):console.log("false")})}),$timeout(function(){vm.issuePickerData=resp.data.list,$("#listissuesmodal").modal("hide"),$("#chooseIssueModal").modal("show"),$scope.EditMode=!1})}).catch(function(e){console.log(e)})},$("#chooseIssueModal").on("hide.bs.modal",function(){vm.enableLazyLoad=!1}),vm.closeIssuePicker=function(){$("#chooseIssueModal").modal("hide"),vm.issueSearch=""},$scope.addMore=function(){console.log("calling add more"),enabled&&(enabled=!1,$timeout(function(){enabled=!0},500),chunkSize+=5,apiFactory.listAllIssues({search:vm.issueSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.issuePickerData=[],$scope.issueToAdd.length>0&&$scope.issueToAdd.forEach(function(element){resp.data.list.forEach(function(resdata,index){element._id==resdata._id&&resp.data.list.splice(index,1)})}),$timeout(function(){vm.issuePickerData=resp.data.list})}).catch(function(e){console.log(e)}))},vm.searchIssues=function(text){console.log("serchtext",text),apiFactory.listAllIssues({search:vm.issueSearch,chunk:chunkSize,page:1,sort:vm.sortParams.field,sortType:vm.sortParams.type}).then(function(resp){vm.issuePickerData=resp.data.list}).catch(function(e){console.log(e)})},$scope.remarkData=[],$scope.addRemark=function(title,value){null==title&&null==value||($scope.remarkData.push({Title:title,Value:value}),$("#remarktitle").val(""),$("#remarkvalue").val(""))},vm.chooseIssues=function(issue,index,array){issue?(array.splice(index,1),$scope.issueToAdd.push(issue),$("#chooseIssueModal").modal("hide"),$("#listissuesmodal").modal("show")):Notification.error("No selection")},vm.addToListIssuePicker=function(){$("#chooseIssueModal").modal("hide"),$("#listissuesmodal").modal("show")},$scope.sendIssueToPdf=function(){$("#listissuesmodal").modal("hide"),$scope.shwCommentSection=!0},$scope.coverPageModal=function(){$("#coverpagemodal").modal("show")},$scope.aboutUsModal=function(){$("#aboutusmodal").modal("show")},$scope.projectMetaModal=function(){$("#projectmetamodal").modal("show")},$scope.reportremarkModal=function(){$("#reportremarkmodal").modal("show")},$scope.listIssueModelClick=function(){$("#listissuesmodal").modal("show")},$scope.setReportObj=function(object){console.log(object),$scope.ReportIssue.title=object.title,$scope.ReportIssue.description=object.description,$scope.ReportIssue.companyName=object.companyName,$scope.ReportIssue.email=object.email,$scope.ReportIssue.website=object.website,$scope.ReportIssue.phone=object.phone,$scope.ReportIssue.projectName=object.projectName,$scope.ReportIssue.serialNo=object.serialNo,$scope.ReportIssue.enterprise=object.enterprise,$scope.issueToAdd.length>0&&($scope.ReportIssue.issueToAdd=$scope.issueToAdd),$scope.remarkData.length>0&&($scope.ReportIssue.remarkData=$scope.remarkData),$scope.ReportIssue.authorName=object.authorName,$scope.ReportIssue.remarkDate=object.remarkDate,$("#coverpagemodal").modal("hide"),$("#aboutusmodal").modal("hide"),$("#projectmetamodal").modal("hide"),$("#reportremarkmodal").modal("hide"),$("#chooseIssueModal").modal("hide")},$scope.EditMode=!1,$scope.EditIssueData=function(){$scope.EditMode=!0},$scope.removeFromIssueList=function(index,array){array.splice(index,1),console.log($scope.issueToAdd)}})}(),function(){angular.module("app").controller("reportsCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout;globals.userStore;authFactory.checkUser()||logout();$scope.currentUser=localStorageService.get("userData"),$scope.reportCategory=["issueReport","safetyReport","qaReport"],apiFactory.listAllUsers().then(function(resp){vm.allAdminUsers=resp.data.list}),apiFactory.listAllProjects().then(function(resp){vm.projectList=resp.data}).catch(function(e){console.log(e)}),vm.logout=function(){logout()}})}(),function(){angular.module("app").controller("reportsListingCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.userData=userStore.get(),this.logout=function(){logout()},"/payroll"==$location.path()&&$(".payrollMenu").css("display","block !important");$(".payrollList").DataTable()})}(),function(){angular.module("app").controller("setPasswordCtrl",function($scope,$timeout,$location,authFactory,$state,apiFactory,Notification,globals){var vm=this,token=$location.search().token;if(!token)return;apiFactory.isTokenValid({token:token}).then(function(resp){console.log(resp.data),resp.data.tokenValid?(vm.user=resp.data.user,$(".forgotPassModal").modal("show")):$(".tokenInvalid").modal("show")}).catch(function(e){console.log(e)}),vm.resetPass=function(isValid,data){if($(".forgotPassModal").modal("hide"),vm.resetPass.password===vm.resetPass.c_password){var data={password:vm.resetPass.password,user:vm.user};console.log(data),apiFactory.setPassword(data).then(function(resp){Notification.success(resp.data.message),$state.go("preLogin")}).catch(function(e){console.log(e)})}else Notification.error("Password Mismatch, Please enter same password")},vm.back=function(){$(".tokenInvalid").modal("hide"),$timeout(function(){$state.go("preLogin")})}})}(),function(){angular.module("app").controller("settingCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload){var vm=this,logout=globals.logout,userStore=globals.userStore,companyStore=globals.companyStore;if(!authFactory.checkUser())return void logout();vm.userData=userStore.get(),companyStore.get()?(vm.companyData=companyStore.get(),vm.privileges=vm.companyData.privileges):apiFactory.getCompanyById(vm.userData.companyId).then(function(resp){vm.companyData=resp.data,vm.privileges=vm.companyData.privileges}).catch(function(e){console.log(e)});vm.submitRoleSettings=function(formData){apiFactory.updateRoleBasedAccess(formData).then(function(resp){Notification.success(resp.data.message),companyStore.refetch(vm.userData.companyId)}).catch(function(e){Notification.error("Something went wrong"),console.log(e)})},vm.goToDashboard=function(){$state.go("dashboard")},vm.logout=function(){logout()}})}(),function(){angular.module("app").controller("subcontractorCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this;vm.selectedMaterials=[],vm.members2=[];var logout=globals.logout;globals.debounce,globals.userStore;authFactory.checkUser()||logout();vm.getSubcontractors=function(type){apiFactory.getAllSubcontractors({page:1,chunk:10,sort:type}).then(function(resp){vm.allSubcontractor=resp.data.list,vm.subcontractorsCount=resp.data.total,console.log("suppliers are:",vm.allSubcontractor),$timeout(function(){$("#pagination").pagination({items:vm.subcontractorsCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.getAllSubcontractors({page:page,chunk:10}).then(function(resp){vm.allSubcontractor=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.getSubcontractors("created"),vm.addSubcontractorNext=function(){$("#home").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#home").removeClass("show"),$("#home").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active")):$("#profile-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#contact-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#contact").addClass("show"),$("#contact").addClass("active"))},vm.addSubcontractorPrevious=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active"))},$scope.deleteMaterial=function(index,array){array.splice(index,1)},$scope.deleteStaff=function(index,array){array.splice(index,1)},$scope.onChange=function(files){null!=files[0]&&($scope.FILEIMG=URL.createObjectURL(files[0]),$scope.fileExt=files[0].name.split(".").pop())},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),apiFactory.listAllMaterials().then(function(resp){vm.allMaterials=resp.data.list}),vm.addMaterial=function(item){vm.selectedMaterials.push(item)},vm.addMember=function(name){vm.members2.push(name)},$scope.createSubcontractor=function(subcontractor){subcontractor.supplies=[],subcontractor.staff=[],console.log("subcontractor",subcontractor),vm.selectedMaterials.length>0&&vm.selectedMaterials.forEach(function(element){subcontractor.supplies.push(element._id)}),vm.members2.length>0&&vm.members2.forEach(function(element){subcontractor.staff.push(element)}),console.log("subcontractor",subcontractor),apiFactory.createNewSubcontractor(subcontractor).then(function(resp){Notification.success("Sub-contractor has been saved successfully"),vm.supplier={},vm.selectedMaterials=[],vm.mambers2=[],$scope.inputFiles=[],subcontractor.supplies=[],subcontractor.staff=[],$("#sub-contractor_modal").modal("hide"),vm.getSubcontractors("created")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})},$scope.contracts=[{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"}]})}(),function(){angular.module("app").controller("subcontractorDetailCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.subcontractorId=$stateParams.id,$scope.getSubcontractorDetail=function(){apiFactory.getSubcontractorById(vm.subcontractorId).then(function(resp){vm.subcontractorData=resp.data})},$scope.getSubcontractorDetail()})}(),function(){angular.module("app").controller("supplierCtrl",function($scope,$rootScope,$timeout,authFactory,$state,apiFactory,Notification,globals,fileManagerFactory,Upload,localStorageService){var vm=this;vm.selectedMaterials=[],vm.members2=[];var logout=globals.logout;globals.debounce,globals.userStore;$scope.activeJustified=0,authFactory.checkUser()||logout();vm.getSuppliers=function(type){apiFactory.getAllSuppliers({page:1,chunk:10,sort:type}).then(function(resp){vm.allSuppliers=resp.data.list,vm.suppiersCount=resp.data.total,console.log("suppliers are:",vm.allSuppliers),$timeout(function(){$("#pagination").pagination({items:vm.suppiersCount,itemsOnPage:10,cssStyle:"light-theme",hrefTextPrefix:"#",ordering:!1,currentPage:1,onPageClick:function(page,event){event.preventDefault(),apiFactory.getAllSuppliers({page:page,chunk:10}).then(function(resp){vm.allSuppliers=resp.data.list}).catch(function(e){console.log(e)})}})})}).catch(function(e){console.log(e)})},vm.getSuppliers("created"),$scope.onChange=function(files){null!=files[0]&&($scope.FILEIMG=URL.createObjectURL(files[0]),$scope.fileExt=files[0].name.split(".").pop())},globals.getCountryCode().then(function(resp){vm.getCountryCode=resp.data,vm.loadCountryCode=function($query){return new Promise(function(resolve,reject){resolve(resp.data)})}}),apiFactory.listAllMaterials().then(function(resp){vm.allMaterials=resp.data.list}),vm.addMaterial=function(item){vm.selectedMaterials.push(item)},vm.addMember=function(name){vm.members2.push(name)},vm.addSupplierNext=function(){$("#home").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#home").removeClass("show"),$("#home").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active")):$("#profile-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#contact-tab").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#contact").addClass("show"),$("#contact").addClass("active"))},vm.addSupplierPrevious=function(){$("#profile-tab").hasClass("active")?(console.log("home"),$("#navigation ul li a.active").removeClass("active"),$("#home").addClass("active"),$("#profile").removeClass("show"),$("#profile").removeClass("active"),$("#home").addClass("show"),$("#home").addClass("active")):$("#contact-tab").hasClass("active")&&(console.log("profile"),$("#navigation ul li a.active").removeClass("active"),$("#profile-tab").addClass("active"),$("#contact").removeClass("show"),$("#contact").removeClass("active"),$("#profile").addClass("show"),$("#profile").addClass("active"))},$scope.deleteMaterial=function(index,array){array.splice(index,1)},$scope.deleteStaff=function(index,array){array.splice(index,1)},$scope.createSupplier=function(supplier){supplier.supplies=[],supplier.staff=[],console.log("supplier",supplier),vm.selectedMaterials.length>0&&vm.selectedMaterials.forEach(function(element){supplier.supplies.push(element._id)}),vm.members2.length>0&&vm.members2.forEach(function(element){supplier.staff.push(element)}),console.log("supplier",supplier),apiFactory.createNewSupplier(supplier).then(function(resp){Notification.success("Supplier has been saved successfully"),vm.supplier={},vm.selectedMaterials=[],vm.mambers2=[],$scope.inputFiles=[],supplier.supplies=[],supplier.staff=[],$("#supplier_modal").modal("hide"),vm.getSuppliers("created")}).catch(function(e){console.log(e),Notification.error("Something went wrong")})},$scope.contracts=[{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"},{title:"Subcontractor A",time:"Sep 25, 2018 at 4:00 PM",img:"assets/images/suppliers/tree_logo.png"}]})}(),function(){angular.module("app").controller("supplierDetailCtrl",function($scope,$timeout,authFactory,$state,$stateParams,apiFactory,Notification,NgMap,globals,localStorageService){var vm=this,logout=globals.logout,userStore=globals.userStore;authFactory.checkUser()||logout();vm.userData=userStore.get(),vm.logout=function(){logout()},vm.supplierId=$stateParams.id,$scope.getSupplierDetail=function(){apiFactory.getSupplierById(vm.supplierId).then(function(resp){vm.supplierData=resp.data})},$scope.getSupplierDetail()})}(),function(){angular.module("app").controller("todoCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload){$scope.todo_list=[{img:"/assets/images/To-Do-Icon.png",subtitle:"1.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Hour",classname:"red-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"2.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Day",classname:"yellow-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"3.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Week",classname:"green-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"4.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 2 Weeks",classname:"gray-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"5.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 3 Weeks",classname:"gray-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"6.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 4 Weeks",classname:"gray-color"}];var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.logout=function(){logout()},this.userData=userStore.get()})}(),function(){angular.module("app").controller("todoViewCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,globals,Upload){$scope.todo_list=[{img:"/assets/images/To-Do-Icon.png",subtitle:"1.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Hour",classname:"red-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"2.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Day",classname:"yellow-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"3.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 1 Week",classname:"green-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"4.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 2 Weeks",classname:"gray-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"5.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 3 Weeks",classname:"gray-color"},{img:"/assets/images/To-Do-Icon.png",subtitle:"6.",title:"Lorem ipsum dolor sit amet,consectetur adipisicing elit,sed do eiusmod tempor.",work:"In 4 Weeks",classname:"gray-color"}];var logout=globals.logout,userStore=globals.userStore;if(!authFactory.checkUser())return void logout();this.logout=function(){logout()},this.userData=userStore.get()})}(),function(){angular.module("app").controller("visualPlannerCtrl",function($scope,$timeout,$state,$location,globals,authFactory,apiFactory,Notification,commonVPFactory,toolsVPFactory,shapesVPFactory,localStorageService,eventsVPFactory,layersVPFactory){var logout=globals.logout;globals.userStore;if(!authFactory.checkUser())return void logout();if($(".drag_element").mousedown(function(){!function(elmnt,e){var pos1=0,pos2=0,pos3=0,pos4=0;function dragMouseDown(e){(e=e||window.event).preventDefault(),pos3=e.clientX,pos4=e.clientY,document.onmouseup=closeDragElement,document.onmousemove=elementDrag}function elementDrag(e){(e=e||window.event).preventDefault(),pos1=pos3-e.clientX,pos2=pos4-e.clientY,pos3=e.clientX,pos4=e.clientY,elmnt.style.top=elmnt.offsetTop-pos2+"px",elmnt.style.left=elmnt.offsetLeft-pos1+"px"}function closeDragElement(){document.onmouseup=null,document.onmousemove=null}document.getElementById(elmnt.id+"header")?document.getElementById(elmnt.id+"header").onmousedown=dragMouseDown:elmnt.onmousedown=dragMouseDown}(document.getElementById($(this).closest("div").attr("id")))}),!authFactory.checkUser())return;var vm=this;function loadPlanner(roofPlan){var loadFromJson=!!roofPlan.plannerData&&!!roofPlan.plannerData.initialized,selectedShape=commonVPFactory.selectedShape(),colorPicker=toolsVPFactory.colorPicker();shapesVPFactory.getShapeTools(colorPicker),vm.shapeProps={colorType:"strokeColor",strokeColor:"rgba(0 ,0 , 0 , 1)",fillColor:"rgba(255, 255, 255, 0.57)",strokeWidth:1},vm.cpOptions={swatch:!0,inputClass:"h-30",format:"rgb",case:"lower",alpha:!0},vm.cpEvents={onChange:function(api,color,$event){var obj={};obj.stroke=vm.shapeProps.strokeColor,obj.fill=vm.shapeProps.fillColor,colorPicker.set(obj)}},vm.changeStrokeWidth=function(){colorPicker.set({strokeWidth:vm.shapeProps.strokeWidth})};var stage=commonVPFactory.createStage("stage",{height:window.innerHeight,width:window.innerWidth},roofPlan.plannerData),stageEvents=eventsVPFactory.stageEvents(stage);stageEvents.register("mousemove",function(){vm.pointerPosition={x:stage.getPointerPosition().x,y:stage.getPointerPosition().y},$scope.$apply()});var drawState=commonVPFactory.drawState();$scope.$on("drawStateChange",function(e,drawStates){vm.currentDrawState=drawStates});var baseLayer=loadFromJson?stage.getChildren()[0]:layersVPFactory.createLayer(stage),processStore=layersVPFactory.initiateProcess(stage,baseLayer),selectionStore=commonVPFactory.selectionStore(),transformerStore=commonVPFactory.transformers(baseLayer),calibrator=shapesVPFactory.calibrator(stage,baseLayer),calibrationState=commonVPFactory.calibrationState(),metrics=toolsVPFactory.metrics();if(vm.showPanel=!1,vm.zoomLevel=100,vm.shapeInfo,loadFromJson){if(roofPlan.plannerData&&roofPlan.plannerData.calibration){calibrationState.set(roofPlan.plannerData.calibration);var loadedProcesses=stage.getChildren()[0].getChildren().filter(function(x){return!!/process*/.test(x.name())});loadedProcesses.length>0?processStore.loadProcesses(loadedProcesses):processStore.createProcess()}roofPlan.plannerData&&roofPlan.plannerData.countData&&shapesVPFactory.loadShapeId(roofPlan.plannerData.countData)}else processStore.createProcess();vm.calibrationData=calibrationState.get(),vm.formatCalibration=function(val){return val.toFixed(3)},vm.processes=processStore.getProcesses(),vm.associations=commonVPFactory.associations();var imageObj=new Image;imageObj.crossOrigin="Anonymous",roofPlan.plannerData&&roofPlan.plannerData.jsonString?(imageObj.src=roofPlan.assetObj.url,imageObj.onload=function(){var imageContainer=baseLayer.get("#bgImage")[0];imageContainer.image(imageObj),vm.imageProps={x:Math.round(imageContainer.width()),y:Math.round(imageContainer.height())},stage.draw()}):(imageObj.src=roofPlan.assetObj.url,imageObj.onload=function(){var imageHeight=Math.round(stage.height()-75),aspectRatio=imageObj.height/imageHeight,imageWidth=Math.round(imageObj.width/aspectRatio);vm.imageProps={x:imageWidth,y:imageHeight};var bgImage=new Konva.Image({image:imageObj,name:"bgImage",id:"bgImage",height:imageHeight,shadowOffsetX:1,shadowOffsetY:1,shadowOpacity:.5,x:stage.width()/2-imageWidth/2,y:20,width:imageWidth});bgImage.on("click",function(e){transformerStore.removeAll()}),baseLayer.add(bgImage),baseLayer.draw(),baseLayer.moveToBottom()});var actionStates=commonVPFactory.actionStates(),windowEvent=eventsVPFactory.windowEvents(window);windowEvent.register(stage),vm.historyPos={x:void 0,y:void 0},window.addEventListener("wheel",function(e){"visualPlanner"===$state.$current.name&&!/modal-open/.test(document.getElementsByTagName("body")[0].className)&&e.preventDefault();Math.round(stage.height()/2),Math.round(stage.width()/2);if(e.ctrlKey){var oldScale=baseLayer.scaleX(),mousePointTo={x:stage.getPointerPosition().x/oldScale-baseLayer.x()/oldScale,y:stage.getPointerPosition().y/oldScale-baseLayer.y()/oldScale},newScale=e.deltaY<0?1.15*oldScale:oldScale/1.15;baseLayer.scale({x:newScale,y:newScale});var newPos={x:-(mousePointTo.x-stage.getPointerPosition().x/newScale)*newScale,y:-(mousePointTo.y-stage.getPointerPosition().y/newScale)*newScale},imageProps={y:Math.round(baseLayer.find("#bgImage")[0].height()*newScale),x:Math.round(baseLayer.find("#bgImage")[0].width()*newScale)};vm.imageProps=imageProps,vm.zoomLevel=Math.round(100*baseLayer.scale().x),toolsVPFactory.scaleTransformerBasedOnZoom(baseLayer),$scope.$apply(),baseLayer.position(newPos),stage.batchDraw()}}),window.addEventListener("contextmenu",function(e){"CANVAS"===e.target.tagName&&(e.preventDefault(),shapesVPFactory.cancelDrawing(),baseLayer.draw(),drawState.reset())}),vm.zoomButton=function(type){var centerY=Math.round(stage.height()/2),centerX=Math.round(stage.width()/2),oldScale=baseLayer.scaleX(),mousePointTo={x:centerX/oldScale-baseLayer.x()/oldScale,y:centerY/oldScale-baseLayer.y()/oldScale},newScale=type>0?1.15*oldScale:oldScale/1.15;baseLayer.scale({x:newScale,y:newScale});var newPos={x:-(mousePointTo.x-centerX/newScale)*newScale,y:-(mousePointTo.y-centerY/newScale)*newScale},imageProps={y:Math.round(baseLayer.find("#bgImage")[0].height()*newScale),x:Math.round(baseLayer.find("#bgImage")[0].width()*newScale)};vm.imageProps=imageProps,toolsVPFactory.scaleTransformerBasedOnZoom(baseLayer),vm.zoomLevel=Math.round(100*baseLayer.scale().x),baseLayer.position(newPos),stage.batchDraw()},vm.zoomSlider=function(percentage){var centerY=Math.round(stage.height()/2),centerX=Math.round(stage.width()/2),oldScale=baseLayer.scaleX(),mousePointTo={x:centerX/oldScale-baseLayer.x()/oldScale,y:centerY/oldScale-baseLayer.y()/oldScale},newScale=percentage/100;baseLayer.scale({x:newScale,y:newScale});var newPos={x:-(mousePointTo.x-centerX/newScale)*newScale,y:-(mousePointTo.y-centerY/newScale)*newScale},imageProps={y:Math.round(baseLayer.find("#bgImage")[0].height()*newScale),x:Math.round(baseLayer.find("#bgImage")[0].width()*newScale)};vm.imageProps=imageProps,toolsVPFactory.scaleTransformerBasedOnZoom(baseLayer),vm.zoomLevel=Math.round(100*baseLayer.scale().x),baseLayer.position(newPos),stage.batchDraw()},vm.resetZoom=function(){vm.zoomLevel=100,baseLayer.position({x:0,y:0}),baseLayer.scale({x:1,y:1}),stage.batchDraw()};var baseLayerEvent=eventsVPFactory.layerEvents(baseLayer);function rectangleEventWrapper(shapeObject,shapeType,process){var rectangleEvent=eventsVPFactory.shapeEvents(shapeObject.shape);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.shape),currentProcess.moveToTop()}var customTransformer=toolsVPFactory.customTransformer(stage,baseLayer,shapeObject.shape,!0);customTransformer.set(shapeObject.shape.points()),transformerStore.add(customTransformer.getGroup()),rectangleEvent.register("dragmove."+shapeType,function(e){customTransformer.update({x:shapeObject.shape.x(),y:shapeObject.shape.y()})}),rectangleEvent.register("transformPolygon",function(){var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.shape.points(),scale),unit:calibrationState.get().unit}),$scope.$apply(),vm.shapeInfo=metrics.getShapeInfo(),shapeObject.shape.points(customTransformer.getPoints())}),rectangleEvent.register("click."+shapeType,function(){shapeObject.shape.moveToTop(),selectedShape.set(shapeObject.shape),baseLayer.draw(),customTransformer.update({x:shapeObject.shape.x(),y:shapeObject.shape.y()}),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.shape.points(),scale),unit:calibrationState.get().unit}),$timeout(function(){$scope.$apply()}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.add(customTransformer.getGroup()),baseLayer.draw()});var movement=commonVPFactory.movement();rectangleEvent.register("dragstart."+shapeType,function(e){movement.add(e.target.getPosition())}),rectangleEvent.register("dragend."+shapeType,function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))})}function ellipseEventWrapper(shapeObject,shapeType,process){var ellipseEvent=eventsVPFactory.shapeEvents(shapeObject.shape);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.shape),currentProcess.moveToTop()}var ellipseTransfomer=toolsVPFactory.ellipseTransfomer(stage,baseLayer,shapeObject.shape);ellipseTransfomer.set(shapeObject.shape.radius()),transformerStore.add(ellipseTransfomer.getGroup()),ellipseEvent.register("dragmove.ellipse",function(e){ellipseTransfomer.destroy(),(ellipseTransfomer=toolsVPFactory.ellipseTransfomer(stage,baseLayer,shapeObject.shape)).set(shapeObject.shape.radius()),transformerStore.add(ellipseTransfomer.getGroup())}),ellipseEvent.register("click.ellipse",function(e){shapeObject.shape.moveToTop(),baseLayer.draw(),transformerStore.removeAll(),selectedShape.set(shapeObject.shape),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.ellipseArea(shapeObject.shape.radius(),scale),unit:calibrationState.get().unit}),ellipseTransfomer.destroy(),(ellipseTransfomer=toolsVPFactory.ellipseTransfomer(stage,baseLayer,shapeObject.shape)).set(shapeObject.shape.radius()),transformerStore.add(ellipseTransfomer.getGroup()),baseLayer.draw(),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,$timeout(function(){$scope.$apply()})}),ellipseEvent.register("transformEllipse",function(e){var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.ellipseArea(shapeObject.shape.radius(),scale),unit:calibrationState.get().unit}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0});var movement=commonVPFactory.movement();ellipseEvent.register("dragstart.ellipse",function(e){movement.add(e.target.getPosition())}),ellipseEvent.register("dragend.ellipse",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))})}function polygonEventWrapper(shapeObject,process){var polygonEvent=eventsVPFactory.shapeEvents(shapeObject.polygon);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.polygon),currentProcess.moveToTop()}var customTransformer=toolsVPFactory.customTransformer(stage,baseLayer,shapeObject.polygon,!1);customTransformer.set(shapeObject.polygon.points()),transformerStore.add(customTransformer.getGroup()),polygonEvent.register("dragmove.polygon",function(e){customTransformer.update({x:shapeObject.polygon.x(),y:shapeObject.polygon.y()})}),polygonEvent.register("click.polygon",function(e){customTransformer.update({x:shapeObject.polygon.x(),y:shapeObject.polygon.y()})});var movement=commonVPFactory.movement();polygonEvent.register("dragstart.polygon",function(e){movement.add(e.target.getPosition())}),polygonEvent.register("dragend.polygon",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),polygonEvent.register("transformPolygon",function(){var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.polygon.points(),scale),unit:calibrationState.get().unit}),$timeout(function(){$scope.$apply()}),vm.shapeInfo=metrics.getShapeInfo(),shapeObject.polygon.points(customTransformer.getPoints())}),polygonEvent.register("click",function(){shapeObject.polygon.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.polygon),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.polygon.points(),scale),unit:calibrationState.get().unit}),$scope.$apply(),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.add(customTransformer.getGroup()),baseLayer.draw()})}function freeHandEventWrapper(shapeObject,process){var freeHandEvent=eventsVPFactory.shapeEvents(shapeObject.polygon);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.polygon),currentProcess.moveToTop()}var movement=commonVPFactory.movement();freeHandEvent.register("dragstart.polygon",function(e){movement.add(e.target.getPosition())}),freeHandEvent.register("dragend.polygon",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),freeHandEvent.register("click",function(){shapeObject.polygon.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.polygon),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.polygon.points(),scale),unit:calibrationState.get().unit}),$timeout(function(){$scope.$apply()}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.draw()})}function lineEventWrapper(shapeObject,process){var lineEvent=eventsVPFactory.shapeEvents(shapeObject.line);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.line),currentProcess.moveToTop()}var movement=commonVPFactory.movement();lineEvent.register("dragstart.line",function(e){movement.add(e.target.getPosition())}),lineEvent.register("dragend.line",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),lineEvent.register("click",function(){shapeObject.line.moveToTop(),selectedShape.set(shapeObject.line),vm.openInfoWidget(),transformerStore.removeAll(),baseLayer.draw()})}function freeHandMarkerWrapper(shapeObject,process){var freeHandEvent=eventsVPFactory.shapeEvents(shapeObject.polygon);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.polygon),currentProcess.moveToTop()}var movement=commonVPFactory.movement();freeHandEvent.register("dragstart.freeHandMarker",function(e){movement.add(e.target.getPosition())}),freeHandEvent.register("dragend.freeHandMarker",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),freeHandEvent.register("click.freeHandMarker",function(){shapeObject.polygon.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.polygon),vm.openInfoWidget(),transformerStore.removeAll(),baseLayer.draw()})}function textEventWrapper(group,process){var textEvent=eventsVPFactory.shapeEvents(group);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(group),currentProcess.moveToTop()}var customTransformer=toolsVPFactory.customTransformer(stage,baseLayer,group,!0),wrapper=group.getChildren()[0],text=group.getChildren()[1];customTransformer.set(wrapper.points()),transformerStore.add(customTransformer.getGroup()),textEvent.register("dragmove.textGroup",function(e){customTransformer.update({x:group.x(),y:group.y()})}),textEvent.register("transformPolygon",function(){wrapper.points(customTransformer.getPoints());var updatedPoints=wrapper.points();text.width(Math.abs(updatedPoints[0]-updatedPoints[2])-10),text.position({x:updatedPoints[0]+5,y:updatedPoints[1]+5}),baseLayer.draw()}),textEvent.register("click.textGroup",function(){group.moveToTop(),selectedShape.set(text),baseLayer.draw(),customTransformer.update({x:group.x(),y:group.y()}),$timeout(function(){$scope.$apply()}),transformerStore.removeAll(),baseLayer.add(customTransformer.getGroup()),wrapper.stroke("grey"),baseLayer.draw(),vm.openTextInfoWidget()});var movement=commonVPFactory.movement();textEvent.register("dragstart.textGroup",function(e){movement.add(e.target.getPosition())}),textEvent.register("dragend.textGroup",function(e){actionStates.push(commonVPFactory.actionHandler(stage,group,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))})}baseLayerEvent.register("click",function(e){"Image"===e.target.className&&(transformerStore.removeAll(),vm.closeInfoWidget(),vm.closeTextInfoWidget(),selectedShape.reset())}),loadFromJson&&(angular.forEach(baseLayer.getChildren(),function(x){/process*/.test(x.name())&&angular.forEach(x.getChildren(),function(child){if("Ellipse"===child.className)ellipseEventWrapper({shape:child},"ellipse",!0);else if("Line"===child.className||"Arrow"===child.className){var shapeName=child.name();/Rect*/.test(shapeName)?rectangleEventWrapper({shape:child},"rectangle",!0):/polygon*/.test(shapeName)?polygonEventWrapper({polygon:child},!0):/line*/.test(shapeName)?lineEventWrapper({line:child},!0):/freeHand*/.test(shapeName)?freeHandEventWrapper({polygon:child},!0):/markerFreeHand*/.test(shapeName)&&freeHandMarkerWrapper({polygon:child},!0)}else/textGroup*/.test(child.name())&&textEventWrapper(child,!0)})}),transformerStore.removeAll()),vm.rectangle=function(square){var shapeType=square?"square":"rectangle";drawState.set("shapes."+shapeType),document.body.style.cursor="crosshair",console.log(vm.currentDrawState.shapes.square),baseLayerEvent.register("click."+shapeType,function(){if(drawState.check("shapes."+shapeType)){var shapeObject=shapesVPFactory.createShape(0,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject.start?(baseLayer.add(shapeObject.shape),actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"create")),baseLayer.draw()):(rectangleEventWrapper(shapeObject,shapeType),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())}}),baseLayerEvent.register("mousemove."+shapeType,function(){drawState.check("shapes."+shapeType)&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),square),baseLayer.draw())})},vm.ellipse=function(circle){var shapeType=circle?"circle":"ellipse";drawState.set("shapes."+shapeType),document.body.style.cursor="crosshair",baseLayerEvent.register("click."+shapeType,function(){if(drawState.check("shapes."+shapeType)){var shapeObject=shapesVPFactory.createShape(1,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject.start?(baseLayer.add(shapeObject.shape),actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"create")),baseLayer.draw()):(document.body.style.cursor="default",ellipseEventWrapper(shapeObject,shapeType),drawState.reset(),shapesVPFactory.destroyShape())}}),baseLayerEvent.register("mousemove."+shapeType,function(){drawState.check("shapes."+shapeType)&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),circle),baseLayer.draw())})},vm.polygon=function(){drawState.set("shapes.polygon"),document.body.style.cursor="crosshair",baseLayerEvent.register("click.polygon",function(){if(drawState.check("shapes.polygon")){var shapeObject=shapesVPFactory.createPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.polygon)):(polygonEventWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.polygon",function(){drawState.check("shapes.polygon")&&(shapesVPFactory.drawPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale())),baseLayer.draw())})},vm.freeHand=function(){drawState.set("measurement.freeHand"),document.body.style.cursor="crosshair",baseLayerEvent.register("mousedown.freehand",function(){if(drawState.check("measurement.freeHand")){var shapeObject=shapesVPFactory.createPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0);shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.polygon)):(freeHandEventWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.freehand",function(){drawState.check("measurement.freeHand")&&(shapesVPFactory.drawPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0),baseLayer.draw())})},vm.simpleLine=function(type){drawState.set("markings."+type),document.body.style.cursor="crosshair",baseLayerEvent.register("click."+type,function(){if(drawState.check("markings."+type)){var shapeObject=shapesVPFactory.createLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),type);shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.line),baseLayer.draw()):(lineEventWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove."+type,function(){drawState.check("markings."+type)&&(shapesVPFactory.drawLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale())),baseLayer.draw())})},vm.bezierLine=function(){drawState.set("markings.bezier"),document.body.style.cursor="crosshair",baseLayerEvent.register("click.bezier",function(){if(drawState.check("markings.bezier")){var shapeObject=shapesVPFactory.createBezierLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.line),baseLayer.draw()):(!function(shapeObject,process){var bezierEvent=eventsVPFactory.shapeEvents(shapeObject.line);if(!process){var currentProcess=processStore.getCurrent();currentProcess.add(shapeObject.line),currentProcess.moveToTop()}var bezierTransformer=toolsVPFactory.bezierTransformer(stage,baseLayer,shapeObject.line);bezierTransformer.set(shapeObject.line.points()),transformerStore.add(bezierTransformer.getGroup()),bezierEvent.register("dragmove.polygon",function(e){bezierTransformer.update({x:shapeObject.line.x(),y:shapeObject.line.y()})}),bezierEvent.register("click.polygon",function(e){bezierTransformer.update({x:shapeObject.line.x(),y:shapeObject.line.y()})});var movement=commonVPFactory.movement();bezierEvent.register("dragstart.polygon",function(e){movement.add(e.target.getPosition())}),bezierEvent.register("dragend.polygon",function(e){actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.line,processStore.getCurrent(),"move",movement.add(e.target.getPosition())))}),bezierEvent.register("transformBezier",function(){shapeObject.line.points(bezierTransformer.getPoints())}),bezierEvent.register("click",function(){shapeObject.line.moveToTop(),baseLayer.draw(),selectedShape.set(shapeObject.line),vm.openInfoWidget();var scale=0===calibrationState.get().value?void 0:calibrationState.get().value;metrics.setShapeInfo({area:toolsVPFactory.polygonArea(shapeObject.line.points(),scale),unit:calibrationState.get().unit}),vm.shapeInfo=metrics.getShapeInfo(),vm.showPanel=!0,transformerStore.removeAll(),baseLayer.add(bezierTransformer.getGroup()),baseLayer.draw()})}(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.bezier",function(){drawState.check("markings.bezier")&&(shapesVPFactory.drawBezierLine(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale())),baseLayer.draw())})},vm.freehandMarker=function(){drawState.set("shapes.freeHand"),document.body.style.cursor="crosshair",baseLayerEvent.register("mousedown.freehand",function(){if(drawState.check("shapes.freeHand")){var shapeObject=shapesVPFactory.createPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0,!0);shapeObject&&(shapeObject.start?(actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.polygon,processStore.getCurrent(),"create")),baseLayer.add(shapeObject.polygon)):(freeHandMarkerWrapper(shapeObject),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape())),baseLayer.draw()}}),baseLayerEvent.register("mousemove.freehand",function(){drawState.check("shapes.freeHand")&&(shapesVPFactory.drawPolygon(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0),baseLayer.draw())})},vm.textWidget=function(){drawState.set("shapes.text"),document.body.style.cursor="crosshair",baseLayerEvent.register("click.textWrapper",function(){if(drawState.check("shapes.text")){var shapeObject=shapesVPFactory.createShape(0,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));if(shapeObject.start)baseLayer.add(shapeObject.shape),actionStates.push(commonVPFactory.actionHandler(stage,shapeObject.shape,processStore.getCurrent(),"create"));else{var textGroup=shapesVPFactory.createTextGroup();textGroup.add(shapeObject.shape);var points=shapeObject.shape.points(),textProps={position:{x:points[0]+10,y:points[1]+10},width:Math.abs(points[0]-points[2])-10},textObj=shapesVPFactory.createText(textProps);textGroup.add(textObj),textEventWrapper(textGroup),document.body.style.cursor="default",drawState.reset(),shapesVPFactory.destroyShape(),baseLayer.draw()}}}),baseLayerEvent.register("mousemove.textWrapper",function(){drawState.check("shapes.text")&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!1,"wrapper"),baseLayer.draw())})},vm.manualSelection=function(shapeObj){transformerStore.removeAll(),selectedShape.reset();selectedShape.set(shapeObj);shapeObj.fire("click")},vm.dragSelection=function(){drawState.set("markings.selection"),document.body.style.cursor="crosshair",baseLayerEvent.register("mousedown.selection",function(){if(drawState.check("markings.selection")){vm.selectAllShapes(!1);var shapeObject=shapesVPFactory.createShape(0,commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()));baseLayer.add(shapeObject.shape),baseLayer.draw()}}),baseLayerEvent.register("mouseup.selection",function(){if(drawState.check("markings.selection")){document.body.style.cursor="default",drawState.reset();var selectionPoints=shapesVPFactory.cancelDrawing(),selectedShapes=shapesVPFactory.selectShapes(baseLayer,selectionPoints),selectedShapeNames=selectedShapes.map(function(x){return x.name()});selectionStore.store(selectedShapes),angular.forEach(vm.processes,function(process){angular.forEach(process.getChildren(),function(child){selectedShapeNames.indexOf(child.name())>-1&&(child.selected=!0)})}),baseLayer.draw()}}),baseLayerEvent.register("mousemove.selection",function(){drawState.check("markings.selection")&&(shapesVPFactory.drawShape(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!1,"grabber"),baseLayer.draw())})},vm.selectAllShapes=function(toggleValue){var allShapes=shapesVPFactory.extractAllShapes(baseLayer);toggleValue?selectionStore.store(allShapes):selectionStore.clear(),angular.forEach(allShapes,function(x){x.selected=!!toggleValue})},vm.toggleShapeVisibility=function(shape){transformerStore.removeAll(),shape.visible(!shape.visible()),baseLayer.draw()},vm.calibrator=function(){drawState.set("measurement.calibrator"),calibrator=shapesVPFactory.calibrator(stage,baseLayer),baseLayerEvent.register("click.calibrator",function(){drawState.check("measurement.calibrator")&&calibrator(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!0)}),baseLayerEvent.register("mousemove.calibrator",function(){drawState.check("measurement.calibrator")&&calibrator(commonVPFactory.dragOffset(stage.getPointerPosition(),baseLayer.getPosition(),baseLayer.scale()),!1)})},$scope.$on("calibrated",function(e,calibratedLine){$("#calibrateModal").modal("show");var points=calibratedLine.points(),distance=Math.sqrt(Math.pow(points[0]-points[2],2)+Math.pow(points[1]-points[3],2));vm.calibrationDistance=distance,vm.saveCalibration=function(){var scale,value=vm.calibrationScale.value;scale=parseInt(value)/distance,calibrationState.set({value:scale,unit:vm.calibrationScale.unit}),vm.calibrationData=calibrationState.get(),vm.showPanel=!0,vm.shapeInfo=metrics.getShapeInfo(),calibratedLine.destroy(),baseLayer.draw(),$("#calibrateModal").modal("hide")},$("#calibrateModal").on("hide.bs.modal",function(e){calibratedLine.destroy(),baseLayer.draw()})}),vm.deleteShape=function(shapeObj){var shape=shapeObj||selectedShape.get();shape&&(transformerStore.removeAll(),actionStates.push(commonVPFactory.actionHandler(stage,shape,shape.getParent(),"delete")),shape.remove(),baseLayer.draw(),vm.closeInfoWidget(),vm.closeTextInfoWidget(),selectedShape.reset())},vm.openInfoWidget=function(){var shape=selectedShape.get();vm.infoWidgetProps={name:shape.name(),colorType:"stroke",stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()},vm.shapeInfoWidget=!0},vm.colorTypes=[{type:"Stroke",value:"stroke"},{type:"Fill",value:"fill"}],vm.textColorTypes=[{type:"Background",value:"stroke"},{type:"Font",value:"fill"}],vm.fontStyles=[{type:"Normal",value:"normal"},{type:"Bold",value:"bold"},{type:"Italic",value:"italic"}],vm.webSafeFonts=["Arial","Calibri","Helvetica","Times New Roman","Times","Courier New","Courier","Verdana","Georgia","Palatino","Garamond","Bookman","Comic Sans MS","Trebuchet MS","Arial Black","Impact"],vm.openTextInfoWidget=function(){var shape=selectedShape.get();vm.textInfoWidgetProps={colorType:"stroke",text:shape.text(),fontSize:shape.fontSize(),fontStyle:shape.fontStyle(),fontFamily:shape.fontFamily(),stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()},vm.textInfoWidget=!0,$scope.$apply()},vm.changeTextInfo=function(prop,value){var shape=selectedShape.get();shape[prop](value),baseLayer.draw()},vm.infoWidgetStroke=function(val){var shape=selectedShape.get();shape.strokeWidth(val),baseLayer.draw()};var shapePropHistory=commonVPFactory.shapePropertyHistory();vm.infoWidgetEvents={onChange:function(api,color,$event){var shape=selectedShape.get();"fill"===vm.infoWidgetProps.colorType?shape.fill(color):"stroke"===vm.infoWidgetProps.colorType&&shape.stroke(color),baseLayer.draw()},onOpen:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};shapePropHistory.add(props)},onClose:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};actionStates.push(commonVPFactory.actionHandler(stage,shape,processStore.getCurrent(),"shapeProps",shapePropHistory.add(props))),shapePropHistory=commonVPFactory.shapePropertyHistory()}},vm.textInfoWidgetEvents={onChange:function(api,color,$event){var shape=selectedShape.get();if("fill"===vm.textInfoWidgetProps.colorType)shape.fill(color);else if("stroke"===vm.textInfoWidgetProps.colorType){var wrapper=shape.getParent().find("Line");wrapper.fill(color)}baseLayer.draw()},onOpen:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};shapePropHistory.add(props)},onClose:function(api,color,$event){var shape=selectedShape.get(),props={stroke:shape.stroke(),fill:shape.fill(),strokeWidth:shape.strokeWidth()};actionStates.push(commonVPFactory.actionHandler(stage,shape,processStore.getCurrent(),"shapeProps",shapePropHistory.add(props))),shapePropHistory=commonVPFactory.shapePropertyHistory()}},vm.closeInfoWidget=function(){vm.shapeInfoWidget=!1},vm.closeTextInfoWidget=function(){var text=selectedShape.get();if(text&&"text"===text.name()){var group=text.getParent(),wrapper=group.find("Line")[0];wrapper.stroke(null),baseLayer.draw(),transformerStore.removeAll()}vm.textInfoWidget=!1},vm.currentPanState=!0,vm.panImage=function(){vm.currentPanState=baseLayer.draggable(),vm.currentPanState?document.body.style.cursor="default":document.body.style.cursor="move",baseLayer.draggable(!vm.currentPanState),baseLayer.draw()},vm.undoOrRedo=function(type){transformerStore.removeAll(),1===type?actionStates.redo():actionStates.undo()},vm.downloadImage=function(){var dataURL=stage.toDataURL(),link=document.createElement("a");link.download="roofplan_image_"+Date.now(),link.href=dataURL,document.body.appendChild(link),link.click(),document.body.removeChild(link)},vm.downloadFile=function(){var json=stage.toJSON(),file=new Blob([json],{type:"application/json"}),link=document.createElement("a");link.href=URL.createObjectURL(file),link.download="roofplan_json_"+Date.now(),document.body.appendChild(link),link.click(),document.body.removeChild(link)},vm.saveRoofPlan=function(){transformerStore.removeAll();var json=stage.toJSON();apiFactory.saveRoofPlan(roofPlan._id,{jsonString:json,calibration:calibrationState.get(),countData:shapesVPFactory.getShapeId(),associations:vm.associations.getAssociationsForSave()}).then(function(resp){Notification.success(resp.data.message),apiFactory.getProjectRoofPlans(localStorageService.get("roofPlanProject")).then(function(resp){localStorageService.set("roofPlans",resp.data.data)}).catch(function(e){console.log(e)})}).catch(function(e){console.log(e)})},vm.hideProcess=function(index){transformerStore.removeAll(),processStore.hideProcess(index)},vm.showProcess=function(index){processStore.showProcess(index)},vm.addProcess=function(){processStore.createProcess(),vm.processes=processStore.getProcesses()},vm.selectLayer=function(i){vm.selectedIndex=i,processStore.setCurrent(i)},vm.selectLayer(0),vm.selectOrUnselect=function(shape){shape.selected?selectionStore.push(shape):selectionStore.pull(shape.name())},vm.layerIconName=function(shapeName){return/Rect*/.test(shapeName)?"square":/Ellipse*/.test(shapeName)?"circle":/polygon*/.test(shapeName)?"polygon":/line*/.test(shapeName)?"line":/textGroup*/.test(shapeName)?"text":/freeHand*/.test(shapeName)?"pencil":void 0},vm.hideSelection=function(){var selectedShapes=selectionStore.get();console.log(selectedShapes),transformerStore.removeAll(),angular.forEach(selectedShapes,function(shape){shape.visible(!1)}),baseLayer.draw()},vm.deleteSelection=function(){var selectedShapes=selectionStore.get();transformerStore.removeAll(),angular.forEach(selectedShapes,function(shape){actionStates.push(commonVPFactory.actionHandler(stage,shape,shape.getParent(),"delete")),shape.remove()}),baseLayer.draw()},vm.loadMaterial=function(shapeProp){$("#loadMaterial").modal("show")},vm.createAssociation=function(shapeId,entityId,type){vm.associations.createAssociation(shapeId,entityId,type),$("#loadMaterial").modal("hide")},$scope.$on("selectedMaterial",function(e,data){console.log("selectedMaterial----",data)})}vm.hideInitModal=!1,vm.roofPlans=localStorageService.get("roofPlans"),vm.selectPlan=function(plan){vm.selectedPlan=plan._id,loadPlanner(plan),vm.hideInitModal=!0},vm.selectPlan(localStorageService.get("selectedPlan")),vm.closeVisualPlanner=function(){document.body.style.cursor="default",$("#chooseRoofModal").modal("hide"),$state.go("dashboard")}})}(),function(){angular.module("app").directive("canvasPdf",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"A",scope:{current:"="},link:function($scope,elem,attrs){globals.renderPage($scope.current,elem[0]),$timeout(function(){$scope.$apply()})}}})}(),function(){angular.module("app").directive("filePicker",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"E",templateUrl:"/partials/filePicker.html",scope:{folders:"=",options:"=",source:"=",sourcefile:"=",sourcedir:"="},link:function($scope,elem,attrs){var folderPaths=[],projectStore=globals.projectStore;$scope.files=[],$scope.folderName="Root Folder",$scope.currentFolder="",$scope.selectedFolder=null,$scope.backBtnView=!1,$scope.viewFolder=function(folder){var name=folder.name;folderPaths.push(folder),$scope.selectedFolder,apiFactory.viewHierarchy(folder._id).then(function(resp){$scope.selectedFolder=folder,$scope.currentFolder=folder.name,$scope.folders=resp.data.folders,$scope.files=resp.data.files,$scope.breadCrumbs=resp.data.breadcrumbs,$scope.folderName=name,"Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1}).catch(function(e){console.log(e)})},$scope.selectFile=function(file,breadCrumbs){file.breadCrumbs=breadCrumbs,$rootScope.$broadcast("loader",!0),$rootScope.$broadcast("selectedRoofPlanDoc",file)},$scope.back=function(){folderPaths.pop();var previous=folderPaths[folderPaths.length-1],apiName=previous?"viewHierarchy":"getHierarchy",param=previous?previous._id:projectStore.get()._id;apiFactory[apiName](param).then(function(resp){$scope.selectedFolder=previous||null,$scope.currentFolder=previous?previous.name:null,$scope.folders=previous?resp.data.folders:resp.data.data.hierarchies,$scope.files=previous?resp.data.files:[],$scope.folderName=previous?previous.name:"Root Folder","Root Folder"==$scope.folderName?$scope.backBtnView=!0:$scope.backBtnView=!1}).catch(function(e){console.log(e)})},$scope.moveTo=function(folder,source){if(folder){var payload={assetId:$scope.sourcefile._id,sourceId:source.$modelValue._id,destId:folder._id};apiFactory.moveAssets(payload).then(function(resp){$scope.sourcedir&&($scope.sourcedir=$scope.sourcedir.filter(function(x){return x._id!==$scope.sourcefile._id})),Notification.success("File Moved Successfully"),$("#moveTo").modal("hide")}).catch(function(e){console.log(e)})}}}}})}(),angular.module("app").directive("autoComplete",function($timeout){return function(scope,iElement,iAttrs){iElement.autocomplete({source:scope[iAttrs.uiItems],select:function(){$timeout(function(){iElement.trigger("input")},0)}})}}),angular.module("app").directive("errSrc",function(){return{link:function(scope,element,attrs){element.bind("error",function(){attrs.src!=attrs.errSrc&&attrs.$set("src",attrs.errSrc)})}}}),function(){angular.module("app").directive("materialPicker",function($rootScope,apiFactory,$timeout,globals,Notification){return{restrict:"E",templateUrl:"/partials/materialPicker.html",scope:{materialType:"=",selectedMaterial:"=",currentShape:"=",associations:"="},link:function($scope,elem,attrs){$scope.materialList=[],$scope.entityType=1,apiFactory.listAllMaterials().then(function(resp){$scope.materialList=resp.data.list,$scope.selectedMaterial=angular.copy($scope.materialList[0])}).catch(function(e){}),$scope.dcpList=[],apiFactory.listAllComboMaterials().then(function(resp){$scope.dcpList=resp.data.list}).catch(function(e){}),$scope.equipmentList=[],apiFactory.listAllEquipments().then(function(resp){$scope.equipmentList=resp.data.list}).catch(function(e){}),$scope.selectedMaterialInfo=function(material){$rootScope.$broadcast("selectedMaterial",material),console.log(material),$scope.materialImages=material},$scope.materialSelection=function(item){$scope.selectedMaterial=item},$scope.resetSelectedMaterial=function(val){$scope.selectedMaterial&&(console.log($scope.currentShape),0==val?($scope.selectedMaterial=angular.copy($scope.materialList[0]),$scope.entityType=val+1):1==val?($scope.selectedMaterial=angular.copy($scope.dcpList[0]),$scope.entityType=val+1):($scope.selectedMaterial=angular.copy($scope.equipmentList[0]),$scope.entityType=val+1))},$scope.assignMaterial=function(shapeId,entityId,type){$("#loadMaterial").modal("hide"),$scope.associations.createAssociation(shapeId,entityId,type)}}}})}(),function(){angular.module("app").filter("convertCurrency",function(){return function(input,conversionRate){return input?input*conversionRate:0}}),angular.module("app").filter("roundNum",function(){return function(input,place){return input?Number(input).toFixed(place):0}}),angular.module("app").filter("fetchThumbnail",function(){return function(input){if(input)return/cloudinary/.test(input.secure_url)?input.secure_url.replace(/\.pdf/,".png"):input.thumbnail}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
