"use strict";function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var app=angular.module("app",["ui.router","routesModule","LocalStorageModule","uiGmapgoogle-maps","ngProgress","ui-notification","ngMap","ui.select","ui.select2","ngSanitize","color.picker","ui.bootstrap","datatables","ngTagsInput","ngFileUpload","infinite-scroll","ui.tree","btorfs.multiselect","htmlToPdfSave","dndLists","angular.chips","ui.bootstrap.contextMenu","cloudinary"]);function config(NotificationProvider,uiGmapGoogleMapApiProvider,treeConfig,cloudinaryProvider){uiGmapGoogleMapApiProvider.configure({key:"AIzaSyA3MIA-mKWq_60q1K0zOHguraxT-1QPxNU",v:"3.exp",libraries:"places,weather,geometry,visualization"}),NotificationProvider.setOptions({delay:3e3,startTop:20,startRight:10,verticalSpacing:20,horizontalSpacing:20,positionX:"right",positionY:"top"}),treeConfig.defaultCollapsed=!0,cloudinaryProvider.set("cloud_name","dktnhmsjx").set("upload_preset","cloudes_frontend")}function routeConfig($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("3dViewer",{url:"/",templateUrl:"/partials/3d-viewer.html",controller:"_3dViewerCtrl as vm"})}app.config(config),angular.module("routesModule",[]).config(routeConfig),function(){angular.module("app").factory("apiFactory",function($http,$state,$location,localStorageService,globals,Upload,Notification){var _ref,url="https://api.staging.cloudes.eu",headers=function(method,token){return{"Content-Type":"GET"===method?void 0:"application/json","x-access-token":token?localStorageService.get("access-token"):void 0,platform:JSON.stringify({source:"web"})}},progress=globals.progress,logout=(globals.userStore,globals.logout);return _defineProperty(_ref={login:function(payload){var promise=this.progressify($http({url:url+"/authenticate",method:"POST",headers:headers("POST"),data:payload}));return promise},forgotPassword:function(payload){var promise=this.progressify($http({url:url+"/forgetPassword",method:"POST",headers:headers("POST"),data:payload}));return promise},registration:function(payload){var promise=this.progressify($http({url:url+"/dashboardRegistration",method:"POST",headers:headers("POST"),data:payload}));return promise},subscribe:function(payload){var promise=this.progressify($http({url:url+"/subscribe",method:"POST",headers:headers("POST"),data:payload}));return promise},getCompanyById:function(companyId){var promise=this.progressify($http({url:url+"/api/getCompanyById/"+companyId,method:"GET",headers:headers("GET",!0)}));return promise},listAllUsers:function(){var promise=this.progressify($http({url:url+"/api/getadminusers",method:"GET",headers:headers("GET",!0)}));return promise},listAllProjects:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllProjects"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllClients:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllClients"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllRoofers:function(){var promise=this.progressify($http({url:url+"/api/listAllRoofers",method:"GET",headers:headers("GET",!0)}));return promise},createProject:function(payload){var promise=this.progressify($http({url:url+"/api/createProject",method:"POST",headers:headers("POST",!0),data:payload}));return promise},createIssue:function(issueobj){var promise=this.progressify(Upload.upload({url:url+"/api/createIssue",method:"POST",data:issueobj,headers:headers("POST",!0)}));return promise},updateIssue:function(issueobj,id){console.log("At apifactory update obj:",issueobj),console.log("At ID:",id);var promise=this.progressify(Upload.upload({url:url+"/api/updateIssue/"+id,method:"PUT",data:issueobj,headers:headers("PUT",!0)}));return promise},getProjectRoofPlans:function(projectId){var promise=this.progressify($http({url:url+"/api/getProjectRoofPlans/"+projectId,method:"GET",headers:headers("GET",!0)}));return promise},saveRoofPlan:function(roofPlanId,payload){var promise=this.progressify($http({url:url+"/api/saveRoofPlan/"+roofPlanId,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},createMaterials:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createMaterial",data:payload,headers:headers("POST",!0)}));return promise},createEquipment:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createEquipment",data:payload,headers:headers("POST",!0)}));return promise},listAllMaterials:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllMaterials"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllComboMaterials:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listComboMaterials"+query,method:"GET",headers:headers("GET",!0)}));return promise},listAllEquipments:function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllEquipments"+query,method:"GET",headers:headers("GET",!0)}));return promise},updateMaterialById:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateMaterialById/"+id,method:"PUT",headers:headers("PUT",!0),data:payload}));return promise},getMaterialById:function(materialID){var promise=this.progressify($http({url:url+"/api/getMaterialById/"+materialID,method:"GET",headers:headers("GET",!0)}));return promise},getComboMaterialById:function(comboId){var promise=this.progressify($http({url:url+"/api/getComboMaterialById/"+comboId,method:"GET",headers:headers("GET",!0)}));return promise},createComboMaterial:function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/createComboMaterial",method:"POST",headers:headers("POST",!0),data:payload}));return promise},updateComboMaterialList:function(id,payload){var promise=this.progressify($http({url:url+"/api/updateComboMaterialList/"+id,method:"PUT",headers:headers("POST",!0),data:payload}));return promise},updateComboMaterial:function(id,payload){var promise=this.progressify(Upload.upload({url:url+"/api/updateComboMaterial/"+id,method:"PUT",headers:headers("POST",!0),data:payload}));return promise},showConversionRate:function(payload){var promise=this.progressify($http({url:url+"/api/showConversionRate",method:"POST",headers:headers("POST",!0),data:payload}));return promise}},"getMaterialById",function(id){var promise=this.progressify($http({url:url+"/api/getMaterialById/"+id,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"progressify",function(promise){return new Promise(function(resolve,reject){progress.start(),promise.then(function(resp){progress.complete(),resolve(resp)}).catch(function(err){progress.complete(),401===err.status&&logout(),reject(err)})})}),_defineProperty(_ref,"listAllIssues",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/listAllIssues"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getIssuesList",function(){var promise=this.progressify($http({url:url+"/api/allIssues",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"isTokenValid",function(payload){var promise=this.progressify($http({url:url+"/isTokenValid",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"setPassword",function(payload){var promise=this.progressify($http({url:url+"/resetPasswordAdmin",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"updateRoleBasedAccess",function(payload){var promise=this.progressify($http({url:url+"/api/updateRoleBasedAccess",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"addHierarchy",function(payload){var promise=this.progressify($http({url:url+"/api/addHierarchy",method:"POST",headers:headers("POST",!0),data:payload}));return promise}),_defineProperty(_ref,"getHierarchyChildren",function(hierarchyId){var promise=this.progressify($http({url:url+"/api/getHierarchyChildren/"+hierarchyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getHierarchy",function(projectId){var promise=this.progressify($http({url:url+"/api/getHierarchy/"+projectId+"?depth=2",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"viewProjectAssets",function(projectId){var promise=this.progressify($http({url:url+"/api/viewProjectAssets/"+projectId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"addFileToHierarchy",function(payload){var promise=this.progressify($http({url:url+"/api/addFileToHierarchy",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"viewHierarchy",function(hierarchyId){var promise=this.progressify($http({url:url+"/api/viewHierarchy/"+hierarchyId,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"cloneAssets",function(payload){var promise=this.progressify($http({url:url+"/api/cloneAssets",method:"PUT",headers:headers("PUT",!0),data:payload}));return promise}),_defineProperty(_ref,"uploadFileInFileManager",function(payload){var promise=this.progressify(Upload.upload({url:url+"/api/uploadFileInFileManager",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"dragMoveNodes",function(payload){var promise=this.progressify($http({url:url+"/api/dragMoveNodes",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"moveAssets",function(payload){var promise=this.progressify($http({url:url+"/api/moveAssets",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"deleteAssets",function(payload){var promise=this.progressify($http({url:url+"/api/deleteAssets",method:"PUT",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"get3DPage",function(){var token=localStorageService.get("access-token"),Data3D={"x-access-token":token,projectId:"5b697c030a7e97056835a94a"},promise=this.progressify($http({url:"https://cloudes-3d.com",method:"POST",data:Data3D}));return promise}),_defineProperty(_ref,"createClient",function(client){console.log("client in api factory",client);var promise=this.progressify($http({url:url+"/api/createClient",method:"POST",headers:headers("POST",!0),data:client}));return promise}),_defineProperty(_ref,"saveHierarchyTree",function(projectId,name){var promise=this.progressify($http({url:url+"/api/saveHierarchyTree/"+projectId,method:"PUT",headers:headers("POST",!0),data:name}));return promise}),_defineProperty(_ref,"getSystemTag",function(){var promise=this.progressify($http({url:url+"/api/getComboSystemTag",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"bookMarkProject",function(id,added){var promise=this.progressify($http({url:url+"/api/bookMarkProject",method:"PUT",data:{projectId:id,added:added},headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"getBookmarks",function(){var promise=this.progressify($http({url:url+"/api/getBookmarks",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"getHierarchyTemplate",function(){var promise=this.progressify($http({url:url+"/api/getHierarchyTemplate",method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"loadHierarchyTree",function(payload){var promise=this.progressify($http({url:url+"/api/loadHierarchyTree",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"newFileUpload",function(payload){var promise=this.progressify($http({url:url+"/api/newFileUpload",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_defineProperty(_ref,"showProjectFiles",function(queryObj){var query=queryObj?Object.keys(queryObj).reduce(function(acc,v){var str=v+"="+queryObj[v]+"&";return acc+=str},"?"):"";query=query.slice(0,-1);var promise=this.progressify($http({url:url+"/api/showProjectFiles"+query,method:"GET",headers:headers("GET",!0)}));return promise}),_defineProperty(_ref,"changeProjectTemplate",function(payload){var promise=this.progressify($http({url:url+"/api/changeProjectTemplate",method:"POST",data:payload,headers:headers("POST",!0)}));return promise}),_ref})}(),function(){angular.module("app").factory("authFactory",function($http,$location,localStorageService){return{checkUser:function(){var token=localStorageService.get("access-token");return!(!token||""==token)},checkPrivilege:function(type,subType){var _localStorageService$=localStorageService.get("userData"),privilege=_localStorageService$.privilege,_localStorageService$2=localStorageService.get("companyData"),privileges=_localStorageService$2.privileges;return privilege<=privileges[type][subType]}}})}(),function(){angular.module("app").factory("fileManagerFactory",function(apiFactory,Notification){return{clipBoard:(items={type:0,data:[],source:null},{copy:function(item){items.source=null,items.type=0,items.data=[item]},cut:function(item,source){items.source=source,items.type=1,items.data=[item]},paste:function(destId){return new Promise(function(resolve,reject){if(items.data.length<1)return Notification.warning("Clipboard is empty"),void resolve(!1);var apiType=0===items.type?"cloneAssets":"moveAssets",payload={assetId:items.data.map(function(x){return x._id}),sourceId:0===items.type?void 0:items.source,destId:0===items.type?void 0:destId,hierarchyId:0===items.type?destId:void 0};apiFactory[apiType](payload).then(function(resp){Notification.success(resp.data.message),items={type:0,data:[],source:null},resolve(!0)}).catch(function(e){reject(e)})})}}),navigationStack:function(){var stack=[],head=stack.length-1;return{push:function(item){stack.splice(head+1,stack.length,item),head=stack.length-1},forward:function(){if(stack.length&&head!==stack.length-1)return stack[++head]?(stack[head].toggle(),stack[head]):void 0},backward:function(){if(stack.length&&!(head<0))return stack[head]?(stack[head].toggle(),stack[--head]):void 0}}},breadCrumb:function(){var breadCrumbs=[];return{set:function(val){breadCrumbs.push(val)},get:function(){return breadCrumbs}}},splitDestination:function(filesArray){return filesArray.reduce(function(acc,x){return x.size<2e7&&("application/pdf"===x.type||/image*/.test(x.type))?acc.cloudinary.push(x):acc.s3.push(x),acc},{s3:[],cloudinary:[]})},resolveDestType:function(file){return file.size<15e7&&("application/pdf"===file.type||/image*/.test(file.type))?2:1},checkUploadCompletion:function(files){var bool=!0;return files.s3.forEach(function(x){x.completed||x.aborted||!bool||(bool=!1)}),files.cloudinary.forEach(function(x){x.completed||x.aborted||!bool||(bool=!1)}),bool}};var items})}(),function(){angular.module("app").factory("globals",function($http,$state,$location,ngProgressFactory,Notification,localStorageService){enabled=!0;var enabled;return{progress:(progressbar=ngProgressFactory.createInstance(),progressbar),logout:function(){localStorageService.remove("access-token"),localStorageService.remove("userData"),localStorageService.remove("companyData"),localStorageService.remove("currentProject"),localStorageService.remove("inventoryState"),$state.go("preLogin")},userStore:(userData=localStorageService.get("userData")||{},{set:function(data){return data.privilege=["admin","manager","sub_contractor","team_leader","worker"].indexOf(data.designation),localStorageService.set("userData",data),userData=data},get:function(){return userData},reset:function(){localStorageService.remove("userData"),userData={}}}),companyStore:(companyData=localStorageService.get("companyData")||null,{set:function(data){return localStorageService.set("companyData",data),companyData=data},get:function(){return companyData},refetch:function(id){$http({method:"GET",headers:{"x-access-token":localStorageService.get("access-token"),platform:JSON.stringify({source:"web"})},url:"https://api.staging.cloudes.eu/api/getCompanyById/"+id}).then(function(resp){localStorageService.set("companyData",resp.data)}).catch(function(e){console.log(e)})},reset:function(){localStorageService.remove("companyData"),companyData={}}}),projectStore:(currentProject=localStorageService.get("currentProject")||null,{set:function(data){return localStorageService.set("currentProject",data),currentProject=data},get:function(){return currentProject},reset:function(){localStorageService.remove("currentProject"),currentProject=null}}),inventoryState:function(){var state=localStorageService.get("inventoryState")||{tab:0,page:{material:1,combo:1}};return{setPage:function(type,value){state.page[type]=value,localStorageService.set("inventoryState",state)},setTab:function(val){state.tab=val,localStorageService.set("inventoryState",state)},get:function(){return state}}},mUnits:[{name:"mt",value:"mt"},{name:"sq.mt",value:"sq.mt"},{value:"cu.mt",name:"cu.mt"},{name:"ft",value:"ft"},{name:"sq.ft",value:"sq.ft"},{value:"cu.ft",name:"cu.ft"},{value:"unit",name:"unit"}],getCurrency:function(){return $http.get("/data/currencies.json")},getCountryCode:function(){return $http.get("/data/CountryCode.json")},getIndustry:function(){return $http.get("/data/industry.json")},debounce:function(rate){var timer=void 0;return function(fn,args){clearTimeout(timer),timer=setTimeout(function(){fn.apply(null,args)},rate)}},genericStore:function(){var item=void 0;return{store:function(val){item=val},get:function(){return item}}}};var currentProject;var companyData;var userData;var progressbar})}(),function(){angular.module("app").factory("uploadFactory",function($http,$location,localStorageService,apiFactory,Upload,cloudinary,Notification){var config={signerUrl:"https://api.staging.cloudes.eu/signv4_auth",aws_key:"AKIAJMO3YJTPKYV5DN5A",bucket:"3dfilesdata/test",awsRegion:"ap-south-1",computeContentMd5:!0,allowS3ExistenceOptimization:!0,cryptoMd5Method:function(data){return AWS.util.crypto.md5(data,"base64")},cryptoHexEncodedHash256:function(data){return AWS.util.crypto.sha256(data,"hex")}};return{init:function(){return Evaporate.create(config)},start:function(handler){var fileUpload=this.init();fileUpload.then(handler).catch(function(e){console.log(e)})},pause:function(file){this.pause("3dfilesdata/test/"+file.name,{force:!0}).then(function(){file.isPaused=!0,console.log("Paused!")}).catch(function(e){console.log(e)})},resume:function(file){this.resume("3dfilesdata/test/"+file.name).then(function(){file.isPaused=!1,console.log("Resumed!")}).catch(function(e){console.log(e)})},abort:function(file){this.cancel("3dfilesdata/test/"+file.name).then(function(){console.log("Canceled!")}).catch(function(e){console.log(e)})}}})}(),function(){angular.module("app").controller("_3dViewerCtrl",function($scope,$timeout,authFactory,$state,apiFactory,Notification,localStorageService,globals,NgMap){this.loggedIn=!0;var logout=globals.logout;globals.userStore,globals.throttler;if(!authFactory.checkUser())return logout(),void(this.loggedIn=!1);this.logout=function(){logout()}})}(),function(){angular.module("app").filter("convertCurrency",function(){return function(input,conversionRate){return input?input*conversionRate:0}}),angular.module("app").filter("roundNum",function(){return function(input,place){return input?Number(input).toFixed(place):0}})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
